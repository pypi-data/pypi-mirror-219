# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AntivirusQuarantineArgs', 'AntivirusQuarantine']

@pulumi.input_type
class AntivirusQuarantineArgs:
    def __init__(__self__, *,
                 agelimit: Optional[pulumi.Input[int]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 drop_blocked: Optional[pulumi.Input[str]] = None,
                 drop_heuristic: Optional[pulumi.Input[str]] = None,
                 drop_infected: Optional[pulumi.Input[str]] = None,
                 drop_machine_learning: Optional[pulumi.Input[str]] = None,
                 lowspace: Optional[pulumi.Input[str]] = None,
                 maxfilesize: Optional[pulumi.Input[int]] = None,
                 quarantine_quota: Optional[pulumi.Input[int]] = None,
                 store_blocked: Optional[pulumi.Input[str]] = None,
                 store_heuristic: Optional[pulumi.Input[str]] = None,
                 store_infected: Optional[pulumi.Input[str]] = None,
                 store_machine_learning: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AntivirusQuarantine resource.
        """
        if agelimit is not None:
            pulumi.set(__self__, "agelimit", agelimit)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if drop_blocked is not None:
            pulumi.set(__self__, "drop_blocked", drop_blocked)
        if drop_heuristic is not None:
            pulumi.set(__self__, "drop_heuristic", drop_heuristic)
        if drop_infected is not None:
            pulumi.set(__self__, "drop_infected", drop_infected)
        if drop_machine_learning is not None:
            pulumi.set(__self__, "drop_machine_learning", drop_machine_learning)
        if lowspace is not None:
            pulumi.set(__self__, "lowspace", lowspace)
        if maxfilesize is not None:
            pulumi.set(__self__, "maxfilesize", maxfilesize)
        if quarantine_quota is not None:
            pulumi.set(__self__, "quarantine_quota", quarantine_quota)
        if store_blocked is not None:
            pulumi.set(__self__, "store_blocked", store_blocked)
        if store_heuristic is not None:
            pulumi.set(__self__, "store_heuristic", store_heuristic)
        if store_infected is not None:
            pulumi.set(__self__, "store_infected", store_infected)
        if store_machine_learning is not None:
            pulumi.set(__self__, "store_machine_learning", store_machine_learning)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def agelimit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "agelimit")

    @agelimit.setter
    def agelimit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "agelimit", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="dropBlocked")
    def drop_blocked(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_blocked")

    @drop_blocked.setter
    def drop_blocked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_blocked", value)

    @property
    @pulumi.getter(name="dropHeuristic")
    def drop_heuristic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_heuristic")

    @drop_heuristic.setter
    def drop_heuristic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_heuristic", value)

    @property
    @pulumi.getter(name="dropInfected")
    def drop_infected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_infected")

    @drop_infected.setter
    def drop_infected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_infected", value)

    @property
    @pulumi.getter(name="dropMachineLearning")
    def drop_machine_learning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_machine_learning")

    @drop_machine_learning.setter
    def drop_machine_learning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_machine_learning", value)

    @property
    @pulumi.getter
    def lowspace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lowspace")

    @lowspace.setter
    def lowspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lowspace", value)

    @property
    @pulumi.getter
    def maxfilesize(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maxfilesize")

    @maxfilesize.setter
    def maxfilesize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maxfilesize", value)

    @property
    @pulumi.getter(name="quarantineQuota")
    def quarantine_quota(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quarantine_quota")

    @quarantine_quota.setter
    def quarantine_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarantine_quota", value)

    @property
    @pulumi.getter(name="storeBlocked")
    def store_blocked(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "store_blocked")

    @store_blocked.setter
    def store_blocked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_blocked", value)

    @property
    @pulumi.getter(name="storeHeuristic")
    def store_heuristic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "store_heuristic")

    @store_heuristic.setter
    def store_heuristic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_heuristic", value)

    @property
    @pulumi.getter(name="storeInfected")
    def store_infected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "store_infected")

    @store_infected.setter
    def store_infected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_infected", value)

    @property
    @pulumi.getter(name="storeMachineLearning")
    def store_machine_learning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "store_machine_learning")

    @store_machine_learning.setter
    def store_machine_learning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_machine_learning", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _AntivirusQuarantineState:
    def __init__(__self__, *,
                 agelimit: Optional[pulumi.Input[int]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 drop_blocked: Optional[pulumi.Input[str]] = None,
                 drop_heuristic: Optional[pulumi.Input[str]] = None,
                 drop_infected: Optional[pulumi.Input[str]] = None,
                 drop_machine_learning: Optional[pulumi.Input[str]] = None,
                 lowspace: Optional[pulumi.Input[str]] = None,
                 maxfilesize: Optional[pulumi.Input[int]] = None,
                 quarantine_quota: Optional[pulumi.Input[int]] = None,
                 store_blocked: Optional[pulumi.Input[str]] = None,
                 store_heuristic: Optional[pulumi.Input[str]] = None,
                 store_infected: Optional[pulumi.Input[str]] = None,
                 store_machine_learning: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AntivirusQuarantine resources.
        """
        if agelimit is not None:
            pulumi.set(__self__, "agelimit", agelimit)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if drop_blocked is not None:
            pulumi.set(__self__, "drop_blocked", drop_blocked)
        if drop_heuristic is not None:
            pulumi.set(__self__, "drop_heuristic", drop_heuristic)
        if drop_infected is not None:
            pulumi.set(__self__, "drop_infected", drop_infected)
        if drop_machine_learning is not None:
            pulumi.set(__self__, "drop_machine_learning", drop_machine_learning)
        if lowspace is not None:
            pulumi.set(__self__, "lowspace", lowspace)
        if maxfilesize is not None:
            pulumi.set(__self__, "maxfilesize", maxfilesize)
        if quarantine_quota is not None:
            pulumi.set(__self__, "quarantine_quota", quarantine_quota)
        if store_blocked is not None:
            pulumi.set(__self__, "store_blocked", store_blocked)
        if store_heuristic is not None:
            pulumi.set(__self__, "store_heuristic", store_heuristic)
        if store_infected is not None:
            pulumi.set(__self__, "store_infected", store_infected)
        if store_machine_learning is not None:
            pulumi.set(__self__, "store_machine_learning", store_machine_learning)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def agelimit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "agelimit")

    @agelimit.setter
    def agelimit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "agelimit", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="dropBlocked")
    def drop_blocked(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_blocked")

    @drop_blocked.setter
    def drop_blocked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_blocked", value)

    @property
    @pulumi.getter(name="dropHeuristic")
    def drop_heuristic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_heuristic")

    @drop_heuristic.setter
    def drop_heuristic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_heuristic", value)

    @property
    @pulumi.getter(name="dropInfected")
    def drop_infected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_infected")

    @drop_infected.setter
    def drop_infected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_infected", value)

    @property
    @pulumi.getter(name="dropMachineLearning")
    def drop_machine_learning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_machine_learning")

    @drop_machine_learning.setter
    def drop_machine_learning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_machine_learning", value)

    @property
    @pulumi.getter
    def lowspace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lowspace")

    @lowspace.setter
    def lowspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lowspace", value)

    @property
    @pulumi.getter
    def maxfilesize(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maxfilesize")

    @maxfilesize.setter
    def maxfilesize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maxfilesize", value)

    @property
    @pulumi.getter(name="quarantineQuota")
    def quarantine_quota(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quarantine_quota")

    @quarantine_quota.setter
    def quarantine_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarantine_quota", value)

    @property
    @pulumi.getter(name="storeBlocked")
    def store_blocked(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "store_blocked")

    @store_blocked.setter
    def store_blocked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_blocked", value)

    @property
    @pulumi.getter(name="storeHeuristic")
    def store_heuristic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "store_heuristic")

    @store_heuristic.setter
    def store_heuristic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_heuristic", value)

    @property
    @pulumi.getter(name="storeInfected")
    def store_infected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "store_infected")

    @store_infected.setter
    def store_infected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_infected", value)

    @property
    @pulumi.getter(name="storeMachineLearning")
    def store_machine_learning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "store_machine_learning")

    @store_machine_learning.setter
    def store_machine_learning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_machine_learning", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class AntivirusQuarantine(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agelimit: Optional[pulumi.Input[int]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 drop_blocked: Optional[pulumi.Input[str]] = None,
                 drop_heuristic: Optional[pulumi.Input[str]] = None,
                 drop_infected: Optional[pulumi.Input[str]] = None,
                 drop_machine_learning: Optional[pulumi.Input[str]] = None,
                 lowspace: Optional[pulumi.Input[str]] = None,
                 maxfilesize: Optional[pulumi.Input[int]] = None,
                 quarantine_quota: Optional[pulumi.Input[int]] = None,
                 store_blocked: Optional[pulumi.Input[str]] = None,
                 store_heuristic: Optional[pulumi.Input[str]] = None,
                 store_infected: Optional[pulumi.Input[str]] = None,
                 store_machine_learning: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a AntivirusQuarantine resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AntivirusQuarantineArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AntivirusQuarantine resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AntivirusQuarantineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AntivirusQuarantineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agelimit: Optional[pulumi.Input[int]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 drop_blocked: Optional[pulumi.Input[str]] = None,
                 drop_heuristic: Optional[pulumi.Input[str]] = None,
                 drop_infected: Optional[pulumi.Input[str]] = None,
                 drop_machine_learning: Optional[pulumi.Input[str]] = None,
                 lowspace: Optional[pulumi.Input[str]] = None,
                 maxfilesize: Optional[pulumi.Input[int]] = None,
                 quarantine_quota: Optional[pulumi.Input[int]] = None,
                 store_blocked: Optional[pulumi.Input[str]] = None,
                 store_heuristic: Optional[pulumi.Input[str]] = None,
                 store_infected: Optional[pulumi.Input[str]] = None,
                 store_machine_learning: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AntivirusQuarantineArgs.__new__(AntivirusQuarantineArgs)

            __props__.__dict__["agelimit"] = agelimit
            __props__.__dict__["destination"] = destination
            __props__.__dict__["drop_blocked"] = drop_blocked
            __props__.__dict__["drop_heuristic"] = drop_heuristic
            __props__.__dict__["drop_infected"] = drop_infected
            __props__.__dict__["drop_machine_learning"] = drop_machine_learning
            __props__.__dict__["lowspace"] = lowspace
            __props__.__dict__["maxfilesize"] = maxfilesize
            __props__.__dict__["quarantine_quota"] = quarantine_quota
            __props__.__dict__["store_blocked"] = store_blocked
            __props__.__dict__["store_heuristic"] = store_heuristic
            __props__.__dict__["store_infected"] = store_infected
            __props__.__dict__["store_machine_learning"] = store_machine_learning
            __props__.__dict__["vdomparam"] = vdomparam
        super(AntivirusQuarantine, __self__).__init__(
            'fortios:index/antivirusQuarantine:AntivirusQuarantine',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agelimit: Optional[pulumi.Input[int]] = None,
            destination: Optional[pulumi.Input[str]] = None,
            drop_blocked: Optional[pulumi.Input[str]] = None,
            drop_heuristic: Optional[pulumi.Input[str]] = None,
            drop_infected: Optional[pulumi.Input[str]] = None,
            drop_machine_learning: Optional[pulumi.Input[str]] = None,
            lowspace: Optional[pulumi.Input[str]] = None,
            maxfilesize: Optional[pulumi.Input[int]] = None,
            quarantine_quota: Optional[pulumi.Input[int]] = None,
            store_blocked: Optional[pulumi.Input[str]] = None,
            store_heuristic: Optional[pulumi.Input[str]] = None,
            store_infected: Optional[pulumi.Input[str]] = None,
            store_machine_learning: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'AntivirusQuarantine':
        """
        Get an existing AntivirusQuarantine resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AntivirusQuarantineState.__new__(_AntivirusQuarantineState)

        __props__.__dict__["agelimit"] = agelimit
        __props__.__dict__["destination"] = destination
        __props__.__dict__["drop_blocked"] = drop_blocked
        __props__.__dict__["drop_heuristic"] = drop_heuristic
        __props__.__dict__["drop_infected"] = drop_infected
        __props__.__dict__["drop_machine_learning"] = drop_machine_learning
        __props__.__dict__["lowspace"] = lowspace
        __props__.__dict__["maxfilesize"] = maxfilesize
        __props__.__dict__["quarantine_quota"] = quarantine_quota
        __props__.__dict__["store_blocked"] = store_blocked
        __props__.__dict__["store_heuristic"] = store_heuristic
        __props__.__dict__["store_infected"] = store_infected
        __props__.__dict__["store_machine_learning"] = store_machine_learning
        __props__.__dict__["vdomparam"] = vdomparam
        return AntivirusQuarantine(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def agelimit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "agelimit")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="dropBlocked")
    def drop_blocked(self) -> pulumi.Output[str]:
        return pulumi.get(self, "drop_blocked")

    @property
    @pulumi.getter(name="dropHeuristic")
    def drop_heuristic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "drop_heuristic")

    @property
    @pulumi.getter(name="dropInfected")
    def drop_infected(self) -> pulumi.Output[str]:
        return pulumi.get(self, "drop_infected")

    @property
    @pulumi.getter(name="dropMachineLearning")
    def drop_machine_learning(self) -> pulumi.Output[str]:
        return pulumi.get(self, "drop_machine_learning")

    @property
    @pulumi.getter
    def lowspace(self) -> pulumi.Output[str]:
        return pulumi.get(self, "lowspace")

    @property
    @pulumi.getter
    def maxfilesize(self) -> pulumi.Output[int]:
        return pulumi.get(self, "maxfilesize")

    @property
    @pulumi.getter(name="quarantineQuota")
    def quarantine_quota(self) -> pulumi.Output[int]:
        return pulumi.get(self, "quarantine_quota")

    @property
    @pulumi.getter(name="storeBlocked")
    def store_blocked(self) -> pulumi.Output[str]:
        return pulumi.get(self, "store_blocked")

    @property
    @pulumi.getter(name="storeHeuristic")
    def store_heuristic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "store_heuristic")

    @property
    @pulumi.getter(name="storeInfected")
    def store_infected(self) -> pulumi.Output[str]:
        return pulumi.get(self, "store_infected")

    @property
    @pulumi.getter(name="storeMachineLearning")
    def store_machine_learning(self) -> pulumi.Output[str]:
        return pulumi.get(self, "store_machine_learning")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

