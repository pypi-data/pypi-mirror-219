# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetFirewallMulticastAddress6Result',
    'AwaitableGetFirewallMulticastAddress6Result',
    'get_firewall_multicast_address6',
    'get_firewall_multicast_address6_output',
]

@pulumi.output_type
class GetFirewallMulticastAddress6Result:
    """
    A collection of values returned by GetFirewallMulticastAddress6.
    """
    def __init__(__self__, color=None, comment=None, id=None, ip6=None, name=None, taggings=None, vdomparam=None, visibility=None):
        if color and not isinstance(color, int):
            raise TypeError("Expected argument 'color' to be a int")
        pulumi.set(__self__, "color", color)
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip6 and not isinstance(ip6, str):
            raise TypeError("Expected argument 'ip6' to be a str")
        pulumi.set(__self__, "ip6", ip6)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if taggings and not isinstance(taggings, list):
            raise TypeError("Expected argument 'taggings' to be a list")
        pulumi.set(__self__, "taggings", taggings)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def color(self) -> int:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip6(self) -> str:
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def taggings(self) -> Sequence['outputs.GetFirewallMulticastAddress6TaggingResult']:
        return pulumi.get(self, "taggings")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def visibility(self) -> str:
        return pulumi.get(self, "visibility")


class AwaitableGetFirewallMulticastAddress6Result(GetFirewallMulticastAddress6Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallMulticastAddress6Result(
            color=self.color,
            comment=self.comment,
            id=self.id,
            ip6=self.ip6,
            name=self.name,
            taggings=self.taggings,
            vdomparam=self.vdomparam,
            visibility=self.visibility)


def get_firewall_multicast_address6(name: Optional[str] = None,
                                    vdomparam: Optional[str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallMulticastAddress6Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getFirewallMulticastAddress6:GetFirewallMulticastAddress6', __args__, opts=opts, typ=GetFirewallMulticastAddress6Result).value

    return AwaitableGetFirewallMulticastAddress6Result(
        color=pulumi.get(__ret__, 'color'),
        comment=pulumi.get(__ret__, 'comment'),
        id=pulumi.get(__ret__, 'id'),
        ip6=pulumi.get(__ret__, 'ip6'),
        name=pulumi.get(__ret__, 'name'),
        taggings=pulumi.get(__ret__, 'taggings'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        visibility=pulumi.get(__ret__, 'visibility'))


@_utilities.lift_output_func(get_firewall_multicast_address6)
def get_firewall_multicast_address6_output(name: Optional[pulumi.Input[str]] = None,
                                           vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFirewallMulticastAddress6Result]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
