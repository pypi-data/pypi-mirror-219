# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VPNIPsecPhase2InterfaceLegacyArgs', 'VPNIPsecPhase2InterfaceLegacy']

@pulumi.input_type
class VPNIPsecPhase2InterfaceLegacyArgs:
    def __init__(__self__, *,
                 phase1name: pulumi.Input[str],
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_addr_type: Optional[pulumi.Input[str]] = None,
                 dst_end_ip: Optional[pulumi.Input[str]] = None,
                 dst_name: Optional[pulumi.Input[str]] = None,
                 dst_start_ip: Optional[pulumi.Input[str]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 src_addr_type: Optional[pulumi.Input[str]] = None,
                 src_end_ip: Optional[pulumi.Input[str]] = None,
                 src_name: Optional[pulumi.Input[str]] = None,
                 src_start_ip: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VPNIPsecPhase2InterfaceLegacy resource.
        """
        pulumi.set(__self__, "phase1name", phase1name)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dst_addr_type is not None:
            pulumi.set(__self__, "dst_addr_type", dst_addr_type)
        if dst_end_ip is not None:
            pulumi.set(__self__, "dst_end_ip", dst_end_ip)
        if dst_name is not None:
            pulumi.set(__self__, "dst_name", dst_name)
        if dst_start_ip is not None:
            pulumi.set(__self__, "dst_start_ip", dst_start_ip)
        if dst_subnet is not None:
            pulumi.set(__self__, "dst_subnet", dst_subnet)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proposal is not None:
            pulumi.set(__self__, "proposal", proposal)
        if src_addr_type is not None:
            pulumi.set(__self__, "src_addr_type", src_addr_type)
        if src_end_ip is not None:
            pulumi.set(__self__, "src_end_ip", src_end_ip)
        if src_name is not None:
            pulumi.set(__self__, "src_name", src_name)
        if src_start_ip is not None:
            pulumi.set(__self__, "src_start_ip", src_start_ip)
        if src_subnet is not None:
            pulumi.set(__self__, "src_subnet", src_subnet)

    @property
    @pulumi.getter
    def phase1name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "phase1name")

    @phase1name.setter
    def phase1name(self, value: pulumi.Input[str]):
        pulumi.set(self, "phase1name", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dstAddrType")
    def dst_addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_addr_type")

    @dst_addr_type.setter
    def dst_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_addr_type", value)

    @property
    @pulumi.getter(name="dstEndIp")
    def dst_end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_end_ip")

    @dst_end_ip.setter
    def dst_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_end_ip", value)

    @property
    @pulumi.getter(name="dstName")
    def dst_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_name")

    @dst_name.setter
    def dst_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_name", value)

    @property
    @pulumi.getter(name="dstStartIp")
    def dst_start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_start_ip")

    @dst_start_ip.setter
    def dst_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_start_ip", value)

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_subnet")

    @dst_subnet.setter
    def dst_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def proposal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proposal")

    @proposal.setter
    def proposal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proposal", value)

    @property
    @pulumi.getter(name="srcAddrType")
    def src_addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_addr_type")

    @src_addr_type.setter
    def src_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_addr_type", value)

    @property
    @pulumi.getter(name="srcEndIp")
    def src_end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_end_ip")

    @src_end_ip.setter
    def src_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_end_ip", value)

    @property
    @pulumi.getter(name="srcName")
    def src_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_name")

    @src_name.setter
    def src_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_name", value)

    @property
    @pulumi.getter(name="srcStartIp")
    def src_start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_start_ip")

    @src_start_ip.setter
    def src_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_start_ip", value)

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_subnet")

    @src_subnet.setter
    def src_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet", value)


@pulumi.input_type
class _VPNIPsecPhase2InterfaceLegacyState:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_addr_type: Optional[pulumi.Input[str]] = None,
                 dst_end_ip: Optional[pulumi.Input[str]] = None,
                 dst_name: Optional[pulumi.Input[str]] = None,
                 dst_start_ip: Optional[pulumi.Input[str]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phase1name: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 src_addr_type: Optional[pulumi.Input[str]] = None,
                 src_end_ip: Optional[pulumi.Input[str]] = None,
                 src_name: Optional[pulumi.Input[str]] = None,
                 src_start_ip: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VPNIPsecPhase2InterfaceLegacy resources.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dst_addr_type is not None:
            pulumi.set(__self__, "dst_addr_type", dst_addr_type)
        if dst_end_ip is not None:
            pulumi.set(__self__, "dst_end_ip", dst_end_ip)
        if dst_name is not None:
            pulumi.set(__self__, "dst_name", dst_name)
        if dst_start_ip is not None:
            pulumi.set(__self__, "dst_start_ip", dst_start_ip)
        if dst_subnet is not None:
            pulumi.set(__self__, "dst_subnet", dst_subnet)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phase1name is not None:
            pulumi.set(__self__, "phase1name", phase1name)
        if proposal is not None:
            pulumi.set(__self__, "proposal", proposal)
        if src_addr_type is not None:
            pulumi.set(__self__, "src_addr_type", src_addr_type)
        if src_end_ip is not None:
            pulumi.set(__self__, "src_end_ip", src_end_ip)
        if src_name is not None:
            pulumi.set(__self__, "src_name", src_name)
        if src_start_ip is not None:
            pulumi.set(__self__, "src_start_ip", src_start_ip)
        if src_subnet is not None:
            pulumi.set(__self__, "src_subnet", src_subnet)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dstAddrType")
    def dst_addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_addr_type")

    @dst_addr_type.setter
    def dst_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_addr_type", value)

    @property
    @pulumi.getter(name="dstEndIp")
    def dst_end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_end_ip")

    @dst_end_ip.setter
    def dst_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_end_ip", value)

    @property
    @pulumi.getter(name="dstName")
    def dst_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_name")

    @dst_name.setter
    def dst_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_name", value)

    @property
    @pulumi.getter(name="dstStartIp")
    def dst_start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_start_ip")

    @dst_start_ip.setter
    def dst_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_start_ip", value)

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_subnet")

    @dst_subnet.setter
    def dst_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def phase1name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phase1name")

    @phase1name.setter
    def phase1name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase1name", value)

    @property
    @pulumi.getter
    def proposal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proposal")

    @proposal.setter
    def proposal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proposal", value)

    @property
    @pulumi.getter(name="srcAddrType")
    def src_addr_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_addr_type")

    @src_addr_type.setter
    def src_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_addr_type", value)

    @property
    @pulumi.getter(name="srcEndIp")
    def src_end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_end_ip")

    @src_end_ip.setter
    def src_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_end_ip", value)

    @property
    @pulumi.getter(name="srcName")
    def src_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_name")

    @src_name.setter
    def src_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_name", value)

    @property
    @pulumi.getter(name="srcStartIp")
    def src_start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_start_ip")

    @src_start_ip.setter
    def src_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_start_ip", value)

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_subnet")

    @src_subnet.setter
    def src_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet", value)


class VPNIPsecPhase2InterfaceLegacy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_addr_type: Optional[pulumi.Input[str]] = None,
                 dst_end_ip: Optional[pulumi.Input[str]] = None,
                 dst_name: Optional[pulumi.Input[str]] = None,
                 dst_start_ip: Optional[pulumi.Input[str]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phase1name: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 src_addr_type: Optional[pulumi.Input[str]] = None,
                 src_end_ip: Optional[pulumi.Input[str]] = None,
                 src_name: Optional[pulumi.Input[str]] = None,
                 src_start_ip: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VPNIPsecPhase2InterfaceLegacy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VPNIPsecPhase2InterfaceLegacyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VPNIPsecPhase2InterfaceLegacy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VPNIPsecPhase2InterfaceLegacyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VPNIPsecPhase2InterfaceLegacyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_addr_type: Optional[pulumi.Input[str]] = None,
                 dst_end_ip: Optional[pulumi.Input[str]] = None,
                 dst_name: Optional[pulumi.Input[str]] = None,
                 dst_start_ip: Optional[pulumi.Input[str]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phase1name: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 src_addr_type: Optional[pulumi.Input[str]] = None,
                 src_end_ip: Optional[pulumi.Input[str]] = None,
                 src_name: Optional[pulumi.Input[str]] = None,
                 src_start_ip: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VPNIPsecPhase2InterfaceLegacyArgs.__new__(VPNIPsecPhase2InterfaceLegacyArgs)

            __props__.__dict__["comments"] = comments
            __props__.__dict__["dst_addr_type"] = dst_addr_type
            __props__.__dict__["dst_end_ip"] = dst_end_ip
            __props__.__dict__["dst_name"] = dst_name
            __props__.__dict__["dst_start_ip"] = dst_start_ip
            __props__.__dict__["dst_subnet"] = dst_subnet
            __props__.__dict__["name"] = name
            if phase1name is None and not opts.urn:
                raise TypeError("Missing required property 'phase1name'")
            __props__.__dict__["phase1name"] = phase1name
            __props__.__dict__["proposal"] = proposal
            __props__.__dict__["src_addr_type"] = src_addr_type
            __props__.__dict__["src_end_ip"] = src_end_ip
            __props__.__dict__["src_name"] = src_name
            __props__.__dict__["src_start_ip"] = src_start_ip
            __props__.__dict__["src_subnet"] = src_subnet
        super(VPNIPsecPhase2InterfaceLegacy, __self__).__init__(
            'fortios:index/vPNIPsecPhase2InterfaceLegacy:VPNIPsecPhase2InterfaceLegacy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dst_addr_type: Optional[pulumi.Input[str]] = None,
            dst_end_ip: Optional[pulumi.Input[str]] = None,
            dst_name: Optional[pulumi.Input[str]] = None,
            dst_start_ip: Optional[pulumi.Input[str]] = None,
            dst_subnet: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            phase1name: Optional[pulumi.Input[str]] = None,
            proposal: Optional[pulumi.Input[str]] = None,
            src_addr_type: Optional[pulumi.Input[str]] = None,
            src_end_ip: Optional[pulumi.Input[str]] = None,
            src_name: Optional[pulumi.Input[str]] = None,
            src_start_ip: Optional[pulumi.Input[str]] = None,
            src_subnet: Optional[pulumi.Input[str]] = None) -> 'VPNIPsecPhase2InterfaceLegacy':
        """
        Get an existing VPNIPsecPhase2InterfaceLegacy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VPNIPsecPhase2InterfaceLegacyState.__new__(_VPNIPsecPhase2InterfaceLegacyState)

        __props__.__dict__["comments"] = comments
        __props__.__dict__["dst_addr_type"] = dst_addr_type
        __props__.__dict__["dst_end_ip"] = dst_end_ip
        __props__.__dict__["dst_name"] = dst_name
        __props__.__dict__["dst_start_ip"] = dst_start_ip
        __props__.__dict__["dst_subnet"] = dst_subnet
        __props__.__dict__["name"] = name
        __props__.__dict__["phase1name"] = phase1name
        __props__.__dict__["proposal"] = proposal
        __props__.__dict__["src_addr_type"] = src_addr_type
        __props__.__dict__["src_end_ip"] = src_end_ip
        __props__.__dict__["src_name"] = src_name
        __props__.__dict__["src_start_ip"] = src_start_ip
        __props__.__dict__["src_subnet"] = src_subnet
        return VPNIPsecPhase2InterfaceLegacy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dstAddrType")
    def dst_addr_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_addr_type")

    @property
    @pulumi.getter(name="dstEndIp")
    def dst_end_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_end_ip")

    @property
    @pulumi.getter(name="dstName")
    def dst_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_name")

    @property
    @pulumi.getter(name="dstStartIp")
    def dst_start_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_start_ip")

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_subnet")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phase1name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "phase1name")

    @property
    @pulumi.getter
    def proposal(self) -> pulumi.Output[str]:
        return pulumi.get(self, "proposal")

    @property
    @pulumi.getter(name="srcAddrType")
    def src_addr_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_addr_type")

    @property
    @pulumi.getter(name="srcEndIp")
    def src_end_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_end_ip")

    @property
    @pulumi.getter(name="srcName")
    def src_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_name")

    @property
    @pulumi.getter(name="srcStartIp")
    def src_start_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_start_ip")

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_subnet")

