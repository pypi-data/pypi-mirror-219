# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FirewallServiceCustomArgs', 'FirewallServiceCustom']

@pulumi.input_type
class FirewallServiceCustomArgs:
    def __init__(__self__, *,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallServiceCustomAppCategoryArgs']]]] = None,
                 app_service_type: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallServiceCustomApplicationArgs']]]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 check_reset_range: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_object: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 helper: Optional[pulumi.Input[str]] = None,
                 icmpcode: Optional[pulumi.Input[int]] = None,
                 icmptype: Optional[pulumi.Input[int]] = None,
                 iprange: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_number: Optional[pulumi.Input[int]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 sctp_portrange: Optional[pulumi.Input[str]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
                 tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
                 tcp_portrange: Optional[pulumi.Input[str]] = None,
                 tcp_rst_timer: Optional[pulumi.Input[int]] = None,
                 tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
                 udp_idle_timer: Optional[pulumi.Input[int]] = None,
                 udp_portrange: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallServiceCustom resource.
        """
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_service_type is not None:
            pulumi.set(__self__, "app_service_type", app_service_type)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if check_reset_range is not None:
            pulumi.set(__self__, "check_reset_range", check_reset_range)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fabric_object is not None:
            pulumi.set(__self__, "fabric_object", fabric_object)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if helper is not None:
            pulumi.set(__self__, "helper", helper)
        if icmpcode is not None:
            pulumi.set(__self__, "icmpcode", icmpcode)
        if icmptype is not None:
            pulumi.set(__self__, "icmptype", icmptype)
        if iprange is not None:
            pulumi.set(__self__, "iprange", iprange)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_number is not None:
            pulumi.set(__self__, "protocol_number", protocol_number)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if sctp_portrange is not None:
            pulumi.set(__self__, "sctp_portrange", sctp_portrange)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if tcp_halfclose_timer is not None:
            pulumi.set(__self__, "tcp_halfclose_timer", tcp_halfclose_timer)
        if tcp_halfopen_timer is not None:
            pulumi.set(__self__, "tcp_halfopen_timer", tcp_halfopen_timer)
        if tcp_portrange is not None:
            pulumi.set(__self__, "tcp_portrange", tcp_portrange)
        if tcp_rst_timer is not None:
            pulumi.set(__self__, "tcp_rst_timer", tcp_rst_timer)
        if tcp_timewait_timer is not None:
            pulumi.set(__self__, "tcp_timewait_timer", tcp_timewait_timer)
        if udp_idle_timer is not None:
            pulumi.set(__self__, "udp_idle_timer", udp_idle_timer)
        if udp_portrange is not None:
            pulumi.set(__self__, "udp_portrange", udp_portrange)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallServiceCustomAppCategoryArgs']]]]:
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallServiceCustomAppCategoryArgs']]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appServiceType")
    def app_service_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_service_type")

    @app_service_type.setter
    def app_service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_service_type", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallServiceCustomApplicationArgs']]]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallServiceCustomApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="checkResetRange")
    def check_reset_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check_reset_range")

    @check_reset_range.setter
    def check_reset_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_reset_range", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fabricObject")
    def fabric_object(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fabric_object")

    @fabric_object.setter
    def fabric_object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_object", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def helper(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "helper")

    @helper.setter
    def helper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "helper", value)

    @property
    @pulumi.getter
    def icmpcode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "icmpcode")

    @icmpcode.setter
    def icmpcode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "icmpcode", value)

    @property
    @pulumi.getter
    def icmptype(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "icmptype")

    @icmptype.setter
    def icmptype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "icmptype", value)

    @property
    @pulumi.getter
    def iprange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iprange")

    @iprange.setter
    def iprange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iprange", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol_number")

    @protocol_number.setter
    def protocol_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol_number", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="sctpPortrange")
    def sctp_portrange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sctp_portrange")

    @sctp_portrange.setter
    def sctp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_portrange", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="tcpHalfcloseTimer")
    def tcp_halfclose_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_halfclose_timer")

    @tcp_halfclose_timer.setter
    def tcp_halfclose_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_halfclose_timer", value)

    @property
    @pulumi.getter(name="tcpHalfopenTimer")
    def tcp_halfopen_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_halfopen_timer")

    @tcp_halfopen_timer.setter
    def tcp_halfopen_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_halfopen_timer", value)

    @property
    @pulumi.getter(name="tcpPortrange")
    def tcp_portrange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tcp_portrange")

    @tcp_portrange.setter
    def tcp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_portrange", value)

    @property
    @pulumi.getter(name="tcpRstTimer")
    def tcp_rst_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_rst_timer")

    @tcp_rst_timer.setter
    def tcp_rst_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_rst_timer", value)

    @property
    @pulumi.getter(name="tcpTimewaitTimer")
    def tcp_timewait_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_timewait_timer")

    @tcp_timewait_timer.setter
    def tcp_timewait_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_timewait_timer", value)

    @property
    @pulumi.getter(name="udpIdleTimer")
    def udp_idle_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "udp_idle_timer")

    @udp_idle_timer.setter
    def udp_idle_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "udp_idle_timer", value)

    @property
    @pulumi.getter(name="udpPortrange")
    def udp_portrange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "udp_portrange")

    @udp_portrange.setter
    def udp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udp_portrange", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class _FirewallServiceCustomState:
    def __init__(__self__, *,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallServiceCustomAppCategoryArgs']]]] = None,
                 app_service_type: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallServiceCustomApplicationArgs']]]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 check_reset_range: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_object: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 helper: Optional[pulumi.Input[str]] = None,
                 icmpcode: Optional[pulumi.Input[int]] = None,
                 icmptype: Optional[pulumi.Input[int]] = None,
                 iprange: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_number: Optional[pulumi.Input[int]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 sctp_portrange: Optional[pulumi.Input[str]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
                 tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
                 tcp_portrange: Optional[pulumi.Input[str]] = None,
                 tcp_rst_timer: Optional[pulumi.Input[int]] = None,
                 tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
                 udp_idle_timer: Optional[pulumi.Input[int]] = None,
                 udp_portrange: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallServiceCustom resources.
        """
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_service_type is not None:
            pulumi.set(__self__, "app_service_type", app_service_type)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if check_reset_range is not None:
            pulumi.set(__self__, "check_reset_range", check_reset_range)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fabric_object is not None:
            pulumi.set(__self__, "fabric_object", fabric_object)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if helper is not None:
            pulumi.set(__self__, "helper", helper)
        if icmpcode is not None:
            pulumi.set(__self__, "icmpcode", icmpcode)
        if icmptype is not None:
            pulumi.set(__self__, "icmptype", icmptype)
        if iprange is not None:
            pulumi.set(__self__, "iprange", iprange)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_number is not None:
            pulumi.set(__self__, "protocol_number", protocol_number)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if sctp_portrange is not None:
            pulumi.set(__self__, "sctp_portrange", sctp_portrange)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if tcp_halfclose_timer is not None:
            pulumi.set(__self__, "tcp_halfclose_timer", tcp_halfclose_timer)
        if tcp_halfopen_timer is not None:
            pulumi.set(__self__, "tcp_halfopen_timer", tcp_halfopen_timer)
        if tcp_portrange is not None:
            pulumi.set(__self__, "tcp_portrange", tcp_portrange)
        if tcp_rst_timer is not None:
            pulumi.set(__self__, "tcp_rst_timer", tcp_rst_timer)
        if tcp_timewait_timer is not None:
            pulumi.set(__self__, "tcp_timewait_timer", tcp_timewait_timer)
        if udp_idle_timer is not None:
            pulumi.set(__self__, "udp_idle_timer", udp_idle_timer)
        if udp_portrange is not None:
            pulumi.set(__self__, "udp_portrange", udp_portrange)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallServiceCustomAppCategoryArgs']]]]:
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallServiceCustomAppCategoryArgs']]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appServiceType")
    def app_service_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_service_type")

    @app_service_type.setter
    def app_service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_service_type", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallServiceCustomApplicationArgs']]]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallServiceCustomApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="checkResetRange")
    def check_reset_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check_reset_range")

    @check_reset_range.setter
    def check_reset_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_reset_range", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fabricObject")
    def fabric_object(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fabric_object")

    @fabric_object.setter
    def fabric_object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_object", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def helper(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "helper")

    @helper.setter
    def helper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "helper", value)

    @property
    @pulumi.getter
    def icmpcode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "icmpcode")

    @icmpcode.setter
    def icmpcode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "icmpcode", value)

    @property
    @pulumi.getter
    def icmptype(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "icmptype")

    @icmptype.setter
    def icmptype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "icmptype", value)

    @property
    @pulumi.getter
    def iprange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iprange")

    @iprange.setter
    def iprange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iprange", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol_number")

    @protocol_number.setter
    def protocol_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol_number", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="sctpPortrange")
    def sctp_portrange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sctp_portrange")

    @sctp_portrange.setter
    def sctp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_portrange", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter(name="tcpHalfcloseTimer")
    def tcp_halfclose_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_halfclose_timer")

    @tcp_halfclose_timer.setter
    def tcp_halfclose_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_halfclose_timer", value)

    @property
    @pulumi.getter(name="tcpHalfopenTimer")
    def tcp_halfopen_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_halfopen_timer")

    @tcp_halfopen_timer.setter
    def tcp_halfopen_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_halfopen_timer", value)

    @property
    @pulumi.getter(name="tcpPortrange")
    def tcp_portrange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tcp_portrange")

    @tcp_portrange.setter
    def tcp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_portrange", value)

    @property
    @pulumi.getter(name="tcpRstTimer")
    def tcp_rst_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_rst_timer")

    @tcp_rst_timer.setter
    def tcp_rst_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_rst_timer", value)

    @property
    @pulumi.getter(name="tcpTimewaitTimer")
    def tcp_timewait_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_timewait_timer")

    @tcp_timewait_timer.setter
    def tcp_timewait_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_timewait_timer", value)

    @property
    @pulumi.getter(name="udpIdleTimer")
    def udp_idle_timer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "udp_idle_timer")

    @udp_idle_timer.setter
    def udp_idle_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "udp_idle_timer", value)

    @property
    @pulumi.getter(name="udpPortrange")
    def udp_portrange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "udp_portrange")

    @udp_portrange.setter
    def udp_portrange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udp_portrange", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


class FirewallServiceCustom(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallServiceCustomAppCategoryArgs']]]]] = None,
                 app_service_type: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallServiceCustomApplicationArgs']]]]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 check_reset_range: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_object: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 helper: Optional[pulumi.Input[str]] = None,
                 icmpcode: Optional[pulumi.Input[int]] = None,
                 icmptype: Optional[pulumi.Input[int]] = None,
                 iprange: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_number: Optional[pulumi.Input[int]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 sctp_portrange: Optional[pulumi.Input[str]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
                 tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
                 tcp_portrange: Optional[pulumi.Input[str]] = None,
                 tcp_rst_timer: Optional[pulumi.Input[int]] = None,
                 tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
                 udp_idle_timer: Optional[pulumi.Input[int]] = None,
                 udp_portrange: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirewallServiceCustom resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FirewallServiceCustomArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallServiceCustom resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallServiceCustomArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallServiceCustomArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallServiceCustomAppCategoryArgs']]]]] = None,
                 app_service_type: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallServiceCustomApplicationArgs']]]]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 check_reset_range: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_object: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 helper: Optional[pulumi.Input[str]] = None,
                 icmpcode: Optional[pulumi.Input[int]] = None,
                 icmptype: Optional[pulumi.Input[int]] = None,
                 iprange: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_number: Optional[pulumi.Input[int]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 sctp_portrange: Optional[pulumi.Input[str]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
                 tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
                 tcp_portrange: Optional[pulumi.Input[str]] = None,
                 tcp_rst_timer: Optional[pulumi.Input[int]] = None,
                 tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
                 udp_idle_timer: Optional[pulumi.Input[int]] = None,
                 udp_portrange: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallServiceCustomArgs.__new__(FirewallServiceCustomArgs)

            __props__.__dict__["app_categories"] = app_categories
            __props__.__dict__["app_service_type"] = app_service_type
            __props__.__dict__["applications"] = applications
            __props__.__dict__["category"] = category
            __props__.__dict__["check_reset_range"] = check_reset_range
            __props__.__dict__["color"] = color
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fabric_object"] = fabric_object
            __props__.__dict__["fqdn"] = fqdn
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["helper"] = helper
            __props__.__dict__["icmpcode"] = icmpcode
            __props__.__dict__["icmptype"] = icmptype
            __props__.__dict__["iprange"] = iprange
            __props__.__dict__["name"] = name
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["protocol_number"] = protocol_number
            __props__.__dict__["proxy"] = proxy
            __props__.__dict__["sctp_portrange"] = sctp_portrange
            __props__.__dict__["session_ttl"] = session_ttl
            __props__.__dict__["tcp_halfclose_timer"] = tcp_halfclose_timer
            __props__.__dict__["tcp_halfopen_timer"] = tcp_halfopen_timer
            __props__.__dict__["tcp_portrange"] = tcp_portrange
            __props__.__dict__["tcp_rst_timer"] = tcp_rst_timer
            __props__.__dict__["tcp_timewait_timer"] = tcp_timewait_timer
            __props__.__dict__["udp_idle_timer"] = udp_idle_timer
            __props__.__dict__["udp_portrange"] = udp_portrange
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["visibility"] = visibility
        super(FirewallServiceCustom, __self__).__init__(
            'fortios:index/firewallServiceCustom:FirewallServiceCustom',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallServiceCustomAppCategoryArgs']]]]] = None,
            app_service_type: Optional[pulumi.Input[str]] = None,
            applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallServiceCustomApplicationArgs']]]]] = None,
            category: Optional[pulumi.Input[str]] = None,
            check_reset_range: Optional[pulumi.Input[str]] = None,
            color: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fabric_object: Optional[pulumi.Input[str]] = None,
            fqdn: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            helper: Optional[pulumi.Input[str]] = None,
            icmpcode: Optional[pulumi.Input[int]] = None,
            icmptype: Optional[pulumi.Input[int]] = None,
            iprange: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            protocol_number: Optional[pulumi.Input[int]] = None,
            proxy: Optional[pulumi.Input[str]] = None,
            sctp_portrange: Optional[pulumi.Input[str]] = None,
            session_ttl: Optional[pulumi.Input[int]] = None,
            tcp_halfclose_timer: Optional[pulumi.Input[int]] = None,
            tcp_halfopen_timer: Optional[pulumi.Input[int]] = None,
            tcp_portrange: Optional[pulumi.Input[str]] = None,
            tcp_rst_timer: Optional[pulumi.Input[int]] = None,
            tcp_timewait_timer: Optional[pulumi.Input[int]] = None,
            udp_idle_timer: Optional[pulumi.Input[int]] = None,
            udp_portrange: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            visibility: Optional[pulumi.Input[str]] = None) -> 'FirewallServiceCustom':
        """
        Get an existing FirewallServiceCustom resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallServiceCustomState.__new__(_FirewallServiceCustomState)

        __props__.__dict__["app_categories"] = app_categories
        __props__.__dict__["app_service_type"] = app_service_type
        __props__.__dict__["applications"] = applications
        __props__.__dict__["category"] = category
        __props__.__dict__["check_reset_range"] = check_reset_range
        __props__.__dict__["color"] = color
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fabric_object"] = fabric_object
        __props__.__dict__["fqdn"] = fqdn
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["helper"] = helper
        __props__.__dict__["icmpcode"] = icmpcode
        __props__.__dict__["icmptype"] = icmptype
        __props__.__dict__["iprange"] = iprange
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["protocol_number"] = protocol_number
        __props__.__dict__["proxy"] = proxy
        __props__.__dict__["sctp_portrange"] = sctp_portrange
        __props__.__dict__["session_ttl"] = session_ttl
        __props__.__dict__["tcp_halfclose_timer"] = tcp_halfclose_timer
        __props__.__dict__["tcp_halfopen_timer"] = tcp_halfopen_timer
        __props__.__dict__["tcp_portrange"] = tcp_portrange
        __props__.__dict__["tcp_rst_timer"] = tcp_rst_timer
        __props__.__dict__["tcp_timewait_timer"] = tcp_timewait_timer
        __props__.__dict__["udp_idle_timer"] = udp_idle_timer
        __props__.__dict__["udp_portrange"] = udp_portrange
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["visibility"] = visibility
        return FirewallServiceCustom(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallServiceCustomAppCategory']]]:
        return pulumi.get(self, "app_categories")

    @property
    @pulumi.getter(name="appServiceType")
    def app_service_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "app_service_type")

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallServiceCustomApplication']]]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="checkResetRange")
    def check_reset_range(self) -> pulumi.Output[str]:
        return pulumi.get(self, "check_reset_range")

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[int]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="fabricObject")
    def fabric_object(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fabric_object")

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def helper(self) -> pulumi.Output[str]:
        return pulumi.get(self, "helper")

    @property
    @pulumi.getter
    def icmpcode(self) -> pulumi.Output[int]:
        return pulumi.get(self, "icmpcode")

    @property
    @pulumi.getter
    def icmptype(self) -> pulumi.Output[int]:
        return pulumi.get(self, "icmptype")

    @property
    @pulumi.getter
    def iprange(self) -> pulumi.Output[str]:
        return pulumi.get(self, "iprange")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> pulumi.Output[int]:
        return pulumi.get(self, "protocol_number")

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter(name="sctpPortrange")
    def sctp_portrange(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sctp_portrange")

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> pulumi.Output[int]:
        return pulumi.get(self, "session_ttl")

    @property
    @pulumi.getter(name="tcpHalfcloseTimer")
    def tcp_halfclose_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tcp_halfclose_timer")

    @property
    @pulumi.getter(name="tcpHalfopenTimer")
    def tcp_halfopen_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tcp_halfopen_timer")

    @property
    @pulumi.getter(name="tcpPortrange")
    def tcp_portrange(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tcp_portrange")

    @property
    @pulumi.getter(name="tcpRstTimer")
    def tcp_rst_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tcp_rst_timer")

    @property
    @pulumi.getter(name="tcpTimewaitTimer")
    def tcp_timewait_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tcp_timewait_timer")

    @property
    @pulumi.getter(name="udpIdleTimer")
    def udp_idle_timer(self) -> pulumi.Output[int]:
        return pulumi.get(self, "udp_idle_timer")

    @property
    @pulumi.getter(name="udpPortrange")
    def udp_portrange(self) -> pulumi.Output[str]:
        return pulumi.get(self, "udp_portrange")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[str]:
        return pulumi.get(self, "visibility")

