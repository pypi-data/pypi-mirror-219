# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['LogFortiguardOverrideSettingArgs', 'LogFortiguardOverrideSetting']

@pulumi.input_type
class LogFortiguardOverrideSettingArgs:
    def __init__(__self__, *,
                 access_config: Optional[pulumi.Input[str]] = None,
                 max_log_rate: Optional[pulumi.Input[int]] = None,
                 override: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upload_day: Optional[pulumi.Input[str]] = None,
                 upload_interval: Optional[pulumi.Input[str]] = None,
                 upload_option: Optional[pulumi.Input[str]] = None,
                 upload_time: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LogFortiguardOverrideSetting resource.
        """
        if access_config is not None:
            pulumi.set(__self__, "access_config", access_config)
        if max_log_rate is not None:
            pulumi.set(__self__, "max_log_rate", max_log_rate)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if upload_day is not None:
            pulumi.set(__self__, "upload_day", upload_day)
        if upload_interval is not None:
            pulumi.set(__self__, "upload_interval", upload_interval)
        if upload_option is not None:
            pulumi.set(__self__, "upload_option", upload_option)
        if upload_time is not None:
            pulumi.set(__self__, "upload_time", upload_time)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="accessConfig")
    def access_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_config")

    @access_config.setter
    def access_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_config", value)

    @property
    @pulumi.getter(name="maxLogRate")
    def max_log_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_log_rate")

    @max_log_rate.setter
    def max_log_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_log_rate", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uploadDay")
    def upload_day(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_day")

    @upload_day.setter
    def upload_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_day", value)

    @property
    @pulumi.getter(name="uploadInterval")
    def upload_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_interval")

    @upload_interval.setter
    def upload_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_interval", value)

    @property
    @pulumi.getter(name="uploadOption")
    def upload_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_option")

    @upload_option.setter
    def upload_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_option", value)

    @property
    @pulumi.getter(name="uploadTime")
    def upload_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_time")

    @upload_time.setter
    def upload_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_time", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _LogFortiguardOverrideSettingState:
    def __init__(__self__, *,
                 access_config: Optional[pulumi.Input[str]] = None,
                 max_log_rate: Optional[pulumi.Input[int]] = None,
                 override: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upload_day: Optional[pulumi.Input[str]] = None,
                 upload_interval: Optional[pulumi.Input[str]] = None,
                 upload_option: Optional[pulumi.Input[str]] = None,
                 upload_time: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LogFortiguardOverrideSetting resources.
        """
        if access_config is not None:
            pulumi.set(__self__, "access_config", access_config)
        if max_log_rate is not None:
            pulumi.set(__self__, "max_log_rate", max_log_rate)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if upload_day is not None:
            pulumi.set(__self__, "upload_day", upload_day)
        if upload_interval is not None:
            pulumi.set(__self__, "upload_interval", upload_interval)
        if upload_option is not None:
            pulumi.set(__self__, "upload_option", upload_option)
        if upload_time is not None:
            pulumi.set(__self__, "upload_time", upload_time)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="accessConfig")
    def access_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_config")

    @access_config.setter
    def access_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_config", value)

    @property
    @pulumi.getter(name="maxLogRate")
    def max_log_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_log_rate")

    @max_log_rate.setter
    def max_log_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_log_rate", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uploadDay")
    def upload_day(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_day")

    @upload_day.setter
    def upload_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_day", value)

    @property
    @pulumi.getter(name="uploadInterval")
    def upload_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_interval")

    @upload_interval.setter
    def upload_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_interval", value)

    @property
    @pulumi.getter(name="uploadOption")
    def upload_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_option")

    @upload_option.setter
    def upload_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_option", value)

    @property
    @pulumi.getter(name="uploadTime")
    def upload_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upload_time")

    @upload_time.setter
    def upload_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_time", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class LogFortiguardOverrideSetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_config: Optional[pulumi.Input[str]] = None,
                 max_log_rate: Optional[pulumi.Input[int]] = None,
                 override: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upload_day: Optional[pulumi.Input[str]] = None,
                 upload_interval: Optional[pulumi.Input[str]] = None,
                 upload_option: Optional[pulumi.Input[str]] = None,
                 upload_time: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a LogFortiguardOverrideSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LogFortiguardOverrideSettingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogFortiguardOverrideSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogFortiguardOverrideSettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogFortiguardOverrideSettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_config: Optional[pulumi.Input[str]] = None,
                 max_log_rate: Optional[pulumi.Input[int]] = None,
                 override: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upload_day: Optional[pulumi.Input[str]] = None,
                 upload_interval: Optional[pulumi.Input[str]] = None,
                 upload_option: Optional[pulumi.Input[str]] = None,
                 upload_time: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogFortiguardOverrideSettingArgs.__new__(LogFortiguardOverrideSettingArgs)

            __props__.__dict__["access_config"] = access_config
            __props__.__dict__["max_log_rate"] = max_log_rate
            __props__.__dict__["override"] = override
            __props__.__dict__["priority"] = priority
            __props__.__dict__["status"] = status
            __props__.__dict__["upload_day"] = upload_day
            __props__.__dict__["upload_interval"] = upload_interval
            __props__.__dict__["upload_option"] = upload_option
            __props__.__dict__["upload_time"] = upload_time
            __props__.__dict__["vdomparam"] = vdomparam
        super(LogFortiguardOverrideSetting, __self__).__init__(
            'fortios:index/logFortiguardOverrideSetting:LogFortiguardOverrideSetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_config: Optional[pulumi.Input[str]] = None,
            max_log_rate: Optional[pulumi.Input[int]] = None,
            override: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            upload_day: Optional[pulumi.Input[str]] = None,
            upload_interval: Optional[pulumi.Input[str]] = None,
            upload_option: Optional[pulumi.Input[str]] = None,
            upload_time: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'LogFortiguardOverrideSetting':
        """
        Get an existing LogFortiguardOverrideSetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogFortiguardOverrideSettingState.__new__(_LogFortiguardOverrideSettingState)

        __props__.__dict__["access_config"] = access_config
        __props__.__dict__["max_log_rate"] = max_log_rate
        __props__.__dict__["override"] = override
        __props__.__dict__["priority"] = priority
        __props__.__dict__["status"] = status
        __props__.__dict__["upload_day"] = upload_day
        __props__.__dict__["upload_interval"] = upload_interval
        __props__.__dict__["upload_option"] = upload_option
        __props__.__dict__["upload_time"] = upload_time
        __props__.__dict__["vdomparam"] = vdomparam
        return LogFortiguardOverrideSetting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessConfig")
    def access_config(self) -> pulumi.Output[str]:
        return pulumi.get(self, "access_config")

    @property
    @pulumi.getter(name="maxLogRate")
    def max_log_rate(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_log_rate")

    @property
    @pulumi.getter
    def override(self) -> pulumi.Output[str]:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[str]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uploadDay")
    def upload_day(self) -> pulumi.Output[str]:
        return pulumi.get(self, "upload_day")

    @property
    @pulumi.getter(name="uploadInterval")
    def upload_interval(self) -> pulumi.Output[str]:
        return pulumi.get(self, "upload_interval")

    @property
    @pulumi.getter(name="uploadOption")
    def upload_option(self) -> pulumi.Output[str]:
        return pulumi.get(self, "upload_option")

    @property
    @pulumi.getter(name="uploadTime")
    def upload_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "upload_time")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

