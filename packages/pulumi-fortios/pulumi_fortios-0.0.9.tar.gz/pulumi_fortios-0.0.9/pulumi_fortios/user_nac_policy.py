# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserNacPolicyArgs', 'UserNacPolicy']

@pulumi.input_type
class UserNacPolicyArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_tag: Optional[pulumi.Input[str]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 firewall_address: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 hw_version: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySeverityArgs']]]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 ssid_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sw_version: Optional[pulumi.Input[str]] = None,
                 switch_auto_auth: Optional[pulumi.Input[str]] = None,
                 switch_fortilink: Optional[pulumi.Input[str]] = None,
                 switch_groups: Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySwitchGroupArgs']]]] = None,
                 switch_mac_policy: Optional[pulumi.Input[str]] = None,
                 switch_port_policy: Optional[pulumi.Input[str]] = None,
                 switch_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySwitchScopeArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 user_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserNacPolicy resource.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ems_tag is not None:
            pulumi.set(__self__, "ems_tag", ems_tag)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if firewall_address is not None:
            pulumi.set(__self__, "firewall_address", firewall_address)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if hw_vendor is not None:
            pulumi.set(__self__, "hw_vendor", hw_vendor)
        if hw_version is not None:
            pulumi.set(__self__, "hw_version", hw_version)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if ssid_policy is not None:
            pulumi.set(__self__, "ssid_policy", ssid_policy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sw_version is not None:
            pulumi.set(__self__, "sw_version", sw_version)
        if switch_auto_auth is not None:
            pulumi.set(__self__, "switch_auto_auth", switch_auto_auth)
        if switch_fortilink is not None:
            pulumi.set(__self__, "switch_fortilink", switch_fortilink)
        if switch_groups is not None:
            pulumi.set(__self__, "switch_groups", switch_groups)
        if switch_mac_policy is not None:
            pulumi.set(__self__, "switch_mac_policy", switch_mac_policy)
        if switch_port_policy is not None:
            pulumi.set(__self__, "switch_port_policy", switch_port_policy)
        if switch_scopes is not None:
            pulumi.set(__self__, "switch_scopes", switch_scopes)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emsTag")
    def ems_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ems_tag")

    @ems_tag.setter
    def ems_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ems_tag", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_address")

    @firewall_address.setter
    def firewall_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_address", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="hwVendor")
    def hw_vendor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hw_vendor")

    @hw_vendor.setter
    def hw_vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_vendor", value)

    @property
    @pulumi.getter(name="hwVersion")
    def hw_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hw_version")

    @hw_version.setter
    def hw_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_version", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def severities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySeverityArgs']]]]:
        return pulumi.get(self, "severities")

    @severities.setter
    def severities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySeverityArgs']]]]):
        pulumi.set(self, "severities", value)

    @property
    @pulumi.getter
    def src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter(name="ssidPolicy")
    def ssid_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssid_policy")

    @ssid_policy.setter
    def ssid_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid_policy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="swVersion")
    def sw_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sw_version")

    @sw_version.setter
    def sw_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sw_version", value)

    @property
    @pulumi.getter(name="switchAutoAuth")
    def switch_auto_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_auto_auth")

    @switch_auto_auth.setter
    def switch_auto_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_auto_auth", value)

    @property
    @pulumi.getter(name="switchFortilink")
    def switch_fortilink(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_fortilink")

    @switch_fortilink.setter
    def switch_fortilink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_fortilink", value)

    @property
    @pulumi.getter(name="switchGroups")
    def switch_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySwitchGroupArgs']]]]:
        return pulumi.get(self, "switch_groups")

    @switch_groups.setter
    def switch_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySwitchGroupArgs']]]]):
        pulumi.set(self, "switch_groups", value)

    @property
    @pulumi.getter(name="switchMacPolicy")
    def switch_mac_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_mac_policy")

    @switch_mac_policy.setter
    def switch_mac_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_mac_policy", value)

    @property
    @pulumi.getter(name="switchPortPolicy")
    def switch_port_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_port_policy")

    @switch_port_policy.setter
    def switch_port_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_port_policy", value)

    @property
    @pulumi.getter(name="switchScopes")
    def switch_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySwitchScopeArgs']]]]:
        return pulumi.get(self, "switch_scopes")

    @switch_scopes.setter
    def switch_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySwitchScopeArgs']]]]):
        pulumi.set(self, "switch_scopes", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_group", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _UserNacPolicyState:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_tag: Optional[pulumi.Input[str]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 firewall_address: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 hw_version: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySeverityArgs']]]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 ssid_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sw_version: Optional[pulumi.Input[str]] = None,
                 switch_auto_auth: Optional[pulumi.Input[str]] = None,
                 switch_fortilink: Optional[pulumi.Input[str]] = None,
                 switch_groups: Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySwitchGroupArgs']]]] = None,
                 switch_mac_policy: Optional[pulumi.Input[str]] = None,
                 switch_port_policy: Optional[pulumi.Input[str]] = None,
                 switch_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySwitchScopeArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 user_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserNacPolicy resources.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ems_tag is not None:
            pulumi.set(__self__, "ems_tag", ems_tag)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if firewall_address is not None:
            pulumi.set(__self__, "firewall_address", firewall_address)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if hw_vendor is not None:
            pulumi.set(__self__, "hw_vendor", hw_vendor)
        if hw_version is not None:
            pulumi.set(__self__, "hw_version", hw_version)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if ssid_policy is not None:
            pulumi.set(__self__, "ssid_policy", ssid_policy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sw_version is not None:
            pulumi.set(__self__, "sw_version", sw_version)
        if switch_auto_auth is not None:
            pulumi.set(__self__, "switch_auto_auth", switch_auto_auth)
        if switch_fortilink is not None:
            pulumi.set(__self__, "switch_fortilink", switch_fortilink)
        if switch_groups is not None:
            pulumi.set(__self__, "switch_groups", switch_groups)
        if switch_mac_policy is not None:
            pulumi.set(__self__, "switch_mac_policy", switch_mac_policy)
        if switch_port_policy is not None:
            pulumi.set(__self__, "switch_port_policy", switch_port_policy)
        if switch_scopes is not None:
            pulumi.set(__self__, "switch_scopes", switch_scopes)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emsTag")
    def ems_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ems_tag")

    @ems_tag.setter
    def ems_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ems_tag", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_address")

    @firewall_address.setter
    def firewall_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_address", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="hwVendor")
    def hw_vendor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hw_vendor")

    @hw_vendor.setter
    def hw_vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_vendor", value)

    @property
    @pulumi.getter(name="hwVersion")
    def hw_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hw_version")

    @hw_version.setter
    def hw_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_version", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def severities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySeverityArgs']]]]:
        return pulumi.get(self, "severities")

    @severities.setter
    def severities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySeverityArgs']]]]):
        pulumi.set(self, "severities", value)

    @property
    @pulumi.getter
    def src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter(name="ssidPolicy")
    def ssid_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssid_policy")

    @ssid_policy.setter
    def ssid_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid_policy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="swVersion")
    def sw_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sw_version")

    @sw_version.setter
    def sw_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sw_version", value)

    @property
    @pulumi.getter(name="switchAutoAuth")
    def switch_auto_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_auto_auth")

    @switch_auto_auth.setter
    def switch_auto_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_auto_auth", value)

    @property
    @pulumi.getter(name="switchFortilink")
    def switch_fortilink(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_fortilink")

    @switch_fortilink.setter
    def switch_fortilink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_fortilink", value)

    @property
    @pulumi.getter(name="switchGroups")
    def switch_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySwitchGroupArgs']]]]:
        return pulumi.get(self, "switch_groups")

    @switch_groups.setter
    def switch_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySwitchGroupArgs']]]]):
        pulumi.set(self, "switch_groups", value)

    @property
    @pulumi.getter(name="switchMacPolicy")
    def switch_mac_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_mac_policy")

    @switch_mac_policy.setter
    def switch_mac_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_mac_policy", value)

    @property
    @pulumi.getter(name="switchPortPolicy")
    def switch_port_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_port_policy")

    @switch_port_policy.setter
    def switch_port_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_port_policy", value)

    @property
    @pulumi.getter(name="switchScopes")
    def switch_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySwitchScopeArgs']]]]:
        return pulumi.get(self, "switch_scopes")

    @switch_scopes.setter
    def switch_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserNacPolicySwitchScopeArgs']]]]):
        pulumi.set(self, "switch_scopes", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_group", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class UserNacPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_tag: Optional[pulumi.Input[str]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 firewall_address: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 hw_version: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserNacPolicySeverityArgs']]]]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 ssid_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sw_version: Optional[pulumi.Input[str]] = None,
                 switch_auto_auth: Optional[pulumi.Input[str]] = None,
                 switch_fortilink: Optional[pulumi.Input[str]] = None,
                 switch_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserNacPolicySwitchGroupArgs']]]]] = None,
                 switch_mac_policy: Optional[pulumi.Input[str]] = None,
                 switch_port_policy: Optional[pulumi.Input[str]] = None,
                 switch_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserNacPolicySwitchScopeArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 user_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a UserNacPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[UserNacPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UserNacPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UserNacPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserNacPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_tag: Optional[pulumi.Input[str]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 firewall_address: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 hw_version: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserNacPolicySeverityArgs']]]]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 ssid_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sw_version: Optional[pulumi.Input[str]] = None,
                 switch_auto_auth: Optional[pulumi.Input[str]] = None,
                 switch_fortilink: Optional[pulumi.Input[str]] = None,
                 switch_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserNacPolicySwitchGroupArgs']]]]] = None,
                 switch_mac_policy: Optional[pulumi.Input[str]] = None,
                 switch_port_policy: Optional[pulumi.Input[str]] = None,
                 switch_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserNacPolicySwitchScopeArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 user_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserNacPolicyArgs.__new__(UserNacPolicyArgs)

            __props__.__dict__["category"] = category
            __props__.__dict__["description"] = description
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["ems_tag"] = ems_tag
            __props__.__dict__["family"] = family
            __props__.__dict__["firewall_address"] = firewall_address
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["host"] = host
            __props__.__dict__["hw_vendor"] = hw_vendor
            __props__.__dict__["hw_version"] = hw_version
            __props__.__dict__["mac"] = mac
            __props__.__dict__["name"] = name
            __props__.__dict__["os"] = os
            __props__.__dict__["severities"] = severities
            __props__.__dict__["src"] = src
            __props__.__dict__["ssid_policy"] = ssid_policy
            __props__.__dict__["status"] = status
            __props__.__dict__["sw_version"] = sw_version
            __props__.__dict__["switch_auto_auth"] = switch_auto_auth
            __props__.__dict__["switch_fortilink"] = switch_fortilink
            __props__.__dict__["switch_groups"] = switch_groups
            __props__.__dict__["switch_mac_policy"] = switch_mac_policy
            __props__.__dict__["switch_port_policy"] = switch_port_policy
            __props__.__dict__["switch_scopes"] = switch_scopes
            __props__.__dict__["type"] = type
            __props__.__dict__["user"] = user
            __props__.__dict__["user_group"] = user_group
            __props__.__dict__["vdomparam"] = vdomparam
        super(UserNacPolicy, __self__).__init__(
            'fortios:index/userNacPolicy:UserNacPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            category: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            ems_tag: Optional[pulumi.Input[str]] = None,
            family: Optional[pulumi.Input[str]] = None,
            firewall_address: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            hw_vendor: Optional[pulumi.Input[str]] = None,
            hw_version: Optional[pulumi.Input[str]] = None,
            mac: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            os: Optional[pulumi.Input[str]] = None,
            severities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserNacPolicySeverityArgs']]]]] = None,
            src: Optional[pulumi.Input[str]] = None,
            ssid_policy: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            sw_version: Optional[pulumi.Input[str]] = None,
            switch_auto_auth: Optional[pulumi.Input[str]] = None,
            switch_fortilink: Optional[pulumi.Input[str]] = None,
            switch_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserNacPolicySwitchGroupArgs']]]]] = None,
            switch_mac_policy: Optional[pulumi.Input[str]] = None,
            switch_port_policy: Optional[pulumi.Input[str]] = None,
            switch_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserNacPolicySwitchScopeArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            user: Optional[pulumi.Input[str]] = None,
            user_group: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'UserNacPolicy':
        """
        Get an existing UserNacPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserNacPolicyState.__new__(_UserNacPolicyState)

        __props__.__dict__["category"] = category
        __props__.__dict__["description"] = description
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["ems_tag"] = ems_tag
        __props__.__dict__["family"] = family
        __props__.__dict__["firewall_address"] = firewall_address
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["host"] = host
        __props__.__dict__["hw_vendor"] = hw_vendor
        __props__.__dict__["hw_version"] = hw_version
        __props__.__dict__["mac"] = mac
        __props__.__dict__["name"] = name
        __props__.__dict__["os"] = os
        __props__.__dict__["severities"] = severities
        __props__.__dict__["src"] = src
        __props__.__dict__["ssid_policy"] = ssid_policy
        __props__.__dict__["status"] = status
        __props__.__dict__["sw_version"] = sw_version
        __props__.__dict__["switch_auto_auth"] = switch_auto_auth
        __props__.__dict__["switch_fortilink"] = switch_fortilink
        __props__.__dict__["switch_groups"] = switch_groups
        __props__.__dict__["switch_mac_policy"] = switch_mac_policy
        __props__.__dict__["switch_port_policy"] = switch_port_policy
        __props__.__dict__["switch_scopes"] = switch_scopes
        __props__.__dict__["type"] = type
        __props__.__dict__["user"] = user
        __props__.__dict__["user_group"] = user_group
        __props__.__dict__["vdomparam"] = vdomparam
        return UserNacPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emsTag")
    def ems_tag(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ems_tag")

    @property
    @pulumi.getter
    def family(self) -> pulumi.Output[str]:
        return pulumi.get(self, "family")

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "firewall_address")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="hwVendor")
    def hw_vendor(self) -> pulumi.Output[str]:
        return pulumi.get(self, "hw_vendor")

    @property
    @pulumi.getter(name="hwVersion")
    def hw_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "hw_version")

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def os(self) -> pulumi.Output[str]:
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def severities(self) -> pulumi.Output[Optional[Sequence['outputs.UserNacPolicySeverity']]]:
        return pulumi.get(self, "severities")

    @property
    @pulumi.getter
    def src(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src")

    @property
    @pulumi.getter(name="ssidPolicy")
    def ssid_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssid_policy")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="swVersion")
    def sw_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sw_version")

    @property
    @pulumi.getter(name="switchAutoAuth")
    def switch_auto_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "switch_auto_auth")

    @property
    @pulumi.getter(name="switchFortilink")
    def switch_fortilink(self) -> pulumi.Output[str]:
        return pulumi.get(self, "switch_fortilink")

    @property
    @pulumi.getter(name="switchGroups")
    def switch_groups(self) -> pulumi.Output[Optional[Sequence['outputs.UserNacPolicySwitchGroup']]]:
        return pulumi.get(self, "switch_groups")

    @property
    @pulumi.getter(name="switchMacPolicy")
    def switch_mac_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "switch_mac_policy")

    @property
    @pulumi.getter(name="switchPortPolicy")
    def switch_port_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "switch_port_policy")

    @property
    @pulumi.getter(name="switchScopes")
    def switch_scopes(self) -> pulumi.Output[Optional[Sequence['outputs.UserNacPolicySwitchScope']]]:
        return pulumi.get(self, "switch_scopes")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user_group")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

