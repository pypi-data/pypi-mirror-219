# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SwitchControllerVlanPolicyArgs', 'SwitchControllerVlanPolicy']

@pulumi.input_type
class SwitchControllerVlanPolicyArgs:
    def __init__(__self__, *,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerVlanPolicyAllowedVlanArgs']]]] = None,
                 allowed_vlans_all: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discard_mode: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 untagged_vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerVlanPolicyUntaggedVlanArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchControllerVlanPolicy resource.
        """
        if allowed_vlans is not None:
            pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        if allowed_vlans_all is not None:
            pulumi.set(__self__, "allowed_vlans_all", allowed_vlans_all)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if discard_mode is not None:
            pulumi.set(__self__, "discard_mode", discard_mode)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fortilink is not None:
            pulumi.set(__self__, "fortilink", fortilink)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if untagged_vlans is not None:
            pulumi.set(__self__, "untagged_vlans", untagged_vlans)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerVlanPolicyAllowedVlanArgs']]]]:
        return pulumi.get(self, "allowed_vlans")

    @allowed_vlans.setter
    def allowed_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerVlanPolicyAllowedVlanArgs']]]]):
        pulumi.set(self, "allowed_vlans", value)

    @property
    @pulumi.getter(name="allowedVlansAll")
    def allowed_vlans_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowed_vlans_all")

    @allowed_vlans_all.setter
    def allowed_vlans_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowed_vlans_all", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="discardMode")
    def discard_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "discard_mode")

    @discard_mode.setter
    def discard_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discard_mode", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def fortilink(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortilink")

    @fortilink.setter
    def fortilink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="untaggedVlans")
    def untagged_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerVlanPolicyUntaggedVlanArgs']]]]:
        return pulumi.get(self, "untagged_vlans")

    @untagged_vlans.setter
    def untagged_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerVlanPolicyUntaggedVlanArgs']]]]):
        pulumi.set(self, "untagged_vlans", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class _SwitchControllerVlanPolicyState:
    def __init__(__self__, *,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerVlanPolicyAllowedVlanArgs']]]] = None,
                 allowed_vlans_all: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discard_mode: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 untagged_vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerVlanPolicyUntaggedVlanArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerVlanPolicy resources.
        """
        if allowed_vlans is not None:
            pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        if allowed_vlans_all is not None:
            pulumi.set(__self__, "allowed_vlans_all", allowed_vlans_all)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if discard_mode is not None:
            pulumi.set(__self__, "discard_mode", discard_mode)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fortilink is not None:
            pulumi.set(__self__, "fortilink", fortilink)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if untagged_vlans is not None:
            pulumi.set(__self__, "untagged_vlans", untagged_vlans)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerVlanPolicyAllowedVlanArgs']]]]:
        return pulumi.get(self, "allowed_vlans")

    @allowed_vlans.setter
    def allowed_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerVlanPolicyAllowedVlanArgs']]]]):
        pulumi.set(self, "allowed_vlans", value)

    @property
    @pulumi.getter(name="allowedVlansAll")
    def allowed_vlans_all(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowed_vlans_all")

    @allowed_vlans_all.setter
    def allowed_vlans_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowed_vlans_all", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="discardMode")
    def discard_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "discard_mode")

    @discard_mode.setter
    def discard_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discard_mode", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def fortilink(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortilink")

    @fortilink.setter
    def fortilink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortilink", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="untaggedVlans")
    def untagged_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerVlanPolicyUntaggedVlanArgs']]]]:
        return pulumi.get(self, "untagged_vlans")

    @untagged_vlans.setter
    def untagged_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerVlanPolicyUntaggedVlanArgs']]]]):
        pulumi.set(self, "untagged_vlans", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan", value)


class SwitchControllerVlanPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerVlanPolicyAllowedVlanArgs']]]]] = None,
                 allowed_vlans_all: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discard_mode: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 untagged_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerVlanPolicyUntaggedVlanArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SwitchControllerVlanPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchControllerVlanPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerVlanPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerVlanPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerVlanPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerVlanPolicyAllowedVlanArgs']]]]] = None,
                 allowed_vlans_all: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discard_mode: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fortilink: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 untagged_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerVlanPolicyUntaggedVlanArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerVlanPolicyArgs.__new__(SwitchControllerVlanPolicyArgs)

            __props__.__dict__["allowed_vlans"] = allowed_vlans
            __props__.__dict__["allowed_vlans_all"] = allowed_vlans_all
            __props__.__dict__["description"] = description
            __props__.__dict__["discard_mode"] = discard_mode
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fortilink"] = fortilink
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["name"] = name
            __props__.__dict__["untagged_vlans"] = untagged_vlans
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vlan"] = vlan
        super(SwitchControllerVlanPolicy, __self__).__init__(
            'fortios:index/switchControllerVlanPolicy:SwitchControllerVlanPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerVlanPolicyAllowedVlanArgs']]]]] = None,
            allowed_vlans_all: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            discard_mode: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fortilink: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            untagged_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SwitchControllerVlanPolicyUntaggedVlanArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vlan: Optional[pulumi.Input[str]] = None) -> 'SwitchControllerVlanPolicy':
        """
        Get an existing SwitchControllerVlanPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerVlanPolicyState.__new__(_SwitchControllerVlanPolicyState)

        __props__.__dict__["allowed_vlans"] = allowed_vlans
        __props__.__dict__["allowed_vlans_all"] = allowed_vlans_all
        __props__.__dict__["description"] = description
        __props__.__dict__["discard_mode"] = discard_mode
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fortilink"] = fortilink
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["name"] = name
        __props__.__dict__["untagged_vlans"] = untagged_vlans
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vlan"] = vlan
        return SwitchControllerVlanPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchControllerVlanPolicyAllowedVlan']]]:
        return pulumi.get(self, "allowed_vlans")

    @property
    @pulumi.getter(name="allowedVlansAll")
    def allowed_vlans_all(self) -> pulumi.Output[str]:
        return pulumi.get(self, "allowed_vlans_all")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="discardMode")
    def discard_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "discard_mode")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def fortilink(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fortilink")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="untaggedVlans")
    def untagged_vlans(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchControllerVlanPolicyUntaggedVlan']]]:
        return pulumi.get(self, "untagged_vlans")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vlan")

