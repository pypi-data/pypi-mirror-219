# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VpnIpsecPhase1Args', 'VpnIpsecPhase1']

@pulumi.input_type
class VpnIpsecPhase1Args:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 proposal: pulumi.Input[str],
                 psksecret: pulumi.Input[str],
                 acct_verify: Optional[pulumi.Input[str]] = None,
                 add_gw_route: Optional[pulumi.Input[str]] = None,
                 add_route: Optional[pulumi.Input[str]] = None,
                 assign_ip: Optional[pulumi.Input[str]] = None,
                 assign_ip_from: Optional[pulumi.Input[str]] = None,
                 authmethod: Optional[pulumi.Input[str]] = None,
                 authmethod_remote: Optional[pulumi.Input[str]] = None,
                 authpasswd: Optional[pulumi.Input[str]] = None,
                 authusr: Optional[pulumi.Input[str]] = None,
                 authusrgrp: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 backup_gateways: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1BackupGatewayArgs']]]] = None,
                 banner: Optional[pulumi.Input[str]] = None,
                 cert_id_validation: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1CertificateArgs']]]] = None,
                 childless_ike: Optional[pulumi.Input[str]] = None,
                 client_auto_negotiate: Optional[pulumi.Input[str]] = None,
                 client_keep_alive: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
                 dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 digital_signature_auth: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dns_mode: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dpd: Optional[pulumi.Input[str]] = None,
                 dpd_retrycount: Optional[pulumi.Input[int]] = None,
                 dpd_retryinterval: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eap: Optional[pulumi.Input[str]] = None,
                 eap_exclude_peergrp: Optional[pulumi.Input[str]] = None,
                 eap_identity: Optional[pulumi.Input[str]] = None,
                 enforce_unique_id: Optional[pulumi.Input[str]] = None,
                 esn: Optional[pulumi.Input[str]] = None,
                 fec_base: Optional[pulumi.Input[int]] = None,
                 fec_codec: Optional[pulumi.Input[int]] = None,
                 fec_codec_string: Optional[pulumi.Input[str]] = None,
                 fec_egress: Optional[pulumi.Input[str]] = None,
                 fec_health_check: Optional[pulumi.Input[str]] = None,
                 fec_ingress: Optional[pulumi.Input[str]] = None,
                 fec_mapping_profile: Optional[pulumi.Input[str]] = None,
                 fec_receive_timeout: Optional[pulumi.Input[int]] = None,
                 fec_redundant: Optional[pulumi.Input[int]] = None,
                 fec_send_timeout: Optional[pulumi.Input[int]] = None,
                 fgsp_sync: Optional[pulumi.Input[str]] = None,
                 forticlient_enforcement: Optional[pulumi.Input[str]] = None,
                 fragmentation: Optional[pulumi.Input[str]] = None,
                 fragmentation_mtu: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_authentication: Optional[pulumi.Input[str]] = None,
                 group_authentication_secret: Optional[pulumi.Input[str]] = None,
                 ha_sync_esp_seqno: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[str]] = None,
                 idle_timeoutinterval: Optional[pulumi.Input[int]] = None,
                 ike_version: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 include_local_lan: Optional[pulumi.Input[str]] = None,
                 ip_delay_interval: Optional[pulumi.Input[int]] = None,
                 ipv4_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv4_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1Ipv4ExcludeRangeArgs']]]] = None,
                 ipv4_name: Optional[pulumi.Input[str]] = None,
                 ipv4_netmask: Optional[pulumi.Input[str]] = None,
                 ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv4_split_include: Optional[pulumi.Input[str]] = None,
                 ipv4_start_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv6_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv6_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1Ipv6ExcludeRangeArgs']]]] = None,
                 ipv6_name: Optional[pulumi.Input[str]] = None,
                 ipv6_prefix: Optional[pulumi.Input[int]] = None,
                 ipv6_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv6_split_include: Optional[pulumi.Input[str]] = None,
                 ipv6_start_ip: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[int]] = None,
                 keylife: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 localid: Optional[pulumi.Input[str]] = None,
                 localid_type: Optional[pulumi.Input[str]] = None,
                 loopback_asymroute: Optional[pulumi.Input[str]] = None,
                 mesh_selector_type: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mode_cfg: Optional[pulumi.Input[str]] = None,
                 mode_cfg_allow_client_selector: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nattraversal: Optional[pulumi.Input[str]] = None,
                 negotiate_timeout: Optional[pulumi.Input[int]] = None,
                 network_id: Optional[pulumi.Input[int]] = None,
                 network_overlay: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 peergrp: Optional[pulumi.Input[str]] = None,
                 peerid: Optional[pulumi.Input[str]] = None,
                 peertype: Optional[pulumi.Input[str]] = None,
                 ppk: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 psksecret_remote: Optional[pulumi.Input[str]] = None,
                 reauth: Optional[pulumi.Input[str]] = None,
                 rekey: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remotegw_ddns: Optional[pulumi.Input[str]] = None,
                 rsa_signature_format: Optional[pulumi.Input[str]] = None,
                 rsa_signature_hash_override: Optional[pulumi.Input[str]] = None,
                 save_password: Optional[pulumi.Input[str]] = None,
                 send_cert_chain: Optional[pulumi.Input[str]] = None,
                 signature_hash_alg: Optional[pulumi.Input[str]] = None,
                 split_include_service: Optional[pulumi.Input[str]] = None,
                 suite_b: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unity_support: Optional[pulumi.Input[str]] = None,
                 usrgrp: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wizard_type: Optional[pulumi.Input[str]] = None,
                 xauthtype: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VpnIpsecPhase1 resource.
        """
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "proposal", proposal)
        pulumi.set(__self__, "psksecret", psksecret)
        if acct_verify is not None:
            pulumi.set(__self__, "acct_verify", acct_verify)
        if add_gw_route is not None:
            pulumi.set(__self__, "add_gw_route", add_gw_route)
        if add_route is not None:
            pulumi.set(__self__, "add_route", add_route)
        if assign_ip is not None:
            pulumi.set(__self__, "assign_ip", assign_ip)
        if assign_ip_from is not None:
            pulumi.set(__self__, "assign_ip_from", assign_ip_from)
        if authmethod is not None:
            pulumi.set(__self__, "authmethod", authmethod)
        if authmethod_remote is not None:
            pulumi.set(__self__, "authmethod_remote", authmethod_remote)
        if authpasswd is not None:
            pulumi.set(__self__, "authpasswd", authpasswd)
        if authusr is not None:
            pulumi.set(__self__, "authusr", authusr)
        if authusrgrp is not None:
            pulumi.set(__self__, "authusrgrp", authusrgrp)
        if auto_negotiate is not None:
            pulumi.set(__self__, "auto_negotiate", auto_negotiate)
        if backup_gateways is not None:
            pulumi.set(__self__, "backup_gateways", backup_gateways)
        if banner is not None:
            pulumi.set(__self__, "banner", banner)
        if cert_id_validation is not None:
            pulumi.set(__self__, "cert_id_validation", cert_id_validation)
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if childless_ike is not None:
            pulumi.set(__self__, "childless_ike", childless_ike)
        if client_auto_negotiate is not None:
            pulumi.set(__self__, "client_auto_negotiate", client_auto_negotiate)
        if client_keep_alive is not None:
            pulumi.set(__self__, "client_keep_alive", client_keep_alive)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dhcp6_ra_linkaddr is not None:
            pulumi.set(__self__, "dhcp6_ra_linkaddr", dhcp6_ra_linkaddr)
        if dhcp_ra_giaddr is not None:
            pulumi.set(__self__, "dhcp_ra_giaddr", dhcp_ra_giaddr)
        if dhgrp is not None:
            pulumi.set(__self__, "dhgrp", dhgrp)
        if digital_signature_auth is not None:
            pulumi.set(__self__, "digital_signature_auth", digital_signature_auth)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dns_mode is not None:
            pulumi.set(__self__, "dns_mode", dns_mode)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dpd is not None:
            pulumi.set(__self__, "dpd", dpd)
        if dpd_retrycount is not None:
            pulumi.set(__self__, "dpd_retrycount", dpd_retrycount)
        if dpd_retryinterval is not None:
            pulumi.set(__self__, "dpd_retryinterval", dpd_retryinterval)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if eap is not None:
            pulumi.set(__self__, "eap", eap)
        if eap_exclude_peergrp is not None:
            pulumi.set(__self__, "eap_exclude_peergrp", eap_exclude_peergrp)
        if eap_identity is not None:
            pulumi.set(__self__, "eap_identity", eap_identity)
        if enforce_unique_id is not None:
            pulumi.set(__self__, "enforce_unique_id", enforce_unique_id)
        if esn is not None:
            pulumi.set(__self__, "esn", esn)
        if fec_base is not None:
            pulumi.set(__self__, "fec_base", fec_base)
        if fec_codec is not None:
            pulumi.set(__self__, "fec_codec", fec_codec)
        if fec_codec_string is not None:
            pulumi.set(__self__, "fec_codec_string", fec_codec_string)
        if fec_egress is not None:
            pulumi.set(__self__, "fec_egress", fec_egress)
        if fec_health_check is not None:
            pulumi.set(__self__, "fec_health_check", fec_health_check)
        if fec_ingress is not None:
            pulumi.set(__self__, "fec_ingress", fec_ingress)
        if fec_mapping_profile is not None:
            pulumi.set(__self__, "fec_mapping_profile", fec_mapping_profile)
        if fec_receive_timeout is not None:
            pulumi.set(__self__, "fec_receive_timeout", fec_receive_timeout)
        if fec_redundant is not None:
            pulumi.set(__self__, "fec_redundant", fec_redundant)
        if fec_send_timeout is not None:
            pulumi.set(__self__, "fec_send_timeout", fec_send_timeout)
        if fgsp_sync is not None:
            pulumi.set(__self__, "fgsp_sync", fgsp_sync)
        if forticlient_enforcement is not None:
            pulumi.set(__self__, "forticlient_enforcement", forticlient_enforcement)
        if fragmentation is not None:
            pulumi.set(__self__, "fragmentation", fragmentation)
        if fragmentation_mtu is not None:
            pulumi.set(__self__, "fragmentation_mtu", fragmentation_mtu)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_authentication is not None:
            pulumi.set(__self__, "group_authentication", group_authentication)
        if group_authentication_secret is not None:
            pulumi.set(__self__, "group_authentication_secret", group_authentication_secret)
        if ha_sync_esp_seqno is not None:
            pulumi.set(__self__, "ha_sync_esp_seqno", ha_sync_esp_seqno)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if idle_timeoutinterval is not None:
            pulumi.set(__self__, "idle_timeoutinterval", idle_timeoutinterval)
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if inbound_dscp_copy is not None:
            pulumi.set(__self__, "inbound_dscp_copy", inbound_dscp_copy)
        if include_local_lan is not None:
            pulumi.set(__self__, "include_local_lan", include_local_lan)
        if ip_delay_interval is not None:
            pulumi.set(__self__, "ip_delay_interval", ip_delay_interval)
        if ipv4_dns_server1 is not None:
            pulumi.set(__self__, "ipv4_dns_server1", ipv4_dns_server1)
        if ipv4_dns_server2 is not None:
            pulumi.set(__self__, "ipv4_dns_server2", ipv4_dns_server2)
        if ipv4_dns_server3 is not None:
            pulumi.set(__self__, "ipv4_dns_server3", ipv4_dns_server3)
        if ipv4_end_ip is not None:
            pulumi.set(__self__, "ipv4_end_ip", ipv4_end_ip)
        if ipv4_exclude_ranges is not None:
            pulumi.set(__self__, "ipv4_exclude_ranges", ipv4_exclude_ranges)
        if ipv4_name is not None:
            pulumi.set(__self__, "ipv4_name", ipv4_name)
        if ipv4_netmask is not None:
            pulumi.set(__self__, "ipv4_netmask", ipv4_netmask)
        if ipv4_split_exclude is not None:
            pulumi.set(__self__, "ipv4_split_exclude", ipv4_split_exclude)
        if ipv4_split_include is not None:
            pulumi.set(__self__, "ipv4_split_include", ipv4_split_include)
        if ipv4_start_ip is not None:
            pulumi.set(__self__, "ipv4_start_ip", ipv4_start_ip)
        if ipv4_wins_server1 is not None:
            pulumi.set(__self__, "ipv4_wins_server1", ipv4_wins_server1)
        if ipv4_wins_server2 is not None:
            pulumi.set(__self__, "ipv4_wins_server2", ipv4_wins_server2)
        if ipv6_dns_server1 is not None:
            pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 is not None:
            pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)
        if ipv6_dns_server3 is not None:
            pulumi.set(__self__, "ipv6_dns_server3", ipv6_dns_server3)
        if ipv6_end_ip is not None:
            pulumi.set(__self__, "ipv6_end_ip", ipv6_end_ip)
        if ipv6_exclude_ranges is not None:
            pulumi.set(__self__, "ipv6_exclude_ranges", ipv6_exclude_ranges)
        if ipv6_name is not None:
            pulumi.set(__self__, "ipv6_name", ipv6_name)
        if ipv6_prefix is not None:
            pulumi.set(__self__, "ipv6_prefix", ipv6_prefix)
        if ipv6_split_exclude is not None:
            pulumi.set(__self__, "ipv6_split_exclude", ipv6_split_exclude)
        if ipv6_split_include is not None:
            pulumi.set(__self__, "ipv6_split_include", ipv6_split_include)
        if ipv6_start_ip is not None:
            pulumi.set(__self__, "ipv6_start_ip", ipv6_start_ip)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if keylife is not None:
            pulumi.set(__self__, "keylife", keylife)
        if local_gw is not None:
            pulumi.set(__self__, "local_gw", local_gw)
        if localid is not None:
            pulumi.set(__self__, "localid", localid)
        if localid_type is not None:
            pulumi.set(__self__, "localid_type", localid_type)
        if loopback_asymroute is not None:
            pulumi.set(__self__, "loopback_asymroute", loopback_asymroute)
        if mesh_selector_type is not None:
            pulumi.set(__self__, "mesh_selector_type", mesh_selector_type)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mode_cfg is not None:
            pulumi.set(__self__, "mode_cfg", mode_cfg)
        if mode_cfg_allow_client_selector is not None:
            pulumi.set(__self__, "mode_cfg_allow_client_selector", mode_cfg_allow_client_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nattraversal is not None:
            pulumi.set(__self__, "nattraversal", nattraversal)
        if negotiate_timeout is not None:
            pulumi.set(__self__, "negotiate_timeout", negotiate_timeout)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if network_overlay is not None:
            pulumi.set(__self__, "network_overlay", network_overlay)
        if npu_offload is not None:
            pulumi.set(__self__, "npu_offload", npu_offload)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if peergrp is not None:
            pulumi.set(__self__, "peergrp", peergrp)
        if peerid is not None:
            pulumi.set(__self__, "peerid", peerid)
        if peertype is not None:
            pulumi.set(__self__, "peertype", peertype)
        if ppk is not None:
            pulumi.set(__self__, "ppk", ppk)
        if ppk_identity is not None:
            pulumi.set(__self__, "ppk_identity", ppk_identity)
        if ppk_secret is not None:
            pulumi.set(__self__, "ppk_secret", ppk_secret)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if psksecret_remote is not None:
            pulumi.set(__self__, "psksecret_remote", psksecret_remote)
        if reauth is not None:
            pulumi.set(__self__, "reauth", reauth)
        if rekey is not None:
            pulumi.set(__self__, "rekey", rekey)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if remotegw_ddns is not None:
            pulumi.set(__self__, "remotegw_ddns", remotegw_ddns)
        if rsa_signature_format is not None:
            pulumi.set(__self__, "rsa_signature_format", rsa_signature_format)
        if rsa_signature_hash_override is not None:
            pulumi.set(__self__, "rsa_signature_hash_override", rsa_signature_hash_override)
        if save_password is not None:
            pulumi.set(__self__, "save_password", save_password)
        if send_cert_chain is not None:
            pulumi.set(__self__, "send_cert_chain", send_cert_chain)
        if signature_hash_alg is not None:
            pulumi.set(__self__, "signature_hash_alg", signature_hash_alg)
        if split_include_service is not None:
            pulumi.set(__self__, "split_include_service", split_include_service)
        if suite_b is not None:
            pulumi.set(__self__, "suite_b", suite_b)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unity_support is not None:
            pulumi.set(__self__, "unity_support", unity_support)
        if usrgrp is not None:
            pulumi.set(__self__, "usrgrp", usrgrp)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wizard_type is not None:
            pulumi.set(__self__, "wizard_type", wizard_type)
        if xauthtype is not None:
            pulumi.set(__self__, "xauthtype", xauthtype)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def proposal(self) -> pulumi.Input[str]:
        return pulumi.get(self, "proposal")

    @proposal.setter
    def proposal(self, value: pulumi.Input[str]):
        pulumi.set(self, "proposal", value)

    @property
    @pulumi.getter
    def psksecret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: pulumi.Input[str]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter(name="acctVerify")
    def acct_verify(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acct_verify")

    @acct_verify.setter
    def acct_verify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acct_verify", value)

    @property
    @pulumi.getter(name="addGwRoute")
    def add_gw_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "add_gw_route")

    @add_gw_route.setter
    def add_gw_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_gw_route", value)

    @property
    @pulumi.getter(name="addRoute")
    def add_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "add_route")

    @add_route.setter
    def add_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_route", value)

    @property
    @pulumi.getter(name="assignIp")
    def assign_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assign_ip")

    @assign_ip.setter
    def assign_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_ip", value)

    @property
    @pulumi.getter(name="assignIpFrom")
    def assign_ip_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assign_ip_from")

    @assign_ip_from.setter
    def assign_ip_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_ip_from", value)

    @property
    @pulumi.getter
    def authmethod(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authmethod")

    @authmethod.setter
    def authmethod(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authmethod", value)

    @property
    @pulumi.getter(name="authmethodRemote")
    def authmethod_remote(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authmethod_remote")

    @authmethod_remote.setter
    def authmethod_remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authmethod_remote", value)

    @property
    @pulumi.getter
    def authpasswd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authpasswd")

    @authpasswd.setter
    def authpasswd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authpasswd", value)

    @property
    @pulumi.getter
    def authusr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authusr")

    @authusr.setter
    def authusr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authusr", value)

    @property
    @pulumi.getter
    def authusrgrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authusrgrp")

    @authusrgrp.setter
    def authusrgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authusrgrp", value)

    @property
    @pulumi.getter(name="autoNegotiate")
    def auto_negotiate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_negotiate")

    @auto_negotiate.setter
    def auto_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_negotiate", value)

    @property
    @pulumi.getter(name="backupGateways")
    def backup_gateways(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1BackupGatewayArgs']]]]:
        return pulumi.get(self, "backup_gateways")

    @backup_gateways.setter
    def backup_gateways(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1BackupGatewayArgs']]]]):
        pulumi.set(self, "backup_gateways", value)

    @property
    @pulumi.getter
    def banner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "banner")

    @banner.setter
    def banner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "banner", value)

    @property
    @pulumi.getter(name="certIdValidation")
    def cert_id_validation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_id_validation")

    @cert_id_validation.setter
    def cert_id_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_id_validation", value)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1CertificateArgs']]]]:
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1CertificateArgs']]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter(name="childlessIke")
    def childless_ike(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "childless_ike")

    @childless_ike.setter
    def childless_ike(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "childless_ike", value)

    @property
    @pulumi.getter(name="clientAutoNegotiate")
    def client_auto_negotiate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_auto_negotiate")

    @client_auto_negotiate.setter
    def client_auto_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_auto_negotiate", value)

    @property
    @pulumi.getter(name="clientKeepAlive")
    def client_keep_alive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_keep_alive")

    @client_keep_alive.setter
    def client_keep_alive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_keep_alive", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dhcp6RaLinkaddr")
    def dhcp6_ra_linkaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp6_ra_linkaddr")

    @dhcp6_ra_linkaddr.setter
    def dhcp6_ra_linkaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_ra_linkaddr", value)

    @property
    @pulumi.getter(name="dhcpRaGiaddr")
    def dhcp_ra_giaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_ra_giaddr")

    @dhcp_ra_giaddr.setter
    def dhcp_ra_giaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ra_giaddr", value)

    @property
    @pulumi.getter
    def dhgrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhgrp")

    @dhgrp.setter
    def dhgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhgrp", value)

    @property
    @pulumi.getter(name="digitalSignatureAuth")
    def digital_signature_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "digital_signature_auth")

    @digital_signature_auth.setter
    def digital_signature_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digital_signature_auth", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="dnsMode")
    def dns_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_mode")

    @dns_mode.setter
    def dns_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_mode", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def dpd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dpd")

    @dpd.setter
    def dpd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpd", value)

    @property
    @pulumi.getter(name="dpdRetrycount")
    def dpd_retrycount(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dpd_retrycount")

    @dpd_retrycount.setter
    def dpd_retrycount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dpd_retrycount", value)

    @property
    @pulumi.getter(name="dpdRetryinterval")
    def dpd_retryinterval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dpd_retryinterval")

    @dpd_retryinterval.setter
    def dpd_retryinterval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpd_retryinterval", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def eap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eap")

    @eap.setter
    def eap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap", value)

    @property
    @pulumi.getter(name="eapExcludePeergrp")
    def eap_exclude_peergrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eap_exclude_peergrp")

    @eap_exclude_peergrp.setter
    def eap_exclude_peergrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_exclude_peergrp", value)

    @property
    @pulumi.getter(name="eapIdentity")
    def eap_identity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eap_identity")

    @eap_identity.setter
    def eap_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_identity", value)

    @property
    @pulumi.getter(name="enforceUniqueId")
    def enforce_unique_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enforce_unique_id")

    @enforce_unique_id.setter
    def enforce_unique_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_unique_id", value)

    @property
    @pulumi.getter
    def esn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "esn")

    @esn.setter
    def esn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "esn", value)

    @property
    @pulumi.getter(name="fecBase")
    def fec_base(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fec_base")

    @fec_base.setter
    def fec_base(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_base", value)

    @property
    @pulumi.getter(name="fecCodec")
    def fec_codec(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fec_codec")

    @fec_codec.setter
    def fec_codec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_codec", value)

    @property
    @pulumi.getter(name="fecCodecString")
    def fec_codec_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec_codec_string")

    @fec_codec_string.setter
    def fec_codec_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_codec_string", value)

    @property
    @pulumi.getter(name="fecEgress")
    def fec_egress(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec_egress")

    @fec_egress.setter
    def fec_egress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_egress", value)

    @property
    @pulumi.getter(name="fecHealthCheck")
    def fec_health_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec_health_check")

    @fec_health_check.setter
    def fec_health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_health_check", value)

    @property
    @pulumi.getter(name="fecIngress")
    def fec_ingress(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec_ingress")

    @fec_ingress.setter
    def fec_ingress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_ingress", value)

    @property
    @pulumi.getter(name="fecMappingProfile")
    def fec_mapping_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec_mapping_profile")

    @fec_mapping_profile.setter
    def fec_mapping_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_mapping_profile", value)

    @property
    @pulumi.getter(name="fecReceiveTimeout")
    def fec_receive_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fec_receive_timeout")

    @fec_receive_timeout.setter
    def fec_receive_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_receive_timeout", value)

    @property
    @pulumi.getter(name="fecRedundant")
    def fec_redundant(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fec_redundant")

    @fec_redundant.setter
    def fec_redundant(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_redundant", value)

    @property
    @pulumi.getter(name="fecSendTimeout")
    def fec_send_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fec_send_timeout")

    @fec_send_timeout.setter
    def fec_send_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_send_timeout", value)

    @property
    @pulumi.getter(name="fgspSync")
    def fgsp_sync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fgsp_sync")

    @fgsp_sync.setter
    def fgsp_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgsp_sync", value)

    @property
    @pulumi.getter(name="forticlientEnforcement")
    def forticlient_enforcement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_enforcement")

    @forticlient_enforcement.setter
    def forticlient_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_enforcement", value)

    @property
    @pulumi.getter
    def fragmentation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fragmentation")

    @fragmentation.setter
    def fragmentation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fragmentation", value)

    @property
    @pulumi.getter(name="fragmentationMtu")
    def fragmentation_mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fragmentation_mtu")

    @fragmentation_mtu.setter
    def fragmentation_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fragmentation_mtu", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupAuthentication")
    def group_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_authentication")

    @group_authentication.setter
    def group_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_authentication", value)

    @property
    @pulumi.getter(name="groupAuthenticationSecret")
    def group_authentication_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_authentication_secret")

    @group_authentication_secret.setter
    def group_authentication_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_authentication_secret", value)

    @property
    @pulumi.getter(name="haSyncEspSeqno")
    def ha_sync_esp_seqno(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ha_sync_esp_seqno")

    @ha_sync_esp_seqno.setter
    def ha_sync_esp_seqno(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_sync_esp_seqno", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter(name="idleTimeoutinterval")
    def idle_timeoutinterval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "idle_timeoutinterval")

    @idle_timeoutinterval.setter
    def idle_timeoutinterval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeoutinterval", value)

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ike_version")

    @ike_version.setter
    def ike_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_version", value)

    @property
    @pulumi.getter(name="inboundDscpCopy")
    def inbound_dscp_copy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inbound_dscp_copy")

    @inbound_dscp_copy.setter
    def inbound_dscp_copy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound_dscp_copy", value)

    @property
    @pulumi.getter(name="includeLocalLan")
    def include_local_lan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "include_local_lan")

    @include_local_lan.setter
    def include_local_lan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_local_lan", value)

    @property
    @pulumi.getter(name="ipDelayInterval")
    def ip_delay_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip_delay_interval")

    @ip_delay_interval.setter
    def ip_delay_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_delay_interval", value)

    @property
    @pulumi.getter(name="ipv4DnsServer1")
    def ipv4_dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_dns_server1")

    @ipv4_dns_server1.setter
    def ipv4_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_dns_server1", value)

    @property
    @pulumi.getter(name="ipv4DnsServer2")
    def ipv4_dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_dns_server2")

    @ipv4_dns_server2.setter
    def ipv4_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_dns_server2", value)

    @property
    @pulumi.getter(name="ipv4DnsServer3")
    def ipv4_dns_server3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_dns_server3")

    @ipv4_dns_server3.setter
    def ipv4_dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_dns_server3", value)

    @property
    @pulumi.getter(name="ipv4EndIp")
    def ipv4_end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_end_ip")

    @ipv4_end_ip.setter
    def ipv4_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_end_ip", value)

    @property
    @pulumi.getter(name="ipv4ExcludeRanges")
    def ipv4_exclude_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1Ipv4ExcludeRangeArgs']]]]:
        return pulumi.get(self, "ipv4_exclude_ranges")

    @ipv4_exclude_ranges.setter
    def ipv4_exclude_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1Ipv4ExcludeRangeArgs']]]]):
        pulumi.set(self, "ipv4_exclude_ranges", value)

    @property
    @pulumi.getter(name="ipv4Name")
    def ipv4_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_name")

    @ipv4_name.setter
    def ipv4_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_name", value)

    @property
    @pulumi.getter(name="ipv4Netmask")
    def ipv4_netmask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_netmask")

    @ipv4_netmask.setter
    def ipv4_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_netmask", value)

    @property
    @pulumi.getter(name="ipv4SplitExclude")
    def ipv4_split_exclude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_split_exclude")

    @ipv4_split_exclude.setter
    def ipv4_split_exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_split_exclude", value)

    @property
    @pulumi.getter(name="ipv4SplitInclude")
    def ipv4_split_include(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_split_include")

    @ipv4_split_include.setter
    def ipv4_split_include(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_split_include", value)

    @property
    @pulumi.getter(name="ipv4StartIp")
    def ipv4_start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_start_ip")

    @ipv4_start_ip.setter
    def ipv4_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_start_ip", value)

    @property
    @pulumi.getter(name="ipv4WinsServer1")
    def ipv4_wins_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_wins_server1")

    @ipv4_wins_server1.setter
    def ipv4_wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_wins_server1", value)

    @property
    @pulumi.getter(name="ipv4WinsServer2")
    def ipv4_wins_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_wins_server2")

    @ipv4_wins_server2.setter
    def ipv4_wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_wins_server2", value)

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_dns_server1")

    @ipv6_dns_server1.setter
    def ipv6_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server1", value)

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_dns_server2")

    @ipv6_dns_server2.setter
    def ipv6_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server2", value)

    @property
    @pulumi.getter(name="ipv6DnsServer3")
    def ipv6_dns_server3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_dns_server3")

    @ipv6_dns_server3.setter
    def ipv6_dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server3", value)

    @property
    @pulumi.getter(name="ipv6EndIp")
    def ipv6_end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_end_ip")

    @ipv6_end_ip.setter
    def ipv6_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_end_ip", value)

    @property
    @pulumi.getter(name="ipv6ExcludeRanges")
    def ipv6_exclude_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1Ipv6ExcludeRangeArgs']]]]:
        return pulumi.get(self, "ipv6_exclude_ranges")

    @ipv6_exclude_ranges.setter
    def ipv6_exclude_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1Ipv6ExcludeRangeArgs']]]]):
        pulumi.set(self, "ipv6_exclude_ranges", value)

    @property
    @pulumi.getter(name="ipv6Name")
    def ipv6_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_name")

    @ipv6_name.setter
    def ipv6_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_name", value)

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ipv6_prefix")

    @ipv6_prefix.setter
    def ipv6_prefix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_prefix", value)

    @property
    @pulumi.getter(name="ipv6SplitExclude")
    def ipv6_split_exclude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_split_exclude")

    @ipv6_split_exclude.setter
    def ipv6_split_exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_split_exclude", value)

    @property
    @pulumi.getter(name="ipv6SplitInclude")
    def ipv6_split_include(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_split_include")

    @ipv6_split_include.setter
    def ipv6_split_include(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_split_include", value)

    @property
    @pulumi.getter(name="ipv6StartIp")
    def ipv6_start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_start_ip")

    @ipv6_start_ip.setter
    def ipv6_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_start_ip", value)

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive", value)

    @property
    @pulumi.getter
    def keylife(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keylife")

    @keylife.setter
    def keylife(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keylife", value)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter
    def localid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "localid")

    @localid.setter
    def localid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localid", value)

    @property
    @pulumi.getter(name="localidType")
    def localid_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "localid_type")

    @localid_type.setter
    def localid_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localid_type", value)

    @property
    @pulumi.getter(name="loopbackAsymroute")
    def loopback_asymroute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "loopback_asymroute")

    @loopback_asymroute.setter
    def loopback_asymroute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loopback_asymroute", value)

    @property
    @pulumi.getter(name="meshSelectorType")
    def mesh_selector_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mesh_selector_type")

    @mesh_selector_type.setter
    def mesh_selector_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_selector_type", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="modeCfg")
    def mode_cfg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode_cfg")

    @mode_cfg.setter
    def mode_cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_cfg", value)

    @property
    @pulumi.getter(name="modeCfgAllowClientSelector")
    def mode_cfg_allow_client_selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode_cfg_allow_client_selector")

    @mode_cfg_allow_client_selector.setter
    def mode_cfg_allow_client_selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_cfg_allow_client_selector", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nattraversal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nattraversal")

    @nattraversal.setter
    def nattraversal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nattraversal", value)

    @property
    @pulumi.getter(name="negotiateTimeout")
    def negotiate_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "negotiate_timeout")

    @negotiate_timeout.setter
    def negotiate_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "negotiate_timeout", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="networkOverlay")
    def network_overlay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_overlay")

    @network_overlay.setter
    def network_overlay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_overlay", value)

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "npu_offload")

    @npu_offload.setter
    def npu_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npu_offload", value)

    @property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer", value)

    @property
    @pulumi.getter
    def peergrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peergrp")

    @peergrp.setter
    def peergrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peergrp", value)

    @property
    @pulumi.getter
    def peerid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peerid")

    @peerid.setter
    def peerid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peerid", value)

    @property
    @pulumi.getter
    def peertype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peertype")

    @peertype.setter
    def peertype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peertype", value)

    @property
    @pulumi.getter
    def ppk(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ppk")

    @ppk.setter
    def ppk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk", value)

    @property
    @pulumi.getter(name="ppkIdentity")
    def ppk_identity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ppk_identity")

    @ppk_identity.setter
    def ppk_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_identity", value)

    @property
    @pulumi.getter(name="ppkSecret")
    def ppk_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ppk_secret")

    @ppk_secret.setter
    def ppk_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_secret", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="psksecretRemote")
    def psksecret_remote(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "psksecret_remote")

    @psksecret_remote.setter
    def psksecret_remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret_remote", value)

    @property
    @pulumi.getter
    def reauth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reauth")

    @reauth.setter
    def reauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reauth", value)

    @property
    @pulumi.getter
    def rekey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rekey")

    @rekey.setter
    def rekey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rekey", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="remotegwDdns")
    def remotegw_ddns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remotegw_ddns")

    @remotegw_ddns.setter
    def remotegw_ddns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remotegw_ddns", value)

    @property
    @pulumi.getter(name="rsaSignatureFormat")
    def rsa_signature_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsa_signature_format")

    @rsa_signature_format.setter
    def rsa_signature_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsa_signature_format", value)

    @property
    @pulumi.getter(name="rsaSignatureHashOverride")
    def rsa_signature_hash_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsa_signature_hash_override")

    @rsa_signature_hash_override.setter
    def rsa_signature_hash_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsa_signature_hash_override", value)

    @property
    @pulumi.getter(name="savePassword")
    def save_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "save_password")

    @save_password.setter
    def save_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "save_password", value)

    @property
    @pulumi.getter(name="sendCertChain")
    def send_cert_chain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_cert_chain")

    @send_cert_chain.setter
    def send_cert_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_cert_chain", value)

    @property
    @pulumi.getter(name="signatureHashAlg")
    def signature_hash_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signature_hash_alg")

    @signature_hash_alg.setter
    def signature_hash_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_hash_alg", value)

    @property
    @pulumi.getter(name="splitIncludeService")
    def split_include_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_include_service")

    @split_include_service.setter
    def split_include_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_include_service", value)

    @property
    @pulumi.getter(name="suiteB")
    def suite_b(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suite_b")

    @suite_b.setter
    def suite_b(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suite_b", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="unitySupport")
    def unity_support(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unity_support")

    @unity_support.setter
    def unity_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unity_support", value)

    @property
    @pulumi.getter
    def usrgrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usrgrp")

    @usrgrp.setter
    def usrgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usrgrp", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wizardType")
    def wizard_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wizard_type")

    @wizard_type.setter
    def wizard_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wizard_type", value)

    @property
    @pulumi.getter
    def xauthtype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "xauthtype")

    @xauthtype.setter
    def xauthtype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "xauthtype", value)


@pulumi.input_type
class _VpnIpsecPhase1State:
    def __init__(__self__, *,
                 acct_verify: Optional[pulumi.Input[str]] = None,
                 add_gw_route: Optional[pulumi.Input[str]] = None,
                 add_route: Optional[pulumi.Input[str]] = None,
                 assign_ip: Optional[pulumi.Input[str]] = None,
                 assign_ip_from: Optional[pulumi.Input[str]] = None,
                 authmethod: Optional[pulumi.Input[str]] = None,
                 authmethod_remote: Optional[pulumi.Input[str]] = None,
                 authpasswd: Optional[pulumi.Input[str]] = None,
                 authusr: Optional[pulumi.Input[str]] = None,
                 authusrgrp: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 backup_gateways: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1BackupGatewayArgs']]]] = None,
                 banner: Optional[pulumi.Input[str]] = None,
                 cert_id_validation: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1CertificateArgs']]]] = None,
                 childless_ike: Optional[pulumi.Input[str]] = None,
                 client_auto_negotiate: Optional[pulumi.Input[str]] = None,
                 client_keep_alive: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
                 dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 digital_signature_auth: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dns_mode: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dpd: Optional[pulumi.Input[str]] = None,
                 dpd_retrycount: Optional[pulumi.Input[int]] = None,
                 dpd_retryinterval: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eap: Optional[pulumi.Input[str]] = None,
                 eap_exclude_peergrp: Optional[pulumi.Input[str]] = None,
                 eap_identity: Optional[pulumi.Input[str]] = None,
                 enforce_unique_id: Optional[pulumi.Input[str]] = None,
                 esn: Optional[pulumi.Input[str]] = None,
                 fec_base: Optional[pulumi.Input[int]] = None,
                 fec_codec: Optional[pulumi.Input[int]] = None,
                 fec_codec_string: Optional[pulumi.Input[str]] = None,
                 fec_egress: Optional[pulumi.Input[str]] = None,
                 fec_health_check: Optional[pulumi.Input[str]] = None,
                 fec_ingress: Optional[pulumi.Input[str]] = None,
                 fec_mapping_profile: Optional[pulumi.Input[str]] = None,
                 fec_receive_timeout: Optional[pulumi.Input[int]] = None,
                 fec_redundant: Optional[pulumi.Input[int]] = None,
                 fec_send_timeout: Optional[pulumi.Input[int]] = None,
                 fgsp_sync: Optional[pulumi.Input[str]] = None,
                 forticlient_enforcement: Optional[pulumi.Input[str]] = None,
                 fragmentation: Optional[pulumi.Input[str]] = None,
                 fragmentation_mtu: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_authentication: Optional[pulumi.Input[str]] = None,
                 group_authentication_secret: Optional[pulumi.Input[str]] = None,
                 ha_sync_esp_seqno: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[str]] = None,
                 idle_timeoutinterval: Optional[pulumi.Input[int]] = None,
                 ike_version: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 include_local_lan: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_delay_interval: Optional[pulumi.Input[int]] = None,
                 ipv4_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv4_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1Ipv4ExcludeRangeArgs']]]] = None,
                 ipv4_name: Optional[pulumi.Input[str]] = None,
                 ipv4_netmask: Optional[pulumi.Input[str]] = None,
                 ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv4_split_include: Optional[pulumi.Input[str]] = None,
                 ipv4_start_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv6_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv6_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1Ipv6ExcludeRangeArgs']]]] = None,
                 ipv6_name: Optional[pulumi.Input[str]] = None,
                 ipv6_prefix: Optional[pulumi.Input[int]] = None,
                 ipv6_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv6_split_include: Optional[pulumi.Input[str]] = None,
                 ipv6_start_ip: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[int]] = None,
                 keylife: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 localid: Optional[pulumi.Input[str]] = None,
                 localid_type: Optional[pulumi.Input[str]] = None,
                 loopback_asymroute: Optional[pulumi.Input[str]] = None,
                 mesh_selector_type: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mode_cfg: Optional[pulumi.Input[str]] = None,
                 mode_cfg_allow_client_selector: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nattraversal: Optional[pulumi.Input[str]] = None,
                 negotiate_timeout: Optional[pulumi.Input[int]] = None,
                 network_id: Optional[pulumi.Input[int]] = None,
                 network_overlay: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 peergrp: Optional[pulumi.Input[str]] = None,
                 peerid: Optional[pulumi.Input[str]] = None,
                 peertype: Optional[pulumi.Input[str]] = None,
                 ppk: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 psksecret_remote: Optional[pulumi.Input[str]] = None,
                 reauth: Optional[pulumi.Input[str]] = None,
                 rekey: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remotegw_ddns: Optional[pulumi.Input[str]] = None,
                 rsa_signature_format: Optional[pulumi.Input[str]] = None,
                 rsa_signature_hash_override: Optional[pulumi.Input[str]] = None,
                 save_password: Optional[pulumi.Input[str]] = None,
                 send_cert_chain: Optional[pulumi.Input[str]] = None,
                 signature_hash_alg: Optional[pulumi.Input[str]] = None,
                 split_include_service: Optional[pulumi.Input[str]] = None,
                 suite_b: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unity_support: Optional[pulumi.Input[str]] = None,
                 usrgrp: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wizard_type: Optional[pulumi.Input[str]] = None,
                 xauthtype: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VpnIpsecPhase1 resources.
        """
        if acct_verify is not None:
            pulumi.set(__self__, "acct_verify", acct_verify)
        if add_gw_route is not None:
            pulumi.set(__self__, "add_gw_route", add_gw_route)
        if add_route is not None:
            pulumi.set(__self__, "add_route", add_route)
        if assign_ip is not None:
            pulumi.set(__self__, "assign_ip", assign_ip)
        if assign_ip_from is not None:
            pulumi.set(__self__, "assign_ip_from", assign_ip_from)
        if authmethod is not None:
            pulumi.set(__self__, "authmethod", authmethod)
        if authmethod_remote is not None:
            pulumi.set(__self__, "authmethod_remote", authmethod_remote)
        if authpasswd is not None:
            pulumi.set(__self__, "authpasswd", authpasswd)
        if authusr is not None:
            pulumi.set(__self__, "authusr", authusr)
        if authusrgrp is not None:
            pulumi.set(__self__, "authusrgrp", authusrgrp)
        if auto_negotiate is not None:
            pulumi.set(__self__, "auto_negotiate", auto_negotiate)
        if backup_gateways is not None:
            pulumi.set(__self__, "backup_gateways", backup_gateways)
        if banner is not None:
            pulumi.set(__self__, "banner", banner)
        if cert_id_validation is not None:
            pulumi.set(__self__, "cert_id_validation", cert_id_validation)
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if childless_ike is not None:
            pulumi.set(__self__, "childless_ike", childless_ike)
        if client_auto_negotiate is not None:
            pulumi.set(__self__, "client_auto_negotiate", client_auto_negotiate)
        if client_keep_alive is not None:
            pulumi.set(__self__, "client_keep_alive", client_keep_alive)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dhcp6_ra_linkaddr is not None:
            pulumi.set(__self__, "dhcp6_ra_linkaddr", dhcp6_ra_linkaddr)
        if dhcp_ra_giaddr is not None:
            pulumi.set(__self__, "dhcp_ra_giaddr", dhcp_ra_giaddr)
        if dhgrp is not None:
            pulumi.set(__self__, "dhgrp", dhgrp)
        if digital_signature_auth is not None:
            pulumi.set(__self__, "digital_signature_auth", digital_signature_auth)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dns_mode is not None:
            pulumi.set(__self__, "dns_mode", dns_mode)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dpd is not None:
            pulumi.set(__self__, "dpd", dpd)
        if dpd_retrycount is not None:
            pulumi.set(__self__, "dpd_retrycount", dpd_retrycount)
        if dpd_retryinterval is not None:
            pulumi.set(__self__, "dpd_retryinterval", dpd_retryinterval)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if eap is not None:
            pulumi.set(__self__, "eap", eap)
        if eap_exclude_peergrp is not None:
            pulumi.set(__self__, "eap_exclude_peergrp", eap_exclude_peergrp)
        if eap_identity is not None:
            pulumi.set(__self__, "eap_identity", eap_identity)
        if enforce_unique_id is not None:
            pulumi.set(__self__, "enforce_unique_id", enforce_unique_id)
        if esn is not None:
            pulumi.set(__self__, "esn", esn)
        if fec_base is not None:
            pulumi.set(__self__, "fec_base", fec_base)
        if fec_codec is not None:
            pulumi.set(__self__, "fec_codec", fec_codec)
        if fec_codec_string is not None:
            pulumi.set(__self__, "fec_codec_string", fec_codec_string)
        if fec_egress is not None:
            pulumi.set(__self__, "fec_egress", fec_egress)
        if fec_health_check is not None:
            pulumi.set(__self__, "fec_health_check", fec_health_check)
        if fec_ingress is not None:
            pulumi.set(__self__, "fec_ingress", fec_ingress)
        if fec_mapping_profile is not None:
            pulumi.set(__self__, "fec_mapping_profile", fec_mapping_profile)
        if fec_receive_timeout is not None:
            pulumi.set(__self__, "fec_receive_timeout", fec_receive_timeout)
        if fec_redundant is not None:
            pulumi.set(__self__, "fec_redundant", fec_redundant)
        if fec_send_timeout is not None:
            pulumi.set(__self__, "fec_send_timeout", fec_send_timeout)
        if fgsp_sync is not None:
            pulumi.set(__self__, "fgsp_sync", fgsp_sync)
        if forticlient_enforcement is not None:
            pulumi.set(__self__, "forticlient_enforcement", forticlient_enforcement)
        if fragmentation is not None:
            pulumi.set(__self__, "fragmentation", fragmentation)
        if fragmentation_mtu is not None:
            pulumi.set(__self__, "fragmentation_mtu", fragmentation_mtu)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_authentication is not None:
            pulumi.set(__self__, "group_authentication", group_authentication)
        if group_authentication_secret is not None:
            pulumi.set(__self__, "group_authentication_secret", group_authentication_secret)
        if ha_sync_esp_seqno is not None:
            pulumi.set(__self__, "ha_sync_esp_seqno", ha_sync_esp_seqno)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if idle_timeoutinterval is not None:
            pulumi.set(__self__, "idle_timeoutinterval", idle_timeoutinterval)
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if inbound_dscp_copy is not None:
            pulumi.set(__self__, "inbound_dscp_copy", inbound_dscp_copy)
        if include_local_lan is not None:
            pulumi.set(__self__, "include_local_lan", include_local_lan)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip_delay_interval is not None:
            pulumi.set(__self__, "ip_delay_interval", ip_delay_interval)
        if ipv4_dns_server1 is not None:
            pulumi.set(__self__, "ipv4_dns_server1", ipv4_dns_server1)
        if ipv4_dns_server2 is not None:
            pulumi.set(__self__, "ipv4_dns_server2", ipv4_dns_server2)
        if ipv4_dns_server3 is not None:
            pulumi.set(__self__, "ipv4_dns_server3", ipv4_dns_server3)
        if ipv4_end_ip is not None:
            pulumi.set(__self__, "ipv4_end_ip", ipv4_end_ip)
        if ipv4_exclude_ranges is not None:
            pulumi.set(__self__, "ipv4_exclude_ranges", ipv4_exclude_ranges)
        if ipv4_name is not None:
            pulumi.set(__self__, "ipv4_name", ipv4_name)
        if ipv4_netmask is not None:
            pulumi.set(__self__, "ipv4_netmask", ipv4_netmask)
        if ipv4_split_exclude is not None:
            pulumi.set(__self__, "ipv4_split_exclude", ipv4_split_exclude)
        if ipv4_split_include is not None:
            pulumi.set(__self__, "ipv4_split_include", ipv4_split_include)
        if ipv4_start_ip is not None:
            pulumi.set(__self__, "ipv4_start_ip", ipv4_start_ip)
        if ipv4_wins_server1 is not None:
            pulumi.set(__self__, "ipv4_wins_server1", ipv4_wins_server1)
        if ipv4_wins_server2 is not None:
            pulumi.set(__self__, "ipv4_wins_server2", ipv4_wins_server2)
        if ipv6_dns_server1 is not None:
            pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 is not None:
            pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)
        if ipv6_dns_server3 is not None:
            pulumi.set(__self__, "ipv6_dns_server3", ipv6_dns_server3)
        if ipv6_end_ip is not None:
            pulumi.set(__self__, "ipv6_end_ip", ipv6_end_ip)
        if ipv6_exclude_ranges is not None:
            pulumi.set(__self__, "ipv6_exclude_ranges", ipv6_exclude_ranges)
        if ipv6_name is not None:
            pulumi.set(__self__, "ipv6_name", ipv6_name)
        if ipv6_prefix is not None:
            pulumi.set(__self__, "ipv6_prefix", ipv6_prefix)
        if ipv6_split_exclude is not None:
            pulumi.set(__self__, "ipv6_split_exclude", ipv6_split_exclude)
        if ipv6_split_include is not None:
            pulumi.set(__self__, "ipv6_split_include", ipv6_split_include)
        if ipv6_start_ip is not None:
            pulumi.set(__self__, "ipv6_start_ip", ipv6_start_ip)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if keylife is not None:
            pulumi.set(__self__, "keylife", keylife)
        if local_gw is not None:
            pulumi.set(__self__, "local_gw", local_gw)
        if localid is not None:
            pulumi.set(__self__, "localid", localid)
        if localid_type is not None:
            pulumi.set(__self__, "localid_type", localid_type)
        if loopback_asymroute is not None:
            pulumi.set(__self__, "loopback_asymroute", loopback_asymroute)
        if mesh_selector_type is not None:
            pulumi.set(__self__, "mesh_selector_type", mesh_selector_type)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mode_cfg is not None:
            pulumi.set(__self__, "mode_cfg", mode_cfg)
        if mode_cfg_allow_client_selector is not None:
            pulumi.set(__self__, "mode_cfg_allow_client_selector", mode_cfg_allow_client_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nattraversal is not None:
            pulumi.set(__self__, "nattraversal", nattraversal)
        if negotiate_timeout is not None:
            pulumi.set(__self__, "negotiate_timeout", negotiate_timeout)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if network_overlay is not None:
            pulumi.set(__self__, "network_overlay", network_overlay)
        if npu_offload is not None:
            pulumi.set(__self__, "npu_offload", npu_offload)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if peergrp is not None:
            pulumi.set(__self__, "peergrp", peergrp)
        if peerid is not None:
            pulumi.set(__self__, "peerid", peerid)
        if peertype is not None:
            pulumi.set(__self__, "peertype", peertype)
        if ppk is not None:
            pulumi.set(__self__, "ppk", ppk)
        if ppk_identity is not None:
            pulumi.set(__self__, "ppk_identity", ppk_identity)
        if ppk_secret is not None:
            pulumi.set(__self__, "ppk_secret", ppk_secret)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if proposal is not None:
            pulumi.set(__self__, "proposal", proposal)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if psksecret_remote is not None:
            pulumi.set(__self__, "psksecret_remote", psksecret_remote)
        if reauth is not None:
            pulumi.set(__self__, "reauth", reauth)
        if rekey is not None:
            pulumi.set(__self__, "rekey", rekey)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if remotegw_ddns is not None:
            pulumi.set(__self__, "remotegw_ddns", remotegw_ddns)
        if rsa_signature_format is not None:
            pulumi.set(__self__, "rsa_signature_format", rsa_signature_format)
        if rsa_signature_hash_override is not None:
            pulumi.set(__self__, "rsa_signature_hash_override", rsa_signature_hash_override)
        if save_password is not None:
            pulumi.set(__self__, "save_password", save_password)
        if send_cert_chain is not None:
            pulumi.set(__self__, "send_cert_chain", send_cert_chain)
        if signature_hash_alg is not None:
            pulumi.set(__self__, "signature_hash_alg", signature_hash_alg)
        if split_include_service is not None:
            pulumi.set(__self__, "split_include_service", split_include_service)
        if suite_b is not None:
            pulumi.set(__self__, "suite_b", suite_b)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unity_support is not None:
            pulumi.set(__self__, "unity_support", unity_support)
        if usrgrp is not None:
            pulumi.set(__self__, "usrgrp", usrgrp)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wizard_type is not None:
            pulumi.set(__self__, "wizard_type", wizard_type)
        if xauthtype is not None:
            pulumi.set(__self__, "xauthtype", xauthtype)

    @property
    @pulumi.getter(name="acctVerify")
    def acct_verify(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acct_verify")

    @acct_verify.setter
    def acct_verify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acct_verify", value)

    @property
    @pulumi.getter(name="addGwRoute")
    def add_gw_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "add_gw_route")

    @add_gw_route.setter
    def add_gw_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_gw_route", value)

    @property
    @pulumi.getter(name="addRoute")
    def add_route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "add_route")

    @add_route.setter
    def add_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_route", value)

    @property
    @pulumi.getter(name="assignIp")
    def assign_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assign_ip")

    @assign_ip.setter
    def assign_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_ip", value)

    @property
    @pulumi.getter(name="assignIpFrom")
    def assign_ip_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assign_ip_from")

    @assign_ip_from.setter
    def assign_ip_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_ip_from", value)

    @property
    @pulumi.getter
    def authmethod(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authmethod")

    @authmethod.setter
    def authmethod(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authmethod", value)

    @property
    @pulumi.getter(name="authmethodRemote")
    def authmethod_remote(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authmethod_remote")

    @authmethod_remote.setter
    def authmethod_remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authmethod_remote", value)

    @property
    @pulumi.getter
    def authpasswd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authpasswd")

    @authpasswd.setter
    def authpasswd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authpasswd", value)

    @property
    @pulumi.getter
    def authusr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authusr")

    @authusr.setter
    def authusr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authusr", value)

    @property
    @pulumi.getter
    def authusrgrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authusrgrp")

    @authusrgrp.setter
    def authusrgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authusrgrp", value)

    @property
    @pulumi.getter(name="autoNegotiate")
    def auto_negotiate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_negotiate")

    @auto_negotiate.setter
    def auto_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_negotiate", value)

    @property
    @pulumi.getter(name="backupGateways")
    def backup_gateways(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1BackupGatewayArgs']]]]:
        return pulumi.get(self, "backup_gateways")

    @backup_gateways.setter
    def backup_gateways(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1BackupGatewayArgs']]]]):
        pulumi.set(self, "backup_gateways", value)

    @property
    @pulumi.getter
    def banner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "banner")

    @banner.setter
    def banner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "banner", value)

    @property
    @pulumi.getter(name="certIdValidation")
    def cert_id_validation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_id_validation")

    @cert_id_validation.setter
    def cert_id_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_id_validation", value)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1CertificateArgs']]]]:
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1CertificateArgs']]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter(name="childlessIke")
    def childless_ike(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "childless_ike")

    @childless_ike.setter
    def childless_ike(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "childless_ike", value)

    @property
    @pulumi.getter(name="clientAutoNegotiate")
    def client_auto_negotiate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_auto_negotiate")

    @client_auto_negotiate.setter
    def client_auto_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_auto_negotiate", value)

    @property
    @pulumi.getter(name="clientKeepAlive")
    def client_keep_alive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_keep_alive")

    @client_keep_alive.setter
    def client_keep_alive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_keep_alive", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dhcp6RaLinkaddr")
    def dhcp6_ra_linkaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp6_ra_linkaddr")

    @dhcp6_ra_linkaddr.setter
    def dhcp6_ra_linkaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_ra_linkaddr", value)

    @property
    @pulumi.getter(name="dhcpRaGiaddr")
    def dhcp_ra_giaddr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhcp_ra_giaddr")

    @dhcp_ra_giaddr.setter
    def dhcp_ra_giaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ra_giaddr", value)

    @property
    @pulumi.getter
    def dhgrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dhgrp")

    @dhgrp.setter
    def dhgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhgrp", value)

    @property
    @pulumi.getter(name="digitalSignatureAuth")
    def digital_signature_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "digital_signature_auth")

    @digital_signature_auth.setter
    def digital_signature_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digital_signature_auth", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="dnsMode")
    def dns_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_mode")

    @dns_mode.setter
    def dns_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_mode", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def dpd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dpd")

    @dpd.setter
    def dpd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpd", value)

    @property
    @pulumi.getter(name="dpdRetrycount")
    def dpd_retrycount(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dpd_retrycount")

    @dpd_retrycount.setter
    def dpd_retrycount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dpd_retrycount", value)

    @property
    @pulumi.getter(name="dpdRetryinterval")
    def dpd_retryinterval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dpd_retryinterval")

    @dpd_retryinterval.setter
    def dpd_retryinterval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpd_retryinterval", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def eap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eap")

    @eap.setter
    def eap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap", value)

    @property
    @pulumi.getter(name="eapExcludePeergrp")
    def eap_exclude_peergrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eap_exclude_peergrp")

    @eap_exclude_peergrp.setter
    def eap_exclude_peergrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_exclude_peergrp", value)

    @property
    @pulumi.getter(name="eapIdentity")
    def eap_identity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eap_identity")

    @eap_identity.setter
    def eap_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_identity", value)

    @property
    @pulumi.getter(name="enforceUniqueId")
    def enforce_unique_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enforce_unique_id")

    @enforce_unique_id.setter
    def enforce_unique_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_unique_id", value)

    @property
    @pulumi.getter
    def esn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "esn")

    @esn.setter
    def esn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "esn", value)

    @property
    @pulumi.getter(name="fecBase")
    def fec_base(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fec_base")

    @fec_base.setter
    def fec_base(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_base", value)

    @property
    @pulumi.getter(name="fecCodec")
    def fec_codec(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fec_codec")

    @fec_codec.setter
    def fec_codec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_codec", value)

    @property
    @pulumi.getter(name="fecCodecString")
    def fec_codec_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec_codec_string")

    @fec_codec_string.setter
    def fec_codec_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_codec_string", value)

    @property
    @pulumi.getter(name="fecEgress")
    def fec_egress(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec_egress")

    @fec_egress.setter
    def fec_egress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_egress", value)

    @property
    @pulumi.getter(name="fecHealthCheck")
    def fec_health_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec_health_check")

    @fec_health_check.setter
    def fec_health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_health_check", value)

    @property
    @pulumi.getter(name="fecIngress")
    def fec_ingress(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec_ingress")

    @fec_ingress.setter
    def fec_ingress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_ingress", value)

    @property
    @pulumi.getter(name="fecMappingProfile")
    def fec_mapping_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fec_mapping_profile")

    @fec_mapping_profile.setter
    def fec_mapping_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_mapping_profile", value)

    @property
    @pulumi.getter(name="fecReceiveTimeout")
    def fec_receive_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fec_receive_timeout")

    @fec_receive_timeout.setter
    def fec_receive_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_receive_timeout", value)

    @property
    @pulumi.getter(name="fecRedundant")
    def fec_redundant(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fec_redundant")

    @fec_redundant.setter
    def fec_redundant(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_redundant", value)

    @property
    @pulumi.getter(name="fecSendTimeout")
    def fec_send_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fec_send_timeout")

    @fec_send_timeout.setter
    def fec_send_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_send_timeout", value)

    @property
    @pulumi.getter(name="fgspSync")
    def fgsp_sync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fgsp_sync")

    @fgsp_sync.setter
    def fgsp_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgsp_sync", value)

    @property
    @pulumi.getter(name="forticlientEnforcement")
    def forticlient_enforcement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "forticlient_enforcement")

    @forticlient_enforcement.setter
    def forticlient_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_enforcement", value)

    @property
    @pulumi.getter
    def fragmentation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fragmentation")

    @fragmentation.setter
    def fragmentation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fragmentation", value)

    @property
    @pulumi.getter(name="fragmentationMtu")
    def fragmentation_mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fragmentation_mtu")

    @fragmentation_mtu.setter
    def fragmentation_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fragmentation_mtu", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupAuthentication")
    def group_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_authentication")

    @group_authentication.setter
    def group_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_authentication", value)

    @property
    @pulumi.getter(name="groupAuthenticationSecret")
    def group_authentication_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_authentication_secret")

    @group_authentication_secret.setter
    def group_authentication_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_authentication_secret", value)

    @property
    @pulumi.getter(name="haSyncEspSeqno")
    def ha_sync_esp_seqno(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ha_sync_esp_seqno")

    @ha_sync_esp_seqno.setter
    def ha_sync_esp_seqno(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_sync_esp_seqno", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter(name="idleTimeoutinterval")
    def idle_timeoutinterval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "idle_timeoutinterval")

    @idle_timeoutinterval.setter
    def idle_timeoutinterval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeoutinterval", value)

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ike_version")

    @ike_version.setter
    def ike_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_version", value)

    @property
    @pulumi.getter(name="inboundDscpCopy")
    def inbound_dscp_copy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inbound_dscp_copy")

    @inbound_dscp_copy.setter
    def inbound_dscp_copy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound_dscp_copy", value)

    @property
    @pulumi.getter(name="includeLocalLan")
    def include_local_lan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "include_local_lan")

    @include_local_lan.setter
    def include_local_lan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_local_lan", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipDelayInterval")
    def ip_delay_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip_delay_interval")

    @ip_delay_interval.setter
    def ip_delay_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_delay_interval", value)

    @property
    @pulumi.getter(name="ipv4DnsServer1")
    def ipv4_dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_dns_server1")

    @ipv4_dns_server1.setter
    def ipv4_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_dns_server1", value)

    @property
    @pulumi.getter(name="ipv4DnsServer2")
    def ipv4_dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_dns_server2")

    @ipv4_dns_server2.setter
    def ipv4_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_dns_server2", value)

    @property
    @pulumi.getter(name="ipv4DnsServer3")
    def ipv4_dns_server3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_dns_server3")

    @ipv4_dns_server3.setter
    def ipv4_dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_dns_server3", value)

    @property
    @pulumi.getter(name="ipv4EndIp")
    def ipv4_end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_end_ip")

    @ipv4_end_ip.setter
    def ipv4_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_end_ip", value)

    @property
    @pulumi.getter(name="ipv4ExcludeRanges")
    def ipv4_exclude_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1Ipv4ExcludeRangeArgs']]]]:
        return pulumi.get(self, "ipv4_exclude_ranges")

    @ipv4_exclude_ranges.setter
    def ipv4_exclude_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1Ipv4ExcludeRangeArgs']]]]):
        pulumi.set(self, "ipv4_exclude_ranges", value)

    @property
    @pulumi.getter(name="ipv4Name")
    def ipv4_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_name")

    @ipv4_name.setter
    def ipv4_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_name", value)

    @property
    @pulumi.getter(name="ipv4Netmask")
    def ipv4_netmask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_netmask")

    @ipv4_netmask.setter
    def ipv4_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_netmask", value)

    @property
    @pulumi.getter(name="ipv4SplitExclude")
    def ipv4_split_exclude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_split_exclude")

    @ipv4_split_exclude.setter
    def ipv4_split_exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_split_exclude", value)

    @property
    @pulumi.getter(name="ipv4SplitInclude")
    def ipv4_split_include(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_split_include")

    @ipv4_split_include.setter
    def ipv4_split_include(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_split_include", value)

    @property
    @pulumi.getter(name="ipv4StartIp")
    def ipv4_start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_start_ip")

    @ipv4_start_ip.setter
    def ipv4_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_start_ip", value)

    @property
    @pulumi.getter(name="ipv4WinsServer1")
    def ipv4_wins_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_wins_server1")

    @ipv4_wins_server1.setter
    def ipv4_wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_wins_server1", value)

    @property
    @pulumi.getter(name="ipv4WinsServer2")
    def ipv4_wins_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_wins_server2")

    @ipv4_wins_server2.setter
    def ipv4_wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_wins_server2", value)

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_dns_server1")

    @ipv6_dns_server1.setter
    def ipv6_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server1", value)

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_dns_server2")

    @ipv6_dns_server2.setter
    def ipv6_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server2", value)

    @property
    @pulumi.getter(name="ipv6DnsServer3")
    def ipv6_dns_server3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_dns_server3")

    @ipv6_dns_server3.setter
    def ipv6_dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server3", value)

    @property
    @pulumi.getter(name="ipv6EndIp")
    def ipv6_end_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_end_ip")

    @ipv6_end_ip.setter
    def ipv6_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_end_ip", value)

    @property
    @pulumi.getter(name="ipv6ExcludeRanges")
    def ipv6_exclude_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1Ipv6ExcludeRangeArgs']]]]:
        return pulumi.get(self, "ipv6_exclude_ranges")

    @ipv6_exclude_ranges.setter
    def ipv6_exclude_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnIpsecPhase1Ipv6ExcludeRangeArgs']]]]):
        pulumi.set(self, "ipv6_exclude_ranges", value)

    @property
    @pulumi.getter(name="ipv6Name")
    def ipv6_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_name")

    @ipv6_name.setter
    def ipv6_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_name", value)

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ipv6_prefix")

    @ipv6_prefix.setter
    def ipv6_prefix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_prefix", value)

    @property
    @pulumi.getter(name="ipv6SplitExclude")
    def ipv6_split_exclude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_split_exclude")

    @ipv6_split_exclude.setter
    def ipv6_split_exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_split_exclude", value)

    @property
    @pulumi.getter(name="ipv6SplitInclude")
    def ipv6_split_include(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_split_include")

    @ipv6_split_include.setter
    def ipv6_split_include(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_split_include", value)

    @property
    @pulumi.getter(name="ipv6StartIp")
    def ipv6_start_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_start_ip")

    @ipv6_start_ip.setter
    def ipv6_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_start_ip", value)

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive", value)

    @property
    @pulumi.getter
    def keylife(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keylife")

    @keylife.setter
    def keylife(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keylife", value)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter
    def localid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "localid")

    @localid.setter
    def localid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localid", value)

    @property
    @pulumi.getter(name="localidType")
    def localid_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "localid_type")

    @localid_type.setter
    def localid_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localid_type", value)

    @property
    @pulumi.getter(name="loopbackAsymroute")
    def loopback_asymroute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "loopback_asymroute")

    @loopback_asymroute.setter
    def loopback_asymroute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loopback_asymroute", value)

    @property
    @pulumi.getter(name="meshSelectorType")
    def mesh_selector_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mesh_selector_type")

    @mesh_selector_type.setter
    def mesh_selector_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_selector_type", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="modeCfg")
    def mode_cfg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode_cfg")

    @mode_cfg.setter
    def mode_cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_cfg", value)

    @property
    @pulumi.getter(name="modeCfgAllowClientSelector")
    def mode_cfg_allow_client_selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode_cfg_allow_client_selector")

    @mode_cfg_allow_client_selector.setter
    def mode_cfg_allow_client_selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_cfg_allow_client_selector", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nattraversal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nattraversal")

    @nattraversal.setter
    def nattraversal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nattraversal", value)

    @property
    @pulumi.getter(name="negotiateTimeout")
    def negotiate_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "negotiate_timeout")

    @negotiate_timeout.setter
    def negotiate_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "negotiate_timeout", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="networkOverlay")
    def network_overlay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_overlay")

    @network_overlay.setter
    def network_overlay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_overlay", value)

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "npu_offload")

    @npu_offload.setter
    def npu_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npu_offload", value)

    @property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer", value)

    @property
    @pulumi.getter
    def peergrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peergrp")

    @peergrp.setter
    def peergrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peergrp", value)

    @property
    @pulumi.getter
    def peerid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peerid")

    @peerid.setter
    def peerid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peerid", value)

    @property
    @pulumi.getter
    def peertype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peertype")

    @peertype.setter
    def peertype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peertype", value)

    @property
    @pulumi.getter
    def ppk(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ppk")

    @ppk.setter
    def ppk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk", value)

    @property
    @pulumi.getter(name="ppkIdentity")
    def ppk_identity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ppk_identity")

    @ppk_identity.setter
    def ppk_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_identity", value)

    @property
    @pulumi.getter(name="ppkSecret")
    def ppk_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ppk_secret")

    @ppk_secret.setter
    def ppk_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_secret", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def proposal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proposal")

    @proposal.setter
    def proposal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proposal", value)

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter(name="psksecretRemote")
    def psksecret_remote(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "psksecret_remote")

    @psksecret_remote.setter
    def psksecret_remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret_remote", value)

    @property
    @pulumi.getter
    def reauth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reauth")

    @reauth.setter
    def reauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reauth", value)

    @property
    @pulumi.getter
    def rekey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rekey")

    @rekey.setter
    def rekey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rekey", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="remotegwDdns")
    def remotegw_ddns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remotegw_ddns")

    @remotegw_ddns.setter
    def remotegw_ddns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remotegw_ddns", value)

    @property
    @pulumi.getter(name="rsaSignatureFormat")
    def rsa_signature_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsa_signature_format")

    @rsa_signature_format.setter
    def rsa_signature_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsa_signature_format", value)

    @property
    @pulumi.getter(name="rsaSignatureHashOverride")
    def rsa_signature_hash_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rsa_signature_hash_override")

    @rsa_signature_hash_override.setter
    def rsa_signature_hash_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsa_signature_hash_override", value)

    @property
    @pulumi.getter(name="savePassword")
    def save_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "save_password")

    @save_password.setter
    def save_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "save_password", value)

    @property
    @pulumi.getter(name="sendCertChain")
    def send_cert_chain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_cert_chain")

    @send_cert_chain.setter
    def send_cert_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_cert_chain", value)

    @property
    @pulumi.getter(name="signatureHashAlg")
    def signature_hash_alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signature_hash_alg")

    @signature_hash_alg.setter
    def signature_hash_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_hash_alg", value)

    @property
    @pulumi.getter(name="splitIncludeService")
    def split_include_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_include_service")

    @split_include_service.setter
    def split_include_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_include_service", value)

    @property
    @pulumi.getter(name="suiteB")
    def suite_b(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suite_b")

    @suite_b.setter
    def suite_b(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suite_b", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="unitySupport")
    def unity_support(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unity_support")

    @unity_support.setter
    def unity_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unity_support", value)

    @property
    @pulumi.getter
    def usrgrp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usrgrp")

    @usrgrp.setter
    def usrgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usrgrp", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wizardType")
    def wizard_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wizard_type")

    @wizard_type.setter
    def wizard_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wizard_type", value)

    @property
    @pulumi.getter
    def xauthtype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "xauthtype")

    @xauthtype.setter
    def xauthtype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "xauthtype", value)


class VpnIpsecPhase1(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acct_verify: Optional[pulumi.Input[str]] = None,
                 add_gw_route: Optional[pulumi.Input[str]] = None,
                 add_route: Optional[pulumi.Input[str]] = None,
                 assign_ip: Optional[pulumi.Input[str]] = None,
                 assign_ip_from: Optional[pulumi.Input[str]] = None,
                 authmethod: Optional[pulumi.Input[str]] = None,
                 authmethod_remote: Optional[pulumi.Input[str]] = None,
                 authpasswd: Optional[pulumi.Input[str]] = None,
                 authusr: Optional[pulumi.Input[str]] = None,
                 authusrgrp: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 backup_gateways: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnIpsecPhase1BackupGatewayArgs']]]]] = None,
                 banner: Optional[pulumi.Input[str]] = None,
                 cert_id_validation: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnIpsecPhase1CertificateArgs']]]]] = None,
                 childless_ike: Optional[pulumi.Input[str]] = None,
                 client_auto_negotiate: Optional[pulumi.Input[str]] = None,
                 client_keep_alive: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
                 dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 digital_signature_auth: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dns_mode: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dpd: Optional[pulumi.Input[str]] = None,
                 dpd_retrycount: Optional[pulumi.Input[int]] = None,
                 dpd_retryinterval: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eap: Optional[pulumi.Input[str]] = None,
                 eap_exclude_peergrp: Optional[pulumi.Input[str]] = None,
                 eap_identity: Optional[pulumi.Input[str]] = None,
                 enforce_unique_id: Optional[pulumi.Input[str]] = None,
                 esn: Optional[pulumi.Input[str]] = None,
                 fec_base: Optional[pulumi.Input[int]] = None,
                 fec_codec: Optional[pulumi.Input[int]] = None,
                 fec_codec_string: Optional[pulumi.Input[str]] = None,
                 fec_egress: Optional[pulumi.Input[str]] = None,
                 fec_health_check: Optional[pulumi.Input[str]] = None,
                 fec_ingress: Optional[pulumi.Input[str]] = None,
                 fec_mapping_profile: Optional[pulumi.Input[str]] = None,
                 fec_receive_timeout: Optional[pulumi.Input[int]] = None,
                 fec_redundant: Optional[pulumi.Input[int]] = None,
                 fec_send_timeout: Optional[pulumi.Input[int]] = None,
                 fgsp_sync: Optional[pulumi.Input[str]] = None,
                 forticlient_enforcement: Optional[pulumi.Input[str]] = None,
                 fragmentation: Optional[pulumi.Input[str]] = None,
                 fragmentation_mtu: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_authentication: Optional[pulumi.Input[str]] = None,
                 group_authentication_secret: Optional[pulumi.Input[str]] = None,
                 ha_sync_esp_seqno: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[str]] = None,
                 idle_timeoutinterval: Optional[pulumi.Input[int]] = None,
                 ike_version: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 include_local_lan: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_delay_interval: Optional[pulumi.Input[int]] = None,
                 ipv4_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv4_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnIpsecPhase1Ipv4ExcludeRangeArgs']]]]] = None,
                 ipv4_name: Optional[pulumi.Input[str]] = None,
                 ipv4_netmask: Optional[pulumi.Input[str]] = None,
                 ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv4_split_include: Optional[pulumi.Input[str]] = None,
                 ipv4_start_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv6_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv6_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnIpsecPhase1Ipv6ExcludeRangeArgs']]]]] = None,
                 ipv6_name: Optional[pulumi.Input[str]] = None,
                 ipv6_prefix: Optional[pulumi.Input[int]] = None,
                 ipv6_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv6_split_include: Optional[pulumi.Input[str]] = None,
                 ipv6_start_ip: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[int]] = None,
                 keylife: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 localid: Optional[pulumi.Input[str]] = None,
                 localid_type: Optional[pulumi.Input[str]] = None,
                 loopback_asymroute: Optional[pulumi.Input[str]] = None,
                 mesh_selector_type: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mode_cfg: Optional[pulumi.Input[str]] = None,
                 mode_cfg_allow_client_selector: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nattraversal: Optional[pulumi.Input[str]] = None,
                 negotiate_timeout: Optional[pulumi.Input[int]] = None,
                 network_id: Optional[pulumi.Input[int]] = None,
                 network_overlay: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 peergrp: Optional[pulumi.Input[str]] = None,
                 peerid: Optional[pulumi.Input[str]] = None,
                 peertype: Optional[pulumi.Input[str]] = None,
                 ppk: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 psksecret_remote: Optional[pulumi.Input[str]] = None,
                 reauth: Optional[pulumi.Input[str]] = None,
                 rekey: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remotegw_ddns: Optional[pulumi.Input[str]] = None,
                 rsa_signature_format: Optional[pulumi.Input[str]] = None,
                 rsa_signature_hash_override: Optional[pulumi.Input[str]] = None,
                 save_password: Optional[pulumi.Input[str]] = None,
                 send_cert_chain: Optional[pulumi.Input[str]] = None,
                 signature_hash_alg: Optional[pulumi.Input[str]] = None,
                 split_include_service: Optional[pulumi.Input[str]] = None,
                 suite_b: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unity_support: Optional[pulumi.Input[str]] = None,
                 usrgrp: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wizard_type: Optional[pulumi.Input[str]] = None,
                 xauthtype: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VpnIpsecPhase1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpnIpsecPhase1Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VpnIpsecPhase1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpnIpsecPhase1Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpnIpsecPhase1Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acct_verify: Optional[pulumi.Input[str]] = None,
                 add_gw_route: Optional[pulumi.Input[str]] = None,
                 add_route: Optional[pulumi.Input[str]] = None,
                 assign_ip: Optional[pulumi.Input[str]] = None,
                 assign_ip_from: Optional[pulumi.Input[str]] = None,
                 authmethod: Optional[pulumi.Input[str]] = None,
                 authmethod_remote: Optional[pulumi.Input[str]] = None,
                 authpasswd: Optional[pulumi.Input[str]] = None,
                 authusr: Optional[pulumi.Input[str]] = None,
                 authusrgrp: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 backup_gateways: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnIpsecPhase1BackupGatewayArgs']]]]] = None,
                 banner: Optional[pulumi.Input[str]] = None,
                 cert_id_validation: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnIpsecPhase1CertificateArgs']]]]] = None,
                 childless_ike: Optional[pulumi.Input[str]] = None,
                 client_auto_negotiate: Optional[pulumi.Input[str]] = None,
                 client_keep_alive: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
                 dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 digital_signature_auth: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dns_mode: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dpd: Optional[pulumi.Input[str]] = None,
                 dpd_retrycount: Optional[pulumi.Input[int]] = None,
                 dpd_retryinterval: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eap: Optional[pulumi.Input[str]] = None,
                 eap_exclude_peergrp: Optional[pulumi.Input[str]] = None,
                 eap_identity: Optional[pulumi.Input[str]] = None,
                 enforce_unique_id: Optional[pulumi.Input[str]] = None,
                 esn: Optional[pulumi.Input[str]] = None,
                 fec_base: Optional[pulumi.Input[int]] = None,
                 fec_codec: Optional[pulumi.Input[int]] = None,
                 fec_codec_string: Optional[pulumi.Input[str]] = None,
                 fec_egress: Optional[pulumi.Input[str]] = None,
                 fec_health_check: Optional[pulumi.Input[str]] = None,
                 fec_ingress: Optional[pulumi.Input[str]] = None,
                 fec_mapping_profile: Optional[pulumi.Input[str]] = None,
                 fec_receive_timeout: Optional[pulumi.Input[int]] = None,
                 fec_redundant: Optional[pulumi.Input[int]] = None,
                 fec_send_timeout: Optional[pulumi.Input[int]] = None,
                 fgsp_sync: Optional[pulumi.Input[str]] = None,
                 forticlient_enforcement: Optional[pulumi.Input[str]] = None,
                 fragmentation: Optional[pulumi.Input[str]] = None,
                 fragmentation_mtu: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_authentication: Optional[pulumi.Input[str]] = None,
                 group_authentication_secret: Optional[pulumi.Input[str]] = None,
                 ha_sync_esp_seqno: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[str]] = None,
                 idle_timeoutinterval: Optional[pulumi.Input[int]] = None,
                 ike_version: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 include_local_lan: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_delay_interval: Optional[pulumi.Input[int]] = None,
                 ipv4_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv4_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnIpsecPhase1Ipv4ExcludeRangeArgs']]]]] = None,
                 ipv4_name: Optional[pulumi.Input[str]] = None,
                 ipv4_netmask: Optional[pulumi.Input[str]] = None,
                 ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv4_split_include: Optional[pulumi.Input[str]] = None,
                 ipv4_start_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv6_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv6_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnIpsecPhase1Ipv6ExcludeRangeArgs']]]]] = None,
                 ipv6_name: Optional[pulumi.Input[str]] = None,
                 ipv6_prefix: Optional[pulumi.Input[int]] = None,
                 ipv6_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv6_split_include: Optional[pulumi.Input[str]] = None,
                 ipv6_start_ip: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[int]] = None,
                 keylife: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 localid: Optional[pulumi.Input[str]] = None,
                 localid_type: Optional[pulumi.Input[str]] = None,
                 loopback_asymroute: Optional[pulumi.Input[str]] = None,
                 mesh_selector_type: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mode_cfg: Optional[pulumi.Input[str]] = None,
                 mode_cfg_allow_client_selector: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nattraversal: Optional[pulumi.Input[str]] = None,
                 negotiate_timeout: Optional[pulumi.Input[int]] = None,
                 network_id: Optional[pulumi.Input[int]] = None,
                 network_overlay: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 peergrp: Optional[pulumi.Input[str]] = None,
                 peerid: Optional[pulumi.Input[str]] = None,
                 peertype: Optional[pulumi.Input[str]] = None,
                 ppk: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 psksecret_remote: Optional[pulumi.Input[str]] = None,
                 reauth: Optional[pulumi.Input[str]] = None,
                 rekey: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remotegw_ddns: Optional[pulumi.Input[str]] = None,
                 rsa_signature_format: Optional[pulumi.Input[str]] = None,
                 rsa_signature_hash_override: Optional[pulumi.Input[str]] = None,
                 save_password: Optional[pulumi.Input[str]] = None,
                 send_cert_chain: Optional[pulumi.Input[str]] = None,
                 signature_hash_alg: Optional[pulumi.Input[str]] = None,
                 split_include_service: Optional[pulumi.Input[str]] = None,
                 suite_b: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unity_support: Optional[pulumi.Input[str]] = None,
                 usrgrp: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wizard_type: Optional[pulumi.Input[str]] = None,
                 xauthtype: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpnIpsecPhase1Args.__new__(VpnIpsecPhase1Args)

            __props__.__dict__["acct_verify"] = acct_verify
            __props__.__dict__["add_gw_route"] = add_gw_route
            __props__.__dict__["add_route"] = add_route
            __props__.__dict__["assign_ip"] = assign_ip
            __props__.__dict__["assign_ip_from"] = assign_ip_from
            __props__.__dict__["authmethod"] = authmethod
            __props__.__dict__["authmethod_remote"] = authmethod_remote
            __props__.__dict__["authpasswd"] = None if authpasswd is None else pulumi.Output.secret(authpasswd)
            __props__.__dict__["authusr"] = authusr
            __props__.__dict__["authusrgrp"] = authusrgrp
            __props__.__dict__["auto_negotiate"] = auto_negotiate
            __props__.__dict__["backup_gateways"] = backup_gateways
            __props__.__dict__["banner"] = banner
            __props__.__dict__["cert_id_validation"] = cert_id_validation
            __props__.__dict__["certificates"] = certificates
            __props__.__dict__["childless_ike"] = childless_ike
            __props__.__dict__["client_auto_negotiate"] = client_auto_negotiate
            __props__.__dict__["client_keep_alive"] = client_keep_alive
            __props__.__dict__["comments"] = comments
            __props__.__dict__["dhcp6_ra_linkaddr"] = dhcp6_ra_linkaddr
            __props__.__dict__["dhcp_ra_giaddr"] = dhcp_ra_giaddr
            __props__.__dict__["dhgrp"] = dhgrp
            __props__.__dict__["digital_signature_auth"] = digital_signature_auth
            __props__.__dict__["distance"] = distance
            __props__.__dict__["dns_mode"] = dns_mode
            __props__.__dict__["domain"] = domain
            __props__.__dict__["dpd"] = dpd
            __props__.__dict__["dpd_retrycount"] = dpd_retrycount
            __props__.__dict__["dpd_retryinterval"] = dpd_retryinterval
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["eap"] = eap
            __props__.__dict__["eap_exclude_peergrp"] = eap_exclude_peergrp
            __props__.__dict__["eap_identity"] = eap_identity
            __props__.__dict__["enforce_unique_id"] = enforce_unique_id
            __props__.__dict__["esn"] = esn
            __props__.__dict__["fec_base"] = fec_base
            __props__.__dict__["fec_codec"] = fec_codec
            __props__.__dict__["fec_codec_string"] = fec_codec_string
            __props__.__dict__["fec_egress"] = fec_egress
            __props__.__dict__["fec_health_check"] = fec_health_check
            __props__.__dict__["fec_ingress"] = fec_ingress
            __props__.__dict__["fec_mapping_profile"] = fec_mapping_profile
            __props__.__dict__["fec_receive_timeout"] = fec_receive_timeout
            __props__.__dict__["fec_redundant"] = fec_redundant
            __props__.__dict__["fec_send_timeout"] = fec_send_timeout
            __props__.__dict__["fgsp_sync"] = fgsp_sync
            __props__.__dict__["forticlient_enforcement"] = forticlient_enforcement
            __props__.__dict__["fragmentation"] = fragmentation
            __props__.__dict__["fragmentation_mtu"] = fragmentation_mtu
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["group_authentication"] = group_authentication
            __props__.__dict__["group_authentication_secret"] = None if group_authentication_secret is None else pulumi.Output.secret(group_authentication_secret)
            __props__.__dict__["ha_sync_esp_seqno"] = ha_sync_esp_seqno
            __props__.__dict__["idle_timeout"] = idle_timeout
            __props__.__dict__["idle_timeoutinterval"] = idle_timeoutinterval
            __props__.__dict__["ike_version"] = ike_version
            __props__.__dict__["inbound_dscp_copy"] = inbound_dscp_copy
            __props__.__dict__["include_local_lan"] = include_local_lan
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ip_delay_interval"] = ip_delay_interval
            __props__.__dict__["ipv4_dns_server1"] = ipv4_dns_server1
            __props__.__dict__["ipv4_dns_server2"] = ipv4_dns_server2
            __props__.__dict__["ipv4_dns_server3"] = ipv4_dns_server3
            __props__.__dict__["ipv4_end_ip"] = ipv4_end_ip
            __props__.__dict__["ipv4_exclude_ranges"] = ipv4_exclude_ranges
            __props__.__dict__["ipv4_name"] = ipv4_name
            __props__.__dict__["ipv4_netmask"] = ipv4_netmask
            __props__.__dict__["ipv4_split_exclude"] = ipv4_split_exclude
            __props__.__dict__["ipv4_split_include"] = ipv4_split_include
            __props__.__dict__["ipv4_start_ip"] = ipv4_start_ip
            __props__.__dict__["ipv4_wins_server1"] = ipv4_wins_server1
            __props__.__dict__["ipv4_wins_server2"] = ipv4_wins_server2
            __props__.__dict__["ipv6_dns_server1"] = ipv6_dns_server1
            __props__.__dict__["ipv6_dns_server2"] = ipv6_dns_server2
            __props__.__dict__["ipv6_dns_server3"] = ipv6_dns_server3
            __props__.__dict__["ipv6_end_ip"] = ipv6_end_ip
            __props__.__dict__["ipv6_exclude_ranges"] = ipv6_exclude_ranges
            __props__.__dict__["ipv6_name"] = ipv6_name
            __props__.__dict__["ipv6_prefix"] = ipv6_prefix
            __props__.__dict__["ipv6_split_exclude"] = ipv6_split_exclude
            __props__.__dict__["ipv6_split_include"] = ipv6_split_include
            __props__.__dict__["ipv6_start_ip"] = ipv6_start_ip
            __props__.__dict__["keepalive"] = keepalive
            __props__.__dict__["keylife"] = keylife
            __props__.__dict__["local_gw"] = local_gw
            __props__.__dict__["localid"] = localid
            __props__.__dict__["localid_type"] = localid_type
            __props__.__dict__["loopback_asymroute"] = loopback_asymroute
            __props__.__dict__["mesh_selector_type"] = mesh_selector_type
            __props__.__dict__["mode"] = mode
            __props__.__dict__["mode_cfg"] = mode_cfg
            __props__.__dict__["mode_cfg_allow_client_selector"] = mode_cfg_allow_client_selector
            __props__.__dict__["name"] = name
            __props__.__dict__["nattraversal"] = nattraversal
            __props__.__dict__["negotiate_timeout"] = negotiate_timeout
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["network_overlay"] = network_overlay
            __props__.__dict__["npu_offload"] = npu_offload
            __props__.__dict__["peer"] = peer
            __props__.__dict__["peergrp"] = peergrp
            __props__.__dict__["peerid"] = peerid
            __props__.__dict__["peertype"] = peertype
            __props__.__dict__["ppk"] = ppk
            __props__.__dict__["ppk_identity"] = ppk_identity
            __props__.__dict__["ppk_secret"] = None if ppk_secret is None else pulumi.Output.secret(ppk_secret)
            __props__.__dict__["priority"] = priority
            if proposal is None and not opts.urn:
                raise TypeError("Missing required property 'proposal'")
            __props__.__dict__["proposal"] = proposal
            if psksecret is None and not opts.urn:
                raise TypeError("Missing required property 'psksecret'")
            __props__.__dict__["psksecret"] = None if psksecret is None else pulumi.Output.secret(psksecret)
            __props__.__dict__["psksecret_remote"] = None if psksecret_remote is None else pulumi.Output.secret(psksecret_remote)
            __props__.__dict__["reauth"] = reauth
            __props__.__dict__["rekey"] = rekey
            __props__.__dict__["remote_gw"] = remote_gw
            __props__.__dict__["remotegw_ddns"] = remotegw_ddns
            __props__.__dict__["rsa_signature_format"] = rsa_signature_format
            __props__.__dict__["rsa_signature_hash_override"] = rsa_signature_hash_override
            __props__.__dict__["save_password"] = save_password
            __props__.__dict__["send_cert_chain"] = send_cert_chain
            __props__.__dict__["signature_hash_alg"] = signature_hash_alg
            __props__.__dict__["split_include_service"] = split_include_service
            __props__.__dict__["suite_b"] = suite_b
            __props__.__dict__["type"] = type
            __props__.__dict__["unity_support"] = unity_support
            __props__.__dict__["usrgrp"] = usrgrp
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["wizard_type"] = wizard_type
            __props__.__dict__["xauthtype"] = xauthtype
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authpasswd", "groupAuthenticationSecret", "ppkSecret", "psksecret", "psksecretRemote"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(VpnIpsecPhase1, __self__).__init__(
            'fortios:index/vpnIpsecPhase1:VpnIpsecPhase1',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acct_verify: Optional[pulumi.Input[str]] = None,
            add_gw_route: Optional[pulumi.Input[str]] = None,
            add_route: Optional[pulumi.Input[str]] = None,
            assign_ip: Optional[pulumi.Input[str]] = None,
            assign_ip_from: Optional[pulumi.Input[str]] = None,
            authmethod: Optional[pulumi.Input[str]] = None,
            authmethod_remote: Optional[pulumi.Input[str]] = None,
            authpasswd: Optional[pulumi.Input[str]] = None,
            authusr: Optional[pulumi.Input[str]] = None,
            authusrgrp: Optional[pulumi.Input[str]] = None,
            auto_negotiate: Optional[pulumi.Input[str]] = None,
            backup_gateways: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnIpsecPhase1BackupGatewayArgs']]]]] = None,
            banner: Optional[pulumi.Input[str]] = None,
            cert_id_validation: Optional[pulumi.Input[str]] = None,
            certificates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnIpsecPhase1CertificateArgs']]]]] = None,
            childless_ike: Optional[pulumi.Input[str]] = None,
            client_auto_negotiate: Optional[pulumi.Input[str]] = None,
            client_keep_alive: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
            dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
            dhgrp: Optional[pulumi.Input[str]] = None,
            digital_signature_auth: Optional[pulumi.Input[str]] = None,
            distance: Optional[pulumi.Input[int]] = None,
            dns_mode: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            dpd: Optional[pulumi.Input[str]] = None,
            dpd_retrycount: Optional[pulumi.Input[int]] = None,
            dpd_retryinterval: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            eap: Optional[pulumi.Input[str]] = None,
            eap_exclude_peergrp: Optional[pulumi.Input[str]] = None,
            eap_identity: Optional[pulumi.Input[str]] = None,
            enforce_unique_id: Optional[pulumi.Input[str]] = None,
            esn: Optional[pulumi.Input[str]] = None,
            fec_base: Optional[pulumi.Input[int]] = None,
            fec_codec: Optional[pulumi.Input[int]] = None,
            fec_codec_string: Optional[pulumi.Input[str]] = None,
            fec_egress: Optional[pulumi.Input[str]] = None,
            fec_health_check: Optional[pulumi.Input[str]] = None,
            fec_ingress: Optional[pulumi.Input[str]] = None,
            fec_mapping_profile: Optional[pulumi.Input[str]] = None,
            fec_receive_timeout: Optional[pulumi.Input[int]] = None,
            fec_redundant: Optional[pulumi.Input[int]] = None,
            fec_send_timeout: Optional[pulumi.Input[int]] = None,
            fgsp_sync: Optional[pulumi.Input[str]] = None,
            forticlient_enforcement: Optional[pulumi.Input[str]] = None,
            fragmentation: Optional[pulumi.Input[str]] = None,
            fragmentation_mtu: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            group_authentication: Optional[pulumi.Input[str]] = None,
            group_authentication_secret: Optional[pulumi.Input[str]] = None,
            ha_sync_esp_seqno: Optional[pulumi.Input[str]] = None,
            idle_timeout: Optional[pulumi.Input[str]] = None,
            idle_timeoutinterval: Optional[pulumi.Input[int]] = None,
            ike_version: Optional[pulumi.Input[str]] = None,
            inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
            include_local_lan: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ip_delay_interval: Optional[pulumi.Input[int]] = None,
            ipv4_dns_server1: Optional[pulumi.Input[str]] = None,
            ipv4_dns_server2: Optional[pulumi.Input[str]] = None,
            ipv4_dns_server3: Optional[pulumi.Input[str]] = None,
            ipv4_end_ip: Optional[pulumi.Input[str]] = None,
            ipv4_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnIpsecPhase1Ipv4ExcludeRangeArgs']]]]] = None,
            ipv4_name: Optional[pulumi.Input[str]] = None,
            ipv4_netmask: Optional[pulumi.Input[str]] = None,
            ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
            ipv4_split_include: Optional[pulumi.Input[str]] = None,
            ipv4_start_ip: Optional[pulumi.Input[str]] = None,
            ipv4_wins_server1: Optional[pulumi.Input[str]] = None,
            ipv4_wins_server2: Optional[pulumi.Input[str]] = None,
            ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
            ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
            ipv6_dns_server3: Optional[pulumi.Input[str]] = None,
            ipv6_end_ip: Optional[pulumi.Input[str]] = None,
            ipv6_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnIpsecPhase1Ipv6ExcludeRangeArgs']]]]] = None,
            ipv6_name: Optional[pulumi.Input[str]] = None,
            ipv6_prefix: Optional[pulumi.Input[int]] = None,
            ipv6_split_exclude: Optional[pulumi.Input[str]] = None,
            ipv6_split_include: Optional[pulumi.Input[str]] = None,
            ipv6_start_ip: Optional[pulumi.Input[str]] = None,
            keepalive: Optional[pulumi.Input[int]] = None,
            keylife: Optional[pulumi.Input[int]] = None,
            local_gw: Optional[pulumi.Input[str]] = None,
            localid: Optional[pulumi.Input[str]] = None,
            localid_type: Optional[pulumi.Input[str]] = None,
            loopback_asymroute: Optional[pulumi.Input[str]] = None,
            mesh_selector_type: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            mode_cfg: Optional[pulumi.Input[str]] = None,
            mode_cfg_allow_client_selector: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nattraversal: Optional[pulumi.Input[str]] = None,
            negotiate_timeout: Optional[pulumi.Input[int]] = None,
            network_id: Optional[pulumi.Input[int]] = None,
            network_overlay: Optional[pulumi.Input[str]] = None,
            npu_offload: Optional[pulumi.Input[str]] = None,
            peer: Optional[pulumi.Input[str]] = None,
            peergrp: Optional[pulumi.Input[str]] = None,
            peerid: Optional[pulumi.Input[str]] = None,
            peertype: Optional[pulumi.Input[str]] = None,
            ppk: Optional[pulumi.Input[str]] = None,
            ppk_identity: Optional[pulumi.Input[str]] = None,
            ppk_secret: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            proposal: Optional[pulumi.Input[str]] = None,
            psksecret: Optional[pulumi.Input[str]] = None,
            psksecret_remote: Optional[pulumi.Input[str]] = None,
            reauth: Optional[pulumi.Input[str]] = None,
            rekey: Optional[pulumi.Input[str]] = None,
            remote_gw: Optional[pulumi.Input[str]] = None,
            remotegw_ddns: Optional[pulumi.Input[str]] = None,
            rsa_signature_format: Optional[pulumi.Input[str]] = None,
            rsa_signature_hash_override: Optional[pulumi.Input[str]] = None,
            save_password: Optional[pulumi.Input[str]] = None,
            send_cert_chain: Optional[pulumi.Input[str]] = None,
            signature_hash_alg: Optional[pulumi.Input[str]] = None,
            split_include_service: Optional[pulumi.Input[str]] = None,
            suite_b: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            unity_support: Optional[pulumi.Input[str]] = None,
            usrgrp: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            wizard_type: Optional[pulumi.Input[str]] = None,
            xauthtype: Optional[pulumi.Input[str]] = None) -> 'VpnIpsecPhase1':
        """
        Get an existing VpnIpsecPhase1 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpnIpsecPhase1State.__new__(_VpnIpsecPhase1State)

        __props__.__dict__["acct_verify"] = acct_verify
        __props__.__dict__["add_gw_route"] = add_gw_route
        __props__.__dict__["add_route"] = add_route
        __props__.__dict__["assign_ip"] = assign_ip
        __props__.__dict__["assign_ip_from"] = assign_ip_from
        __props__.__dict__["authmethod"] = authmethod
        __props__.__dict__["authmethod_remote"] = authmethod_remote
        __props__.__dict__["authpasswd"] = authpasswd
        __props__.__dict__["authusr"] = authusr
        __props__.__dict__["authusrgrp"] = authusrgrp
        __props__.__dict__["auto_negotiate"] = auto_negotiate
        __props__.__dict__["backup_gateways"] = backup_gateways
        __props__.__dict__["banner"] = banner
        __props__.__dict__["cert_id_validation"] = cert_id_validation
        __props__.__dict__["certificates"] = certificates
        __props__.__dict__["childless_ike"] = childless_ike
        __props__.__dict__["client_auto_negotiate"] = client_auto_negotiate
        __props__.__dict__["client_keep_alive"] = client_keep_alive
        __props__.__dict__["comments"] = comments
        __props__.__dict__["dhcp6_ra_linkaddr"] = dhcp6_ra_linkaddr
        __props__.__dict__["dhcp_ra_giaddr"] = dhcp_ra_giaddr
        __props__.__dict__["dhgrp"] = dhgrp
        __props__.__dict__["digital_signature_auth"] = digital_signature_auth
        __props__.__dict__["distance"] = distance
        __props__.__dict__["dns_mode"] = dns_mode
        __props__.__dict__["domain"] = domain
        __props__.__dict__["dpd"] = dpd
        __props__.__dict__["dpd_retrycount"] = dpd_retrycount
        __props__.__dict__["dpd_retryinterval"] = dpd_retryinterval
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["eap"] = eap
        __props__.__dict__["eap_exclude_peergrp"] = eap_exclude_peergrp
        __props__.__dict__["eap_identity"] = eap_identity
        __props__.__dict__["enforce_unique_id"] = enforce_unique_id
        __props__.__dict__["esn"] = esn
        __props__.__dict__["fec_base"] = fec_base
        __props__.__dict__["fec_codec"] = fec_codec
        __props__.__dict__["fec_codec_string"] = fec_codec_string
        __props__.__dict__["fec_egress"] = fec_egress
        __props__.__dict__["fec_health_check"] = fec_health_check
        __props__.__dict__["fec_ingress"] = fec_ingress
        __props__.__dict__["fec_mapping_profile"] = fec_mapping_profile
        __props__.__dict__["fec_receive_timeout"] = fec_receive_timeout
        __props__.__dict__["fec_redundant"] = fec_redundant
        __props__.__dict__["fec_send_timeout"] = fec_send_timeout
        __props__.__dict__["fgsp_sync"] = fgsp_sync
        __props__.__dict__["forticlient_enforcement"] = forticlient_enforcement
        __props__.__dict__["fragmentation"] = fragmentation
        __props__.__dict__["fragmentation_mtu"] = fragmentation_mtu
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["group_authentication"] = group_authentication
        __props__.__dict__["group_authentication_secret"] = group_authentication_secret
        __props__.__dict__["ha_sync_esp_seqno"] = ha_sync_esp_seqno
        __props__.__dict__["idle_timeout"] = idle_timeout
        __props__.__dict__["idle_timeoutinterval"] = idle_timeoutinterval
        __props__.__dict__["ike_version"] = ike_version
        __props__.__dict__["inbound_dscp_copy"] = inbound_dscp_copy
        __props__.__dict__["include_local_lan"] = include_local_lan
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ip_delay_interval"] = ip_delay_interval
        __props__.__dict__["ipv4_dns_server1"] = ipv4_dns_server1
        __props__.__dict__["ipv4_dns_server2"] = ipv4_dns_server2
        __props__.__dict__["ipv4_dns_server3"] = ipv4_dns_server3
        __props__.__dict__["ipv4_end_ip"] = ipv4_end_ip
        __props__.__dict__["ipv4_exclude_ranges"] = ipv4_exclude_ranges
        __props__.__dict__["ipv4_name"] = ipv4_name
        __props__.__dict__["ipv4_netmask"] = ipv4_netmask
        __props__.__dict__["ipv4_split_exclude"] = ipv4_split_exclude
        __props__.__dict__["ipv4_split_include"] = ipv4_split_include
        __props__.__dict__["ipv4_start_ip"] = ipv4_start_ip
        __props__.__dict__["ipv4_wins_server1"] = ipv4_wins_server1
        __props__.__dict__["ipv4_wins_server2"] = ipv4_wins_server2
        __props__.__dict__["ipv6_dns_server1"] = ipv6_dns_server1
        __props__.__dict__["ipv6_dns_server2"] = ipv6_dns_server2
        __props__.__dict__["ipv6_dns_server3"] = ipv6_dns_server3
        __props__.__dict__["ipv6_end_ip"] = ipv6_end_ip
        __props__.__dict__["ipv6_exclude_ranges"] = ipv6_exclude_ranges
        __props__.__dict__["ipv6_name"] = ipv6_name
        __props__.__dict__["ipv6_prefix"] = ipv6_prefix
        __props__.__dict__["ipv6_split_exclude"] = ipv6_split_exclude
        __props__.__dict__["ipv6_split_include"] = ipv6_split_include
        __props__.__dict__["ipv6_start_ip"] = ipv6_start_ip
        __props__.__dict__["keepalive"] = keepalive
        __props__.__dict__["keylife"] = keylife
        __props__.__dict__["local_gw"] = local_gw
        __props__.__dict__["localid"] = localid
        __props__.__dict__["localid_type"] = localid_type
        __props__.__dict__["loopback_asymroute"] = loopback_asymroute
        __props__.__dict__["mesh_selector_type"] = mesh_selector_type
        __props__.__dict__["mode"] = mode
        __props__.__dict__["mode_cfg"] = mode_cfg
        __props__.__dict__["mode_cfg_allow_client_selector"] = mode_cfg_allow_client_selector
        __props__.__dict__["name"] = name
        __props__.__dict__["nattraversal"] = nattraversal
        __props__.__dict__["negotiate_timeout"] = negotiate_timeout
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["network_overlay"] = network_overlay
        __props__.__dict__["npu_offload"] = npu_offload
        __props__.__dict__["peer"] = peer
        __props__.__dict__["peergrp"] = peergrp
        __props__.__dict__["peerid"] = peerid
        __props__.__dict__["peertype"] = peertype
        __props__.__dict__["ppk"] = ppk
        __props__.__dict__["ppk_identity"] = ppk_identity
        __props__.__dict__["ppk_secret"] = ppk_secret
        __props__.__dict__["priority"] = priority
        __props__.__dict__["proposal"] = proposal
        __props__.__dict__["psksecret"] = psksecret
        __props__.__dict__["psksecret_remote"] = psksecret_remote
        __props__.__dict__["reauth"] = reauth
        __props__.__dict__["rekey"] = rekey
        __props__.__dict__["remote_gw"] = remote_gw
        __props__.__dict__["remotegw_ddns"] = remotegw_ddns
        __props__.__dict__["rsa_signature_format"] = rsa_signature_format
        __props__.__dict__["rsa_signature_hash_override"] = rsa_signature_hash_override
        __props__.__dict__["save_password"] = save_password
        __props__.__dict__["send_cert_chain"] = send_cert_chain
        __props__.__dict__["signature_hash_alg"] = signature_hash_alg
        __props__.__dict__["split_include_service"] = split_include_service
        __props__.__dict__["suite_b"] = suite_b
        __props__.__dict__["type"] = type
        __props__.__dict__["unity_support"] = unity_support
        __props__.__dict__["usrgrp"] = usrgrp
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["wizard_type"] = wizard_type
        __props__.__dict__["xauthtype"] = xauthtype
        return VpnIpsecPhase1(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acctVerify")
    def acct_verify(self) -> pulumi.Output[str]:
        return pulumi.get(self, "acct_verify")

    @property
    @pulumi.getter(name="addGwRoute")
    def add_gw_route(self) -> pulumi.Output[str]:
        return pulumi.get(self, "add_gw_route")

    @property
    @pulumi.getter(name="addRoute")
    def add_route(self) -> pulumi.Output[str]:
        return pulumi.get(self, "add_route")

    @property
    @pulumi.getter(name="assignIp")
    def assign_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "assign_ip")

    @property
    @pulumi.getter(name="assignIpFrom")
    def assign_ip_from(self) -> pulumi.Output[str]:
        return pulumi.get(self, "assign_ip_from")

    @property
    @pulumi.getter
    def authmethod(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authmethod")

    @property
    @pulumi.getter(name="authmethodRemote")
    def authmethod_remote(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authmethod_remote")

    @property
    @pulumi.getter
    def authpasswd(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "authpasswd")

    @property
    @pulumi.getter
    def authusr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authusr")

    @property
    @pulumi.getter
    def authusrgrp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authusrgrp")

    @property
    @pulumi.getter(name="autoNegotiate")
    def auto_negotiate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auto_negotiate")

    @property
    @pulumi.getter(name="backupGateways")
    def backup_gateways(self) -> pulumi.Output[Optional[Sequence['outputs.VpnIpsecPhase1BackupGateway']]]:
        return pulumi.get(self, "backup_gateways")

    @property
    @pulumi.getter
    def banner(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "banner")

    @property
    @pulumi.getter(name="certIdValidation")
    def cert_id_validation(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cert_id_validation")

    @property
    @pulumi.getter
    def certificates(self) -> pulumi.Output[Optional[Sequence['outputs.VpnIpsecPhase1Certificate']]]:
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter(name="childlessIke")
    def childless_ike(self) -> pulumi.Output[str]:
        return pulumi.get(self, "childless_ike")

    @property
    @pulumi.getter(name="clientAutoNegotiate")
    def client_auto_negotiate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_auto_negotiate")

    @property
    @pulumi.getter(name="clientKeepAlive")
    def client_keep_alive(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_keep_alive")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dhcp6RaLinkaddr")
    def dhcp6_ra_linkaddr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp6_ra_linkaddr")

    @property
    @pulumi.getter(name="dhcpRaGiaddr")
    def dhcp_ra_giaddr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhcp_ra_giaddr")

    @property
    @pulumi.getter
    def dhgrp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dhgrp")

    @property
    @pulumi.getter(name="digitalSignatureAuth")
    def digital_signature_auth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "digital_signature_auth")

    @property
    @pulumi.getter
    def distance(self) -> pulumi.Output[int]:
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter(name="dnsMode")
    def dns_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_mode")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def dpd(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dpd")

    @property
    @pulumi.getter(name="dpdRetrycount")
    def dpd_retrycount(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dpd_retrycount")

    @property
    @pulumi.getter(name="dpdRetryinterval")
    def dpd_retryinterval(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dpd_retryinterval")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def eap(self) -> pulumi.Output[str]:
        return pulumi.get(self, "eap")

    @property
    @pulumi.getter(name="eapExcludePeergrp")
    def eap_exclude_peergrp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "eap_exclude_peergrp")

    @property
    @pulumi.getter(name="eapIdentity")
    def eap_identity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "eap_identity")

    @property
    @pulumi.getter(name="enforceUniqueId")
    def enforce_unique_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "enforce_unique_id")

    @property
    @pulumi.getter
    def esn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "esn")

    @property
    @pulumi.getter(name="fecBase")
    def fec_base(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fec_base")

    @property
    @pulumi.getter(name="fecCodec")
    def fec_codec(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fec_codec")

    @property
    @pulumi.getter(name="fecCodecString")
    def fec_codec_string(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fec_codec_string")

    @property
    @pulumi.getter(name="fecEgress")
    def fec_egress(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fec_egress")

    @property
    @pulumi.getter(name="fecHealthCheck")
    def fec_health_check(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fec_health_check")

    @property
    @pulumi.getter(name="fecIngress")
    def fec_ingress(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fec_ingress")

    @property
    @pulumi.getter(name="fecMappingProfile")
    def fec_mapping_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fec_mapping_profile")

    @property
    @pulumi.getter(name="fecReceiveTimeout")
    def fec_receive_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fec_receive_timeout")

    @property
    @pulumi.getter(name="fecRedundant")
    def fec_redundant(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fec_redundant")

    @property
    @pulumi.getter(name="fecSendTimeout")
    def fec_send_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fec_send_timeout")

    @property
    @pulumi.getter(name="fgspSync")
    def fgsp_sync(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fgsp_sync")

    @property
    @pulumi.getter(name="forticlientEnforcement")
    def forticlient_enforcement(self) -> pulumi.Output[str]:
        return pulumi.get(self, "forticlient_enforcement")

    @property
    @pulumi.getter
    def fragmentation(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fragmentation")

    @property
    @pulumi.getter(name="fragmentationMtu")
    def fragmentation_mtu(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fragmentation_mtu")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="groupAuthentication")
    def group_authentication(self) -> pulumi.Output[str]:
        return pulumi.get(self, "group_authentication")

    @property
    @pulumi.getter(name="groupAuthenticationSecret")
    def group_authentication_secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "group_authentication_secret")

    @property
    @pulumi.getter(name="haSyncEspSeqno")
    def ha_sync_esp_seqno(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ha_sync_esp_seqno")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> pulumi.Output[str]:
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="idleTimeoutinterval")
    def idle_timeoutinterval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "idle_timeoutinterval")

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ike_version")

    @property
    @pulumi.getter(name="inboundDscpCopy")
    def inbound_dscp_copy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "inbound_dscp_copy")

    @property
    @pulumi.getter(name="includeLocalLan")
    def include_local_lan(self) -> pulumi.Output[str]:
        return pulumi.get(self, "include_local_lan")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipDelayInterval")
    def ip_delay_interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ip_delay_interval")

    @property
    @pulumi.getter(name="ipv4DnsServer1")
    def ipv4_dns_server1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_dns_server1")

    @property
    @pulumi.getter(name="ipv4DnsServer2")
    def ipv4_dns_server2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_dns_server2")

    @property
    @pulumi.getter(name="ipv4DnsServer3")
    def ipv4_dns_server3(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_dns_server3")

    @property
    @pulumi.getter(name="ipv4EndIp")
    def ipv4_end_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_end_ip")

    @property
    @pulumi.getter(name="ipv4ExcludeRanges")
    def ipv4_exclude_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.VpnIpsecPhase1Ipv4ExcludeRange']]]:
        return pulumi.get(self, "ipv4_exclude_ranges")

    @property
    @pulumi.getter(name="ipv4Name")
    def ipv4_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_name")

    @property
    @pulumi.getter(name="ipv4Netmask")
    def ipv4_netmask(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_netmask")

    @property
    @pulumi.getter(name="ipv4SplitExclude")
    def ipv4_split_exclude(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_split_exclude")

    @property
    @pulumi.getter(name="ipv4SplitInclude")
    def ipv4_split_include(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_split_include")

    @property
    @pulumi.getter(name="ipv4StartIp")
    def ipv4_start_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_start_ip")

    @property
    @pulumi.getter(name="ipv4WinsServer1")
    def ipv4_wins_server1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_wins_server1")

    @property
    @pulumi.getter(name="ipv4WinsServer2")
    def ipv4_wins_server2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_wins_server2")

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_dns_server1")

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_dns_server2")

    @property
    @pulumi.getter(name="ipv6DnsServer3")
    def ipv6_dns_server3(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_dns_server3")

    @property
    @pulumi.getter(name="ipv6EndIp")
    def ipv6_end_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_end_ip")

    @property
    @pulumi.getter(name="ipv6ExcludeRanges")
    def ipv6_exclude_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.VpnIpsecPhase1Ipv6ExcludeRange']]]:
        return pulumi.get(self, "ipv6_exclude_ranges")

    @property
    @pulumi.getter(name="ipv6Name")
    def ipv6_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_name")

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ipv6_prefix")

    @property
    @pulumi.getter(name="ipv6SplitExclude")
    def ipv6_split_exclude(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_split_exclude")

    @property
    @pulumi.getter(name="ipv6SplitInclude")
    def ipv6_split_include(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_split_include")

    @property
    @pulumi.getter(name="ipv6StartIp")
    def ipv6_start_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv6_start_ip")

    @property
    @pulumi.getter
    def keepalive(self) -> pulumi.Output[int]:
        return pulumi.get(self, "keepalive")

    @property
    @pulumi.getter
    def keylife(self) -> pulumi.Output[int]:
        return pulumi.get(self, "keylife")

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_gw")

    @property
    @pulumi.getter
    def localid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "localid")

    @property
    @pulumi.getter(name="localidType")
    def localid_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "localid_type")

    @property
    @pulumi.getter(name="loopbackAsymroute")
    def loopback_asymroute(self) -> pulumi.Output[str]:
        return pulumi.get(self, "loopback_asymroute")

    @property
    @pulumi.getter(name="meshSelectorType")
    def mesh_selector_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mesh_selector_type")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="modeCfg")
    def mode_cfg(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mode_cfg")

    @property
    @pulumi.getter(name="modeCfgAllowClientSelector")
    def mode_cfg_allow_client_selector(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mode_cfg_allow_client_selector")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nattraversal(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nattraversal")

    @property
    @pulumi.getter(name="negotiateTimeout")
    def negotiate_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "negotiate_timeout")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="networkOverlay")
    def network_overlay(self) -> pulumi.Output[str]:
        return pulumi.get(self, "network_overlay")

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> pulumi.Output[str]:
        return pulumi.get(self, "npu_offload")

    @property
    @pulumi.getter
    def peer(self) -> pulumi.Output[str]:
        return pulumi.get(self, "peer")

    @property
    @pulumi.getter
    def peergrp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "peergrp")

    @property
    @pulumi.getter
    def peerid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "peerid")

    @property
    @pulumi.getter
    def peertype(self) -> pulumi.Output[str]:
        return pulumi.get(self, "peertype")

    @property
    @pulumi.getter
    def ppk(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ppk")

    @property
    @pulumi.getter(name="ppkIdentity")
    def ppk_identity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ppk_identity")

    @property
    @pulumi.getter(name="ppkSecret")
    def ppk_secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ppk_secret")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def proposal(self) -> pulumi.Output[str]:
        return pulumi.get(self, "proposal")

    @property
    @pulumi.getter
    def psksecret(self) -> pulumi.Output[str]:
        return pulumi.get(self, "psksecret")

    @property
    @pulumi.getter(name="psksecretRemote")
    def psksecret_remote(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "psksecret_remote")

    @property
    @pulumi.getter
    def reauth(self) -> pulumi.Output[str]:
        return pulumi.get(self, "reauth")

    @property
    @pulumi.getter
    def rekey(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rekey")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Output[str]:
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="remotegwDdns")
    def remotegw_ddns(self) -> pulumi.Output[str]:
        return pulumi.get(self, "remotegw_ddns")

    @property
    @pulumi.getter(name="rsaSignatureFormat")
    def rsa_signature_format(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rsa_signature_format")

    @property
    @pulumi.getter(name="rsaSignatureHashOverride")
    def rsa_signature_hash_override(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rsa_signature_hash_override")

    @property
    @pulumi.getter(name="savePassword")
    def save_password(self) -> pulumi.Output[str]:
        return pulumi.get(self, "save_password")

    @property
    @pulumi.getter(name="sendCertChain")
    def send_cert_chain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "send_cert_chain")

    @property
    @pulumi.getter(name="signatureHashAlg")
    def signature_hash_alg(self) -> pulumi.Output[str]:
        return pulumi.get(self, "signature_hash_alg")

    @property
    @pulumi.getter(name="splitIncludeService")
    def split_include_service(self) -> pulumi.Output[str]:
        return pulumi.get(self, "split_include_service")

    @property
    @pulumi.getter(name="suiteB")
    def suite_b(self) -> pulumi.Output[str]:
        return pulumi.get(self, "suite_b")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unitySupport")
    def unity_support(self) -> pulumi.Output[str]:
        return pulumi.get(self, "unity_support")

    @property
    @pulumi.getter
    def usrgrp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "usrgrp")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="wizardType")
    def wizard_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wizard_type")

    @property
    @pulumi.getter
    def xauthtype(self) -> pulumi.Output[str]:
        return pulumi.get(self, "xauthtype")

