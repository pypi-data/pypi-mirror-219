# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ReportLayoutArgs', 'ReportLayout']

@pulumi.input_type
class ReportLayoutArgs:
    def __init__(__self__, *,
                 style_theme: pulumi.Input[str],
                 body_items: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemArgs']]]] = None,
                 cutoff_option: Optional[pulumi.Input[str]] = None,
                 cutoff_time: Optional[pulumi.Input[str]] = None,
                 day: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_recipients: Optional[pulumi.Input[str]] = None,
                 email_send: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 max_pdf_report: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 page: Optional[pulumi.Input['ReportLayoutPageArgs']] = None,
                 schedule_type: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ReportLayout resource.
        """
        pulumi.set(__self__, "style_theme", style_theme)
        if body_items is not None:
            pulumi.set(__self__, "body_items", body_items)
        if cutoff_option is not None:
            pulumi.set(__self__, "cutoff_option", cutoff_option)
        if cutoff_time is not None:
            pulumi.set(__self__, "cutoff_time", cutoff_time)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email_recipients is not None:
            pulumi.set(__self__, "email_recipients", email_recipients)
        if email_send is not None:
            pulumi.set(__self__, "email_send", email_send)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if max_pdf_report is not None:
            pulumi.set(__self__, "max_pdf_report", max_pdf_report)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if page is not None:
            pulumi.set(__self__, "page", page)
        if schedule_type is not None:
            pulumi.set(__self__, "schedule_type", schedule_type)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="styleTheme")
    def style_theme(self) -> pulumi.Input[str]:
        return pulumi.get(self, "style_theme")

    @style_theme.setter
    def style_theme(self, value: pulumi.Input[str]):
        pulumi.set(self, "style_theme", value)

    @property
    @pulumi.getter(name="bodyItems")
    def body_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemArgs']]]]:
        return pulumi.get(self, "body_items")

    @body_items.setter
    def body_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemArgs']]]]):
        pulumi.set(self, "body_items", value)

    @property
    @pulumi.getter(name="cutoffOption")
    def cutoff_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cutoff_option")

    @cutoff_option.setter
    def cutoff_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cutoff_option", value)

    @property
    @pulumi.getter(name="cutoffTime")
    def cutoff_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cutoff_time")

    @cutoff_time.setter
    def cutoff_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cutoff_time", value)

    @property
    @pulumi.getter
    def day(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailRecipients")
    def email_recipients(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_recipients")

    @email_recipients.setter
    def email_recipients(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_recipients", value)

    @property
    @pulumi.getter(name="emailSend")
    def email_send(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_send")

    @email_send.setter
    def email_send(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_send", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="maxPdfReport")
    def max_pdf_report(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_pdf_report")

    @max_pdf_report.setter
    def max_pdf_report(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pdf_report", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def page(self) -> Optional[pulumi.Input['ReportLayoutPageArgs']]:
        return pulumi.get(self, "page")

    @page.setter
    def page(self, value: Optional[pulumi.Input['ReportLayoutPageArgs']]):
        pulumi.set(self, "page", value)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule_type")

    @schedule_type.setter
    def schedule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_type", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ReportLayoutState:
    def __init__(__self__, *,
                 body_items: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemArgs']]]] = None,
                 cutoff_option: Optional[pulumi.Input[str]] = None,
                 cutoff_time: Optional[pulumi.Input[str]] = None,
                 day: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_recipients: Optional[pulumi.Input[str]] = None,
                 email_send: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 max_pdf_report: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 page: Optional[pulumi.Input['ReportLayoutPageArgs']] = None,
                 schedule_type: Optional[pulumi.Input[str]] = None,
                 style_theme: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ReportLayout resources.
        """
        if body_items is not None:
            pulumi.set(__self__, "body_items", body_items)
        if cutoff_option is not None:
            pulumi.set(__self__, "cutoff_option", cutoff_option)
        if cutoff_time is not None:
            pulumi.set(__self__, "cutoff_time", cutoff_time)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email_recipients is not None:
            pulumi.set(__self__, "email_recipients", email_recipients)
        if email_send is not None:
            pulumi.set(__self__, "email_send", email_send)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if max_pdf_report is not None:
            pulumi.set(__self__, "max_pdf_report", max_pdf_report)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if page is not None:
            pulumi.set(__self__, "page", page)
        if schedule_type is not None:
            pulumi.set(__self__, "schedule_type", schedule_type)
        if style_theme is not None:
            pulumi.set(__self__, "style_theme", style_theme)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="bodyItems")
    def body_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemArgs']]]]:
        return pulumi.get(self, "body_items")

    @body_items.setter
    def body_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemArgs']]]]):
        pulumi.set(self, "body_items", value)

    @property
    @pulumi.getter(name="cutoffOption")
    def cutoff_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cutoff_option")

    @cutoff_option.setter
    def cutoff_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cutoff_option", value)

    @property
    @pulumi.getter(name="cutoffTime")
    def cutoff_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cutoff_time")

    @cutoff_time.setter
    def cutoff_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cutoff_time", value)

    @property
    @pulumi.getter
    def day(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailRecipients")
    def email_recipients(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_recipients")

    @email_recipients.setter
    def email_recipients(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_recipients", value)

    @property
    @pulumi.getter(name="emailSend")
    def email_send(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_send")

    @email_send.setter
    def email_send(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_send", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="maxPdfReport")
    def max_pdf_report(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_pdf_report")

    @max_pdf_report.setter
    def max_pdf_report(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pdf_report", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def page(self) -> Optional[pulumi.Input['ReportLayoutPageArgs']]:
        return pulumi.get(self, "page")

    @page.setter
    def page(self, value: Optional[pulumi.Input['ReportLayoutPageArgs']]):
        pulumi.set(self, "page", value)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule_type")

    @schedule_type.setter
    def schedule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_type", value)

    @property
    @pulumi.getter(name="styleTheme")
    def style_theme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "style_theme")

    @style_theme.setter
    def style_theme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style_theme", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class ReportLayout(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReportLayoutBodyItemArgs']]]]] = None,
                 cutoff_option: Optional[pulumi.Input[str]] = None,
                 cutoff_time: Optional[pulumi.Input[str]] = None,
                 day: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_recipients: Optional[pulumi.Input[str]] = None,
                 email_send: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 max_pdf_report: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 page: Optional[pulumi.Input[pulumi.InputType['ReportLayoutPageArgs']]] = None,
                 schedule_type: Optional[pulumi.Input[str]] = None,
                 style_theme: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ReportLayout resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReportLayoutArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ReportLayout resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ReportLayoutArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReportLayoutArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReportLayoutBodyItemArgs']]]]] = None,
                 cutoff_option: Optional[pulumi.Input[str]] = None,
                 cutoff_time: Optional[pulumi.Input[str]] = None,
                 day: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_recipients: Optional[pulumi.Input[str]] = None,
                 email_send: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 max_pdf_report: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 page: Optional[pulumi.Input[pulumi.InputType['ReportLayoutPageArgs']]] = None,
                 schedule_type: Optional[pulumi.Input[str]] = None,
                 style_theme: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReportLayoutArgs.__new__(ReportLayoutArgs)

            __props__.__dict__["body_items"] = body_items
            __props__.__dict__["cutoff_option"] = cutoff_option
            __props__.__dict__["cutoff_time"] = cutoff_time
            __props__.__dict__["day"] = day
            __props__.__dict__["description"] = description
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["email_recipients"] = email_recipients
            __props__.__dict__["email_send"] = email_send
            __props__.__dict__["format"] = format
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["max_pdf_report"] = max_pdf_report
            __props__.__dict__["name"] = name
            __props__.__dict__["options"] = options
            __props__.__dict__["page"] = page
            __props__.__dict__["schedule_type"] = schedule_type
            if style_theme is None and not opts.urn:
                raise TypeError("Missing required property 'style_theme'")
            __props__.__dict__["style_theme"] = style_theme
            __props__.__dict__["subtitle"] = subtitle
            __props__.__dict__["time"] = time
            __props__.__dict__["title"] = title
            __props__.__dict__["vdomparam"] = vdomparam
        super(ReportLayout, __self__).__init__(
            'fortios:index/reportLayout:ReportLayout',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            body_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReportLayoutBodyItemArgs']]]]] = None,
            cutoff_option: Optional[pulumi.Input[str]] = None,
            cutoff_time: Optional[pulumi.Input[str]] = None,
            day: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            email_recipients: Optional[pulumi.Input[str]] = None,
            email_send: Optional[pulumi.Input[str]] = None,
            format: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            max_pdf_report: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            options: Optional[pulumi.Input[str]] = None,
            page: Optional[pulumi.Input[pulumi.InputType['ReportLayoutPageArgs']]] = None,
            schedule_type: Optional[pulumi.Input[str]] = None,
            style_theme: Optional[pulumi.Input[str]] = None,
            subtitle: Optional[pulumi.Input[str]] = None,
            time: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'ReportLayout':
        """
        Get an existing ReportLayout resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReportLayoutState.__new__(_ReportLayoutState)

        __props__.__dict__["body_items"] = body_items
        __props__.__dict__["cutoff_option"] = cutoff_option
        __props__.__dict__["cutoff_time"] = cutoff_time
        __props__.__dict__["day"] = day
        __props__.__dict__["description"] = description
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["email_recipients"] = email_recipients
        __props__.__dict__["email_send"] = email_send
        __props__.__dict__["format"] = format
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["max_pdf_report"] = max_pdf_report
        __props__.__dict__["name"] = name
        __props__.__dict__["options"] = options
        __props__.__dict__["page"] = page
        __props__.__dict__["schedule_type"] = schedule_type
        __props__.__dict__["style_theme"] = style_theme
        __props__.__dict__["subtitle"] = subtitle
        __props__.__dict__["time"] = time
        __props__.__dict__["title"] = title
        __props__.__dict__["vdomparam"] = vdomparam
        return ReportLayout(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bodyItems")
    def body_items(self) -> pulumi.Output[Optional[Sequence['outputs.ReportLayoutBodyItem']]]:
        return pulumi.get(self, "body_items")

    @property
    @pulumi.getter(name="cutoffOption")
    def cutoff_option(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cutoff_option")

    @property
    @pulumi.getter(name="cutoffTime")
    def cutoff_time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cutoff_time")

    @property
    @pulumi.getter
    def day(self) -> pulumi.Output[str]:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emailRecipients")
    def email_recipients(self) -> pulumi.Output[str]:
        return pulumi.get(self, "email_recipients")

    @property
    @pulumi.getter(name="emailSend")
    def email_send(self) -> pulumi.Output[str]:
        return pulumi.get(self, "email_send")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="maxPdfReport")
    def max_pdf_report(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_pdf_report")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def page(self) -> pulumi.Output['outputs.ReportLayoutPage']:
        return pulumi.get(self, "page")

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter(name="styleTheme")
    def style_theme(self) -> pulumi.Output[str]:
        return pulumi.get(self, "style_theme")

    @property
    @pulumi.getter
    def subtitle(self) -> pulumi.Output[str]:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def time(self) -> pulumi.Output[str]:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

