# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemSnmpCommunityArgs', 'SystemSnmpCommunity']

@pulumi.input_type
class SystemSnmpCommunityArgs:
    def __init__(__self__, *,
                 fosid: pulumi.Input[int],
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityHostArgs']]]] = None,
                 hosts6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityHosts6Args']]]] = None,
                 mib_view: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_v1_port: Optional[pulumi.Input[int]] = None,
                 query_v1_status: Optional[pulumi.Input[str]] = None,
                 query_v2c_port: Optional[pulumi.Input[int]] = None,
                 query_v2c_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_v1_lport: Optional[pulumi.Input[int]] = None,
                 trap_v1_rport: Optional[pulumi.Input[int]] = None,
                 trap_v1_status: Optional[pulumi.Input[str]] = None,
                 trap_v2c_lport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_rport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityVdomArgs']]]] = None):
        """
        The set of arguments for constructing a SystemSnmpCommunity resource.
        """
        pulumi.set(__self__, "fosid", fosid)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if hosts6s is not None:
            pulumi.set(__self__, "hosts6s", hosts6s)
        if mib_view is not None:
            pulumi.set(__self__, "mib_view", mib_view)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_v1_port is not None:
            pulumi.set(__self__, "query_v1_port", query_v1_port)
        if query_v1_status is not None:
            pulumi.set(__self__, "query_v1_status", query_v1_status)
        if query_v2c_port is not None:
            pulumi.set(__self__, "query_v2c_port", query_v2c_port)
        if query_v2c_status is not None:
            pulumi.set(__self__, "query_v2c_status", query_v2c_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_v1_lport is not None:
            pulumi.set(__self__, "trap_v1_lport", trap_v1_lport)
        if trap_v1_rport is not None:
            pulumi.set(__self__, "trap_v1_rport", trap_v1_rport)
        if trap_v1_status is not None:
            pulumi.set(__self__, "trap_v1_status", trap_v1_status)
        if trap_v2c_lport is not None:
            pulumi.set(__self__, "trap_v2c_lport", trap_v2c_lport)
        if trap_v2c_rport is not None:
            pulumi.set(__self__, "trap_v2c_rport", trap_v2c_rport)
        if trap_v2c_status is not None:
            pulumi.set(__self__, "trap_v2c_status", trap_v2c_status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Input[int]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: pulumi.Input[int]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityHostArgs']]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def hosts6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityHosts6Args']]]]:
        return pulumi.get(self, "hosts6s")

    @hosts6s.setter
    def hosts6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityHosts6Args']]]]):
        pulumi.set(self, "hosts6s", value)

    @property
    @pulumi.getter(name="mibView")
    def mib_view(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mib_view")

    @mib_view.setter
    def mib_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mib_view", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryV1Port")
    def query_v1_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_v1_port")

    @query_v1_port.setter
    def query_v1_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_v1_port", value)

    @property
    @pulumi.getter(name="queryV1Status")
    def query_v1_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_v1_status")

    @query_v1_status.setter
    def query_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v1_status", value)

    @property
    @pulumi.getter(name="queryV2cPort")
    def query_v2c_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_v2c_port")

    @query_v2c_port.setter
    def query_v2c_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_v2c_port", value)

    @property
    @pulumi.getter(name="queryV2cStatus")
    def query_v2c_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_v2c_status")

    @query_v2c_status.setter
    def query_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v2c_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapV1Lport")
    def trap_v1_lport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_v1_lport")

    @trap_v1_lport.setter
    def trap_v1_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v1_lport", value)

    @property
    @pulumi.getter(name="trapV1Rport")
    def trap_v1_rport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_v1_rport")

    @trap_v1_rport.setter
    def trap_v1_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v1_rport", value)

    @property
    @pulumi.getter(name="trapV1Status")
    def trap_v1_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_v1_status")

    @trap_v1_status.setter
    def trap_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v1_status", value)

    @property
    @pulumi.getter(name="trapV2cLport")
    def trap_v2c_lport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_v2c_lport")

    @trap_v2c_lport.setter
    def trap_v2c_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v2c_lport", value)

    @property
    @pulumi.getter(name="trapV2cRport")
    def trap_v2c_rport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_v2c_rport")

    @trap_v2c_rport.setter
    def trap_v2c_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v2c_rport", value)

    @property
    @pulumi.getter(name="trapV2cStatus")
    def trap_v2c_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_v2c_status")

    @trap_v2c_status.setter
    def trap_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v2c_status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityVdomArgs']]]]:
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


@pulumi.input_type
class _SystemSnmpCommunityState:
    def __init__(__self__, *,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityHostArgs']]]] = None,
                 hosts6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityHosts6Args']]]] = None,
                 mib_view: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_v1_port: Optional[pulumi.Input[int]] = None,
                 query_v1_status: Optional[pulumi.Input[str]] = None,
                 query_v2c_port: Optional[pulumi.Input[int]] = None,
                 query_v2c_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_v1_lport: Optional[pulumi.Input[int]] = None,
                 trap_v1_rport: Optional[pulumi.Input[int]] = None,
                 trap_v1_status: Optional[pulumi.Input[str]] = None,
                 trap_v2c_lport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_rport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityVdomArgs']]]] = None):
        """
        Input properties used for looking up and filtering SystemSnmpCommunity resources.
        """
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if hosts6s is not None:
            pulumi.set(__self__, "hosts6s", hosts6s)
        if mib_view is not None:
            pulumi.set(__self__, "mib_view", mib_view)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_v1_port is not None:
            pulumi.set(__self__, "query_v1_port", query_v1_port)
        if query_v1_status is not None:
            pulumi.set(__self__, "query_v1_status", query_v1_status)
        if query_v2c_port is not None:
            pulumi.set(__self__, "query_v2c_port", query_v2c_port)
        if query_v2c_status is not None:
            pulumi.set(__self__, "query_v2c_status", query_v2c_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_v1_lport is not None:
            pulumi.set(__self__, "trap_v1_lport", trap_v1_lport)
        if trap_v1_rport is not None:
            pulumi.set(__self__, "trap_v1_rport", trap_v1_rport)
        if trap_v1_status is not None:
            pulumi.set(__self__, "trap_v1_status", trap_v1_status)
        if trap_v2c_lport is not None:
            pulumi.set(__self__, "trap_v2c_lport", trap_v2c_lport)
        if trap_v2c_rport is not None:
            pulumi.set(__self__, "trap_v2c_rport", trap_v2c_rport)
        if trap_v2c_status is not None:
            pulumi.set(__self__, "trap_v2c_status", trap_v2c_status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityHostArgs']]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def hosts6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityHosts6Args']]]]:
        return pulumi.get(self, "hosts6s")

    @hosts6s.setter
    def hosts6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityHosts6Args']]]]):
        pulumi.set(self, "hosts6s", value)

    @property
    @pulumi.getter(name="mibView")
    def mib_view(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mib_view")

    @mib_view.setter
    def mib_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mib_view", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryV1Port")
    def query_v1_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_v1_port")

    @query_v1_port.setter
    def query_v1_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_v1_port", value)

    @property
    @pulumi.getter(name="queryV1Status")
    def query_v1_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_v1_status")

    @query_v1_status.setter
    def query_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v1_status", value)

    @property
    @pulumi.getter(name="queryV2cPort")
    def query_v2c_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "query_v2c_port")

    @query_v2c_port.setter
    def query_v2c_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_v2c_port", value)

    @property
    @pulumi.getter(name="queryV2cStatus")
    def query_v2c_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_v2c_status")

    @query_v2c_status.setter
    def query_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v2c_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapV1Lport")
    def trap_v1_lport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_v1_lport")

    @trap_v1_lport.setter
    def trap_v1_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v1_lport", value)

    @property
    @pulumi.getter(name="trapV1Rport")
    def trap_v1_rport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_v1_rport")

    @trap_v1_rport.setter
    def trap_v1_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v1_rport", value)

    @property
    @pulumi.getter(name="trapV1Status")
    def trap_v1_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_v1_status")

    @trap_v1_status.setter
    def trap_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v1_status", value)

    @property
    @pulumi.getter(name="trapV2cLport")
    def trap_v2c_lport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_v2c_lport")

    @trap_v2c_lport.setter
    def trap_v2c_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v2c_lport", value)

    @property
    @pulumi.getter(name="trapV2cRport")
    def trap_v2c_rport(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trap_v2c_rport")

    @trap_v2c_rport.setter
    def trap_v2c_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v2c_rport", value)

    @property
    @pulumi.getter(name="trapV2cStatus")
    def trap_v2c_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_v2c_status")

    @trap_v2c_status.setter
    def trap_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v2c_status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityVdomArgs']]]]:
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpCommunityVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


class SystemSnmpCommunity(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSnmpCommunityHostArgs']]]]] = None,
                 hosts6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSnmpCommunityHosts6Args']]]]] = None,
                 mib_view: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_v1_port: Optional[pulumi.Input[int]] = None,
                 query_v1_status: Optional[pulumi.Input[str]] = None,
                 query_v2c_port: Optional[pulumi.Input[int]] = None,
                 query_v2c_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_v1_lport: Optional[pulumi.Input[int]] = None,
                 trap_v1_rport: Optional[pulumi.Input[int]] = None,
                 trap_v1_status: Optional[pulumi.Input[str]] = None,
                 trap_v2c_lport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_rport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSnmpCommunityVdomArgs']]]]] = None,
                 __props__=None):
        """
        Create a SystemSnmpCommunity resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemSnmpCommunityArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemSnmpCommunity resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemSnmpCommunityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemSnmpCommunityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSnmpCommunityHostArgs']]]]] = None,
                 hosts6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSnmpCommunityHosts6Args']]]]] = None,
                 mib_view: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_v1_port: Optional[pulumi.Input[int]] = None,
                 query_v1_status: Optional[pulumi.Input[str]] = None,
                 query_v2c_port: Optional[pulumi.Input[int]] = None,
                 query_v2c_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_v1_lport: Optional[pulumi.Input[int]] = None,
                 trap_v1_rport: Optional[pulumi.Input[int]] = None,
                 trap_v1_status: Optional[pulumi.Input[str]] = None,
                 trap_v2c_lport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_rport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSnmpCommunityVdomArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemSnmpCommunityArgs.__new__(SystemSnmpCommunityArgs)

            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["events"] = events
            if fosid is None and not opts.urn:
                raise TypeError("Missing required property 'fosid'")
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["hosts"] = hosts
            __props__.__dict__["hosts6s"] = hosts6s
            __props__.__dict__["mib_view"] = mib_view
            __props__.__dict__["name"] = name
            __props__.__dict__["query_v1_port"] = query_v1_port
            __props__.__dict__["query_v1_status"] = query_v1_status
            __props__.__dict__["query_v2c_port"] = query_v2c_port
            __props__.__dict__["query_v2c_status"] = query_v2c_status
            __props__.__dict__["status"] = status
            __props__.__dict__["trap_v1_lport"] = trap_v1_lport
            __props__.__dict__["trap_v1_rport"] = trap_v1_rport
            __props__.__dict__["trap_v1_status"] = trap_v1_status
            __props__.__dict__["trap_v2c_lport"] = trap_v2c_lport
            __props__.__dict__["trap_v2c_rport"] = trap_v2c_rport
            __props__.__dict__["trap_v2c_status"] = trap_v2c_status
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vdoms"] = vdoms
        super(SystemSnmpCommunity, __self__).__init__(
            'fortios:index/systemSnmpCommunity:SystemSnmpCommunity',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            events: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSnmpCommunityHostArgs']]]]] = None,
            hosts6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSnmpCommunityHosts6Args']]]]] = None,
            mib_view: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            query_v1_port: Optional[pulumi.Input[int]] = None,
            query_v1_status: Optional[pulumi.Input[str]] = None,
            query_v2c_port: Optional[pulumi.Input[int]] = None,
            query_v2c_status: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            trap_v1_lport: Optional[pulumi.Input[int]] = None,
            trap_v1_rport: Optional[pulumi.Input[int]] = None,
            trap_v1_status: Optional[pulumi.Input[str]] = None,
            trap_v2c_lport: Optional[pulumi.Input[int]] = None,
            trap_v2c_rport: Optional[pulumi.Input[int]] = None,
            trap_v2c_status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemSnmpCommunityVdomArgs']]]]] = None) -> 'SystemSnmpCommunity':
        """
        Get an existing SystemSnmpCommunity resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemSnmpCommunityState.__new__(_SystemSnmpCommunityState)

        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["events"] = events
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["hosts6s"] = hosts6s
        __props__.__dict__["mib_view"] = mib_view
        __props__.__dict__["name"] = name
        __props__.__dict__["query_v1_port"] = query_v1_port
        __props__.__dict__["query_v1_status"] = query_v1_status
        __props__.__dict__["query_v2c_port"] = query_v2c_port
        __props__.__dict__["query_v2c_status"] = query_v2c_status
        __props__.__dict__["status"] = status
        __props__.__dict__["trap_v1_lport"] = trap_v1_lport
        __props__.__dict__["trap_v1_rport"] = trap_v1_rport
        __props__.__dict__["trap_v1_status"] = trap_v1_status
        __props__.__dict__["trap_v2c_lport"] = trap_v2c_lport
        __props__.__dict__["trap_v2c_rport"] = trap_v2c_rport
        __props__.__dict__["trap_v2c_status"] = trap_v2c_status
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vdoms"] = vdoms
        return SystemSnmpCommunity(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def events(self) -> pulumi.Output[str]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Optional[Sequence['outputs.SystemSnmpCommunityHost']]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def hosts6s(self) -> pulumi.Output[Optional[Sequence['outputs.SystemSnmpCommunityHosts6']]]:
        return pulumi.get(self, "hosts6s")

    @property
    @pulumi.getter(name="mibView")
    def mib_view(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mib_view")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="queryV1Port")
    def query_v1_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "query_v1_port")

    @property
    @pulumi.getter(name="queryV1Status")
    def query_v1_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "query_v1_status")

    @property
    @pulumi.getter(name="queryV2cPort")
    def query_v2c_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "query_v2c_port")

    @property
    @pulumi.getter(name="queryV2cStatus")
    def query_v2c_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "query_v2c_status")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trapV1Lport")
    def trap_v1_lport(self) -> pulumi.Output[int]:
        return pulumi.get(self, "trap_v1_lport")

    @property
    @pulumi.getter(name="trapV1Rport")
    def trap_v1_rport(self) -> pulumi.Output[int]:
        return pulumi.get(self, "trap_v1_rport")

    @property
    @pulumi.getter(name="trapV1Status")
    def trap_v1_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "trap_v1_status")

    @property
    @pulumi.getter(name="trapV2cLport")
    def trap_v2c_lport(self) -> pulumi.Output[int]:
        return pulumi.get(self, "trap_v2c_lport")

    @property
    @pulumi.getter(name="trapV2cRport")
    def trap_v2c_rport(self) -> pulumi.Output[int]:
        return pulumi.get(self, "trap_v2c_rport")

    @property
    @pulumi.getter(name="trapV2cStatus")
    def trap_v2c_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "trap_v2c_status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vdoms(self) -> pulumi.Output[Optional[Sequence['outputs.SystemSnmpCommunityVdom']]]:
        return pulumi.get(self, "vdoms")

