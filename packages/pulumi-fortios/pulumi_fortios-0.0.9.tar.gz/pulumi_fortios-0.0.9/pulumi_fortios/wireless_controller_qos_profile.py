# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WirelessControllerQosProfileArgs', 'WirelessControllerQosProfile']

@pulumi.input_type
class WirelessControllerQosProfileArgs:
    def __init__(__self__, *,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 burst: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 downlink: Optional[pulumi.Input[int]] = None,
                 downlink_sta: Optional[pulumi.Input[int]] = None,
                 dscp_wmm_bes: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmBeArgs']]]] = None,
                 dscp_wmm_bks: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmBkArgs']]]] = None,
                 dscp_wmm_mapping: Optional[pulumi.Input[str]] = None,
                 dscp_wmm_vis: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmViArgs']]]] = None,
                 dscp_wmm_vos: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmVoArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uplink: Optional[pulumi.Input[int]] = None,
                 uplink_sta: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wmm: Optional[pulumi.Input[str]] = None,
                 wmm_be_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_bk_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_dscp_marking: Optional[pulumi.Input[str]] = None,
                 wmm_uapsd: Optional[pulumi.Input[str]] = None,
                 wmm_vi_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_vo_dscp: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a WirelessControllerQosProfile resource.
        """
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if downlink is not None:
            pulumi.set(__self__, "downlink", downlink)
        if downlink_sta is not None:
            pulumi.set(__self__, "downlink_sta", downlink_sta)
        if dscp_wmm_bes is not None:
            pulumi.set(__self__, "dscp_wmm_bes", dscp_wmm_bes)
        if dscp_wmm_bks is not None:
            pulumi.set(__self__, "dscp_wmm_bks", dscp_wmm_bks)
        if dscp_wmm_mapping is not None:
            pulumi.set(__self__, "dscp_wmm_mapping", dscp_wmm_mapping)
        if dscp_wmm_vis is not None:
            pulumi.set(__self__, "dscp_wmm_vis", dscp_wmm_vis)
        if dscp_wmm_vos is not None:
            pulumi.set(__self__, "dscp_wmm_vos", dscp_wmm_vos)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uplink is not None:
            pulumi.set(__self__, "uplink", uplink)
        if uplink_sta is not None:
            pulumi.set(__self__, "uplink_sta", uplink_sta)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wmm is not None:
            pulumi.set(__self__, "wmm", wmm)
        if wmm_be_dscp is not None:
            pulumi.set(__self__, "wmm_be_dscp", wmm_be_dscp)
        if wmm_bk_dscp is not None:
            pulumi.set(__self__, "wmm_bk_dscp", wmm_bk_dscp)
        if wmm_dscp_marking is not None:
            pulumi.set(__self__, "wmm_dscp_marking", wmm_dscp_marking)
        if wmm_uapsd is not None:
            pulumi.set(__self__, "wmm_uapsd", wmm_uapsd)
        if wmm_vi_dscp is not None:
            pulumi.set(__self__, "wmm_vi_dscp", wmm_vi_dscp)
        if wmm_vo_dscp is not None:
            pulumi.set(__self__, "wmm_vo_dscp", wmm_vo_dscp)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter
    def burst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "burst")

    @burst.setter
    def burst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "burst", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def downlink(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "downlink")

    @downlink.setter
    def downlink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "downlink", value)

    @property
    @pulumi.getter(name="downlinkSta")
    def downlink_sta(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "downlink_sta")

    @downlink_sta.setter
    def downlink_sta(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "downlink_sta", value)

    @property
    @pulumi.getter(name="dscpWmmBes")
    def dscp_wmm_bes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmBeArgs']]]]:
        return pulumi.get(self, "dscp_wmm_bes")

    @dscp_wmm_bes.setter
    def dscp_wmm_bes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmBeArgs']]]]):
        pulumi.set(self, "dscp_wmm_bes", value)

    @property
    @pulumi.getter(name="dscpWmmBks")
    def dscp_wmm_bks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmBkArgs']]]]:
        return pulumi.get(self, "dscp_wmm_bks")

    @dscp_wmm_bks.setter
    def dscp_wmm_bks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmBkArgs']]]]):
        pulumi.set(self, "dscp_wmm_bks", value)

    @property
    @pulumi.getter(name="dscpWmmMapping")
    def dscp_wmm_mapping(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dscp_wmm_mapping")

    @dscp_wmm_mapping.setter
    def dscp_wmm_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_wmm_mapping", value)

    @property
    @pulumi.getter(name="dscpWmmVis")
    def dscp_wmm_vis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmViArgs']]]]:
        return pulumi.get(self, "dscp_wmm_vis")

    @dscp_wmm_vis.setter
    def dscp_wmm_vis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmViArgs']]]]):
        pulumi.set(self, "dscp_wmm_vis", value)

    @property
    @pulumi.getter(name="dscpWmmVos")
    def dscp_wmm_vos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmVoArgs']]]]:
        return pulumi.get(self, "dscp_wmm_vos")

    @dscp_wmm_vos.setter
    def dscp_wmm_vos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmVoArgs']]]]):
        pulumi.set(self, "dscp_wmm_vos", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uplink(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uplink")

    @uplink.setter
    def uplink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uplink", value)

    @property
    @pulumi.getter(name="uplinkSta")
    def uplink_sta(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uplink_sta")

    @uplink_sta.setter
    def uplink_sta(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uplink_sta", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def wmm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wmm")

    @wmm.setter
    def wmm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wmm", value)

    @property
    @pulumi.getter(name="wmmBeDscp")
    def wmm_be_dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wmm_be_dscp")

    @wmm_be_dscp.setter
    def wmm_be_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_be_dscp", value)

    @property
    @pulumi.getter(name="wmmBkDscp")
    def wmm_bk_dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wmm_bk_dscp")

    @wmm_bk_dscp.setter
    def wmm_bk_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_bk_dscp", value)

    @property
    @pulumi.getter(name="wmmDscpMarking")
    def wmm_dscp_marking(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wmm_dscp_marking")

    @wmm_dscp_marking.setter
    def wmm_dscp_marking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wmm_dscp_marking", value)

    @property
    @pulumi.getter(name="wmmUapsd")
    def wmm_uapsd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wmm_uapsd")

    @wmm_uapsd.setter
    def wmm_uapsd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wmm_uapsd", value)

    @property
    @pulumi.getter(name="wmmViDscp")
    def wmm_vi_dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wmm_vi_dscp")

    @wmm_vi_dscp.setter
    def wmm_vi_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_vi_dscp", value)

    @property
    @pulumi.getter(name="wmmVoDscp")
    def wmm_vo_dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wmm_vo_dscp")

    @wmm_vo_dscp.setter
    def wmm_vo_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_vo_dscp", value)


@pulumi.input_type
class _WirelessControllerQosProfileState:
    def __init__(__self__, *,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 burst: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 downlink: Optional[pulumi.Input[int]] = None,
                 downlink_sta: Optional[pulumi.Input[int]] = None,
                 dscp_wmm_bes: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmBeArgs']]]] = None,
                 dscp_wmm_bks: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmBkArgs']]]] = None,
                 dscp_wmm_mapping: Optional[pulumi.Input[str]] = None,
                 dscp_wmm_vis: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmViArgs']]]] = None,
                 dscp_wmm_vos: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmVoArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uplink: Optional[pulumi.Input[int]] = None,
                 uplink_sta: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wmm: Optional[pulumi.Input[str]] = None,
                 wmm_be_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_bk_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_dscp_marking: Optional[pulumi.Input[str]] = None,
                 wmm_uapsd: Optional[pulumi.Input[str]] = None,
                 wmm_vi_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_vo_dscp: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering WirelessControllerQosProfile resources.
        """
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if downlink is not None:
            pulumi.set(__self__, "downlink", downlink)
        if downlink_sta is not None:
            pulumi.set(__self__, "downlink_sta", downlink_sta)
        if dscp_wmm_bes is not None:
            pulumi.set(__self__, "dscp_wmm_bes", dscp_wmm_bes)
        if dscp_wmm_bks is not None:
            pulumi.set(__self__, "dscp_wmm_bks", dscp_wmm_bks)
        if dscp_wmm_mapping is not None:
            pulumi.set(__self__, "dscp_wmm_mapping", dscp_wmm_mapping)
        if dscp_wmm_vis is not None:
            pulumi.set(__self__, "dscp_wmm_vis", dscp_wmm_vis)
        if dscp_wmm_vos is not None:
            pulumi.set(__self__, "dscp_wmm_vos", dscp_wmm_vos)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uplink is not None:
            pulumi.set(__self__, "uplink", uplink)
        if uplink_sta is not None:
            pulumi.set(__self__, "uplink_sta", uplink_sta)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wmm is not None:
            pulumi.set(__self__, "wmm", wmm)
        if wmm_be_dscp is not None:
            pulumi.set(__self__, "wmm_be_dscp", wmm_be_dscp)
        if wmm_bk_dscp is not None:
            pulumi.set(__self__, "wmm_bk_dscp", wmm_bk_dscp)
        if wmm_dscp_marking is not None:
            pulumi.set(__self__, "wmm_dscp_marking", wmm_dscp_marking)
        if wmm_uapsd is not None:
            pulumi.set(__self__, "wmm_uapsd", wmm_uapsd)
        if wmm_vi_dscp is not None:
            pulumi.set(__self__, "wmm_vi_dscp", wmm_vi_dscp)
        if wmm_vo_dscp is not None:
            pulumi.set(__self__, "wmm_vo_dscp", wmm_vo_dscp)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter
    def burst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "burst")

    @burst.setter
    def burst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "burst", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def downlink(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "downlink")

    @downlink.setter
    def downlink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "downlink", value)

    @property
    @pulumi.getter(name="downlinkSta")
    def downlink_sta(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "downlink_sta")

    @downlink_sta.setter
    def downlink_sta(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "downlink_sta", value)

    @property
    @pulumi.getter(name="dscpWmmBes")
    def dscp_wmm_bes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmBeArgs']]]]:
        return pulumi.get(self, "dscp_wmm_bes")

    @dscp_wmm_bes.setter
    def dscp_wmm_bes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmBeArgs']]]]):
        pulumi.set(self, "dscp_wmm_bes", value)

    @property
    @pulumi.getter(name="dscpWmmBks")
    def dscp_wmm_bks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmBkArgs']]]]:
        return pulumi.get(self, "dscp_wmm_bks")

    @dscp_wmm_bks.setter
    def dscp_wmm_bks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmBkArgs']]]]):
        pulumi.set(self, "dscp_wmm_bks", value)

    @property
    @pulumi.getter(name="dscpWmmMapping")
    def dscp_wmm_mapping(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dscp_wmm_mapping")

    @dscp_wmm_mapping.setter
    def dscp_wmm_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_wmm_mapping", value)

    @property
    @pulumi.getter(name="dscpWmmVis")
    def dscp_wmm_vis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmViArgs']]]]:
        return pulumi.get(self, "dscp_wmm_vis")

    @dscp_wmm_vis.setter
    def dscp_wmm_vis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmViArgs']]]]):
        pulumi.set(self, "dscp_wmm_vis", value)

    @property
    @pulumi.getter(name="dscpWmmVos")
    def dscp_wmm_vos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmVoArgs']]]]:
        return pulumi.get(self, "dscp_wmm_vos")

    @dscp_wmm_vos.setter
    def dscp_wmm_vos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerQosProfileDscpWmmVoArgs']]]]):
        pulumi.set(self, "dscp_wmm_vos", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uplink(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uplink")

    @uplink.setter
    def uplink(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uplink", value)

    @property
    @pulumi.getter(name="uplinkSta")
    def uplink_sta(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uplink_sta")

    @uplink_sta.setter
    def uplink_sta(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uplink_sta", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def wmm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wmm")

    @wmm.setter
    def wmm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wmm", value)

    @property
    @pulumi.getter(name="wmmBeDscp")
    def wmm_be_dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wmm_be_dscp")

    @wmm_be_dscp.setter
    def wmm_be_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_be_dscp", value)

    @property
    @pulumi.getter(name="wmmBkDscp")
    def wmm_bk_dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wmm_bk_dscp")

    @wmm_bk_dscp.setter
    def wmm_bk_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_bk_dscp", value)

    @property
    @pulumi.getter(name="wmmDscpMarking")
    def wmm_dscp_marking(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wmm_dscp_marking")

    @wmm_dscp_marking.setter
    def wmm_dscp_marking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wmm_dscp_marking", value)

    @property
    @pulumi.getter(name="wmmUapsd")
    def wmm_uapsd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wmm_uapsd")

    @wmm_uapsd.setter
    def wmm_uapsd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wmm_uapsd", value)

    @property
    @pulumi.getter(name="wmmViDscp")
    def wmm_vi_dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wmm_vi_dscp")

    @wmm_vi_dscp.setter
    def wmm_vi_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_vi_dscp", value)

    @property
    @pulumi.getter(name="wmmVoDscp")
    def wmm_vo_dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wmm_vo_dscp")

    @wmm_vo_dscp.setter
    def wmm_vo_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wmm_vo_dscp", value)


class WirelessControllerQosProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 burst: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 downlink: Optional[pulumi.Input[int]] = None,
                 downlink_sta: Optional[pulumi.Input[int]] = None,
                 dscp_wmm_bes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerQosProfileDscpWmmBeArgs']]]]] = None,
                 dscp_wmm_bks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerQosProfileDscpWmmBkArgs']]]]] = None,
                 dscp_wmm_mapping: Optional[pulumi.Input[str]] = None,
                 dscp_wmm_vis: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerQosProfileDscpWmmViArgs']]]]] = None,
                 dscp_wmm_vos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerQosProfileDscpWmmVoArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uplink: Optional[pulumi.Input[int]] = None,
                 uplink_sta: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wmm: Optional[pulumi.Input[str]] = None,
                 wmm_be_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_bk_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_dscp_marking: Optional[pulumi.Input[str]] = None,
                 wmm_uapsd: Optional[pulumi.Input[str]] = None,
                 wmm_vi_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_vo_dscp: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a WirelessControllerQosProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WirelessControllerQosProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WirelessControllerQosProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WirelessControllerQosProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WirelessControllerQosProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 burst: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 downlink: Optional[pulumi.Input[int]] = None,
                 downlink_sta: Optional[pulumi.Input[int]] = None,
                 dscp_wmm_bes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerQosProfileDscpWmmBeArgs']]]]] = None,
                 dscp_wmm_bks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerQosProfileDscpWmmBkArgs']]]]] = None,
                 dscp_wmm_mapping: Optional[pulumi.Input[str]] = None,
                 dscp_wmm_vis: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerQosProfileDscpWmmViArgs']]]]] = None,
                 dscp_wmm_vos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerQosProfileDscpWmmVoArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uplink: Optional[pulumi.Input[int]] = None,
                 uplink_sta: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wmm: Optional[pulumi.Input[str]] = None,
                 wmm_be_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_bk_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_dscp_marking: Optional[pulumi.Input[str]] = None,
                 wmm_uapsd: Optional[pulumi.Input[str]] = None,
                 wmm_vi_dscp: Optional[pulumi.Input[int]] = None,
                 wmm_vo_dscp: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WirelessControllerQosProfileArgs.__new__(WirelessControllerQosProfileArgs)

            __props__.__dict__["bandwidth_admission_control"] = bandwidth_admission_control
            __props__.__dict__["bandwidth_capacity"] = bandwidth_capacity
            __props__.__dict__["burst"] = burst
            __props__.__dict__["call_admission_control"] = call_admission_control
            __props__.__dict__["call_capacity"] = call_capacity
            __props__.__dict__["comment"] = comment
            __props__.__dict__["downlink"] = downlink
            __props__.__dict__["downlink_sta"] = downlink_sta
            __props__.__dict__["dscp_wmm_bes"] = dscp_wmm_bes
            __props__.__dict__["dscp_wmm_bks"] = dscp_wmm_bks
            __props__.__dict__["dscp_wmm_mapping"] = dscp_wmm_mapping
            __props__.__dict__["dscp_wmm_vis"] = dscp_wmm_vis
            __props__.__dict__["dscp_wmm_vos"] = dscp_wmm_vos
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["name"] = name
            __props__.__dict__["uplink"] = uplink
            __props__.__dict__["uplink_sta"] = uplink_sta
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["wmm"] = wmm
            __props__.__dict__["wmm_be_dscp"] = wmm_be_dscp
            __props__.__dict__["wmm_bk_dscp"] = wmm_bk_dscp
            __props__.__dict__["wmm_dscp_marking"] = wmm_dscp_marking
            __props__.__dict__["wmm_uapsd"] = wmm_uapsd
            __props__.__dict__["wmm_vi_dscp"] = wmm_vi_dscp
            __props__.__dict__["wmm_vo_dscp"] = wmm_vo_dscp
        super(WirelessControllerQosProfile, __self__).__init__(
            'fortios:index/wirelessControllerQosProfile:WirelessControllerQosProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
            bandwidth_capacity: Optional[pulumi.Input[int]] = None,
            burst: Optional[pulumi.Input[str]] = None,
            call_admission_control: Optional[pulumi.Input[str]] = None,
            call_capacity: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            downlink: Optional[pulumi.Input[int]] = None,
            downlink_sta: Optional[pulumi.Input[int]] = None,
            dscp_wmm_bes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerQosProfileDscpWmmBeArgs']]]]] = None,
            dscp_wmm_bks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerQosProfileDscpWmmBkArgs']]]]] = None,
            dscp_wmm_mapping: Optional[pulumi.Input[str]] = None,
            dscp_wmm_vis: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerQosProfileDscpWmmViArgs']]]]] = None,
            dscp_wmm_vos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WirelessControllerQosProfileDscpWmmVoArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            uplink: Optional[pulumi.Input[int]] = None,
            uplink_sta: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            wmm: Optional[pulumi.Input[str]] = None,
            wmm_be_dscp: Optional[pulumi.Input[int]] = None,
            wmm_bk_dscp: Optional[pulumi.Input[int]] = None,
            wmm_dscp_marking: Optional[pulumi.Input[str]] = None,
            wmm_uapsd: Optional[pulumi.Input[str]] = None,
            wmm_vi_dscp: Optional[pulumi.Input[int]] = None,
            wmm_vo_dscp: Optional[pulumi.Input[int]] = None) -> 'WirelessControllerQosProfile':
        """
        Get an existing WirelessControllerQosProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WirelessControllerQosProfileState.__new__(_WirelessControllerQosProfileState)

        __props__.__dict__["bandwidth_admission_control"] = bandwidth_admission_control
        __props__.__dict__["bandwidth_capacity"] = bandwidth_capacity
        __props__.__dict__["burst"] = burst
        __props__.__dict__["call_admission_control"] = call_admission_control
        __props__.__dict__["call_capacity"] = call_capacity
        __props__.__dict__["comment"] = comment
        __props__.__dict__["downlink"] = downlink
        __props__.__dict__["downlink_sta"] = downlink_sta
        __props__.__dict__["dscp_wmm_bes"] = dscp_wmm_bes
        __props__.__dict__["dscp_wmm_bks"] = dscp_wmm_bks
        __props__.__dict__["dscp_wmm_mapping"] = dscp_wmm_mapping
        __props__.__dict__["dscp_wmm_vis"] = dscp_wmm_vis
        __props__.__dict__["dscp_wmm_vos"] = dscp_wmm_vos
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["name"] = name
        __props__.__dict__["uplink"] = uplink
        __props__.__dict__["uplink_sta"] = uplink_sta
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["wmm"] = wmm
        __props__.__dict__["wmm_be_dscp"] = wmm_be_dscp
        __props__.__dict__["wmm_bk_dscp"] = wmm_bk_dscp
        __props__.__dict__["wmm_dscp_marking"] = wmm_dscp_marking
        __props__.__dict__["wmm_uapsd"] = wmm_uapsd
        __props__.__dict__["wmm_vi_dscp"] = wmm_vi_dscp
        __props__.__dict__["wmm_vo_dscp"] = wmm_vo_dscp
        return WirelessControllerQosProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bandwidth_admission_control")

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> pulumi.Output[int]:
        return pulumi.get(self, "bandwidth_capacity")

    @property
    @pulumi.getter
    def burst(self) -> pulumi.Output[str]:
        return pulumi.get(self, "burst")

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> pulumi.Output[str]:
        return pulumi.get(self, "call_admission_control")

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> pulumi.Output[int]:
        return pulumi.get(self, "call_capacity")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def downlink(self) -> pulumi.Output[int]:
        return pulumi.get(self, "downlink")

    @property
    @pulumi.getter(name="downlinkSta")
    def downlink_sta(self) -> pulumi.Output[int]:
        return pulumi.get(self, "downlink_sta")

    @property
    @pulumi.getter(name="dscpWmmBes")
    def dscp_wmm_bes(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerQosProfileDscpWmmBe']]]:
        return pulumi.get(self, "dscp_wmm_bes")

    @property
    @pulumi.getter(name="dscpWmmBks")
    def dscp_wmm_bks(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerQosProfileDscpWmmBk']]]:
        return pulumi.get(self, "dscp_wmm_bks")

    @property
    @pulumi.getter(name="dscpWmmMapping")
    def dscp_wmm_mapping(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dscp_wmm_mapping")

    @property
    @pulumi.getter(name="dscpWmmVis")
    def dscp_wmm_vis(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerQosProfileDscpWmmVi']]]:
        return pulumi.get(self, "dscp_wmm_vis")

    @property
    @pulumi.getter(name="dscpWmmVos")
    def dscp_wmm_vos(self) -> pulumi.Output[Optional[Sequence['outputs.WirelessControllerQosProfileDscpWmmVo']]]:
        return pulumi.get(self, "dscp_wmm_vos")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uplink(self) -> pulumi.Output[int]:
        return pulumi.get(self, "uplink")

    @property
    @pulumi.getter(name="uplinkSta")
    def uplink_sta(self) -> pulumi.Output[int]:
        return pulumi.get(self, "uplink_sta")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def wmm(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wmm")

    @property
    @pulumi.getter(name="wmmBeDscp")
    def wmm_be_dscp(self) -> pulumi.Output[int]:
        return pulumi.get(self, "wmm_be_dscp")

    @property
    @pulumi.getter(name="wmmBkDscp")
    def wmm_bk_dscp(self) -> pulumi.Output[int]:
        return pulumi.get(self, "wmm_bk_dscp")

    @property
    @pulumi.getter(name="wmmDscpMarking")
    def wmm_dscp_marking(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wmm_dscp_marking")

    @property
    @pulumi.getter(name="wmmUapsd")
    def wmm_uapsd(self) -> pulumi.Output[str]:
        return pulumi.get(self, "wmm_uapsd")

    @property
    @pulumi.getter(name="wmmViDscp")
    def wmm_vi_dscp(self) -> pulumi.Output[int]:
        return pulumi.get(self, "wmm_vi_dscp")

    @property
    @pulumi.getter(name="wmmVoDscp")
    def wmm_vo_dscp(self) -> pulumi.Output[int]:
        return pulumi.get(self, "wmm_vo_dscp")

