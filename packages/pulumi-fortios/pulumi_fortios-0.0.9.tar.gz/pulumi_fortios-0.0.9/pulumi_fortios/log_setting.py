# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogSettingArgs', 'LogSetting']

@pulumi.input_type
class LogSettingArgs:
    def __init__(__self__, *,
                 anonymization_hash: Optional[pulumi.Input[str]] = None,
                 brief_traffic_format: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input['LogSettingCustomLogFieldArgs']]]] = None,
                 daemon_log: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 expolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 faz_override: Optional[pulumi.Input[str]] = None,
                 fwpolicy6_implicit_log: Optional[pulumi.Input[str]] = None,
                 fwpolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 local_in_allow: Optional[pulumi.Input[str]] = None,
                 local_in_deny_broadcast: Optional[pulumi.Input[str]] = None,
                 local_in_deny_unicast: Optional[pulumi.Input[str]] = None,
                 local_out: Optional[pulumi.Input[str]] = None,
                 local_out_ioc_detection: Optional[pulumi.Input[str]] = None,
                 log_invalid_packet: Optional[pulumi.Input[str]] = None,
                 log_policy_comment: Optional[pulumi.Input[str]] = None,
                 log_policy_name: Optional[pulumi.Input[str]] = None,
                 log_user_in_upper: Optional[pulumi.Input[str]] = None,
                 neighbor_event: Optional[pulumi.Input[str]] = None,
                 resolve_ip: Optional[pulumi.Input[str]] = None,
                 resolve_port: Optional[pulumi.Input[str]] = None,
                 rest_api_get: Optional[pulumi.Input[str]] = None,
                 rest_api_set: Optional[pulumi.Input[str]] = None,
                 syslog_override: Optional[pulumi.Input[str]] = None,
                 user_anonymize: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LogSetting resource.
        """
        if anonymization_hash is not None:
            pulumi.set(__self__, "anonymization_hash", anonymization_hash)
        if brief_traffic_format is not None:
            pulumi.set(__self__, "brief_traffic_format", brief_traffic_format)
        if custom_log_fields is not None:
            pulumi.set(__self__, "custom_log_fields", custom_log_fields)
        if daemon_log is not None:
            pulumi.set(__self__, "daemon_log", daemon_log)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if expolicy_implicit_log is not None:
            pulumi.set(__self__, "expolicy_implicit_log", expolicy_implicit_log)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if faz_override is not None:
            pulumi.set(__self__, "faz_override", faz_override)
        if fwpolicy6_implicit_log is not None:
            pulumi.set(__self__, "fwpolicy6_implicit_log", fwpolicy6_implicit_log)
        if fwpolicy_implicit_log is not None:
            pulumi.set(__self__, "fwpolicy_implicit_log", fwpolicy_implicit_log)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if local_in_allow is not None:
            pulumi.set(__self__, "local_in_allow", local_in_allow)
        if local_in_deny_broadcast is not None:
            pulumi.set(__self__, "local_in_deny_broadcast", local_in_deny_broadcast)
        if local_in_deny_unicast is not None:
            pulumi.set(__self__, "local_in_deny_unicast", local_in_deny_unicast)
        if local_out is not None:
            pulumi.set(__self__, "local_out", local_out)
        if local_out_ioc_detection is not None:
            pulumi.set(__self__, "local_out_ioc_detection", local_out_ioc_detection)
        if log_invalid_packet is not None:
            pulumi.set(__self__, "log_invalid_packet", log_invalid_packet)
        if log_policy_comment is not None:
            pulumi.set(__self__, "log_policy_comment", log_policy_comment)
        if log_policy_name is not None:
            pulumi.set(__self__, "log_policy_name", log_policy_name)
        if log_user_in_upper is not None:
            pulumi.set(__self__, "log_user_in_upper", log_user_in_upper)
        if neighbor_event is not None:
            pulumi.set(__self__, "neighbor_event", neighbor_event)
        if resolve_ip is not None:
            pulumi.set(__self__, "resolve_ip", resolve_ip)
        if resolve_port is not None:
            pulumi.set(__self__, "resolve_port", resolve_port)
        if rest_api_get is not None:
            pulumi.set(__self__, "rest_api_get", rest_api_get)
        if rest_api_set is not None:
            pulumi.set(__self__, "rest_api_set", rest_api_set)
        if syslog_override is not None:
            pulumi.set(__self__, "syslog_override", syslog_override)
        if user_anonymize is not None:
            pulumi.set(__self__, "user_anonymize", user_anonymize)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="anonymizationHash")
    def anonymization_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "anonymization_hash")

    @anonymization_hash.setter
    def anonymization_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anonymization_hash", value)

    @property
    @pulumi.getter(name="briefTrafficFormat")
    def brief_traffic_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "brief_traffic_format")

    @brief_traffic_format.setter
    def brief_traffic_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "brief_traffic_format", value)

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogSettingCustomLogFieldArgs']]]]:
        return pulumi.get(self, "custom_log_fields")

    @custom_log_fields.setter
    def custom_log_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogSettingCustomLogFieldArgs']]]]):
        pulumi.set(self, "custom_log_fields", value)

    @property
    @pulumi.getter(name="daemonLog")
    def daemon_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "daemon_log")

    @daemon_log.setter
    def daemon_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daemon_log", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="expolicyImplicitLog")
    def expolicy_implicit_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expolicy_implicit_log")

    @expolicy_implicit_log.setter
    def expolicy_implicit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expolicy_implicit_log", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="fazOverride")
    def faz_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "faz_override")

    @faz_override.setter
    def faz_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_override", value)

    @property
    @pulumi.getter(name="fwpolicy6ImplicitLog")
    def fwpolicy6_implicit_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fwpolicy6_implicit_log")

    @fwpolicy6_implicit_log.setter
    def fwpolicy6_implicit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fwpolicy6_implicit_log", value)

    @property
    @pulumi.getter(name="fwpolicyImplicitLog")
    def fwpolicy_implicit_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fwpolicy_implicit_log")

    @fwpolicy_implicit_log.setter
    def fwpolicy_implicit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fwpolicy_implicit_log", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="localInAllow")
    def local_in_allow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_in_allow")

    @local_in_allow.setter
    def local_in_allow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_in_allow", value)

    @property
    @pulumi.getter(name="localInDenyBroadcast")
    def local_in_deny_broadcast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_in_deny_broadcast")

    @local_in_deny_broadcast.setter
    def local_in_deny_broadcast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_in_deny_broadcast", value)

    @property
    @pulumi.getter(name="localInDenyUnicast")
    def local_in_deny_unicast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_in_deny_unicast")

    @local_in_deny_unicast.setter
    def local_in_deny_unicast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_in_deny_unicast", value)

    @property
    @pulumi.getter(name="localOut")
    def local_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_out")

    @local_out.setter
    def local_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_out", value)

    @property
    @pulumi.getter(name="localOutIocDetection")
    def local_out_ioc_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_out_ioc_detection")

    @local_out_ioc_detection.setter
    def local_out_ioc_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_out_ioc_detection", value)

    @property
    @pulumi.getter(name="logInvalidPacket")
    def log_invalid_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_invalid_packet")

    @log_invalid_packet.setter
    def log_invalid_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_invalid_packet", value)

    @property
    @pulumi.getter(name="logPolicyComment")
    def log_policy_comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_policy_comment")

    @log_policy_comment.setter
    def log_policy_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_policy_comment", value)

    @property
    @pulumi.getter(name="logPolicyName")
    def log_policy_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_policy_name")

    @log_policy_name.setter
    def log_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_policy_name", value)

    @property
    @pulumi.getter(name="logUserInUpper")
    def log_user_in_upper(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_user_in_upper")

    @log_user_in_upper.setter
    def log_user_in_upper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_user_in_upper", value)

    @property
    @pulumi.getter(name="neighborEvent")
    def neighbor_event(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "neighbor_event")

    @neighbor_event.setter
    def neighbor_event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_event", value)

    @property
    @pulumi.getter(name="resolveIp")
    def resolve_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolve_ip")

    @resolve_ip.setter
    def resolve_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolve_ip", value)

    @property
    @pulumi.getter(name="resolvePort")
    def resolve_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolve_port")

    @resolve_port.setter
    def resolve_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolve_port", value)

    @property
    @pulumi.getter(name="restApiGet")
    def rest_api_get(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rest_api_get")

    @rest_api_get.setter
    def rest_api_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rest_api_get", value)

    @property
    @pulumi.getter(name="restApiSet")
    def rest_api_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rest_api_set")

    @rest_api_set.setter
    def rest_api_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rest_api_set", value)

    @property
    @pulumi.getter(name="syslogOverride")
    def syslog_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "syslog_override")

    @syslog_override.setter
    def syslog_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "syslog_override", value)

    @property
    @pulumi.getter(name="userAnonymize")
    def user_anonymize(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_anonymize")

    @user_anonymize.setter
    def user_anonymize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_anonymize", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _LogSettingState:
    def __init__(__self__, *,
                 anonymization_hash: Optional[pulumi.Input[str]] = None,
                 brief_traffic_format: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input['LogSettingCustomLogFieldArgs']]]] = None,
                 daemon_log: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 expolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 faz_override: Optional[pulumi.Input[str]] = None,
                 fwpolicy6_implicit_log: Optional[pulumi.Input[str]] = None,
                 fwpolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 local_in_allow: Optional[pulumi.Input[str]] = None,
                 local_in_deny_broadcast: Optional[pulumi.Input[str]] = None,
                 local_in_deny_unicast: Optional[pulumi.Input[str]] = None,
                 local_out: Optional[pulumi.Input[str]] = None,
                 local_out_ioc_detection: Optional[pulumi.Input[str]] = None,
                 log_invalid_packet: Optional[pulumi.Input[str]] = None,
                 log_policy_comment: Optional[pulumi.Input[str]] = None,
                 log_policy_name: Optional[pulumi.Input[str]] = None,
                 log_user_in_upper: Optional[pulumi.Input[str]] = None,
                 neighbor_event: Optional[pulumi.Input[str]] = None,
                 resolve_ip: Optional[pulumi.Input[str]] = None,
                 resolve_port: Optional[pulumi.Input[str]] = None,
                 rest_api_get: Optional[pulumi.Input[str]] = None,
                 rest_api_set: Optional[pulumi.Input[str]] = None,
                 syslog_override: Optional[pulumi.Input[str]] = None,
                 user_anonymize: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LogSetting resources.
        """
        if anonymization_hash is not None:
            pulumi.set(__self__, "anonymization_hash", anonymization_hash)
        if brief_traffic_format is not None:
            pulumi.set(__self__, "brief_traffic_format", brief_traffic_format)
        if custom_log_fields is not None:
            pulumi.set(__self__, "custom_log_fields", custom_log_fields)
        if daemon_log is not None:
            pulumi.set(__self__, "daemon_log", daemon_log)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if expolicy_implicit_log is not None:
            pulumi.set(__self__, "expolicy_implicit_log", expolicy_implicit_log)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if faz_override is not None:
            pulumi.set(__self__, "faz_override", faz_override)
        if fwpolicy6_implicit_log is not None:
            pulumi.set(__self__, "fwpolicy6_implicit_log", fwpolicy6_implicit_log)
        if fwpolicy_implicit_log is not None:
            pulumi.set(__self__, "fwpolicy_implicit_log", fwpolicy_implicit_log)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if local_in_allow is not None:
            pulumi.set(__self__, "local_in_allow", local_in_allow)
        if local_in_deny_broadcast is not None:
            pulumi.set(__self__, "local_in_deny_broadcast", local_in_deny_broadcast)
        if local_in_deny_unicast is not None:
            pulumi.set(__self__, "local_in_deny_unicast", local_in_deny_unicast)
        if local_out is not None:
            pulumi.set(__self__, "local_out", local_out)
        if local_out_ioc_detection is not None:
            pulumi.set(__self__, "local_out_ioc_detection", local_out_ioc_detection)
        if log_invalid_packet is not None:
            pulumi.set(__self__, "log_invalid_packet", log_invalid_packet)
        if log_policy_comment is not None:
            pulumi.set(__self__, "log_policy_comment", log_policy_comment)
        if log_policy_name is not None:
            pulumi.set(__self__, "log_policy_name", log_policy_name)
        if log_user_in_upper is not None:
            pulumi.set(__self__, "log_user_in_upper", log_user_in_upper)
        if neighbor_event is not None:
            pulumi.set(__self__, "neighbor_event", neighbor_event)
        if resolve_ip is not None:
            pulumi.set(__self__, "resolve_ip", resolve_ip)
        if resolve_port is not None:
            pulumi.set(__self__, "resolve_port", resolve_port)
        if rest_api_get is not None:
            pulumi.set(__self__, "rest_api_get", rest_api_get)
        if rest_api_set is not None:
            pulumi.set(__self__, "rest_api_set", rest_api_set)
        if syslog_override is not None:
            pulumi.set(__self__, "syslog_override", syslog_override)
        if user_anonymize is not None:
            pulumi.set(__self__, "user_anonymize", user_anonymize)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="anonymizationHash")
    def anonymization_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "anonymization_hash")

    @anonymization_hash.setter
    def anonymization_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anonymization_hash", value)

    @property
    @pulumi.getter(name="briefTrafficFormat")
    def brief_traffic_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "brief_traffic_format")

    @brief_traffic_format.setter
    def brief_traffic_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "brief_traffic_format", value)

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogSettingCustomLogFieldArgs']]]]:
        return pulumi.get(self, "custom_log_fields")

    @custom_log_fields.setter
    def custom_log_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogSettingCustomLogFieldArgs']]]]):
        pulumi.set(self, "custom_log_fields", value)

    @property
    @pulumi.getter(name="daemonLog")
    def daemon_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "daemon_log")

    @daemon_log.setter
    def daemon_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daemon_log", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="expolicyImplicitLog")
    def expolicy_implicit_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expolicy_implicit_log")

    @expolicy_implicit_log.setter
    def expolicy_implicit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expolicy_implicit_log", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="fazOverride")
    def faz_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "faz_override")

    @faz_override.setter
    def faz_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_override", value)

    @property
    @pulumi.getter(name="fwpolicy6ImplicitLog")
    def fwpolicy6_implicit_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fwpolicy6_implicit_log")

    @fwpolicy6_implicit_log.setter
    def fwpolicy6_implicit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fwpolicy6_implicit_log", value)

    @property
    @pulumi.getter(name="fwpolicyImplicitLog")
    def fwpolicy_implicit_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fwpolicy_implicit_log")

    @fwpolicy_implicit_log.setter
    def fwpolicy_implicit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fwpolicy_implicit_log", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="localInAllow")
    def local_in_allow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_in_allow")

    @local_in_allow.setter
    def local_in_allow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_in_allow", value)

    @property
    @pulumi.getter(name="localInDenyBroadcast")
    def local_in_deny_broadcast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_in_deny_broadcast")

    @local_in_deny_broadcast.setter
    def local_in_deny_broadcast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_in_deny_broadcast", value)

    @property
    @pulumi.getter(name="localInDenyUnicast")
    def local_in_deny_unicast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_in_deny_unicast")

    @local_in_deny_unicast.setter
    def local_in_deny_unicast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_in_deny_unicast", value)

    @property
    @pulumi.getter(name="localOut")
    def local_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_out")

    @local_out.setter
    def local_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_out", value)

    @property
    @pulumi.getter(name="localOutIocDetection")
    def local_out_ioc_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_out_ioc_detection")

    @local_out_ioc_detection.setter
    def local_out_ioc_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_out_ioc_detection", value)

    @property
    @pulumi.getter(name="logInvalidPacket")
    def log_invalid_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_invalid_packet")

    @log_invalid_packet.setter
    def log_invalid_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_invalid_packet", value)

    @property
    @pulumi.getter(name="logPolicyComment")
    def log_policy_comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_policy_comment")

    @log_policy_comment.setter
    def log_policy_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_policy_comment", value)

    @property
    @pulumi.getter(name="logPolicyName")
    def log_policy_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_policy_name")

    @log_policy_name.setter
    def log_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_policy_name", value)

    @property
    @pulumi.getter(name="logUserInUpper")
    def log_user_in_upper(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_user_in_upper")

    @log_user_in_upper.setter
    def log_user_in_upper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_user_in_upper", value)

    @property
    @pulumi.getter(name="neighborEvent")
    def neighbor_event(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "neighbor_event")

    @neighbor_event.setter
    def neighbor_event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_event", value)

    @property
    @pulumi.getter(name="resolveIp")
    def resolve_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolve_ip")

    @resolve_ip.setter
    def resolve_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolve_ip", value)

    @property
    @pulumi.getter(name="resolvePort")
    def resolve_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolve_port")

    @resolve_port.setter
    def resolve_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolve_port", value)

    @property
    @pulumi.getter(name="restApiGet")
    def rest_api_get(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rest_api_get")

    @rest_api_get.setter
    def rest_api_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rest_api_get", value)

    @property
    @pulumi.getter(name="restApiSet")
    def rest_api_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rest_api_set")

    @rest_api_set.setter
    def rest_api_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rest_api_set", value)

    @property
    @pulumi.getter(name="syslogOverride")
    def syslog_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "syslog_override")

    @syslog_override.setter
    def syslog_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "syslog_override", value)

    @property
    @pulumi.getter(name="userAnonymize")
    def user_anonymize(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_anonymize")

    @user_anonymize.setter
    def user_anonymize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_anonymize", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class LogSetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anonymization_hash: Optional[pulumi.Input[str]] = None,
                 brief_traffic_format: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogSettingCustomLogFieldArgs']]]]] = None,
                 daemon_log: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 expolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 faz_override: Optional[pulumi.Input[str]] = None,
                 fwpolicy6_implicit_log: Optional[pulumi.Input[str]] = None,
                 fwpolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 local_in_allow: Optional[pulumi.Input[str]] = None,
                 local_in_deny_broadcast: Optional[pulumi.Input[str]] = None,
                 local_in_deny_unicast: Optional[pulumi.Input[str]] = None,
                 local_out: Optional[pulumi.Input[str]] = None,
                 local_out_ioc_detection: Optional[pulumi.Input[str]] = None,
                 log_invalid_packet: Optional[pulumi.Input[str]] = None,
                 log_policy_comment: Optional[pulumi.Input[str]] = None,
                 log_policy_name: Optional[pulumi.Input[str]] = None,
                 log_user_in_upper: Optional[pulumi.Input[str]] = None,
                 neighbor_event: Optional[pulumi.Input[str]] = None,
                 resolve_ip: Optional[pulumi.Input[str]] = None,
                 resolve_port: Optional[pulumi.Input[str]] = None,
                 rest_api_get: Optional[pulumi.Input[str]] = None,
                 rest_api_set: Optional[pulumi.Input[str]] = None,
                 syslog_override: Optional[pulumi.Input[str]] = None,
                 user_anonymize: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a LogSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LogSettingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogSettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogSettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anonymization_hash: Optional[pulumi.Input[str]] = None,
                 brief_traffic_format: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogSettingCustomLogFieldArgs']]]]] = None,
                 daemon_log: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 expolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 faz_override: Optional[pulumi.Input[str]] = None,
                 fwpolicy6_implicit_log: Optional[pulumi.Input[str]] = None,
                 fwpolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 local_in_allow: Optional[pulumi.Input[str]] = None,
                 local_in_deny_broadcast: Optional[pulumi.Input[str]] = None,
                 local_in_deny_unicast: Optional[pulumi.Input[str]] = None,
                 local_out: Optional[pulumi.Input[str]] = None,
                 local_out_ioc_detection: Optional[pulumi.Input[str]] = None,
                 log_invalid_packet: Optional[pulumi.Input[str]] = None,
                 log_policy_comment: Optional[pulumi.Input[str]] = None,
                 log_policy_name: Optional[pulumi.Input[str]] = None,
                 log_user_in_upper: Optional[pulumi.Input[str]] = None,
                 neighbor_event: Optional[pulumi.Input[str]] = None,
                 resolve_ip: Optional[pulumi.Input[str]] = None,
                 resolve_port: Optional[pulumi.Input[str]] = None,
                 rest_api_get: Optional[pulumi.Input[str]] = None,
                 rest_api_set: Optional[pulumi.Input[str]] = None,
                 syslog_override: Optional[pulumi.Input[str]] = None,
                 user_anonymize: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogSettingArgs.__new__(LogSettingArgs)

            __props__.__dict__["anonymization_hash"] = anonymization_hash
            __props__.__dict__["brief_traffic_format"] = brief_traffic_format
            __props__.__dict__["custom_log_fields"] = custom_log_fields
            __props__.__dict__["daemon_log"] = daemon_log
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["expolicy_implicit_log"] = expolicy_implicit_log
            __props__.__dict__["extended_log"] = extended_log
            __props__.__dict__["faz_override"] = faz_override
            __props__.__dict__["fwpolicy6_implicit_log"] = fwpolicy6_implicit_log
            __props__.__dict__["fwpolicy_implicit_log"] = fwpolicy_implicit_log
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["local_in_allow"] = local_in_allow
            __props__.__dict__["local_in_deny_broadcast"] = local_in_deny_broadcast
            __props__.__dict__["local_in_deny_unicast"] = local_in_deny_unicast
            __props__.__dict__["local_out"] = local_out
            __props__.__dict__["local_out_ioc_detection"] = local_out_ioc_detection
            __props__.__dict__["log_invalid_packet"] = log_invalid_packet
            __props__.__dict__["log_policy_comment"] = log_policy_comment
            __props__.__dict__["log_policy_name"] = log_policy_name
            __props__.__dict__["log_user_in_upper"] = log_user_in_upper
            __props__.__dict__["neighbor_event"] = neighbor_event
            __props__.__dict__["resolve_ip"] = resolve_ip
            __props__.__dict__["resolve_port"] = resolve_port
            __props__.__dict__["rest_api_get"] = rest_api_get
            __props__.__dict__["rest_api_set"] = rest_api_set
            __props__.__dict__["syslog_override"] = syslog_override
            __props__.__dict__["user_anonymize"] = user_anonymize
            __props__.__dict__["vdomparam"] = vdomparam
        super(LogSetting, __self__).__init__(
            'fortios:index/logSetting:LogSetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            anonymization_hash: Optional[pulumi.Input[str]] = None,
            brief_traffic_format: Optional[pulumi.Input[str]] = None,
            custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogSettingCustomLogFieldArgs']]]]] = None,
            daemon_log: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            expolicy_implicit_log: Optional[pulumi.Input[str]] = None,
            extended_log: Optional[pulumi.Input[str]] = None,
            faz_override: Optional[pulumi.Input[str]] = None,
            fwpolicy6_implicit_log: Optional[pulumi.Input[str]] = None,
            fwpolicy_implicit_log: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            local_in_allow: Optional[pulumi.Input[str]] = None,
            local_in_deny_broadcast: Optional[pulumi.Input[str]] = None,
            local_in_deny_unicast: Optional[pulumi.Input[str]] = None,
            local_out: Optional[pulumi.Input[str]] = None,
            local_out_ioc_detection: Optional[pulumi.Input[str]] = None,
            log_invalid_packet: Optional[pulumi.Input[str]] = None,
            log_policy_comment: Optional[pulumi.Input[str]] = None,
            log_policy_name: Optional[pulumi.Input[str]] = None,
            log_user_in_upper: Optional[pulumi.Input[str]] = None,
            neighbor_event: Optional[pulumi.Input[str]] = None,
            resolve_ip: Optional[pulumi.Input[str]] = None,
            resolve_port: Optional[pulumi.Input[str]] = None,
            rest_api_get: Optional[pulumi.Input[str]] = None,
            rest_api_set: Optional[pulumi.Input[str]] = None,
            syslog_override: Optional[pulumi.Input[str]] = None,
            user_anonymize: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'LogSetting':
        """
        Get an existing LogSetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogSettingState.__new__(_LogSettingState)

        __props__.__dict__["anonymization_hash"] = anonymization_hash
        __props__.__dict__["brief_traffic_format"] = brief_traffic_format
        __props__.__dict__["custom_log_fields"] = custom_log_fields
        __props__.__dict__["daemon_log"] = daemon_log
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["expolicy_implicit_log"] = expolicy_implicit_log
        __props__.__dict__["extended_log"] = extended_log
        __props__.__dict__["faz_override"] = faz_override
        __props__.__dict__["fwpolicy6_implicit_log"] = fwpolicy6_implicit_log
        __props__.__dict__["fwpolicy_implicit_log"] = fwpolicy_implicit_log
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["local_in_allow"] = local_in_allow
        __props__.__dict__["local_in_deny_broadcast"] = local_in_deny_broadcast
        __props__.__dict__["local_in_deny_unicast"] = local_in_deny_unicast
        __props__.__dict__["local_out"] = local_out
        __props__.__dict__["local_out_ioc_detection"] = local_out_ioc_detection
        __props__.__dict__["log_invalid_packet"] = log_invalid_packet
        __props__.__dict__["log_policy_comment"] = log_policy_comment
        __props__.__dict__["log_policy_name"] = log_policy_name
        __props__.__dict__["log_user_in_upper"] = log_user_in_upper
        __props__.__dict__["neighbor_event"] = neighbor_event
        __props__.__dict__["resolve_ip"] = resolve_ip
        __props__.__dict__["resolve_port"] = resolve_port
        __props__.__dict__["rest_api_get"] = rest_api_get
        __props__.__dict__["rest_api_set"] = rest_api_set
        __props__.__dict__["syslog_override"] = syslog_override
        __props__.__dict__["user_anonymize"] = user_anonymize
        __props__.__dict__["vdomparam"] = vdomparam
        return LogSetting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="anonymizationHash")
    def anonymization_hash(self) -> pulumi.Output[str]:
        return pulumi.get(self, "anonymization_hash")

    @property
    @pulumi.getter(name="briefTrafficFormat")
    def brief_traffic_format(self) -> pulumi.Output[str]:
        return pulumi.get(self, "brief_traffic_format")

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> pulumi.Output[Optional[Sequence['outputs.LogSettingCustomLogField']]]:
        return pulumi.get(self, "custom_log_fields")

    @property
    @pulumi.getter(name="daemonLog")
    def daemon_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "daemon_log")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="expolicyImplicitLog")
    def expolicy_implicit_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "expolicy_implicit_log")

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "extended_log")

    @property
    @pulumi.getter(name="fazOverride")
    def faz_override(self) -> pulumi.Output[str]:
        return pulumi.get(self, "faz_override")

    @property
    @pulumi.getter(name="fwpolicy6ImplicitLog")
    def fwpolicy6_implicit_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fwpolicy6_implicit_log")

    @property
    @pulumi.getter(name="fwpolicyImplicitLog")
    def fwpolicy_implicit_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fwpolicy_implicit_log")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="localInAllow")
    def local_in_allow(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_in_allow")

    @property
    @pulumi.getter(name="localInDenyBroadcast")
    def local_in_deny_broadcast(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_in_deny_broadcast")

    @property
    @pulumi.getter(name="localInDenyUnicast")
    def local_in_deny_unicast(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_in_deny_unicast")

    @property
    @pulumi.getter(name="localOut")
    def local_out(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_out")

    @property
    @pulumi.getter(name="localOutIocDetection")
    def local_out_ioc_detection(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_out_ioc_detection")

    @property
    @pulumi.getter(name="logInvalidPacket")
    def log_invalid_packet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_invalid_packet")

    @property
    @pulumi.getter(name="logPolicyComment")
    def log_policy_comment(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_policy_comment")

    @property
    @pulumi.getter(name="logPolicyName")
    def log_policy_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_policy_name")

    @property
    @pulumi.getter(name="logUserInUpper")
    def log_user_in_upper(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_user_in_upper")

    @property
    @pulumi.getter(name="neighborEvent")
    def neighbor_event(self) -> pulumi.Output[str]:
        return pulumi.get(self, "neighbor_event")

    @property
    @pulumi.getter(name="resolveIp")
    def resolve_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "resolve_ip")

    @property
    @pulumi.getter(name="resolvePort")
    def resolve_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "resolve_port")

    @property
    @pulumi.getter(name="restApiGet")
    def rest_api_get(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rest_api_get")

    @property
    @pulumi.getter(name="restApiSet")
    def rest_api_set(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rest_api_set")

    @property
    @pulumi.getter(name="syslogOverride")
    def syslog_override(self) -> pulumi.Output[str]:
        return pulumi.get(self, "syslog_override")

    @property
    @pulumi.getter(name="userAnonymize")
    def user_anonymize(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user_anonymize")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

