# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FirewallIpTranslationArgs', 'FirewallIpTranslation']

@pulumi.input_type
class FirewallIpTranslationArgs:
    def __init__(__self__, *,
                 endip: pulumi.Input[str],
                 map_startip: pulumi.Input[str],
                 startip: pulumi.Input[str],
                 transid: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallIpTranslation resource.
        """
        pulumi.set(__self__, "endip", endip)
        pulumi.set(__self__, "map_startip", map_startip)
        pulumi.set(__self__, "startip", startip)
        if transid is not None:
            pulumi.set(__self__, "transid", transid)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def endip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endip")

    @endip.setter
    def endip(self, value: pulumi.Input[str]):
        pulumi.set(self, "endip", value)

    @property
    @pulumi.getter(name="mapStartip")
    def map_startip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "map_startip")

    @map_startip.setter
    def map_startip(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_startip", value)

    @property
    @pulumi.getter
    def startip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "startip")

    @startip.setter
    def startip(self, value: pulumi.Input[str]):
        pulumi.set(self, "startip", value)

    @property
    @pulumi.getter
    def transid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "transid")

    @transid.setter
    def transid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transid", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _FirewallIpTranslationState:
    def __init__(__self__, *,
                 endip: Optional[pulumi.Input[str]] = None,
                 map_startip: Optional[pulumi.Input[str]] = None,
                 startip: Optional[pulumi.Input[str]] = None,
                 transid: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallIpTranslation resources.
        """
        if endip is not None:
            pulumi.set(__self__, "endip", endip)
        if map_startip is not None:
            pulumi.set(__self__, "map_startip", map_startip)
        if startip is not None:
            pulumi.set(__self__, "startip", startip)
        if transid is not None:
            pulumi.set(__self__, "transid", transid)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def endip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endip")

    @endip.setter
    def endip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endip", value)

    @property
    @pulumi.getter(name="mapStartip")
    def map_startip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "map_startip")

    @map_startip.setter
    def map_startip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "map_startip", value)

    @property
    @pulumi.getter
    def startip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "startip")

    @startip.setter
    def startip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "startip", value)

    @property
    @pulumi.getter
    def transid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "transid")

    @transid.setter
    def transid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transid", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class FirewallIpTranslation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endip: Optional[pulumi.Input[str]] = None,
                 map_startip: Optional[pulumi.Input[str]] = None,
                 startip: Optional[pulumi.Input[str]] = None,
                 transid: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirewallIpTranslation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirewallIpTranslationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallIpTranslation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallIpTranslationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallIpTranslationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endip: Optional[pulumi.Input[str]] = None,
                 map_startip: Optional[pulumi.Input[str]] = None,
                 startip: Optional[pulumi.Input[str]] = None,
                 transid: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallIpTranslationArgs.__new__(FirewallIpTranslationArgs)

            if endip is None and not opts.urn:
                raise TypeError("Missing required property 'endip'")
            __props__.__dict__["endip"] = endip
            if map_startip is None and not opts.urn:
                raise TypeError("Missing required property 'map_startip'")
            __props__.__dict__["map_startip"] = map_startip
            if startip is None and not opts.urn:
                raise TypeError("Missing required property 'startip'")
            __props__.__dict__["startip"] = startip
            __props__.__dict__["transid"] = transid
            __props__.__dict__["type"] = type
            __props__.__dict__["vdomparam"] = vdomparam
        super(FirewallIpTranslation, __self__).__init__(
            'fortios:index/firewallIpTranslation:FirewallIpTranslation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            endip: Optional[pulumi.Input[str]] = None,
            map_startip: Optional[pulumi.Input[str]] = None,
            startip: Optional[pulumi.Input[str]] = None,
            transid: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'FirewallIpTranslation':
        """
        Get an existing FirewallIpTranslation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallIpTranslationState.__new__(_FirewallIpTranslationState)

        __props__.__dict__["endip"] = endip
        __props__.__dict__["map_startip"] = map_startip
        __props__.__dict__["startip"] = startip
        __props__.__dict__["transid"] = transid
        __props__.__dict__["type"] = type
        __props__.__dict__["vdomparam"] = vdomparam
        return FirewallIpTranslation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def endip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "endip")

    @property
    @pulumi.getter(name="mapStartip")
    def map_startip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "map_startip")

    @property
    @pulumi.getter
    def startip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "startip")

    @property
    @pulumi.getter
    def transid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "transid")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

