# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SwitchControllerQosQosPolicyArgs', 'SwitchControllerQosQosPolicy']

@pulumi.input_type
class SwitchControllerQosQosPolicyArgs:
    def __init__(__self__, *,
                 default_cos: pulumi.Input[int],
                 name: Optional[pulumi.Input[str]] = None,
                 queue_policy: Optional[pulumi.Input[str]] = None,
                 trust_dot1p_map: Optional[pulumi.Input[str]] = None,
                 trust_ip_dscp_map: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchControllerQosQosPolicy resource.
        """
        pulumi.set(__self__, "default_cos", default_cos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if queue_policy is not None:
            pulumi.set(__self__, "queue_policy", queue_policy)
        if trust_dot1p_map is not None:
            pulumi.set(__self__, "trust_dot1p_map", trust_dot1p_map)
        if trust_ip_dscp_map is not None:
            pulumi.set(__self__, "trust_ip_dscp_map", trust_ip_dscp_map)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="defaultCos")
    def default_cos(self) -> pulumi.Input[int]:
        return pulumi.get(self, "default_cos")

    @default_cos.setter
    def default_cos(self, value: pulumi.Input[int]):
        pulumi.set(self, "default_cos", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queuePolicy")
    def queue_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queue_policy")

    @queue_policy.setter
    def queue_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_policy", value)

    @property
    @pulumi.getter(name="trustDot1pMap")
    def trust_dot1p_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trust_dot1p_map")

    @trust_dot1p_map.setter
    def trust_dot1p_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_dot1p_map", value)

    @property
    @pulumi.getter(name="trustIpDscpMap")
    def trust_ip_dscp_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trust_ip_dscp_map")

    @trust_ip_dscp_map.setter
    def trust_ip_dscp_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip_dscp_map", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SwitchControllerQosQosPolicyState:
    def __init__(__self__, *,
                 default_cos: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 queue_policy: Optional[pulumi.Input[str]] = None,
                 trust_dot1p_map: Optional[pulumi.Input[str]] = None,
                 trust_ip_dscp_map: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerQosQosPolicy resources.
        """
        if default_cos is not None:
            pulumi.set(__self__, "default_cos", default_cos)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if queue_policy is not None:
            pulumi.set(__self__, "queue_policy", queue_policy)
        if trust_dot1p_map is not None:
            pulumi.set(__self__, "trust_dot1p_map", trust_dot1p_map)
        if trust_ip_dscp_map is not None:
            pulumi.set(__self__, "trust_ip_dscp_map", trust_ip_dscp_map)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="defaultCos")
    def default_cos(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_cos")

    @default_cos.setter
    def default_cos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_cos", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queuePolicy")
    def queue_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queue_policy")

    @queue_policy.setter
    def queue_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_policy", value)

    @property
    @pulumi.getter(name="trustDot1pMap")
    def trust_dot1p_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trust_dot1p_map")

    @trust_dot1p_map.setter
    def trust_dot1p_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_dot1p_map", value)

    @property
    @pulumi.getter(name="trustIpDscpMap")
    def trust_ip_dscp_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trust_ip_dscp_map")

    @trust_ip_dscp_map.setter
    def trust_ip_dscp_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_ip_dscp_map", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SwitchControllerQosQosPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_cos: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 queue_policy: Optional[pulumi.Input[str]] = None,
                 trust_dot1p_map: Optional[pulumi.Input[str]] = None,
                 trust_ip_dscp_map: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SwitchControllerQosQosPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SwitchControllerQosQosPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SwitchControllerQosQosPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SwitchControllerQosQosPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerQosQosPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_cos: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 queue_policy: Optional[pulumi.Input[str]] = None,
                 trust_dot1p_map: Optional[pulumi.Input[str]] = None,
                 trust_ip_dscp_map: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerQosQosPolicyArgs.__new__(SwitchControllerQosQosPolicyArgs)

            if default_cos is None and not opts.urn:
                raise TypeError("Missing required property 'default_cos'")
            __props__.__dict__["default_cos"] = default_cos
            __props__.__dict__["name"] = name
            __props__.__dict__["queue_policy"] = queue_policy
            __props__.__dict__["trust_dot1p_map"] = trust_dot1p_map
            __props__.__dict__["trust_ip_dscp_map"] = trust_ip_dscp_map
            __props__.__dict__["vdomparam"] = vdomparam
        super(SwitchControllerQosQosPolicy, __self__).__init__(
            'fortios:index/switchControllerQosQosPolicy:SwitchControllerQosQosPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default_cos: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            queue_policy: Optional[pulumi.Input[str]] = None,
            trust_dot1p_map: Optional[pulumi.Input[str]] = None,
            trust_ip_dscp_map: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SwitchControllerQosQosPolicy':
        """
        Get an existing SwitchControllerQosQosPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerQosQosPolicyState.__new__(_SwitchControllerQosQosPolicyState)

        __props__.__dict__["default_cos"] = default_cos
        __props__.__dict__["name"] = name
        __props__.__dict__["queue_policy"] = queue_policy
        __props__.__dict__["trust_dot1p_map"] = trust_dot1p_map
        __props__.__dict__["trust_ip_dscp_map"] = trust_ip_dscp_map
        __props__.__dict__["vdomparam"] = vdomparam
        return SwitchControllerQosQosPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="defaultCos")
    def default_cos(self) -> pulumi.Output[int]:
        return pulumi.get(self, "default_cos")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="queuePolicy")
    def queue_policy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "queue_policy")

    @property
    @pulumi.getter(name="trustDot1pMap")
    def trust_dot1p_map(self) -> pulumi.Output[str]:
        return pulumi.get(self, "trust_dot1p_map")

    @property
    @pulumi.getter(name="trustIpDscpMap")
    def trust_ip_dscp_map(self) -> pulumi.Output[str]:
        return pulumi.get(self, "trust_ip_dscp_map")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

