# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EmailfilterProfileArgs', 'EmailfilterProfile']

@pulumi.input_type
class EmailfilterProfileArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input['EmailfilterProfileFileFilterArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gmail: Optional[pulumi.Input['EmailfilterProfileGmailArgs']] = None,
                 imap: Optional[pulumi.Input['EmailfilterProfileImapArgs']] = None,
                 mapi: Optional[pulumi.Input['EmailfilterProfileMapiArgs']] = None,
                 msn_hotmail: Optional[pulumi.Input['EmailfilterProfileMsnHotmailArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 other_webmails: Optional[pulumi.Input['EmailfilterProfileOtherWebmailsArgs']] = None,
                 pop3: Optional[pulumi.Input['EmailfilterProfilePop3Args']] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 smtp: Optional[pulumi.Input['EmailfilterProfileSmtpArgs']] = None,
                 spam_bal_table: Optional[pulumi.Input[int]] = None,
                 spam_bwl_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_threshold: Optional[pulumi.Input[int]] = None,
                 spam_filtering: Optional[pulumi.Input[str]] = None,
                 spam_iptrust_table: Optional[pulumi.Input[int]] = None,
                 spam_log: Optional[pulumi.Input[str]] = None,
                 spam_log_fortiguard_response: Optional[pulumi.Input[str]] = None,
                 spam_mheader_table: Optional[pulumi.Input[int]] = None,
                 spam_rbl_table: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 yahoo_mail: Optional[pulumi.Input['EmailfilterProfileYahooMailArgs']] = None):
        """
        The set of arguments for constructing a EmailfilterProfile resource.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if feature_set is not None:
            pulumi.set(__self__, "feature_set", feature_set)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gmail is not None:
            pulumi.set(__self__, "gmail", gmail)
        if imap is not None:
            pulumi.set(__self__, "imap", imap)
        if mapi is not None:
            pulumi.set(__self__, "mapi", mapi)
        if msn_hotmail is not None:
            pulumi.set(__self__, "msn_hotmail", msn_hotmail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if other_webmails is not None:
            pulumi.set(__self__, "other_webmails", other_webmails)
        if pop3 is not None:
            pulumi.set(__self__, "pop3", pop3)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if smtp is not None:
            pulumi.set(__self__, "smtp", smtp)
        if spam_bal_table is not None:
            pulumi.set(__self__, "spam_bal_table", spam_bal_table)
        if spam_bwl_table is not None:
            pulumi.set(__self__, "spam_bwl_table", spam_bwl_table)
        if spam_bword_table is not None:
            pulumi.set(__self__, "spam_bword_table", spam_bword_table)
        if spam_bword_threshold is not None:
            pulumi.set(__self__, "spam_bword_threshold", spam_bword_threshold)
        if spam_filtering is not None:
            pulumi.set(__self__, "spam_filtering", spam_filtering)
        if spam_iptrust_table is not None:
            pulumi.set(__self__, "spam_iptrust_table", spam_iptrust_table)
        if spam_log is not None:
            pulumi.set(__self__, "spam_log", spam_log)
        if spam_log_fortiguard_response is not None:
            pulumi.set(__self__, "spam_log_fortiguard_response", spam_log_fortiguard_response)
        if spam_mheader_table is not None:
            pulumi.set(__self__, "spam_mheader_table", spam_mheader_table)
        if spam_rbl_table is not None:
            pulumi.set(__self__, "spam_rbl_table", spam_rbl_table)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if yahoo_mail is not None:
            pulumi.set(__self__, "yahoo_mail", yahoo_mail)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feature_set")

    @feature_set.setter
    def feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_set", value)

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional[pulumi.Input['EmailfilterProfileFileFilterArgs']]:
        return pulumi.get(self, "file_filter")

    @file_filter.setter
    def file_filter(self, value: Optional[pulumi.Input['EmailfilterProfileFileFilterArgs']]):
        pulumi.set(self, "file_filter", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def gmail(self) -> Optional[pulumi.Input['EmailfilterProfileGmailArgs']]:
        return pulumi.get(self, "gmail")

    @gmail.setter
    def gmail(self, value: Optional[pulumi.Input['EmailfilterProfileGmailArgs']]):
        pulumi.set(self, "gmail", value)

    @property
    @pulumi.getter
    def imap(self) -> Optional[pulumi.Input['EmailfilterProfileImapArgs']]:
        return pulumi.get(self, "imap")

    @imap.setter
    def imap(self, value: Optional[pulumi.Input['EmailfilterProfileImapArgs']]):
        pulumi.set(self, "imap", value)

    @property
    @pulumi.getter
    def mapi(self) -> Optional[pulumi.Input['EmailfilterProfileMapiArgs']]:
        return pulumi.get(self, "mapi")

    @mapi.setter
    def mapi(self, value: Optional[pulumi.Input['EmailfilterProfileMapiArgs']]):
        pulumi.set(self, "mapi", value)

    @property
    @pulumi.getter(name="msnHotmail")
    def msn_hotmail(self) -> Optional[pulumi.Input['EmailfilterProfileMsnHotmailArgs']]:
        return pulumi.get(self, "msn_hotmail")

    @msn_hotmail.setter
    def msn_hotmail(self, value: Optional[pulumi.Input['EmailfilterProfileMsnHotmailArgs']]):
        pulumi.set(self, "msn_hotmail", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="otherWebmails")
    def other_webmails(self) -> Optional[pulumi.Input['EmailfilterProfileOtherWebmailsArgs']]:
        return pulumi.get(self, "other_webmails")

    @other_webmails.setter
    def other_webmails(self, value: Optional[pulumi.Input['EmailfilterProfileOtherWebmailsArgs']]):
        pulumi.set(self, "other_webmails", value)

    @property
    @pulumi.getter
    def pop3(self) -> Optional[pulumi.Input['EmailfilterProfilePop3Args']]:
        return pulumi.get(self, "pop3")

    @pop3.setter
    def pop3(self, value: Optional[pulumi.Input['EmailfilterProfilePop3Args']]):
        pulumi.set(self, "pop3", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def smtp(self) -> Optional[pulumi.Input['EmailfilterProfileSmtpArgs']]:
        return pulumi.get(self, "smtp")

    @smtp.setter
    def smtp(self, value: Optional[pulumi.Input['EmailfilterProfileSmtpArgs']]):
        pulumi.set(self, "smtp", value)

    @property
    @pulumi.getter(name="spamBalTable")
    def spam_bal_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_bal_table")

    @spam_bal_table.setter
    def spam_bal_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bal_table", value)

    @property
    @pulumi.getter(name="spamBwlTable")
    def spam_bwl_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_bwl_table")

    @spam_bwl_table.setter
    def spam_bwl_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bwl_table", value)

    @property
    @pulumi.getter(name="spamBwordTable")
    def spam_bword_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_bword_table")

    @spam_bword_table.setter
    def spam_bword_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bword_table", value)

    @property
    @pulumi.getter(name="spamBwordThreshold")
    def spam_bword_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_bword_threshold")

    @spam_bword_threshold.setter
    def spam_bword_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bword_threshold", value)

    @property
    @pulumi.getter(name="spamFiltering")
    def spam_filtering(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spam_filtering")

    @spam_filtering.setter
    def spam_filtering(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_filtering", value)

    @property
    @pulumi.getter(name="spamIptrustTable")
    def spam_iptrust_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_iptrust_table")

    @spam_iptrust_table.setter
    def spam_iptrust_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_iptrust_table", value)

    @property
    @pulumi.getter(name="spamLog")
    def spam_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spam_log")

    @spam_log.setter
    def spam_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_log", value)

    @property
    @pulumi.getter(name="spamLogFortiguardResponse")
    def spam_log_fortiguard_response(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spam_log_fortiguard_response")

    @spam_log_fortiguard_response.setter
    def spam_log_fortiguard_response(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_log_fortiguard_response", value)

    @property
    @pulumi.getter(name="spamMheaderTable")
    def spam_mheader_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_mheader_table")

    @spam_mheader_table.setter
    def spam_mheader_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_mheader_table", value)

    @property
    @pulumi.getter(name="spamRblTable")
    def spam_rbl_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_rbl_table")

    @spam_rbl_table.setter
    def spam_rbl_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_rbl_table", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="yahooMail")
    def yahoo_mail(self) -> Optional[pulumi.Input['EmailfilterProfileYahooMailArgs']]:
        return pulumi.get(self, "yahoo_mail")

    @yahoo_mail.setter
    def yahoo_mail(self, value: Optional[pulumi.Input['EmailfilterProfileYahooMailArgs']]):
        pulumi.set(self, "yahoo_mail", value)


@pulumi.input_type
class _EmailfilterProfileState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input['EmailfilterProfileFileFilterArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gmail: Optional[pulumi.Input['EmailfilterProfileGmailArgs']] = None,
                 imap: Optional[pulumi.Input['EmailfilterProfileImapArgs']] = None,
                 mapi: Optional[pulumi.Input['EmailfilterProfileMapiArgs']] = None,
                 msn_hotmail: Optional[pulumi.Input['EmailfilterProfileMsnHotmailArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 other_webmails: Optional[pulumi.Input['EmailfilterProfileOtherWebmailsArgs']] = None,
                 pop3: Optional[pulumi.Input['EmailfilterProfilePop3Args']] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 smtp: Optional[pulumi.Input['EmailfilterProfileSmtpArgs']] = None,
                 spam_bal_table: Optional[pulumi.Input[int]] = None,
                 spam_bwl_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_threshold: Optional[pulumi.Input[int]] = None,
                 spam_filtering: Optional[pulumi.Input[str]] = None,
                 spam_iptrust_table: Optional[pulumi.Input[int]] = None,
                 spam_log: Optional[pulumi.Input[str]] = None,
                 spam_log_fortiguard_response: Optional[pulumi.Input[str]] = None,
                 spam_mheader_table: Optional[pulumi.Input[int]] = None,
                 spam_rbl_table: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 yahoo_mail: Optional[pulumi.Input['EmailfilterProfileYahooMailArgs']] = None):
        """
        Input properties used for looking up and filtering EmailfilterProfile resources.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if feature_set is not None:
            pulumi.set(__self__, "feature_set", feature_set)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gmail is not None:
            pulumi.set(__self__, "gmail", gmail)
        if imap is not None:
            pulumi.set(__self__, "imap", imap)
        if mapi is not None:
            pulumi.set(__self__, "mapi", mapi)
        if msn_hotmail is not None:
            pulumi.set(__self__, "msn_hotmail", msn_hotmail)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if other_webmails is not None:
            pulumi.set(__self__, "other_webmails", other_webmails)
        if pop3 is not None:
            pulumi.set(__self__, "pop3", pop3)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if smtp is not None:
            pulumi.set(__self__, "smtp", smtp)
        if spam_bal_table is not None:
            pulumi.set(__self__, "spam_bal_table", spam_bal_table)
        if spam_bwl_table is not None:
            pulumi.set(__self__, "spam_bwl_table", spam_bwl_table)
        if spam_bword_table is not None:
            pulumi.set(__self__, "spam_bword_table", spam_bword_table)
        if spam_bword_threshold is not None:
            pulumi.set(__self__, "spam_bword_threshold", spam_bword_threshold)
        if spam_filtering is not None:
            pulumi.set(__self__, "spam_filtering", spam_filtering)
        if spam_iptrust_table is not None:
            pulumi.set(__self__, "spam_iptrust_table", spam_iptrust_table)
        if spam_log is not None:
            pulumi.set(__self__, "spam_log", spam_log)
        if spam_log_fortiguard_response is not None:
            pulumi.set(__self__, "spam_log_fortiguard_response", spam_log_fortiguard_response)
        if spam_mheader_table is not None:
            pulumi.set(__self__, "spam_mheader_table", spam_mheader_table)
        if spam_rbl_table is not None:
            pulumi.set(__self__, "spam_rbl_table", spam_rbl_table)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if yahoo_mail is not None:
            pulumi.set(__self__, "yahoo_mail", yahoo_mail)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feature_set")

    @feature_set.setter
    def feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_set", value)

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional[pulumi.Input['EmailfilterProfileFileFilterArgs']]:
        return pulumi.get(self, "file_filter")

    @file_filter.setter
    def file_filter(self, value: Optional[pulumi.Input['EmailfilterProfileFileFilterArgs']]):
        pulumi.set(self, "file_filter", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def gmail(self) -> Optional[pulumi.Input['EmailfilterProfileGmailArgs']]:
        return pulumi.get(self, "gmail")

    @gmail.setter
    def gmail(self, value: Optional[pulumi.Input['EmailfilterProfileGmailArgs']]):
        pulumi.set(self, "gmail", value)

    @property
    @pulumi.getter
    def imap(self) -> Optional[pulumi.Input['EmailfilterProfileImapArgs']]:
        return pulumi.get(self, "imap")

    @imap.setter
    def imap(self, value: Optional[pulumi.Input['EmailfilterProfileImapArgs']]):
        pulumi.set(self, "imap", value)

    @property
    @pulumi.getter
    def mapi(self) -> Optional[pulumi.Input['EmailfilterProfileMapiArgs']]:
        return pulumi.get(self, "mapi")

    @mapi.setter
    def mapi(self, value: Optional[pulumi.Input['EmailfilterProfileMapiArgs']]):
        pulumi.set(self, "mapi", value)

    @property
    @pulumi.getter(name="msnHotmail")
    def msn_hotmail(self) -> Optional[pulumi.Input['EmailfilterProfileMsnHotmailArgs']]:
        return pulumi.get(self, "msn_hotmail")

    @msn_hotmail.setter
    def msn_hotmail(self, value: Optional[pulumi.Input['EmailfilterProfileMsnHotmailArgs']]):
        pulumi.set(self, "msn_hotmail", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="otherWebmails")
    def other_webmails(self) -> Optional[pulumi.Input['EmailfilterProfileOtherWebmailsArgs']]:
        return pulumi.get(self, "other_webmails")

    @other_webmails.setter
    def other_webmails(self, value: Optional[pulumi.Input['EmailfilterProfileOtherWebmailsArgs']]):
        pulumi.set(self, "other_webmails", value)

    @property
    @pulumi.getter
    def pop3(self) -> Optional[pulumi.Input['EmailfilterProfilePop3Args']]:
        return pulumi.get(self, "pop3")

    @pop3.setter
    def pop3(self, value: Optional[pulumi.Input['EmailfilterProfilePop3Args']]):
        pulumi.set(self, "pop3", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def smtp(self) -> Optional[pulumi.Input['EmailfilterProfileSmtpArgs']]:
        return pulumi.get(self, "smtp")

    @smtp.setter
    def smtp(self, value: Optional[pulumi.Input['EmailfilterProfileSmtpArgs']]):
        pulumi.set(self, "smtp", value)

    @property
    @pulumi.getter(name="spamBalTable")
    def spam_bal_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_bal_table")

    @spam_bal_table.setter
    def spam_bal_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bal_table", value)

    @property
    @pulumi.getter(name="spamBwlTable")
    def spam_bwl_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_bwl_table")

    @spam_bwl_table.setter
    def spam_bwl_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bwl_table", value)

    @property
    @pulumi.getter(name="spamBwordTable")
    def spam_bword_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_bword_table")

    @spam_bword_table.setter
    def spam_bword_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bword_table", value)

    @property
    @pulumi.getter(name="spamBwordThreshold")
    def spam_bword_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_bword_threshold")

    @spam_bword_threshold.setter
    def spam_bword_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_bword_threshold", value)

    @property
    @pulumi.getter(name="spamFiltering")
    def spam_filtering(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spam_filtering")

    @spam_filtering.setter
    def spam_filtering(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_filtering", value)

    @property
    @pulumi.getter(name="spamIptrustTable")
    def spam_iptrust_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_iptrust_table")

    @spam_iptrust_table.setter
    def spam_iptrust_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_iptrust_table", value)

    @property
    @pulumi.getter(name="spamLog")
    def spam_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spam_log")

    @spam_log.setter
    def spam_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_log", value)

    @property
    @pulumi.getter(name="spamLogFortiguardResponse")
    def spam_log_fortiguard_response(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spam_log_fortiguard_response")

    @spam_log_fortiguard_response.setter
    def spam_log_fortiguard_response(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_log_fortiguard_response", value)

    @property
    @pulumi.getter(name="spamMheaderTable")
    def spam_mheader_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_mheader_table")

    @spam_mheader_table.setter
    def spam_mheader_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_mheader_table", value)

    @property
    @pulumi.getter(name="spamRblTable")
    def spam_rbl_table(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spam_rbl_table")

    @spam_rbl_table.setter
    def spam_rbl_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spam_rbl_table", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="yahooMail")
    def yahoo_mail(self) -> Optional[pulumi.Input['EmailfilterProfileYahooMailArgs']]:
        return pulumi.get(self, "yahoo_mail")

    @yahoo_mail.setter
    def yahoo_mail(self, value: Optional[pulumi.Input['EmailfilterProfileYahooMailArgs']]):
        pulumi.set(self, "yahoo_mail", value)


class EmailfilterProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileFileFilterArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gmail: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileGmailArgs']]] = None,
                 imap: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileImapArgs']]] = None,
                 mapi: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileMapiArgs']]] = None,
                 msn_hotmail: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileMsnHotmailArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 other_webmails: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileOtherWebmailsArgs']]] = None,
                 pop3: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfilePop3Args']]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 smtp: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileSmtpArgs']]] = None,
                 spam_bal_table: Optional[pulumi.Input[int]] = None,
                 spam_bwl_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_threshold: Optional[pulumi.Input[int]] = None,
                 spam_filtering: Optional[pulumi.Input[str]] = None,
                 spam_iptrust_table: Optional[pulumi.Input[int]] = None,
                 spam_log: Optional[pulumi.Input[str]] = None,
                 spam_log_fortiguard_response: Optional[pulumi.Input[str]] = None,
                 spam_mheader_table: Optional[pulumi.Input[int]] = None,
                 spam_rbl_table: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 yahoo_mail: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileYahooMailArgs']]] = None,
                 __props__=None):
        """
        Create a EmailfilterProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[EmailfilterProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EmailfilterProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EmailfilterProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EmailfilterProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileFileFilterArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gmail: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileGmailArgs']]] = None,
                 imap: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileImapArgs']]] = None,
                 mapi: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileMapiArgs']]] = None,
                 msn_hotmail: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileMsnHotmailArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 other_webmails: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileOtherWebmailsArgs']]] = None,
                 pop3: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfilePop3Args']]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 smtp: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileSmtpArgs']]] = None,
                 spam_bal_table: Optional[pulumi.Input[int]] = None,
                 spam_bwl_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_table: Optional[pulumi.Input[int]] = None,
                 spam_bword_threshold: Optional[pulumi.Input[int]] = None,
                 spam_filtering: Optional[pulumi.Input[str]] = None,
                 spam_iptrust_table: Optional[pulumi.Input[int]] = None,
                 spam_log: Optional[pulumi.Input[str]] = None,
                 spam_log_fortiguard_response: Optional[pulumi.Input[str]] = None,
                 spam_mheader_table: Optional[pulumi.Input[int]] = None,
                 spam_rbl_table: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 yahoo_mail: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileYahooMailArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EmailfilterProfileArgs.__new__(EmailfilterProfileArgs)

            __props__.__dict__["comment"] = comment
            __props__.__dict__["external"] = external
            __props__.__dict__["feature_set"] = feature_set
            __props__.__dict__["file_filter"] = file_filter
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["gmail"] = gmail
            __props__.__dict__["imap"] = imap
            __props__.__dict__["mapi"] = mapi
            __props__.__dict__["msn_hotmail"] = msn_hotmail
            __props__.__dict__["name"] = name
            __props__.__dict__["options"] = options
            __props__.__dict__["other_webmails"] = other_webmails
            __props__.__dict__["pop3"] = pop3
            __props__.__dict__["replacemsg_group"] = replacemsg_group
            __props__.__dict__["smtp"] = smtp
            __props__.__dict__["spam_bal_table"] = spam_bal_table
            __props__.__dict__["spam_bwl_table"] = spam_bwl_table
            __props__.__dict__["spam_bword_table"] = spam_bword_table
            __props__.__dict__["spam_bword_threshold"] = spam_bword_threshold
            __props__.__dict__["spam_filtering"] = spam_filtering
            __props__.__dict__["spam_iptrust_table"] = spam_iptrust_table
            __props__.__dict__["spam_log"] = spam_log
            __props__.__dict__["spam_log_fortiguard_response"] = spam_log_fortiguard_response
            __props__.__dict__["spam_mheader_table"] = spam_mheader_table
            __props__.__dict__["spam_rbl_table"] = spam_rbl_table
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["yahoo_mail"] = yahoo_mail
        super(EmailfilterProfile, __self__).__init__(
            'fortios:index/emailfilterProfile:EmailfilterProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            external: Optional[pulumi.Input[str]] = None,
            feature_set: Optional[pulumi.Input[str]] = None,
            file_filter: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileFileFilterArgs']]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            gmail: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileGmailArgs']]] = None,
            imap: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileImapArgs']]] = None,
            mapi: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileMapiArgs']]] = None,
            msn_hotmail: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileMsnHotmailArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            options: Optional[pulumi.Input[str]] = None,
            other_webmails: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileOtherWebmailsArgs']]] = None,
            pop3: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfilePop3Args']]] = None,
            replacemsg_group: Optional[pulumi.Input[str]] = None,
            smtp: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileSmtpArgs']]] = None,
            spam_bal_table: Optional[pulumi.Input[int]] = None,
            spam_bwl_table: Optional[pulumi.Input[int]] = None,
            spam_bword_table: Optional[pulumi.Input[int]] = None,
            spam_bword_threshold: Optional[pulumi.Input[int]] = None,
            spam_filtering: Optional[pulumi.Input[str]] = None,
            spam_iptrust_table: Optional[pulumi.Input[int]] = None,
            spam_log: Optional[pulumi.Input[str]] = None,
            spam_log_fortiguard_response: Optional[pulumi.Input[str]] = None,
            spam_mheader_table: Optional[pulumi.Input[int]] = None,
            spam_rbl_table: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            yahoo_mail: Optional[pulumi.Input[pulumi.InputType['EmailfilterProfileYahooMailArgs']]] = None) -> 'EmailfilterProfile':
        """
        Get an existing EmailfilterProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EmailfilterProfileState.__new__(_EmailfilterProfileState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["external"] = external
        __props__.__dict__["feature_set"] = feature_set
        __props__.__dict__["file_filter"] = file_filter
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["gmail"] = gmail
        __props__.__dict__["imap"] = imap
        __props__.__dict__["mapi"] = mapi
        __props__.__dict__["msn_hotmail"] = msn_hotmail
        __props__.__dict__["name"] = name
        __props__.__dict__["options"] = options
        __props__.__dict__["other_webmails"] = other_webmails
        __props__.__dict__["pop3"] = pop3
        __props__.__dict__["replacemsg_group"] = replacemsg_group
        __props__.__dict__["smtp"] = smtp
        __props__.__dict__["spam_bal_table"] = spam_bal_table
        __props__.__dict__["spam_bwl_table"] = spam_bwl_table
        __props__.__dict__["spam_bword_table"] = spam_bword_table
        __props__.__dict__["spam_bword_threshold"] = spam_bword_threshold
        __props__.__dict__["spam_filtering"] = spam_filtering
        __props__.__dict__["spam_iptrust_table"] = spam_iptrust_table
        __props__.__dict__["spam_log"] = spam_log
        __props__.__dict__["spam_log_fortiguard_response"] = spam_log_fortiguard_response
        __props__.__dict__["spam_mheader_table"] = spam_mheader_table
        __props__.__dict__["spam_rbl_table"] = spam_rbl_table
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["yahoo_mail"] = yahoo_mail
        return EmailfilterProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def external(self) -> pulumi.Output[str]:
        return pulumi.get(self, "external")

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> pulumi.Output[str]:
        return pulumi.get(self, "feature_set")

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> pulumi.Output['outputs.EmailfilterProfileFileFilter']:
        return pulumi.get(self, "file_filter")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def gmail(self) -> pulumi.Output['outputs.EmailfilterProfileGmail']:
        return pulumi.get(self, "gmail")

    @property
    @pulumi.getter
    def imap(self) -> pulumi.Output['outputs.EmailfilterProfileImap']:
        return pulumi.get(self, "imap")

    @property
    @pulumi.getter
    def mapi(self) -> pulumi.Output['outputs.EmailfilterProfileMapi']:
        return pulumi.get(self, "mapi")

    @property
    @pulumi.getter(name="msnHotmail")
    def msn_hotmail(self) -> pulumi.Output['outputs.EmailfilterProfileMsnHotmail']:
        return pulumi.get(self, "msn_hotmail")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="otherWebmails")
    def other_webmails(self) -> pulumi.Output['outputs.EmailfilterProfileOtherWebmails']:
        return pulumi.get(self, "other_webmails")

    @property
    @pulumi.getter
    def pop3(self) -> pulumi.Output['outputs.EmailfilterProfilePop3']:
        return pulumi.get(self, "pop3")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> pulumi.Output[str]:
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter
    def smtp(self) -> pulumi.Output['outputs.EmailfilterProfileSmtp']:
        return pulumi.get(self, "smtp")

    @property
    @pulumi.getter(name="spamBalTable")
    def spam_bal_table(self) -> pulumi.Output[int]:
        return pulumi.get(self, "spam_bal_table")

    @property
    @pulumi.getter(name="spamBwlTable")
    def spam_bwl_table(self) -> pulumi.Output[int]:
        return pulumi.get(self, "spam_bwl_table")

    @property
    @pulumi.getter(name="spamBwordTable")
    def spam_bword_table(self) -> pulumi.Output[int]:
        return pulumi.get(self, "spam_bword_table")

    @property
    @pulumi.getter(name="spamBwordThreshold")
    def spam_bword_threshold(self) -> pulumi.Output[int]:
        return pulumi.get(self, "spam_bword_threshold")

    @property
    @pulumi.getter(name="spamFiltering")
    def spam_filtering(self) -> pulumi.Output[str]:
        return pulumi.get(self, "spam_filtering")

    @property
    @pulumi.getter(name="spamIptrustTable")
    def spam_iptrust_table(self) -> pulumi.Output[int]:
        return pulumi.get(self, "spam_iptrust_table")

    @property
    @pulumi.getter(name="spamLog")
    def spam_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "spam_log")

    @property
    @pulumi.getter(name="spamLogFortiguardResponse")
    def spam_log_fortiguard_response(self) -> pulumi.Output[str]:
        return pulumi.get(self, "spam_log_fortiguard_response")

    @property
    @pulumi.getter(name="spamMheaderTable")
    def spam_mheader_table(self) -> pulumi.Output[int]:
        return pulumi.get(self, "spam_mheader_table")

    @property
    @pulumi.getter(name="spamRblTable")
    def spam_rbl_table(self) -> pulumi.Output[int]:
        return pulumi.get(self, "spam_rbl_table")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="yahooMail")
    def yahoo_mail(self) -> pulumi.Output['outputs.EmailfilterProfileYahooMail']:
        return pulumi.get(self, "yahoo_mail")

