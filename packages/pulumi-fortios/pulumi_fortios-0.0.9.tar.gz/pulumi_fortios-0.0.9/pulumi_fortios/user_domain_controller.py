# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserDomainControllerArgs', 'UserDomainController']

@pulumi.input_type
class UserDomainControllerArgs:
    def __init__(__self__, *,
                 ip_address: pulumi.Input[str],
                 ldap_server: pulumi.Input[str],
                 ad_mode: Optional[pulumi.Input[str]] = None,
                 adlds_dn: Optional[pulumi.Input[str]] = None,
                 adlds_ip6: Optional[pulumi.Input[str]] = None,
                 adlds_ip_address: Optional[pulumi.Input[str]] = None,
                 adlds_port: Optional[pulumi.Input[int]] = None,
                 change_detection: Optional[pulumi.Input[str]] = None,
                 change_detection_period: Optional[pulumi.Input[int]] = None,
                 dns_srv_lookup: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extra_servers: Optional[pulumi.Input[Sequence[pulumi.Input['UserDomainControllerExtraServerArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 replication_port: Optional[pulumi.Input[int]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 source_ip_address: Optional[pulumi.Input[str]] = None,
                 source_port: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserDomainController resource.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ldap_server", ldap_server)
        if ad_mode is not None:
            pulumi.set(__self__, "ad_mode", ad_mode)
        if adlds_dn is not None:
            pulumi.set(__self__, "adlds_dn", adlds_dn)
        if adlds_ip6 is not None:
            pulumi.set(__self__, "adlds_ip6", adlds_ip6)
        if adlds_ip_address is not None:
            pulumi.set(__self__, "adlds_ip_address", adlds_ip_address)
        if adlds_port is not None:
            pulumi.set(__self__, "adlds_port", adlds_port)
        if change_detection is not None:
            pulumi.set(__self__, "change_detection", change_detection)
        if change_detection_period is not None:
            pulumi.set(__self__, "change_detection_period", change_detection_period)
        if dns_srv_lookup is not None:
            pulumi.set(__self__, "dns_srv_lookup", dns_srv_lookup)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extra_servers is not None:
            pulumi.set(__self__, "extra_servers", extra_servers)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if replication_port is not None:
            pulumi.set(__self__, "replication_port", replication_port)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if source_ip_address is not None:
            pulumi.set(__self__, "source_ip_address", source_ip_address)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: pulumi.Input[str]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter(name="adMode")
    def ad_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ad_mode")

    @ad_mode.setter
    def ad_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ad_mode", value)

    @property
    @pulumi.getter(name="adldsDn")
    def adlds_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adlds_dn")

    @adlds_dn.setter
    def adlds_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adlds_dn", value)

    @property
    @pulumi.getter(name="adldsIp6")
    def adlds_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adlds_ip6")

    @adlds_ip6.setter
    def adlds_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adlds_ip6", value)

    @property
    @pulumi.getter(name="adldsIpAddress")
    def adlds_ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adlds_ip_address")

    @adlds_ip_address.setter
    def adlds_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adlds_ip_address", value)

    @property
    @pulumi.getter(name="adldsPort")
    def adlds_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "adlds_port")

    @adlds_port.setter
    def adlds_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adlds_port", value)

    @property
    @pulumi.getter(name="changeDetection")
    def change_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "change_detection")

    @change_detection.setter
    def change_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change_detection", value)

    @property
    @pulumi.getter(name="changeDetectionPeriod")
    def change_detection_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "change_detection_period")

    @change_detection_period.setter
    def change_detection_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "change_detection_period", value)

    @property
    @pulumi.getter(name="dnsSrvLookup")
    def dns_srv_lookup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_srv_lookup")

    @dns_srv_lookup.setter
    def dns_srv_lookup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_srv_lookup", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="extraServers")
    def extra_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserDomainControllerExtraServerArgs']]]]:
        return pulumi.get(self, "extra_servers")

    @extra_servers.setter
    def extra_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserDomainControllerExtraServerArgs']]]]):
        pulumi.set(self, "extra_servers", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="replicationPort")
    def replication_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replication_port")

    @replication_port.setter
    def replication_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_port", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter(name="sourceIpAddress")
    def source_ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip_address")

    @source_ip_address.setter
    def source_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip_address", value)

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_port", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _UserDomainControllerState:
    def __init__(__self__, *,
                 ad_mode: Optional[pulumi.Input[str]] = None,
                 adlds_dn: Optional[pulumi.Input[str]] = None,
                 adlds_ip6: Optional[pulumi.Input[str]] = None,
                 adlds_ip_address: Optional[pulumi.Input[str]] = None,
                 adlds_port: Optional[pulumi.Input[int]] = None,
                 change_detection: Optional[pulumi.Input[str]] = None,
                 change_detection_period: Optional[pulumi.Input[int]] = None,
                 dns_srv_lookup: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extra_servers: Optional[pulumi.Input[Sequence[pulumi.Input['UserDomainControllerExtraServerArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 replication_port: Optional[pulumi.Input[int]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 source_ip_address: Optional[pulumi.Input[str]] = None,
                 source_port: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserDomainController resources.
        """
        if ad_mode is not None:
            pulumi.set(__self__, "ad_mode", ad_mode)
        if adlds_dn is not None:
            pulumi.set(__self__, "adlds_dn", adlds_dn)
        if adlds_ip6 is not None:
            pulumi.set(__self__, "adlds_ip6", adlds_ip6)
        if adlds_ip_address is not None:
            pulumi.set(__self__, "adlds_ip_address", adlds_ip_address)
        if adlds_port is not None:
            pulumi.set(__self__, "adlds_port", adlds_port)
        if change_detection is not None:
            pulumi.set(__self__, "change_detection", change_detection)
        if change_detection_period is not None:
            pulumi.set(__self__, "change_detection_period", change_detection_period)
        if dns_srv_lookup is not None:
            pulumi.set(__self__, "dns_srv_lookup", dns_srv_lookup)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extra_servers is not None:
            pulumi.set(__self__, "extra_servers", extra_servers)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ldap_server is not None:
            pulumi.set(__self__, "ldap_server", ldap_server)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if replication_port is not None:
            pulumi.set(__self__, "replication_port", replication_port)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if source_ip_address is not None:
            pulumi.set(__self__, "source_ip_address", source_ip_address)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="adMode")
    def ad_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ad_mode")

    @ad_mode.setter
    def ad_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ad_mode", value)

    @property
    @pulumi.getter(name="adldsDn")
    def adlds_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adlds_dn")

    @adlds_dn.setter
    def adlds_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adlds_dn", value)

    @property
    @pulumi.getter(name="adldsIp6")
    def adlds_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adlds_ip6")

    @adlds_ip6.setter
    def adlds_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adlds_ip6", value)

    @property
    @pulumi.getter(name="adldsIpAddress")
    def adlds_ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adlds_ip_address")

    @adlds_ip_address.setter
    def adlds_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adlds_ip_address", value)

    @property
    @pulumi.getter(name="adldsPort")
    def adlds_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "adlds_port")

    @adlds_port.setter
    def adlds_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adlds_port", value)

    @property
    @pulumi.getter(name="changeDetection")
    def change_detection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "change_detection")

    @change_detection.setter
    def change_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change_detection", value)

    @property
    @pulumi.getter(name="changeDetectionPeriod")
    def change_detection_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "change_detection_period")

    @change_detection_period.setter
    def change_detection_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "change_detection_period", value)

    @property
    @pulumi.getter(name="dnsSrvLookup")
    def dns_srv_lookup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_srv_lookup")

    @dns_srv_lookup.setter
    def dns_srv_lookup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_srv_lookup", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="extraServers")
    def extra_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserDomainControllerExtraServerArgs']]]]:
        return pulumi.get(self, "extra_servers")

    @extra_servers.setter
    def extra_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserDomainControllerExtraServerArgs']]]]):
        pulumi.set(self, "extra_servers", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="replicationPort")
    def replication_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replication_port")

    @replication_port.setter
    def replication_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_port", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter(name="sourceIpAddress")
    def source_ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ip_address")

    @source_ip_address.setter
    def source_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip_address", value)

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_port", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class UserDomainController(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ad_mode: Optional[pulumi.Input[str]] = None,
                 adlds_dn: Optional[pulumi.Input[str]] = None,
                 adlds_ip6: Optional[pulumi.Input[str]] = None,
                 adlds_ip_address: Optional[pulumi.Input[str]] = None,
                 adlds_port: Optional[pulumi.Input[int]] = None,
                 change_detection: Optional[pulumi.Input[str]] = None,
                 change_detection_period: Optional[pulumi.Input[int]] = None,
                 dns_srv_lookup: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extra_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserDomainControllerExtraServerArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 replication_port: Optional[pulumi.Input[int]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 source_ip_address: Optional[pulumi.Input[str]] = None,
                 source_port: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a UserDomainController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserDomainControllerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UserDomainController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UserDomainControllerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserDomainControllerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ad_mode: Optional[pulumi.Input[str]] = None,
                 adlds_dn: Optional[pulumi.Input[str]] = None,
                 adlds_ip6: Optional[pulumi.Input[str]] = None,
                 adlds_ip_address: Optional[pulumi.Input[str]] = None,
                 adlds_port: Optional[pulumi.Input[int]] = None,
                 change_detection: Optional[pulumi.Input[str]] = None,
                 change_detection_period: Optional[pulumi.Input[int]] = None,
                 dns_srv_lookup: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extra_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserDomainControllerExtraServerArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 replication_port: Optional[pulumi.Input[int]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 source_ip_address: Optional[pulumi.Input[str]] = None,
                 source_port: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserDomainControllerArgs.__new__(UserDomainControllerArgs)

            __props__.__dict__["ad_mode"] = ad_mode
            __props__.__dict__["adlds_dn"] = adlds_dn
            __props__.__dict__["adlds_ip6"] = adlds_ip6
            __props__.__dict__["adlds_ip_address"] = adlds_ip_address
            __props__.__dict__["adlds_port"] = adlds_port
            __props__.__dict__["change_detection"] = change_detection
            __props__.__dict__["change_detection_period"] = change_detection_period
            __props__.__dict__["dns_srv_lookup"] = dns_srv_lookup
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["extra_servers"] = extra_servers
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_select_method"] = interface_select_method
            __props__.__dict__["ip6"] = ip6
            if ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'ip_address'")
            __props__.__dict__["ip_address"] = ip_address
            if ldap_server is None and not opts.urn:
                raise TypeError("Missing required property 'ldap_server'")
            __props__.__dict__["ldap_server"] = ldap_server
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = password
            __props__.__dict__["port"] = port
            __props__.__dict__["replication_port"] = replication_port
            __props__.__dict__["source_ip6"] = source_ip6
            __props__.__dict__["source_ip_address"] = source_ip_address
            __props__.__dict__["source_port"] = source_port
            __props__.__dict__["username"] = username
            __props__.__dict__["vdomparam"] = vdomparam
        super(UserDomainController, __self__).__init__(
            'fortios:index/userDomainController:UserDomainController',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ad_mode: Optional[pulumi.Input[str]] = None,
            adlds_dn: Optional[pulumi.Input[str]] = None,
            adlds_ip6: Optional[pulumi.Input[str]] = None,
            adlds_ip_address: Optional[pulumi.Input[str]] = None,
            adlds_port: Optional[pulumi.Input[int]] = None,
            change_detection: Optional[pulumi.Input[str]] = None,
            change_detection_period: Optional[pulumi.Input[int]] = None,
            dns_srv_lookup: Optional[pulumi.Input[str]] = None,
            domain_name: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            extra_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserDomainControllerExtraServerArgs']]]]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_select_method: Optional[pulumi.Input[str]] = None,
            ip6: Optional[pulumi.Input[str]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            ldap_server: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            replication_port: Optional[pulumi.Input[int]] = None,
            source_ip6: Optional[pulumi.Input[str]] = None,
            source_ip_address: Optional[pulumi.Input[str]] = None,
            source_port: Optional[pulumi.Input[int]] = None,
            username: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'UserDomainController':
        """
        Get an existing UserDomainController resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserDomainControllerState.__new__(_UserDomainControllerState)

        __props__.__dict__["ad_mode"] = ad_mode
        __props__.__dict__["adlds_dn"] = adlds_dn
        __props__.__dict__["adlds_ip6"] = adlds_ip6
        __props__.__dict__["adlds_ip_address"] = adlds_ip_address
        __props__.__dict__["adlds_port"] = adlds_port
        __props__.__dict__["change_detection"] = change_detection
        __props__.__dict__["change_detection_period"] = change_detection_period
        __props__.__dict__["dns_srv_lookup"] = dns_srv_lookup
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["extra_servers"] = extra_servers
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_select_method"] = interface_select_method
        __props__.__dict__["ip6"] = ip6
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["ldap_server"] = ldap_server
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["port"] = port
        __props__.__dict__["replication_port"] = replication_port
        __props__.__dict__["source_ip6"] = source_ip6
        __props__.__dict__["source_ip_address"] = source_ip_address
        __props__.__dict__["source_port"] = source_port
        __props__.__dict__["username"] = username
        __props__.__dict__["vdomparam"] = vdomparam
        return UserDomainController(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adMode")
    def ad_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ad_mode")

    @property
    @pulumi.getter(name="adldsDn")
    def adlds_dn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "adlds_dn")

    @property
    @pulumi.getter(name="adldsIp6")
    def adlds_ip6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "adlds_ip6")

    @property
    @pulumi.getter(name="adldsIpAddress")
    def adlds_ip_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "adlds_ip_address")

    @property
    @pulumi.getter(name="adldsPort")
    def adlds_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "adlds_port")

    @property
    @pulumi.getter(name="changeDetection")
    def change_detection(self) -> pulumi.Output[str]:
        return pulumi.get(self, "change_detection")

    @property
    @pulumi.getter(name="changeDetectionPeriod")
    def change_detection_period(self) -> pulumi.Output[int]:
        return pulumi.get(self, "change_detection_period")

    @property
    @pulumi.getter(name="dnsSrvLookup")
    def dns_srv_lookup(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_srv_lookup")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="extraServers")
    def extra_servers(self) -> pulumi.Output[Optional[Sequence['outputs.UserDomainControllerExtraServer']]]:
        return pulumi.get(self, "extra_servers")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter
    def ip6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ldap_server")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="replicationPort")
    def replication_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "replication_port")

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_ip6")

    @property
    @pulumi.getter(name="sourceIpAddress")
    def source_ip_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_ip_address")

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "source_port")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

