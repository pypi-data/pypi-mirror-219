# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SystemNetworkVisibilityArgs', 'SystemNetworkVisibility']

@pulumi.input_type
class SystemNetworkVisibilityArgs:
    def __init__(__self__, *,
                 destination_hostname_visibility: Optional[pulumi.Input[str]] = None,
                 destination_location: Optional[pulumi.Input[str]] = None,
                 destination_visibility: Optional[pulumi.Input[str]] = None,
                 hostname_limit: Optional[pulumi.Input[int]] = None,
                 hostname_ttl: Optional[pulumi.Input[int]] = None,
                 source_location: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemNetworkVisibility resource.
        """
        if destination_hostname_visibility is not None:
            pulumi.set(__self__, "destination_hostname_visibility", destination_hostname_visibility)
        if destination_location is not None:
            pulumi.set(__self__, "destination_location", destination_location)
        if destination_visibility is not None:
            pulumi.set(__self__, "destination_visibility", destination_visibility)
        if hostname_limit is not None:
            pulumi.set(__self__, "hostname_limit", hostname_limit)
        if hostname_ttl is not None:
            pulumi.set(__self__, "hostname_ttl", hostname_ttl)
        if source_location is not None:
            pulumi.set(__self__, "source_location", source_location)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="destinationHostnameVisibility")
    def destination_hostname_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_hostname_visibility")

    @destination_hostname_visibility.setter
    def destination_hostname_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_hostname_visibility", value)

    @property
    @pulumi.getter(name="destinationLocation")
    def destination_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_location")

    @destination_location.setter
    def destination_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_location", value)

    @property
    @pulumi.getter(name="destinationVisibility")
    def destination_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_visibility")

    @destination_visibility.setter
    def destination_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_visibility", value)

    @property
    @pulumi.getter(name="hostnameLimit")
    def hostname_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hostname_limit")

    @hostname_limit.setter
    def hostname_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hostname_limit", value)

    @property
    @pulumi.getter(name="hostnameTtl")
    def hostname_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hostname_ttl")

    @hostname_ttl.setter
    def hostname_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hostname_ttl", value)

    @property
    @pulumi.getter(name="sourceLocation")
    def source_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_location")

    @source_location.setter
    def source_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_location", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SystemNetworkVisibilityState:
    def __init__(__self__, *,
                 destination_hostname_visibility: Optional[pulumi.Input[str]] = None,
                 destination_location: Optional[pulumi.Input[str]] = None,
                 destination_visibility: Optional[pulumi.Input[str]] = None,
                 hostname_limit: Optional[pulumi.Input[int]] = None,
                 hostname_ttl: Optional[pulumi.Input[int]] = None,
                 source_location: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemNetworkVisibility resources.
        """
        if destination_hostname_visibility is not None:
            pulumi.set(__self__, "destination_hostname_visibility", destination_hostname_visibility)
        if destination_location is not None:
            pulumi.set(__self__, "destination_location", destination_location)
        if destination_visibility is not None:
            pulumi.set(__self__, "destination_visibility", destination_visibility)
        if hostname_limit is not None:
            pulumi.set(__self__, "hostname_limit", hostname_limit)
        if hostname_ttl is not None:
            pulumi.set(__self__, "hostname_ttl", hostname_ttl)
        if source_location is not None:
            pulumi.set(__self__, "source_location", source_location)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="destinationHostnameVisibility")
    def destination_hostname_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_hostname_visibility")

    @destination_hostname_visibility.setter
    def destination_hostname_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_hostname_visibility", value)

    @property
    @pulumi.getter(name="destinationLocation")
    def destination_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_location")

    @destination_location.setter
    def destination_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_location", value)

    @property
    @pulumi.getter(name="destinationVisibility")
    def destination_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_visibility")

    @destination_visibility.setter
    def destination_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_visibility", value)

    @property
    @pulumi.getter(name="hostnameLimit")
    def hostname_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hostname_limit")

    @hostname_limit.setter
    def hostname_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hostname_limit", value)

    @property
    @pulumi.getter(name="hostnameTtl")
    def hostname_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hostname_ttl")

    @hostname_ttl.setter
    def hostname_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hostname_ttl", value)

    @property
    @pulumi.getter(name="sourceLocation")
    def source_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_location")

    @source_location.setter
    def source_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_location", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SystemNetworkVisibility(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_hostname_visibility: Optional[pulumi.Input[str]] = None,
                 destination_location: Optional[pulumi.Input[str]] = None,
                 destination_visibility: Optional[pulumi.Input[str]] = None,
                 hostname_limit: Optional[pulumi.Input[int]] = None,
                 hostname_ttl: Optional[pulumi.Input[int]] = None,
                 source_location: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SystemNetworkVisibility resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemNetworkVisibilityArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SystemNetworkVisibility resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SystemNetworkVisibilityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemNetworkVisibilityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_hostname_visibility: Optional[pulumi.Input[str]] = None,
                 destination_location: Optional[pulumi.Input[str]] = None,
                 destination_visibility: Optional[pulumi.Input[str]] = None,
                 hostname_limit: Optional[pulumi.Input[int]] = None,
                 hostname_ttl: Optional[pulumi.Input[int]] = None,
                 source_location: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemNetworkVisibilityArgs.__new__(SystemNetworkVisibilityArgs)

            __props__.__dict__["destination_hostname_visibility"] = destination_hostname_visibility
            __props__.__dict__["destination_location"] = destination_location
            __props__.__dict__["destination_visibility"] = destination_visibility
            __props__.__dict__["hostname_limit"] = hostname_limit
            __props__.__dict__["hostname_ttl"] = hostname_ttl
            __props__.__dict__["source_location"] = source_location
            __props__.__dict__["vdomparam"] = vdomparam
        super(SystemNetworkVisibility, __self__).__init__(
            'fortios:index/systemNetworkVisibility:SystemNetworkVisibility',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            destination_hostname_visibility: Optional[pulumi.Input[str]] = None,
            destination_location: Optional[pulumi.Input[str]] = None,
            destination_visibility: Optional[pulumi.Input[str]] = None,
            hostname_limit: Optional[pulumi.Input[int]] = None,
            hostname_ttl: Optional[pulumi.Input[int]] = None,
            source_location: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SystemNetworkVisibility':
        """
        Get an existing SystemNetworkVisibility resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemNetworkVisibilityState.__new__(_SystemNetworkVisibilityState)

        __props__.__dict__["destination_hostname_visibility"] = destination_hostname_visibility
        __props__.__dict__["destination_location"] = destination_location
        __props__.__dict__["destination_visibility"] = destination_visibility
        __props__.__dict__["hostname_limit"] = hostname_limit
        __props__.__dict__["hostname_ttl"] = hostname_ttl
        __props__.__dict__["source_location"] = source_location
        __props__.__dict__["vdomparam"] = vdomparam
        return SystemNetworkVisibility(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="destinationHostnameVisibility")
    def destination_hostname_visibility(self) -> pulumi.Output[str]:
        return pulumi.get(self, "destination_hostname_visibility")

    @property
    @pulumi.getter(name="destinationLocation")
    def destination_location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "destination_location")

    @property
    @pulumi.getter(name="destinationVisibility")
    def destination_visibility(self) -> pulumi.Output[str]:
        return pulumi.get(self, "destination_visibility")

    @property
    @pulumi.getter(name="hostnameLimit")
    def hostname_limit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "hostname_limit")

    @property
    @pulumi.getter(name="hostnameTtl")
    def hostname_ttl(self) -> pulumi.Output[int]:
        return pulumi.get(self, "hostname_ttl")

    @property
    @pulumi.getter(name="sourceLocation")
    def source_location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_location")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

