# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FirewallSslSshProfileArgs', 'FirewallSslSshProfile']

@pulumi.input_type
class FirewallSslSshProfileArgs:
    def __init__(__self__, *,
                 allowlist: Optional[pulumi.Input[str]] = None,
                 block_blacklisted_certificates: Optional[pulumi.Input[str]] = None,
                 block_blocklisted_certificates: Optional[pulumi.Input[str]] = None,
                 caname: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dot: Optional[pulumi.Input['FirewallSslSshProfileDotArgs']] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ftps: Optional[pulumi.Input['FirewallSslSshProfileFtpsArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https: Optional[pulumi.Input['FirewallSslSshProfileHttpsArgs']] = None,
                 imaps: Optional[pulumi.Input['FirewallSslSshProfileImapsArgs']] = None,
                 mapi_over_https: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pop3s: Optional[pulumi.Input['FirewallSslSshProfilePop3sArgs']] = None,
                 rpc_over_https: Optional[pulumi.Input[str]] = None,
                 server_cert: Optional[pulumi.Input[str]] = None,
                 server_cert_mode: Optional[pulumi.Input[str]] = None,
                 smtps: Optional[pulumi.Input['FirewallSslSshProfileSmtpsArgs']] = None,
                 ssh: Optional[pulumi.Input['FirewallSslSshProfileSshArgs']] = None,
                 ssl: Optional[pulumi.Input['FirewallSslSshProfileSslArgs']] = None,
                 ssl_anomalies_log: Optional[pulumi.Input[str]] = None,
                 ssl_anomaly_log: Optional[pulumi.Input[str]] = None,
                 ssl_exemption_ip_rating: Optional[pulumi.Input[str]] = None,
                 ssl_exemption_log: Optional[pulumi.Input[str]] = None,
                 ssl_exemptions_log: Optional[pulumi.Input[str]] = None,
                 ssl_exempts: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallSslSshProfileSslExemptArgs']]]] = None,
                 ssl_handshake_log: Optional[pulumi.Input[str]] = None,
                 ssl_negotiation_log: Optional[pulumi.Input[str]] = None,
                 ssl_server_cert_log: Optional[pulumi.Input[str]] = None,
                 ssl_servers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallSslSshProfileSslServerArgs']]]] = None,
                 supported_alpn: Optional[pulumi.Input[str]] = None,
                 untrusted_caname: Optional[pulumi.Input[str]] = None,
                 use_ssl_server: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 whitelist: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallSslSshProfile resource.
        """
        if allowlist is not None:
            pulumi.set(__self__, "allowlist", allowlist)
        if block_blacklisted_certificates is not None:
            pulumi.set(__self__, "block_blacklisted_certificates", block_blacklisted_certificates)
        if block_blocklisted_certificates is not None:
            pulumi.set(__self__, "block_blocklisted_certificates", block_blocklisted_certificates)
        if caname is not None:
            pulumi.set(__self__, "caname", caname)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dot is not None:
            pulumi.set(__self__, "dot", dot)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ftps is not None:
            pulumi.set(__self__, "ftps", ftps)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if https is not None:
            pulumi.set(__self__, "https", https)
        if imaps is not None:
            pulumi.set(__self__, "imaps", imaps)
        if mapi_over_https is not None:
            pulumi.set(__self__, "mapi_over_https", mapi_over_https)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pop3s is not None:
            pulumi.set(__self__, "pop3s", pop3s)
        if rpc_over_https is not None:
            pulumi.set(__self__, "rpc_over_https", rpc_over_https)
        if server_cert is not None:
            pulumi.set(__self__, "server_cert", server_cert)
        if server_cert_mode is not None:
            pulumi.set(__self__, "server_cert_mode", server_cert_mode)
        if smtps is not None:
            pulumi.set(__self__, "smtps", smtps)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_anomalies_log is not None:
            pulumi.set(__self__, "ssl_anomalies_log", ssl_anomalies_log)
        if ssl_anomaly_log is not None:
            pulumi.set(__self__, "ssl_anomaly_log", ssl_anomaly_log)
        if ssl_exemption_ip_rating is not None:
            pulumi.set(__self__, "ssl_exemption_ip_rating", ssl_exemption_ip_rating)
        if ssl_exemption_log is not None:
            pulumi.set(__self__, "ssl_exemption_log", ssl_exemption_log)
        if ssl_exemptions_log is not None:
            pulumi.set(__self__, "ssl_exemptions_log", ssl_exemptions_log)
        if ssl_exempts is not None:
            pulumi.set(__self__, "ssl_exempts", ssl_exempts)
        if ssl_handshake_log is not None:
            pulumi.set(__self__, "ssl_handshake_log", ssl_handshake_log)
        if ssl_negotiation_log is not None:
            pulumi.set(__self__, "ssl_negotiation_log", ssl_negotiation_log)
        if ssl_server_cert_log is not None:
            pulumi.set(__self__, "ssl_server_cert_log", ssl_server_cert_log)
        if ssl_servers is not None:
            pulumi.set(__self__, "ssl_servers", ssl_servers)
        if supported_alpn is not None:
            pulumi.set(__self__, "supported_alpn", supported_alpn)
        if untrusted_caname is not None:
            pulumi.set(__self__, "untrusted_caname", untrusted_caname)
        if use_ssl_server is not None:
            pulumi.set(__self__, "use_ssl_server", use_ssl_server)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)

    @property
    @pulumi.getter
    def allowlist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowlist")

    @allowlist.setter
    def allowlist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowlist", value)

    @property
    @pulumi.getter(name="blockBlacklistedCertificates")
    def block_blacklisted_certificates(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_blacklisted_certificates")

    @block_blacklisted_certificates.setter
    def block_blacklisted_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_blacklisted_certificates", value)

    @property
    @pulumi.getter(name="blockBlocklistedCertificates")
    def block_blocklisted_certificates(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_blocklisted_certificates")

    @block_blocklisted_certificates.setter
    def block_blocklisted_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_blocklisted_certificates", value)

    @property
    @pulumi.getter
    def caname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "caname")

    @caname.setter
    def caname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caname", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dot(self) -> Optional[pulumi.Input['FirewallSslSshProfileDotArgs']]:
        return pulumi.get(self, "dot")

    @dot.setter
    def dot(self, value: Optional[pulumi.Input['FirewallSslSshProfileDotArgs']]):
        pulumi.set(self, "dot", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def ftps(self) -> Optional[pulumi.Input['FirewallSslSshProfileFtpsArgs']]:
        return pulumi.get(self, "ftps")

    @ftps.setter
    def ftps(self, value: Optional[pulumi.Input['FirewallSslSshProfileFtpsArgs']]):
        pulumi.set(self, "ftps", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input['FirewallSslSshProfileHttpsArgs']]:
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input['FirewallSslSshProfileHttpsArgs']]):
        pulumi.set(self, "https", value)

    @property
    @pulumi.getter
    def imaps(self) -> Optional[pulumi.Input['FirewallSslSshProfileImapsArgs']]:
        return pulumi.get(self, "imaps")

    @imaps.setter
    def imaps(self, value: Optional[pulumi.Input['FirewallSslSshProfileImapsArgs']]):
        pulumi.set(self, "imaps", value)

    @property
    @pulumi.getter(name="mapiOverHttps")
    def mapi_over_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mapi_over_https")

    @mapi_over_https.setter
    def mapi_over_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mapi_over_https", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pop3s(self) -> Optional[pulumi.Input['FirewallSslSshProfilePop3sArgs']]:
        return pulumi.get(self, "pop3s")

    @pop3s.setter
    def pop3s(self, value: Optional[pulumi.Input['FirewallSslSshProfilePop3sArgs']]):
        pulumi.set(self, "pop3s", value)

    @property
    @pulumi.getter(name="rpcOverHttps")
    def rpc_over_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rpc_over_https")

    @rpc_over_https.setter
    def rpc_over_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpc_over_https", value)

    @property
    @pulumi.getter(name="serverCert")
    def server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_cert")

    @server_cert.setter
    def server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_cert", value)

    @property
    @pulumi.getter(name="serverCertMode")
    def server_cert_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_cert_mode")

    @server_cert_mode.setter
    def server_cert_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_cert_mode", value)

    @property
    @pulumi.getter
    def smtps(self) -> Optional[pulumi.Input['FirewallSslSshProfileSmtpsArgs']]:
        return pulumi.get(self, "smtps")

    @smtps.setter
    def smtps(self, value: Optional[pulumi.Input['FirewallSslSshProfileSmtpsArgs']]):
        pulumi.set(self, "smtps", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['FirewallSslSshProfileSshArgs']]:
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['FirewallSslSshProfileSshArgs']]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input['FirewallSslSshProfileSslArgs']]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input['FirewallSslSshProfileSslArgs']]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslAnomaliesLog")
    def ssl_anomalies_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_anomalies_log")

    @ssl_anomalies_log.setter
    def ssl_anomalies_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_anomalies_log", value)

    @property
    @pulumi.getter(name="sslAnomalyLog")
    def ssl_anomaly_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_anomaly_log")

    @ssl_anomaly_log.setter
    def ssl_anomaly_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_anomaly_log", value)

    @property
    @pulumi.getter(name="sslExemptionIpRating")
    def ssl_exemption_ip_rating(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_exemption_ip_rating")

    @ssl_exemption_ip_rating.setter
    def ssl_exemption_ip_rating(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_exemption_ip_rating", value)

    @property
    @pulumi.getter(name="sslExemptionLog")
    def ssl_exemption_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_exemption_log")

    @ssl_exemption_log.setter
    def ssl_exemption_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_exemption_log", value)

    @property
    @pulumi.getter(name="sslExemptionsLog")
    def ssl_exemptions_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_exemptions_log")

    @ssl_exemptions_log.setter
    def ssl_exemptions_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_exemptions_log", value)

    @property
    @pulumi.getter(name="sslExempts")
    def ssl_exempts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallSslSshProfileSslExemptArgs']]]]:
        return pulumi.get(self, "ssl_exempts")

    @ssl_exempts.setter
    def ssl_exempts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallSslSshProfileSslExemptArgs']]]]):
        pulumi.set(self, "ssl_exempts", value)

    @property
    @pulumi.getter(name="sslHandshakeLog")
    def ssl_handshake_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_handshake_log")

    @ssl_handshake_log.setter
    def ssl_handshake_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_handshake_log", value)

    @property
    @pulumi.getter(name="sslNegotiationLog")
    def ssl_negotiation_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_negotiation_log")

    @ssl_negotiation_log.setter
    def ssl_negotiation_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_negotiation_log", value)

    @property
    @pulumi.getter(name="sslServerCertLog")
    def ssl_server_cert_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_server_cert_log")

    @ssl_server_cert_log.setter
    def ssl_server_cert_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_cert_log", value)

    @property
    @pulumi.getter(name="sslServers")
    def ssl_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallSslSshProfileSslServerArgs']]]]:
        return pulumi.get(self, "ssl_servers")

    @ssl_servers.setter
    def ssl_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallSslSshProfileSslServerArgs']]]]):
        pulumi.set(self, "ssl_servers", value)

    @property
    @pulumi.getter(name="supportedAlpn")
    def supported_alpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "supported_alpn")

    @supported_alpn.setter
    def supported_alpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "supported_alpn", value)

    @property
    @pulumi.getter(name="untrustedCaname")
    def untrusted_caname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "untrusted_caname")

    @untrusted_caname.setter
    def untrusted_caname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_caname", value)

    @property
    @pulumi.getter(name="useSslServer")
    def use_ssl_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_ssl_server")

    @use_ssl_server.setter
    def use_ssl_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_ssl_server", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def whitelist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "whitelist")

    @whitelist.setter
    def whitelist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "whitelist", value)


@pulumi.input_type
class _FirewallSslSshProfileState:
    def __init__(__self__, *,
                 allowlist: Optional[pulumi.Input[str]] = None,
                 block_blacklisted_certificates: Optional[pulumi.Input[str]] = None,
                 block_blocklisted_certificates: Optional[pulumi.Input[str]] = None,
                 caname: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dot: Optional[pulumi.Input['FirewallSslSshProfileDotArgs']] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ftps: Optional[pulumi.Input['FirewallSslSshProfileFtpsArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https: Optional[pulumi.Input['FirewallSslSshProfileHttpsArgs']] = None,
                 imaps: Optional[pulumi.Input['FirewallSslSshProfileImapsArgs']] = None,
                 mapi_over_https: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pop3s: Optional[pulumi.Input['FirewallSslSshProfilePop3sArgs']] = None,
                 rpc_over_https: Optional[pulumi.Input[str]] = None,
                 server_cert: Optional[pulumi.Input[str]] = None,
                 server_cert_mode: Optional[pulumi.Input[str]] = None,
                 smtps: Optional[pulumi.Input['FirewallSslSshProfileSmtpsArgs']] = None,
                 ssh: Optional[pulumi.Input['FirewallSslSshProfileSshArgs']] = None,
                 ssl: Optional[pulumi.Input['FirewallSslSshProfileSslArgs']] = None,
                 ssl_anomalies_log: Optional[pulumi.Input[str]] = None,
                 ssl_anomaly_log: Optional[pulumi.Input[str]] = None,
                 ssl_exemption_ip_rating: Optional[pulumi.Input[str]] = None,
                 ssl_exemption_log: Optional[pulumi.Input[str]] = None,
                 ssl_exemptions_log: Optional[pulumi.Input[str]] = None,
                 ssl_exempts: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallSslSshProfileSslExemptArgs']]]] = None,
                 ssl_handshake_log: Optional[pulumi.Input[str]] = None,
                 ssl_negotiation_log: Optional[pulumi.Input[str]] = None,
                 ssl_server_cert_log: Optional[pulumi.Input[str]] = None,
                 ssl_servers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallSslSshProfileSslServerArgs']]]] = None,
                 supported_alpn: Optional[pulumi.Input[str]] = None,
                 untrusted_caname: Optional[pulumi.Input[str]] = None,
                 use_ssl_server: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 whitelist: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallSslSshProfile resources.
        """
        if allowlist is not None:
            pulumi.set(__self__, "allowlist", allowlist)
        if block_blacklisted_certificates is not None:
            pulumi.set(__self__, "block_blacklisted_certificates", block_blacklisted_certificates)
        if block_blocklisted_certificates is not None:
            pulumi.set(__self__, "block_blocklisted_certificates", block_blocklisted_certificates)
        if caname is not None:
            pulumi.set(__self__, "caname", caname)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dot is not None:
            pulumi.set(__self__, "dot", dot)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ftps is not None:
            pulumi.set(__self__, "ftps", ftps)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if https is not None:
            pulumi.set(__self__, "https", https)
        if imaps is not None:
            pulumi.set(__self__, "imaps", imaps)
        if mapi_over_https is not None:
            pulumi.set(__self__, "mapi_over_https", mapi_over_https)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pop3s is not None:
            pulumi.set(__self__, "pop3s", pop3s)
        if rpc_over_https is not None:
            pulumi.set(__self__, "rpc_over_https", rpc_over_https)
        if server_cert is not None:
            pulumi.set(__self__, "server_cert", server_cert)
        if server_cert_mode is not None:
            pulumi.set(__self__, "server_cert_mode", server_cert_mode)
        if smtps is not None:
            pulumi.set(__self__, "smtps", smtps)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_anomalies_log is not None:
            pulumi.set(__self__, "ssl_anomalies_log", ssl_anomalies_log)
        if ssl_anomaly_log is not None:
            pulumi.set(__self__, "ssl_anomaly_log", ssl_anomaly_log)
        if ssl_exemption_ip_rating is not None:
            pulumi.set(__self__, "ssl_exemption_ip_rating", ssl_exemption_ip_rating)
        if ssl_exemption_log is not None:
            pulumi.set(__self__, "ssl_exemption_log", ssl_exemption_log)
        if ssl_exemptions_log is not None:
            pulumi.set(__self__, "ssl_exemptions_log", ssl_exemptions_log)
        if ssl_exempts is not None:
            pulumi.set(__self__, "ssl_exempts", ssl_exempts)
        if ssl_handshake_log is not None:
            pulumi.set(__self__, "ssl_handshake_log", ssl_handshake_log)
        if ssl_negotiation_log is not None:
            pulumi.set(__self__, "ssl_negotiation_log", ssl_negotiation_log)
        if ssl_server_cert_log is not None:
            pulumi.set(__self__, "ssl_server_cert_log", ssl_server_cert_log)
        if ssl_servers is not None:
            pulumi.set(__self__, "ssl_servers", ssl_servers)
        if supported_alpn is not None:
            pulumi.set(__self__, "supported_alpn", supported_alpn)
        if untrusted_caname is not None:
            pulumi.set(__self__, "untrusted_caname", untrusted_caname)
        if use_ssl_server is not None:
            pulumi.set(__self__, "use_ssl_server", use_ssl_server)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)

    @property
    @pulumi.getter
    def allowlist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allowlist")

    @allowlist.setter
    def allowlist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowlist", value)

    @property
    @pulumi.getter(name="blockBlacklistedCertificates")
    def block_blacklisted_certificates(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_blacklisted_certificates")

    @block_blacklisted_certificates.setter
    def block_blacklisted_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_blacklisted_certificates", value)

    @property
    @pulumi.getter(name="blockBlocklistedCertificates")
    def block_blocklisted_certificates(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_blocklisted_certificates")

    @block_blocklisted_certificates.setter
    def block_blocklisted_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_blocklisted_certificates", value)

    @property
    @pulumi.getter
    def caname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "caname")

    @caname.setter
    def caname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caname", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dot(self) -> Optional[pulumi.Input['FirewallSslSshProfileDotArgs']]:
        return pulumi.get(self, "dot")

    @dot.setter
    def dot(self, value: Optional[pulumi.Input['FirewallSslSshProfileDotArgs']]):
        pulumi.set(self, "dot", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def ftps(self) -> Optional[pulumi.Input['FirewallSslSshProfileFtpsArgs']]:
        return pulumi.get(self, "ftps")

    @ftps.setter
    def ftps(self, value: Optional[pulumi.Input['FirewallSslSshProfileFtpsArgs']]):
        pulumi.set(self, "ftps", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input['FirewallSslSshProfileHttpsArgs']]:
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input['FirewallSslSshProfileHttpsArgs']]):
        pulumi.set(self, "https", value)

    @property
    @pulumi.getter
    def imaps(self) -> Optional[pulumi.Input['FirewallSslSshProfileImapsArgs']]:
        return pulumi.get(self, "imaps")

    @imaps.setter
    def imaps(self, value: Optional[pulumi.Input['FirewallSslSshProfileImapsArgs']]):
        pulumi.set(self, "imaps", value)

    @property
    @pulumi.getter(name="mapiOverHttps")
    def mapi_over_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mapi_over_https")

    @mapi_over_https.setter
    def mapi_over_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mapi_over_https", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pop3s(self) -> Optional[pulumi.Input['FirewallSslSshProfilePop3sArgs']]:
        return pulumi.get(self, "pop3s")

    @pop3s.setter
    def pop3s(self, value: Optional[pulumi.Input['FirewallSslSshProfilePop3sArgs']]):
        pulumi.set(self, "pop3s", value)

    @property
    @pulumi.getter(name="rpcOverHttps")
    def rpc_over_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rpc_over_https")

    @rpc_over_https.setter
    def rpc_over_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpc_over_https", value)

    @property
    @pulumi.getter(name="serverCert")
    def server_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_cert")

    @server_cert.setter
    def server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_cert", value)

    @property
    @pulumi.getter(name="serverCertMode")
    def server_cert_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_cert_mode")

    @server_cert_mode.setter
    def server_cert_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_cert_mode", value)

    @property
    @pulumi.getter
    def smtps(self) -> Optional[pulumi.Input['FirewallSslSshProfileSmtpsArgs']]:
        return pulumi.get(self, "smtps")

    @smtps.setter
    def smtps(self, value: Optional[pulumi.Input['FirewallSslSshProfileSmtpsArgs']]):
        pulumi.set(self, "smtps", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['FirewallSslSshProfileSshArgs']]:
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['FirewallSslSshProfileSshArgs']]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input['FirewallSslSshProfileSslArgs']]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input['FirewallSslSshProfileSslArgs']]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslAnomaliesLog")
    def ssl_anomalies_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_anomalies_log")

    @ssl_anomalies_log.setter
    def ssl_anomalies_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_anomalies_log", value)

    @property
    @pulumi.getter(name="sslAnomalyLog")
    def ssl_anomaly_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_anomaly_log")

    @ssl_anomaly_log.setter
    def ssl_anomaly_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_anomaly_log", value)

    @property
    @pulumi.getter(name="sslExemptionIpRating")
    def ssl_exemption_ip_rating(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_exemption_ip_rating")

    @ssl_exemption_ip_rating.setter
    def ssl_exemption_ip_rating(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_exemption_ip_rating", value)

    @property
    @pulumi.getter(name="sslExemptionLog")
    def ssl_exemption_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_exemption_log")

    @ssl_exemption_log.setter
    def ssl_exemption_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_exemption_log", value)

    @property
    @pulumi.getter(name="sslExemptionsLog")
    def ssl_exemptions_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_exemptions_log")

    @ssl_exemptions_log.setter
    def ssl_exemptions_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_exemptions_log", value)

    @property
    @pulumi.getter(name="sslExempts")
    def ssl_exempts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallSslSshProfileSslExemptArgs']]]]:
        return pulumi.get(self, "ssl_exempts")

    @ssl_exempts.setter
    def ssl_exempts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallSslSshProfileSslExemptArgs']]]]):
        pulumi.set(self, "ssl_exempts", value)

    @property
    @pulumi.getter(name="sslHandshakeLog")
    def ssl_handshake_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_handshake_log")

    @ssl_handshake_log.setter
    def ssl_handshake_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_handshake_log", value)

    @property
    @pulumi.getter(name="sslNegotiationLog")
    def ssl_negotiation_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_negotiation_log")

    @ssl_negotiation_log.setter
    def ssl_negotiation_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_negotiation_log", value)

    @property
    @pulumi.getter(name="sslServerCertLog")
    def ssl_server_cert_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_server_cert_log")

    @ssl_server_cert_log.setter
    def ssl_server_cert_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_cert_log", value)

    @property
    @pulumi.getter(name="sslServers")
    def ssl_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallSslSshProfileSslServerArgs']]]]:
        return pulumi.get(self, "ssl_servers")

    @ssl_servers.setter
    def ssl_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallSslSshProfileSslServerArgs']]]]):
        pulumi.set(self, "ssl_servers", value)

    @property
    @pulumi.getter(name="supportedAlpn")
    def supported_alpn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "supported_alpn")

    @supported_alpn.setter
    def supported_alpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "supported_alpn", value)

    @property
    @pulumi.getter(name="untrustedCaname")
    def untrusted_caname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "untrusted_caname")

    @untrusted_caname.setter
    def untrusted_caname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_caname", value)

    @property
    @pulumi.getter(name="useSslServer")
    def use_ssl_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_ssl_server")

    @use_ssl_server.setter
    def use_ssl_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_ssl_server", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def whitelist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "whitelist")

    @whitelist.setter
    def whitelist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "whitelist", value)


class FirewallSslSshProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowlist: Optional[pulumi.Input[str]] = None,
                 block_blacklisted_certificates: Optional[pulumi.Input[str]] = None,
                 block_blocklisted_certificates: Optional[pulumi.Input[str]] = None,
                 caname: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dot: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileDotArgs']]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ftps: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileFtpsArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileHttpsArgs']]] = None,
                 imaps: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileImapsArgs']]] = None,
                 mapi_over_https: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pop3s: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfilePop3sArgs']]] = None,
                 rpc_over_https: Optional[pulumi.Input[str]] = None,
                 server_cert: Optional[pulumi.Input[str]] = None,
                 server_cert_mode: Optional[pulumi.Input[str]] = None,
                 smtps: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSmtpsArgs']]] = None,
                 ssh: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSshArgs']]] = None,
                 ssl: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSslArgs']]] = None,
                 ssl_anomalies_log: Optional[pulumi.Input[str]] = None,
                 ssl_anomaly_log: Optional[pulumi.Input[str]] = None,
                 ssl_exemption_ip_rating: Optional[pulumi.Input[str]] = None,
                 ssl_exemption_log: Optional[pulumi.Input[str]] = None,
                 ssl_exemptions_log: Optional[pulumi.Input[str]] = None,
                 ssl_exempts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSslExemptArgs']]]]] = None,
                 ssl_handshake_log: Optional[pulumi.Input[str]] = None,
                 ssl_negotiation_log: Optional[pulumi.Input[str]] = None,
                 ssl_server_cert_log: Optional[pulumi.Input[str]] = None,
                 ssl_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSslServerArgs']]]]] = None,
                 supported_alpn: Optional[pulumi.Input[str]] = None,
                 untrusted_caname: Optional[pulumi.Input[str]] = None,
                 use_ssl_server: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 whitelist: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirewallSslSshProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FirewallSslSshProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallSslSshProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallSslSshProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallSslSshProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowlist: Optional[pulumi.Input[str]] = None,
                 block_blacklisted_certificates: Optional[pulumi.Input[str]] = None,
                 block_blocklisted_certificates: Optional[pulumi.Input[str]] = None,
                 caname: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dot: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileDotArgs']]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ftps: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileFtpsArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 https: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileHttpsArgs']]] = None,
                 imaps: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileImapsArgs']]] = None,
                 mapi_over_https: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pop3s: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfilePop3sArgs']]] = None,
                 rpc_over_https: Optional[pulumi.Input[str]] = None,
                 server_cert: Optional[pulumi.Input[str]] = None,
                 server_cert_mode: Optional[pulumi.Input[str]] = None,
                 smtps: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSmtpsArgs']]] = None,
                 ssh: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSshArgs']]] = None,
                 ssl: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSslArgs']]] = None,
                 ssl_anomalies_log: Optional[pulumi.Input[str]] = None,
                 ssl_anomaly_log: Optional[pulumi.Input[str]] = None,
                 ssl_exemption_ip_rating: Optional[pulumi.Input[str]] = None,
                 ssl_exemption_log: Optional[pulumi.Input[str]] = None,
                 ssl_exemptions_log: Optional[pulumi.Input[str]] = None,
                 ssl_exempts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSslExemptArgs']]]]] = None,
                 ssl_handshake_log: Optional[pulumi.Input[str]] = None,
                 ssl_negotiation_log: Optional[pulumi.Input[str]] = None,
                 ssl_server_cert_log: Optional[pulumi.Input[str]] = None,
                 ssl_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSslServerArgs']]]]] = None,
                 supported_alpn: Optional[pulumi.Input[str]] = None,
                 untrusted_caname: Optional[pulumi.Input[str]] = None,
                 use_ssl_server: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 whitelist: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallSslSshProfileArgs.__new__(FirewallSslSshProfileArgs)

            __props__.__dict__["allowlist"] = allowlist
            __props__.__dict__["block_blacklisted_certificates"] = block_blacklisted_certificates
            __props__.__dict__["block_blocklisted_certificates"] = block_blocklisted_certificates
            __props__.__dict__["caname"] = caname
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dot"] = dot
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["ftps"] = ftps
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["https"] = https
            __props__.__dict__["imaps"] = imaps
            __props__.__dict__["mapi_over_https"] = mapi_over_https
            __props__.__dict__["name"] = name
            __props__.__dict__["pop3s"] = pop3s
            __props__.__dict__["rpc_over_https"] = rpc_over_https
            __props__.__dict__["server_cert"] = server_cert
            __props__.__dict__["server_cert_mode"] = server_cert_mode
            __props__.__dict__["smtps"] = smtps
            __props__.__dict__["ssh"] = ssh
            __props__.__dict__["ssl"] = ssl
            __props__.__dict__["ssl_anomalies_log"] = ssl_anomalies_log
            __props__.__dict__["ssl_anomaly_log"] = ssl_anomaly_log
            __props__.__dict__["ssl_exemption_ip_rating"] = ssl_exemption_ip_rating
            __props__.__dict__["ssl_exemption_log"] = ssl_exemption_log
            __props__.__dict__["ssl_exemptions_log"] = ssl_exemptions_log
            __props__.__dict__["ssl_exempts"] = ssl_exempts
            __props__.__dict__["ssl_handshake_log"] = ssl_handshake_log
            __props__.__dict__["ssl_negotiation_log"] = ssl_negotiation_log
            __props__.__dict__["ssl_server_cert_log"] = ssl_server_cert_log
            __props__.__dict__["ssl_servers"] = ssl_servers
            __props__.__dict__["supported_alpn"] = supported_alpn
            __props__.__dict__["untrusted_caname"] = untrusted_caname
            __props__.__dict__["use_ssl_server"] = use_ssl_server
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["whitelist"] = whitelist
        super(FirewallSslSshProfile, __self__).__init__(
            'fortios:index/firewallSslSshProfile:FirewallSslSshProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowlist: Optional[pulumi.Input[str]] = None,
            block_blacklisted_certificates: Optional[pulumi.Input[str]] = None,
            block_blocklisted_certificates: Optional[pulumi.Input[str]] = None,
            caname: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dot: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileDotArgs']]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            ftps: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileFtpsArgs']]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            https: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileHttpsArgs']]] = None,
            imaps: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileImapsArgs']]] = None,
            mapi_over_https: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pop3s: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfilePop3sArgs']]] = None,
            rpc_over_https: Optional[pulumi.Input[str]] = None,
            server_cert: Optional[pulumi.Input[str]] = None,
            server_cert_mode: Optional[pulumi.Input[str]] = None,
            smtps: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSmtpsArgs']]] = None,
            ssh: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSshArgs']]] = None,
            ssl: Optional[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSslArgs']]] = None,
            ssl_anomalies_log: Optional[pulumi.Input[str]] = None,
            ssl_anomaly_log: Optional[pulumi.Input[str]] = None,
            ssl_exemption_ip_rating: Optional[pulumi.Input[str]] = None,
            ssl_exemption_log: Optional[pulumi.Input[str]] = None,
            ssl_exemptions_log: Optional[pulumi.Input[str]] = None,
            ssl_exempts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSslExemptArgs']]]]] = None,
            ssl_handshake_log: Optional[pulumi.Input[str]] = None,
            ssl_negotiation_log: Optional[pulumi.Input[str]] = None,
            ssl_server_cert_log: Optional[pulumi.Input[str]] = None,
            ssl_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallSslSshProfileSslServerArgs']]]]] = None,
            supported_alpn: Optional[pulumi.Input[str]] = None,
            untrusted_caname: Optional[pulumi.Input[str]] = None,
            use_ssl_server: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            whitelist: Optional[pulumi.Input[str]] = None) -> 'FirewallSslSshProfile':
        """
        Get an existing FirewallSslSshProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallSslSshProfileState.__new__(_FirewallSslSshProfileState)

        __props__.__dict__["allowlist"] = allowlist
        __props__.__dict__["block_blacklisted_certificates"] = block_blacklisted_certificates
        __props__.__dict__["block_blocklisted_certificates"] = block_blocklisted_certificates
        __props__.__dict__["caname"] = caname
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dot"] = dot
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["ftps"] = ftps
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["https"] = https
        __props__.__dict__["imaps"] = imaps
        __props__.__dict__["mapi_over_https"] = mapi_over_https
        __props__.__dict__["name"] = name
        __props__.__dict__["pop3s"] = pop3s
        __props__.__dict__["rpc_over_https"] = rpc_over_https
        __props__.__dict__["server_cert"] = server_cert
        __props__.__dict__["server_cert_mode"] = server_cert_mode
        __props__.__dict__["smtps"] = smtps
        __props__.__dict__["ssh"] = ssh
        __props__.__dict__["ssl"] = ssl
        __props__.__dict__["ssl_anomalies_log"] = ssl_anomalies_log
        __props__.__dict__["ssl_anomaly_log"] = ssl_anomaly_log
        __props__.__dict__["ssl_exemption_ip_rating"] = ssl_exemption_ip_rating
        __props__.__dict__["ssl_exemption_log"] = ssl_exemption_log
        __props__.__dict__["ssl_exemptions_log"] = ssl_exemptions_log
        __props__.__dict__["ssl_exempts"] = ssl_exempts
        __props__.__dict__["ssl_handshake_log"] = ssl_handshake_log
        __props__.__dict__["ssl_negotiation_log"] = ssl_negotiation_log
        __props__.__dict__["ssl_server_cert_log"] = ssl_server_cert_log
        __props__.__dict__["ssl_servers"] = ssl_servers
        __props__.__dict__["supported_alpn"] = supported_alpn
        __props__.__dict__["untrusted_caname"] = untrusted_caname
        __props__.__dict__["use_ssl_server"] = use_ssl_server
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["whitelist"] = whitelist
        return FirewallSslSshProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def allowlist(self) -> pulumi.Output[str]:
        return pulumi.get(self, "allowlist")

    @property
    @pulumi.getter(name="blockBlacklistedCertificates")
    def block_blacklisted_certificates(self) -> pulumi.Output[str]:
        return pulumi.get(self, "block_blacklisted_certificates")

    @property
    @pulumi.getter(name="blockBlocklistedCertificates")
    def block_blocklisted_certificates(self) -> pulumi.Output[str]:
        return pulumi.get(self, "block_blocklisted_certificates")

    @property
    @pulumi.getter
    def caname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "caname")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def dot(self) -> pulumi.Output['outputs.FirewallSslSshProfileDot']:
        return pulumi.get(self, "dot")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def ftps(self) -> pulumi.Output['outputs.FirewallSslSshProfileFtps']:
        return pulumi.get(self, "ftps")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def https(self) -> pulumi.Output['outputs.FirewallSslSshProfileHttps']:
        return pulumi.get(self, "https")

    @property
    @pulumi.getter
    def imaps(self) -> pulumi.Output['outputs.FirewallSslSshProfileImaps']:
        return pulumi.get(self, "imaps")

    @property
    @pulumi.getter(name="mapiOverHttps")
    def mapi_over_https(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mapi_over_https")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pop3s(self) -> pulumi.Output['outputs.FirewallSslSshProfilePop3s']:
        return pulumi.get(self, "pop3s")

    @property
    @pulumi.getter(name="rpcOverHttps")
    def rpc_over_https(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rpc_over_https")

    @property
    @pulumi.getter(name="serverCert")
    def server_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_cert")

    @property
    @pulumi.getter(name="serverCertMode")
    def server_cert_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_cert_mode")

    @property
    @pulumi.getter
    def smtps(self) -> pulumi.Output['outputs.FirewallSslSshProfileSmtps']:
        return pulumi.get(self, "smtps")

    @property
    @pulumi.getter
    def ssh(self) -> pulumi.Output['outputs.FirewallSslSshProfileSsh']:
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter
    def ssl(self) -> pulumi.Output['outputs.FirewallSslSshProfileSsl']:
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter(name="sslAnomaliesLog")
    def ssl_anomalies_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_anomalies_log")

    @property
    @pulumi.getter(name="sslAnomalyLog")
    def ssl_anomaly_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_anomaly_log")

    @property
    @pulumi.getter(name="sslExemptionIpRating")
    def ssl_exemption_ip_rating(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_exemption_ip_rating")

    @property
    @pulumi.getter(name="sslExemptionLog")
    def ssl_exemption_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_exemption_log")

    @property
    @pulumi.getter(name="sslExemptionsLog")
    def ssl_exemptions_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_exemptions_log")

    @property
    @pulumi.getter(name="sslExempts")
    def ssl_exempts(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallSslSshProfileSslExempt']]]:
        return pulumi.get(self, "ssl_exempts")

    @property
    @pulumi.getter(name="sslHandshakeLog")
    def ssl_handshake_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_handshake_log")

    @property
    @pulumi.getter(name="sslNegotiationLog")
    def ssl_negotiation_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_negotiation_log")

    @property
    @pulumi.getter(name="sslServerCertLog")
    def ssl_server_cert_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_server_cert_log")

    @property
    @pulumi.getter(name="sslServers")
    def ssl_servers(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallSslSshProfileSslServer']]]:
        return pulumi.get(self, "ssl_servers")

    @property
    @pulumi.getter(name="supportedAlpn")
    def supported_alpn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "supported_alpn")

    @property
    @pulumi.getter(name="untrustedCaname")
    def untrusted_caname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "untrusted_caname")

    @property
    @pulumi.getter(name="useSslServer")
    def use_ssl_server(self) -> pulumi.Output[str]:
        return pulumi.get(self, "use_ssl_server")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def whitelist(self) -> pulumi.Output[str]:
        return pulumi.get(self, "whitelist")

