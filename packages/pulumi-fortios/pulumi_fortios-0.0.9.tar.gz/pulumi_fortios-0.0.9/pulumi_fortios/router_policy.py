# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RouterPolicyArgs', 'RouterPolicy']

@pulumi.input_type
class RouterPolicyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyDstaddrArgs']]]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyDstArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 end_source_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 input_devices: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInputDeviceArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInternetServiceCustomArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInternetServiceIdArgs']]]] = None,
                 output_device: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicySrcaddrArgs']]]] = None,
                 srcs: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicySrcArgs']]]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 start_source_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RouterPolicy resource.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if end_source_port is not None:
            pulumi.set(__self__, "end_source_port", end_source_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if input_devices is not None:
            pulumi.set(__self__, "input_devices", input_devices)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if output_device is not None:
            pulumi.set(__self__, "output_device", output_device)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcs is not None:
            pulumi.set(__self__, "srcs", srcs)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if start_source_port is not None:
            pulumi.set(__self__, "start_source_port", start_source_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_negate")

    @dst_negate.setter
    def dst_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_negate", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyDstaddrArgs']]]]:
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyDstArgs']]]]:
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="endSourcePort")
    def end_source_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_source_port")

    @end_source_port.setter
    def end_source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_source_port", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_device_negate")

    @input_device_negate.setter
    def input_device_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_device_negate", value)

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInputDeviceArgs']]]]:
        return pulumi.get(self, "input_devices")

    @input_devices.setter
    def input_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInputDeviceArgs']]]]):
        pulumi.set(self, "input_devices", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInternetServiceCustomArgs']]]]:
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInternetServiceIdArgs']]]]:
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="outputDevice")
    def output_device(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_device")

    @output_device.setter
    def output_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_device", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_negate")

    @src_negate.setter
    def src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_negate", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicySrcaddrArgs']]]]:
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicySrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicySrcArgs']]]]:
        return pulumi.get(self, "srcs")

    @srcs.setter
    def srcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicySrcArgs']]]]):
        pulumi.set(self, "srcs", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter(name="startSourcePort")
    def start_source_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_source_port")

    @start_source_port.setter
    def start_source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_source_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _RouterPolicyState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyDstaddrArgs']]]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyDstArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 end_source_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 input_devices: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInputDeviceArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInternetServiceCustomArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInternetServiceIdArgs']]]] = None,
                 output_device: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicySrcaddrArgs']]]] = None,
                 srcs: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicySrcArgs']]]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 start_source_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RouterPolicy resources.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if end_source_port is not None:
            pulumi.set(__self__, "end_source_port", end_source_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if input_devices is not None:
            pulumi.set(__self__, "input_devices", input_devices)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if output_device is not None:
            pulumi.set(__self__, "output_device", output_device)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcs is not None:
            pulumi.set(__self__, "srcs", srcs)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if start_source_port is not None:
            pulumi.set(__self__, "start_source_port", start_source_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_negate")

    @dst_negate.setter
    def dst_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_negate", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyDstaddrArgs']]]]:
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyDstArgs']]]]:
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="endSourcePort")
    def end_source_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_source_port")

    @end_source_port.setter
    def end_source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_source_port", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_device_negate")

    @input_device_negate.setter
    def input_device_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_device_negate", value)

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInputDeviceArgs']]]]:
        return pulumi.get(self, "input_devices")

    @input_devices.setter
    def input_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInputDeviceArgs']]]]):
        pulumi.set(self, "input_devices", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInternetServiceCustomArgs']]]]:
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInternetServiceIdArgs']]]]:
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicyInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="outputDevice")
    def output_device(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_device")

    @output_device.setter
    def output_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_device", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_negate")

    @src_negate.setter
    def src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_negate", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicySrcaddrArgs']]]]:
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicySrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicySrcArgs']]]]:
        return pulumi.get(self, "srcs")

    @srcs.setter
    def srcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterPolicySrcArgs']]]]):
        pulumi.set(self, "srcs", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter(name="startSourcePort")
    def start_source_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_source_port")

    @start_source_port.setter
    def start_source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_source_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class RouterPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyDstaddrArgs']]]]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyDstArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 end_source_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 input_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyInputDeviceArgs']]]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyInternetServiceCustomArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyInternetServiceIdArgs']]]]] = None,
                 output_device: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicySrcaddrArgs']]]]] = None,
                 srcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicySrcArgs']]]]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 start_source_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RouterPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RouterPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RouterPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RouterPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouterPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyDstaddrArgs']]]]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyDstArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 end_source_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 input_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyInputDeviceArgs']]]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyInternetServiceCustomArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyInternetServiceIdArgs']]]]] = None,
                 output_device: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicySrcaddrArgs']]]]] = None,
                 srcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicySrcArgs']]]]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 start_source_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouterPolicyArgs.__new__(RouterPolicyArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["comments"] = comments
            __props__.__dict__["dst_negate"] = dst_negate
            __props__.__dict__["dstaddrs"] = dstaddrs
            __props__.__dict__["dsts"] = dsts
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["end_port"] = end_port
            __props__.__dict__["end_source_port"] = end_source_port
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["input_device_negate"] = input_device_negate
            __props__.__dict__["input_devices"] = input_devices
            __props__.__dict__["internet_service_customs"] = internet_service_customs
            __props__.__dict__["internet_service_ids"] = internet_service_ids
            __props__.__dict__["output_device"] = output_device
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["seq_num"] = seq_num
            __props__.__dict__["src_negate"] = src_negate
            __props__.__dict__["srcaddrs"] = srcaddrs
            __props__.__dict__["srcs"] = srcs
            __props__.__dict__["start_port"] = start_port
            __props__.__dict__["start_source_port"] = start_source_port
            __props__.__dict__["status"] = status
            __props__.__dict__["tos"] = tos
            __props__.__dict__["tos_mask"] = tos_mask
            __props__.__dict__["vdomparam"] = vdomparam
        super(RouterPolicy, __self__).__init__(
            'fortios:index/routerPolicy:RouterPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dst_negate: Optional[pulumi.Input[str]] = None,
            dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyDstaddrArgs']]]]] = None,
            dsts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyDstArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            end_port: Optional[pulumi.Input[int]] = None,
            end_source_port: Optional[pulumi.Input[int]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            input_device_negate: Optional[pulumi.Input[str]] = None,
            input_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyInputDeviceArgs']]]]] = None,
            internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyInternetServiceCustomArgs']]]]] = None,
            internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicyInternetServiceIdArgs']]]]] = None,
            output_device: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[int]] = None,
            seq_num: Optional[pulumi.Input[int]] = None,
            src_negate: Optional[pulumi.Input[str]] = None,
            srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicySrcaddrArgs']]]]] = None,
            srcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouterPolicySrcArgs']]]]] = None,
            start_port: Optional[pulumi.Input[int]] = None,
            start_source_port: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tos: Optional[pulumi.Input[str]] = None,
            tos_mask: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'RouterPolicy':
        """
        Get an existing RouterPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouterPolicyState.__new__(_RouterPolicyState)

        __props__.__dict__["action"] = action
        __props__.__dict__["comments"] = comments
        __props__.__dict__["dst_negate"] = dst_negate
        __props__.__dict__["dstaddrs"] = dstaddrs
        __props__.__dict__["dsts"] = dsts
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["end_port"] = end_port
        __props__.__dict__["end_source_port"] = end_source_port
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["input_device_negate"] = input_device_negate
        __props__.__dict__["input_devices"] = input_devices
        __props__.__dict__["internet_service_customs"] = internet_service_customs
        __props__.__dict__["internet_service_ids"] = internet_service_ids
        __props__.__dict__["output_device"] = output_device
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["seq_num"] = seq_num
        __props__.__dict__["src_negate"] = src_negate
        __props__.__dict__["srcaddrs"] = srcaddrs
        __props__.__dict__["srcs"] = srcs
        __props__.__dict__["start_port"] = start_port
        __props__.__dict__["start_source_port"] = start_source_port
        __props__.__dict__["status"] = status
        __props__.__dict__["tos"] = tos
        __props__.__dict__["tos_mask"] = tos_mask
        __props__.__dict__["vdomparam"] = vdomparam
        return RouterPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dst_negate")

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.RouterPolicyDstaddr']]]:
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dsts(self) -> pulumi.Output[Optional[Sequence['outputs.RouterPolicyDst']]]:
        return pulumi.get(self, "dsts")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="endSourcePort")
    def end_source_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "end_source_port")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "input_device_negate")

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> pulumi.Output[Optional[Sequence['outputs.RouterPolicyInputDevice']]]:
        return pulumi.get(self, "input_devices")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> pulumi.Output[Optional[Sequence['outputs.RouterPolicyInternetServiceCustom']]]:
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> pulumi.Output[Optional[Sequence['outputs.RouterPolicyInternetServiceId']]]:
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="outputDevice")
    def output_device(self) -> pulumi.Output[str]:
        return pulumi.get(self, "output_device")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[int]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> pulumi.Output[int]:
        return pulumi.get(self, "seq_num")

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "src_negate")

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.RouterPolicySrcaddr']]]:
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcs(self) -> pulumi.Output[Optional[Sequence['outputs.RouterPolicySrc']]]:
        return pulumi.get(self, "srcs")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter(name="startSourcePort")
    def start_source_port(self) -> pulumi.Output[int]:
        return pulumi.get(self, "start_source_port")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tos(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

