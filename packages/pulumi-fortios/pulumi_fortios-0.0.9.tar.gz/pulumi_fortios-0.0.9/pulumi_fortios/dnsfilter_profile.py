# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DnsfilterProfileArgs', 'DnsfilterProfile']

@pulumi.input_type
class DnsfilterProfileArgs:
    def __init__(__self__, *,
                 block_action: Optional[pulumi.Input[str]] = None,
                 block_botnet: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dns_translations: Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileDnsTranslationArgs']]]] = None,
                 domain_filter: Optional[pulumi.Input['DnsfilterProfileDomainFilterArgs']] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 external_ip_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileExternalIpBlocklistArgs']]]] = None,
                 ftgd_dns: Optional[pulumi.Input['DnsfilterProfileFtgdDnsArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_all_domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_portal: Optional[pulumi.Input[str]] = None,
                 redirect_portal6: Optional[pulumi.Input[str]] = None,
                 safe_search: Optional[pulumi.Input[str]] = None,
                 sdns_domain_log: Optional[pulumi.Input[str]] = None,
                 sdns_ftgd_err_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 youtube_restrict: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DnsfilterProfile resource.
        """
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_botnet is not None:
            pulumi.set(__self__, "block_botnet", block_botnet)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dns_translations is not None:
            pulumi.set(__self__, "dns_translations", dns_translations)
        if domain_filter is not None:
            pulumi.set(__self__, "domain_filter", domain_filter)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if external_ip_blocklists is not None:
            pulumi.set(__self__, "external_ip_blocklists", external_ip_blocklists)
        if ftgd_dns is not None:
            pulumi.set(__self__, "ftgd_dns", ftgd_dns)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if log_all_domain is not None:
            pulumi.set(__self__, "log_all_domain", log_all_domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redirect_portal is not None:
            pulumi.set(__self__, "redirect_portal", redirect_portal)
        if redirect_portal6 is not None:
            pulumi.set(__self__, "redirect_portal6", redirect_portal6)
        if safe_search is not None:
            pulumi.set(__self__, "safe_search", safe_search)
        if sdns_domain_log is not None:
            pulumi.set(__self__, "sdns_domain_log", sdns_domain_log)
        if sdns_ftgd_err_log is not None:
            pulumi.set(__self__, "sdns_ftgd_err_log", sdns_ftgd_err_log)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if youtube_restrict is not None:
            pulumi.set(__self__, "youtube_restrict", youtube_restrict)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_action")

    @block_action.setter
    def block_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_action", value)

    @property
    @pulumi.getter(name="blockBotnet")
    def block_botnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_botnet")

    @block_botnet.setter
    def block_botnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_botnet", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dnsTranslations")
    def dns_translations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileDnsTranslationArgs']]]]:
        return pulumi.get(self, "dns_translations")

    @dns_translations.setter
    def dns_translations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileDnsTranslationArgs']]]]):
        pulumi.set(self, "dns_translations", value)

    @property
    @pulumi.getter(name="domainFilter")
    def domain_filter(self) -> Optional[pulumi.Input['DnsfilterProfileDomainFilterArgs']]:
        return pulumi.get(self, "domain_filter")

    @domain_filter.setter
    def domain_filter(self, value: Optional[pulumi.Input['DnsfilterProfileDomainFilterArgs']]):
        pulumi.set(self, "domain_filter", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="externalIpBlocklists")
    def external_ip_blocklists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileExternalIpBlocklistArgs']]]]:
        return pulumi.get(self, "external_ip_blocklists")

    @external_ip_blocklists.setter
    def external_ip_blocklists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileExternalIpBlocklistArgs']]]]):
        pulumi.set(self, "external_ip_blocklists", value)

    @property
    @pulumi.getter(name="ftgdDns")
    def ftgd_dns(self) -> Optional[pulumi.Input['DnsfilterProfileFtgdDnsArgs']]:
        return pulumi.get(self, "ftgd_dns")

    @ftgd_dns.setter
    def ftgd_dns(self, value: Optional[pulumi.Input['DnsfilterProfileFtgdDnsArgs']]):
        pulumi.set(self, "ftgd_dns", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="logAllDomain")
    def log_all_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_all_domain")

    @log_all_domain.setter
    def log_all_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all_domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="redirectPortal")
    def redirect_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_portal")

    @redirect_portal.setter
    def redirect_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_portal", value)

    @property
    @pulumi.getter(name="redirectPortal6")
    def redirect_portal6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_portal6")

    @redirect_portal6.setter
    def redirect_portal6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_portal6", value)

    @property
    @pulumi.getter(name="safeSearch")
    def safe_search(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "safe_search")

    @safe_search.setter
    def safe_search(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "safe_search", value)

    @property
    @pulumi.getter(name="sdnsDomainLog")
    def sdns_domain_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sdns_domain_log")

    @sdns_domain_log.setter
    def sdns_domain_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdns_domain_log", value)

    @property
    @pulumi.getter(name="sdnsFtgdErrLog")
    def sdns_ftgd_err_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sdns_ftgd_err_log")

    @sdns_ftgd_err_log.setter
    def sdns_ftgd_err_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdns_ftgd_err_log", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="youtubeRestrict")
    def youtube_restrict(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "youtube_restrict")

    @youtube_restrict.setter
    def youtube_restrict(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "youtube_restrict", value)


@pulumi.input_type
class _DnsfilterProfileState:
    def __init__(__self__, *,
                 block_action: Optional[pulumi.Input[str]] = None,
                 block_botnet: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dns_translations: Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileDnsTranslationArgs']]]] = None,
                 domain_filter: Optional[pulumi.Input['DnsfilterProfileDomainFilterArgs']] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 external_ip_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileExternalIpBlocklistArgs']]]] = None,
                 ftgd_dns: Optional[pulumi.Input['DnsfilterProfileFtgdDnsArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_all_domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_portal: Optional[pulumi.Input[str]] = None,
                 redirect_portal6: Optional[pulumi.Input[str]] = None,
                 safe_search: Optional[pulumi.Input[str]] = None,
                 sdns_domain_log: Optional[pulumi.Input[str]] = None,
                 sdns_ftgd_err_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 youtube_restrict: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DnsfilterProfile resources.
        """
        if block_action is not None:
            pulumi.set(__self__, "block_action", block_action)
        if block_botnet is not None:
            pulumi.set(__self__, "block_botnet", block_botnet)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dns_translations is not None:
            pulumi.set(__self__, "dns_translations", dns_translations)
        if domain_filter is not None:
            pulumi.set(__self__, "domain_filter", domain_filter)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if external_ip_blocklists is not None:
            pulumi.set(__self__, "external_ip_blocklists", external_ip_blocklists)
        if ftgd_dns is not None:
            pulumi.set(__self__, "ftgd_dns", ftgd_dns)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if log_all_domain is not None:
            pulumi.set(__self__, "log_all_domain", log_all_domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redirect_portal is not None:
            pulumi.set(__self__, "redirect_portal", redirect_portal)
        if redirect_portal6 is not None:
            pulumi.set(__self__, "redirect_portal6", redirect_portal6)
        if safe_search is not None:
            pulumi.set(__self__, "safe_search", safe_search)
        if sdns_domain_log is not None:
            pulumi.set(__self__, "sdns_domain_log", sdns_domain_log)
        if sdns_ftgd_err_log is not None:
            pulumi.set(__self__, "sdns_ftgd_err_log", sdns_ftgd_err_log)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if youtube_restrict is not None:
            pulumi.set(__self__, "youtube_restrict", youtube_restrict)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_action")

    @block_action.setter
    def block_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_action", value)

    @property
    @pulumi.getter(name="blockBotnet")
    def block_botnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_botnet")

    @block_botnet.setter
    def block_botnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_botnet", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dnsTranslations")
    def dns_translations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileDnsTranslationArgs']]]]:
        return pulumi.get(self, "dns_translations")

    @dns_translations.setter
    def dns_translations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileDnsTranslationArgs']]]]):
        pulumi.set(self, "dns_translations", value)

    @property
    @pulumi.getter(name="domainFilter")
    def domain_filter(self) -> Optional[pulumi.Input['DnsfilterProfileDomainFilterArgs']]:
        return pulumi.get(self, "domain_filter")

    @domain_filter.setter
    def domain_filter(self, value: Optional[pulumi.Input['DnsfilterProfileDomainFilterArgs']]):
        pulumi.set(self, "domain_filter", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="externalIpBlocklists")
    def external_ip_blocklists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileExternalIpBlocklistArgs']]]]:
        return pulumi.get(self, "external_ip_blocklists")

    @external_ip_blocklists.setter
    def external_ip_blocklists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileExternalIpBlocklistArgs']]]]):
        pulumi.set(self, "external_ip_blocklists", value)

    @property
    @pulumi.getter(name="ftgdDns")
    def ftgd_dns(self) -> Optional[pulumi.Input['DnsfilterProfileFtgdDnsArgs']]:
        return pulumi.get(self, "ftgd_dns")

    @ftgd_dns.setter
    def ftgd_dns(self, value: Optional[pulumi.Input['DnsfilterProfileFtgdDnsArgs']]):
        pulumi.set(self, "ftgd_dns", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="logAllDomain")
    def log_all_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_all_domain")

    @log_all_domain.setter
    def log_all_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all_domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="redirectPortal")
    def redirect_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_portal")

    @redirect_portal.setter
    def redirect_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_portal", value)

    @property
    @pulumi.getter(name="redirectPortal6")
    def redirect_portal6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_portal6")

    @redirect_portal6.setter
    def redirect_portal6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_portal6", value)

    @property
    @pulumi.getter(name="safeSearch")
    def safe_search(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "safe_search")

    @safe_search.setter
    def safe_search(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "safe_search", value)

    @property
    @pulumi.getter(name="sdnsDomainLog")
    def sdns_domain_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sdns_domain_log")

    @sdns_domain_log.setter
    def sdns_domain_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdns_domain_log", value)

    @property
    @pulumi.getter(name="sdnsFtgdErrLog")
    def sdns_ftgd_err_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sdns_ftgd_err_log")

    @sdns_ftgd_err_log.setter
    def sdns_ftgd_err_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdns_ftgd_err_log", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="youtubeRestrict")
    def youtube_restrict(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "youtube_restrict")

    @youtube_restrict.setter
    def youtube_restrict(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "youtube_restrict", value)


class DnsfilterProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_action: Optional[pulumi.Input[str]] = None,
                 block_botnet: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dns_translations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsfilterProfileDnsTranslationArgs']]]]] = None,
                 domain_filter: Optional[pulumi.Input[pulumi.InputType['DnsfilterProfileDomainFilterArgs']]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 external_ip_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsfilterProfileExternalIpBlocklistArgs']]]]] = None,
                 ftgd_dns: Optional[pulumi.Input[pulumi.InputType['DnsfilterProfileFtgdDnsArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_all_domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_portal: Optional[pulumi.Input[str]] = None,
                 redirect_portal6: Optional[pulumi.Input[str]] = None,
                 safe_search: Optional[pulumi.Input[str]] = None,
                 sdns_domain_log: Optional[pulumi.Input[str]] = None,
                 sdns_ftgd_err_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 youtube_restrict: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DnsfilterProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DnsfilterProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsfilterProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsfilterProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsfilterProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_action: Optional[pulumi.Input[str]] = None,
                 block_botnet: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dns_translations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsfilterProfileDnsTranslationArgs']]]]] = None,
                 domain_filter: Optional[pulumi.Input[pulumi.InputType['DnsfilterProfileDomainFilterArgs']]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 external_ip_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsfilterProfileExternalIpBlocklistArgs']]]]] = None,
                 ftgd_dns: Optional[pulumi.Input[pulumi.InputType['DnsfilterProfileFtgdDnsArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_all_domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_portal: Optional[pulumi.Input[str]] = None,
                 redirect_portal6: Optional[pulumi.Input[str]] = None,
                 safe_search: Optional[pulumi.Input[str]] = None,
                 sdns_domain_log: Optional[pulumi.Input[str]] = None,
                 sdns_ftgd_err_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 youtube_restrict: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsfilterProfileArgs.__new__(DnsfilterProfileArgs)

            __props__.__dict__["block_action"] = block_action
            __props__.__dict__["block_botnet"] = block_botnet
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dns_translations"] = dns_translations
            __props__.__dict__["domain_filter"] = domain_filter
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["external_ip_blocklists"] = external_ip_blocklists
            __props__.__dict__["ftgd_dns"] = ftgd_dns
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["log_all_domain"] = log_all_domain
            __props__.__dict__["name"] = name
            __props__.__dict__["redirect_portal"] = redirect_portal
            __props__.__dict__["redirect_portal6"] = redirect_portal6
            __props__.__dict__["safe_search"] = safe_search
            __props__.__dict__["sdns_domain_log"] = sdns_domain_log
            __props__.__dict__["sdns_ftgd_err_log"] = sdns_ftgd_err_log
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["youtube_restrict"] = youtube_restrict
        super(DnsfilterProfile, __self__).__init__(
            'fortios:index/dnsfilterProfile:DnsfilterProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            block_action: Optional[pulumi.Input[str]] = None,
            block_botnet: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dns_translations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsfilterProfileDnsTranslationArgs']]]]] = None,
            domain_filter: Optional[pulumi.Input[pulumi.InputType['DnsfilterProfileDomainFilterArgs']]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            external_ip_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsfilterProfileExternalIpBlocklistArgs']]]]] = None,
            ftgd_dns: Optional[pulumi.Input[pulumi.InputType['DnsfilterProfileFtgdDnsArgs']]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            log_all_domain: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            redirect_portal: Optional[pulumi.Input[str]] = None,
            redirect_portal6: Optional[pulumi.Input[str]] = None,
            safe_search: Optional[pulumi.Input[str]] = None,
            sdns_domain_log: Optional[pulumi.Input[str]] = None,
            sdns_ftgd_err_log: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            youtube_restrict: Optional[pulumi.Input[str]] = None) -> 'DnsfilterProfile':
        """
        Get an existing DnsfilterProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsfilterProfileState.__new__(_DnsfilterProfileState)

        __props__.__dict__["block_action"] = block_action
        __props__.__dict__["block_botnet"] = block_botnet
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dns_translations"] = dns_translations
        __props__.__dict__["domain_filter"] = domain_filter
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["external_ip_blocklists"] = external_ip_blocklists
        __props__.__dict__["ftgd_dns"] = ftgd_dns
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["log_all_domain"] = log_all_domain
        __props__.__dict__["name"] = name
        __props__.__dict__["redirect_portal"] = redirect_portal
        __props__.__dict__["redirect_portal6"] = redirect_portal6
        __props__.__dict__["safe_search"] = safe_search
        __props__.__dict__["sdns_domain_log"] = sdns_domain_log
        __props__.__dict__["sdns_ftgd_err_log"] = sdns_ftgd_err_log
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["youtube_restrict"] = youtube_restrict
        return DnsfilterProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="blockAction")
    def block_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "block_action")

    @property
    @pulumi.getter(name="blockBotnet")
    def block_botnet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "block_botnet")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dnsTranslations")
    def dns_translations(self) -> pulumi.Output[Optional[Sequence['outputs.DnsfilterProfileDnsTranslation']]]:
        return pulumi.get(self, "dns_translations")

    @property
    @pulumi.getter(name="domainFilter")
    def domain_filter(self) -> pulumi.Output['outputs.DnsfilterProfileDomainFilter']:
        return pulumi.get(self, "domain_filter")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="externalIpBlocklists")
    def external_ip_blocklists(self) -> pulumi.Output[Optional[Sequence['outputs.DnsfilterProfileExternalIpBlocklist']]]:
        return pulumi.get(self, "external_ip_blocklists")

    @property
    @pulumi.getter(name="ftgdDns")
    def ftgd_dns(self) -> pulumi.Output['outputs.DnsfilterProfileFtgdDns']:
        return pulumi.get(self, "ftgd_dns")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="logAllDomain")
    def log_all_domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "log_all_domain")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="redirectPortal")
    def redirect_portal(self) -> pulumi.Output[str]:
        return pulumi.get(self, "redirect_portal")

    @property
    @pulumi.getter(name="redirectPortal6")
    def redirect_portal6(self) -> pulumi.Output[str]:
        return pulumi.get(self, "redirect_portal6")

    @property
    @pulumi.getter(name="safeSearch")
    def safe_search(self) -> pulumi.Output[str]:
        return pulumi.get(self, "safe_search")

    @property
    @pulumi.getter(name="sdnsDomainLog")
    def sdns_domain_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sdns_domain_log")

    @property
    @pulumi.getter(name="sdnsFtgdErrLog")
    def sdns_ftgd_err_log(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sdns_ftgd_err_log")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="youtubeRestrict")
    def youtube_restrict(self) -> pulumi.Output[str]:
        return pulumi.get(self, "youtube_restrict")

