# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FortimanagerSystemGlobalArgs', 'FortimanagerSystemGlobal']

@pulumi.input_type
class FortimanagerSystemGlobalArgs:
    def __init__(__self__, *,
                 adom_mode: Optional[pulumi.Input[str]] = None,
                 adom_status: Optional[pulumi.Input[str]] = None,
                 fortianalyzer_status: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FortimanagerSystemGlobal resource.
        """
        if adom_mode is not None:
            pulumi.set(__self__, "adom_mode", adom_mode)
        if adom_status is not None:
            pulumi.set(__self__, "adom_status", adom_status)
        if fortianalyzer_status is not None:
            pulumi.set(__self__, "fortianalyzer_status", fortianalyzer_status)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="adomMode")
    def adom_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adom_mode")

    @adom_mode.setter
    def adom_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom_mode", value)

    @property
    @pulumi.getter(name="adomStatus")
    def adom_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adom_status")

    @adom_status.setter
    def adom_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom_status", value)

    @property
    @pulumi.getter(name="fortianalyzerStatus")
    def fortianalyzer_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortianalyzer_status")

    @fortianalyzer_status.setter
    def fortianalyzer_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortianalyzer_status", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


@pulumi.input_type
class _FortimanagerSystemGlobalState:
    def __init__(__self__, *,
                 adom_mode: Optional[pulumi.Input[str]] = None,
                 adom_status: Optional[pulumi.Input[str]] = None,
                 fortianalyzer_status: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FortimanagerSystemGlobal resources.
        """
        if adom_mode is not None:
            pulumi.set(__self__, "adom_mode", adom_mode)
        if adom_status is not None:
            pulumi.set(__self__, "adom_status", adom_status)
        if fortianalyzer_status is not None:
            pulumi.set(__self__, "fortianalyzer_status", fortianalyzer_status)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="adomMode")
    def adom_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adom_mode")

    @adom_mode.setter
    def adom_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom_mode", value)

    @property
    @pulumi.getter(name="adomStatus")
    def adom_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adom_status")

    @adom_status.setter
    def adom_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adom_status", value)

    @property
    @pulumi.getter(name="fortianalyzerStatus")
    def fortianalyzer_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortianalyzer_status")

    @fortianalyzer_status.setter
    def fortianalyzer_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortianalyzer_status", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


class FortimanagerSystemGlobal(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adom_mode: Optional[pulumi.Input[str]] = None,
                 adom_status: Optional[pulumi.Input[str]] = None,
                 fortianalyzer_status: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FortimanagerSystemGlobal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FortimanagerSystemGlobalArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FortimanagerSystemGlobal resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FortimanagerSystemGlobalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FortimanagerSystemGlobalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adom_mode: Optional[pulumi.Input[str]] = None,
                 adom_status: Optional[pulumi.Input[str]] = None,
                 fortianalyzer_status: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FortimanagerSystemGlobalArgs.__new__(FortimanagerSystemGlobalArgs)

            __props__.__dict__["adom_mode"] = adom_mode
            __props__.__dict__["adom_status"] = adom_status
            __props__.__dict__["fortianalyzer_status"] = fortianalyzer_status
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["timezone"] = timezone
        super(FortimanagerSystemGlobal, __self__).__init__(
            'fortios:index/fortimanagerSystemGlobal:FortimanagerSystemGlobal',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adom_mode: Optional[pulumi.Input[str]] = None,
            adom_status: Optional[pulumi.Input[str]] = None,
            fortianalyzer_status: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            timezone: Optional[pulumi.Input[str]] = None) -> 'FortimanagerSystemGlobal':
        """
        Get an existing FortimanagerSystemGlobal resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FortimanagerSystemGlobalState.__new__(_FortimanagerSystemGlobalState)

        __props__.__dict__["adom_mode"] = adom_mode
        __props__.__dict__["adom_status"] = adom_status
        __props__.__dict__["fortianalyzer_status"] = fortianalyzer_status
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["timezone"] = timezone
        return FortimanagerSystemGlobal(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adomMode")
    def adom_mode(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "adom_mode")

    @property
    @pulumi.getter(name="adomStatus")
    def adom_status(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "adom_status")

    @property
    @pulumi.getter(name="fortianalyzerStatus")
    def fortianalyzer_status(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "fortianalyzer_status")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "timezone")

