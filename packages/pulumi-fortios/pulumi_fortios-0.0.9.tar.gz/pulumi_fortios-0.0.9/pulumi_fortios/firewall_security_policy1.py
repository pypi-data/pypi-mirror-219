# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FirewallSecurityPolicy1Args', 'FirewallSecurityPolicy1']

@pulumi.input_type
class FirewallSecurityPolicy1Args:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 dstaddrs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 dstintfs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 schedule: pulumi.Input[str],
                 services: pulumi.Input[Sequence[pulumi.Input[str]]],
                 srcaddrs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 srcintfs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 application_list: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirewallSecurityPolicy1 resource.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "dstaddrs", dstaddrs)
        pulumi.set(__self__, "dstintfs", dstintfs)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "services", services)
        pulumi.set(__self__, "srcaddrs", srcaddrs)
        pulumi.set(__self__, "srcintfs", srcintfs)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if capture_packet is not None:
            pulumi.set(__self__, "capture_packet", capture_packet)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if dnsfilter_profile is not None:
            pulumi.set(__self__, "dnsfilter_profile", dnsfilter_profile)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_src is not None:
            pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_ids is not None:
            pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if ippool is not None:
            pulumi.set(__self__, "ippool", ippool)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if poolnames is not None:
            pulumi.set(__self__, "poolnames", poolnames)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def services(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="capturePacket")
    def capture_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capture_packet")

    @capture_packet.setter
    def capture_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capture_packet", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dnsfilter_profile")

    @dnsfilter_profile.setter
    def dnsfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnsfilter_profile", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service_src")

    @internet_service_src.setter
    def internet_service_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src", value)

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "internet_service_src_ids")

    @internet_service_src_ids.setter
    def internet_service_src_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "internet_service_src_ids", value)

    @property
    @pulumi.getter
    def ippool(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ippool")

    @ippool.setter
    def ippool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ippool", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter
    def poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "poolnames")

    @poolnames.setter
    def poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "poolnames", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)


@pulumi.input_type
class _FirewallSecurityPolicy1State:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirewallSecurityPolicy1 resources.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if av_profile is not None:
            pulumi.set(__self__, "av_profile", av_profile)
        if capture_packet is not None:
            pulumi.set(__self__, "capture_packet", capture_packet)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if dnsfilter_profile is not None:
            pulumi.set(__self__, "dnsfilter_profile", dnsfilter_profile)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_src is not None:
            pulumi.set(__self__, "internet_service_src", internet_service_src)
        if internet_service_src_ids is not None:
            pulumi.set(__self__, "internet_service_src_ids", internet_service_src_ids)
        if ippool is not None:
            pulumi.set(__self__, "ippool", ippool)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if logtraffic is not None:
            pulumi.set(__self__, "logtraffic", logtraffic)
        if logtraffic_start is not None:
            pulumi.set(__self__, "logtraffic_start", logtraffic_start)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if poolnames is not None:
            pulumi.set(__self__, "poolnames", poolnames)
        if profile_protocol_options is not None:
            pulumi.set(__self__, "profile_protocol_options", profile_protocol_options)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if utm_status is not None:
            pulumi.set(__self__, "utm_status", utm_status)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_profile")

    @av_profile.setter
    def av_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_profile", value)

    @property
    @pulumi.getter(name="capturePacket")
    def capture_packet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capture_packet")

    @capture_packet.setter
    def capture_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capture_packet", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dnsfilter_profile")

    @dnsfilter_profile.setter
    def dnsfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnsfilter_profile", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service_src")

    @internet_service_src.setter
    def internet_service_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_src", value)

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "internet_service_src_ids")

    @internet_service_src_ids.setter
    def internet_service_src_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "internet_service_src_ids", value)

    @property
    @pulumi.getter
    def ippool(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ippool")

    @ippool.setter
    def ippool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ippool", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter
    def logtraffic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logtraffic")

    @logtraffic.setter
    def logtraffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic", value)

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logtraffic_start")

    @logtraffic_start.setter
    def logtraffic_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logtraffic_start", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat", value)

    @property
    @pulumi.getter
    def poolnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "poolnames")

    @poolnames.setter
    def poolnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "poolnames", value)

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_protocol_options")

    @profile_protocol_options.setter
    def profile_protocol_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_protocol_options", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "srcintfs", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "utm_status")

    @utm_status.setter
    def utm_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_status", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)


class FirewallSecurityPolicy1(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirewallSecurityPolicy1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirewallSecurityPolicy1Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallSecurityPolicy1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallSecurityPolicy1Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallSecurityPolicy1Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 av_profile: Optional[pulumi.Input[str]] = None,
                 capture_packet: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dnsfilter_profile: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 internet_service_src: Optional[pulumi.Input[str]] = None,
                 internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ippool: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 logtraffic: Optional[pulumi.Input[str]] = None,
                 logtraffic_start: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat: Optional[pulumi.Input[str]] = None,
                 poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 profile_protocol_options: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 utm_status: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallSecurityPolicy1Args.__new__(FirewallSecurityPolicy1Args)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["application_list"] = application_list
            __props__.__dict__["av_profile"] = av_profile
            __props__.__dict__["capture_packet"] = capture_packet
            __props__.__dict__["comments"] = comments
            __props__.__dict__["devices"] = devices
            __props__.__dict__["dnsfilter_profile"] = dnsfilter_profile
            if dstaddrs is None and not opts.urn:
                raise TypeError("Missing required property 'dstaddrs'")
            __props__.__dict__["dstaddrs"] = dstaddrs
            if dstintfs is None and not opts.urn:
                raise TypeError("Missing required property 'dstintfs'")
            __props__.__dict__["dstintfs"] = dstintfs
            __props__.__dict__["groups"] = groups
            __props__.__dict__["internet_service"] = internet_service
            __props__.__dict__["internet_service_ids"] = internet_service_ids
            __props__.__dict__["internet_service_src"] = internet_service_src
            __props__.__dict__["internet_service_src_ids"] = internet_service_src_ids
            __props__.__dict__["ippool"] = ippool
            __props__.__dict__["ips_sensor"] = ips_sensor
            __props__.__dict__["logtraffic"] = logtraffic
            __props__.__dict__["logtraffic_start"] = logtraffic_start
            __props__.__dict__["name"] = name
            __props__.__dict__["nat"] = nat
            __props__.__dict__["poolnames"] = poolnames
            __props__.__dict__["profile_protocol_options"] = profile_protocol_options
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
            if services is None and not opts.urn:
                raise TypeError("Missing required property 'services'")
            __props__.__dict__["services"] = services
            if srcaddrs is None and not opts.urn:
                raise TypeError("Missing required property 'srcaddrs'")
            __props__.__dict__["srcaddrs"] = srcaddrs
            if srcintfs is None and not opts.urn:
                raise TypeError("Missing required property 'srcintfs'")
            __props__.__dict__["srcintfs"] = srcintfs
            __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
            __props__.__dict__["status"] = status
            __props__.__dict__["users"] = users
            __props__.__dict__["utm_status"] = utm_status
            __props__.__dict__["webfilter_profile"] = webfilter_profile
        super(FirewallSecurityPolicy1, __self__).__init__(
            'fortios:index/firewallSecurityPolicy1:FirewallSecurityPolicy1',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            application_list: Optional[pulumi.Input[str]] = None,
            av_profile: Optional[pulumi.Input[str]] = None,
            capture_packet: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            devices: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dnsfilter_profile: Optional[pulumi.Input[str]] = None,
            dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            internet_service: Optional[pulumi.Input[str]] = None,
            internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            internet_service_src: Optional[pulumi.Input[str]] = None,
            internet_service_src_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            ippool: Optional[pulumi.Input[str]] = None,
            ips_sensor: Optional[pulumi.Input[str]] = None,
            logtraffic: Optional[pulumi.Input[str]] = None,
            logtraffic_start: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nat: Optional[pulumi.Input[str]] = None,
            poolnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            profile_protocol_options: Optional[pulumi.Input[str]] = None,
            schedule: Optional[pulumi.Input[str]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            utm_status: Optional[pulumi.Input[str]] = None,
            webfilter_profile: Optional[pulumi.Input[str]] = None) -> 'FirewallSecurityPolicy1':
        """
        Get an existing FirewallSecurityPolicy1 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallSecurityPolicy1State.__new__(_FirewallSecurityPolicy1State)

        __props__.__dict__["action"] = action
        __props__.__dict__["application_list"] = application_list
        __props__.__dict__["av_profile"] = av_profile
        __props__.__dict__["capture_packet"] = capture_packet
        __props__.__dict__["comments"] = comments
        __props__.__dict__["devices"] = devices
        __props__.__dict__["dnsfilter_profile"] = dnsfilter_profile
        __props__.__dict__["dstaddrs"] = dstaddrs
        __props__.__dict__["dstintfs"] = dstintfs
        __props__.__dict__["groups"] = groups
        __props__.__dict__["internet_service"] = internet_service
        __props__.__dict__["internet_service_ids"] = internet_service_ids
        __props__.__dict__["internet_service_src"] = internet_service_src
        __props__.__dict__["internet_service_src_ids"] = internet_service_src_ids
        __props__.__dict__["ippool"] = ippool
        __props__.__dict__["ips_sensor"] = ips_sensor
        __props__.__dict__["logtraffic"] = logtraffic
        __props__.__dict__["logtraffic_start"] = logtraffic_start
        __props__.__dict__["name"] = name
        __props__.__dict__["nat"] = nat
        __props__.__dict__["poolnames"] = poolnames
        __props__.__dict__["profile_protocol_options"] = profile_protocol_options
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["services"] = services
        __props__.__dict__["srcaddrs"] = srcaddrs
        __props__.__dict__["srcintfs"] = srcintfs
        __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
        __props__.__dict__["status"] = status
        __props__.__dict__["users"] = users
        __props__.__dict__["utm_status"] = utm_status
        __props__.__dict__["webfilter_profile"] = webfilter_profile
        return FirewallSecurityPolicy1(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> pulumi.Output[str]:
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter(name="avProfile")
    def av_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "av_profile")

    @property
    @pulumi.getter(name="capturePacket")
    def capture_packet(self) -> pulumi.Output[str]:
        return pulumi.get(self, "capture_packet")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def devices(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="dnsfilterProfile")
    def dnsfilter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dnsfilter_profile")

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dstintfs(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> pulumi.Output[str]:
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceSrc")
    def internet_service_src(self) -> pulumi.Output[str]:
        return pulumi.get(self, "internet_service_src")

    @property
    @pulumi.getter(name="internetServiceSrcIds")
    def internet_service_src_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        return pulumi.get(self, "internet_service_src_ids")

    @property
    @pulumi.getter
    def ippool(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ippool")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter
    def logtraffic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "logtraffic")

    @property
    @pulumi.getter(name="logtrafficStart")
    def logtraffic_start(self) -> pulumi.Output[str]:
        return pulumi.get(self, "logtraffic_start")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nat(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter
    def poolnames(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "poolnames")

    @property
    @pulumi.getter(name="profileProtocolOptions")
    def profile_protocol_options(self) -> pulumi.Output[str]:
        return pulumi.get(self, "profile_protocol_options")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[str]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcintfs(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "srcintfs")

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssl_ssh_profile")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="utmStatus")
    def utm_status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "utm_status")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> pulumi.Output[str]:
        return pulumi.get(self, "webfilter_profile")

