# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSystemFtmPushResult',
    'AwaitableGetSystemFtmPushResult',
    'get_system_ftm_push',
    'get_system_ftm_push_output',
]

@pulumi.output_type
class GetSystemFtmPushResult:
    """
    A collection of values returned by GetSystemFtmPush.
    """
    def __init__(__self__, id=None, server=None, server_cert=None, server_ip=None, server_port=None, status=None, vdomparam=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if server and not isinstance(server, str):
            raise TypeError("Expected argument 'server' to be a str")
        pulumi.set(__self__, "server", server)
        if server_cert and not isinstance(server_cert, str):
            raise TypeError("Expected argument 'server_cert' to be a str")
        pulumi.set(__self__, "server_cert", server_cert)
        if server_ip and not isinstance(server_ip, str):
            raise TypeError("Expected argument 'server_ip' to be a str")
        pulumi.set(__self__, "server_ip", server_ip)
        if server_port and not isinstance(server_port, int):
            raise TypeError("Expected argument 'server_port' to be a int")
        pulumi.set(__self__, "server_port", server_port)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="serverCert")
    def server_cert(self) -> str:
        return pulumi.get(self, "server_cert")

    @property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> str:
        return pulumi.get(self, "server_ip")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> int:
        return pulumi.get(self, "server_port")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetSystemFtmPushResult(GetSystemFtmPushResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemFtmPushResult(
            id=self.id,
            server=self.server,
            server_cert=self.server_cert,
            server_ip=self.server_ip,
            server_port=self.server_port,
            status=self.status,
            vdomparam=self.vdomparam)


def get_system_ftm_push(vdomparam: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemFtmPushResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getSystemFtmPush:GetSystemFtmPush', __args__, opts=opts, typ=GetSystemFtmPushResult).value

    return AwaitableGetSystemFtmPushResult(
        id=pulumi.get(__ret__, 'id'),
        server=pulumi.get(__ret__, 'server'),
        server_cert=pulumi.get(__ret__, 'server_cert'),
        server_ip=pulumi.get(__ret__, 'server_ip'),
        server_port=pulumi.get(__ret__, 'server_port'),
        status=pulumi.get(__ret__, 'status'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_system_ftm_push)
def get_system_ftm_push_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemFtmPushResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
