# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSystemIpipTunnelResult',
    'AwaitableGetSystemIpipTunnelResult',
    'get_system_ipip_tunnel',
    'get_system_ipip_tunnel_output',
]

@pulumi.output_type
class GetSystemIpipTunnelResult:
    """
    A collection of values returned by GetSystemIpipTunnel.
    """
    def __init__(__self__, auto_asic_offload=None, id=None, interface=None, local_gw=None, name=None, remote_gw=None, use_sdwan=None, vdomparam=None):
        if auto_asic_offload and not isinstance(auto_asic_offload, str):
            raise TypeError("Expected argument 'auto_asic_offload' to be a str")
        pulumi.set(__self__, "auto_asic_offload", auto_asic_offload)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface and not isinstance(interface, str):
            raise TypeError("Expected argument 'interface' to be a str")
        pulumi.set(__self__, "interface", interface)
        if local_gw and not isinstance(local_gw, str):
            raise TypeError("Expected argument 'local_gw' to be a str")
        pulumi.set(__self__, "local_gw", local_gw)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if remote_gw and not isinstance(remote_gw, str):
            raise TypeError("Expected argument 'remote_gw' to be a str")
        pulumi.set(__self__, "remote_gw", remote_gw)
        if use_sdwan and not isinstance(use_sdwan, str):
            raise TypeError("Expected argument 'use_sdwan' to be a str")
        pulumi.set(__self__, "use_sdwan", use_sdwan)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="autoAsicOffload")
    def auto_asic_offload(self) -> str:
        return pulumi.get(self, "auto_asic_offload")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> str:
        return pulumi.get(self, "local_gw")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> str:
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="useSdwan")
    def use_sdwan(self) -> str:
        return pulumi.get(self, "use_sdwan")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetSystemIpipTunnelResult(GetSystemIpipTunnelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemIpipTunnelResult(
            auto_asic_offload=self.auto_asic_offload,
            id=self.id,
            interface=self.interface,
            local_gw=self.local_gw,
            name=self.name,
            remote_gw=self.remote_gw,
            use_sdwan=self.use_sdwan,
            vdomparam=self.vdomparam)


def get_system_ipip_tunnel(name: Optional[str] = None,
                           vdomparam: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemIpipTunnelResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getSystemIpipTunnel:GetSystemIpipTunnel', __args__, opts=opts, typ=GetSystemIpipTunnelResult).value

    return AwaitableGetSystemIpipTunnelResult(
        auto_asic_offload=pulumi.get(__ret__, 'auto_asic_offload'),
        id=pulumi.get(__ret__, 'id'),
        interface=pulumi.get(__ret__, 'interface'),
        local_gw=pulumi.get(__ret__, 'local_gw'),
        name=pulumi.get(__ret__, 'name'),
        remote_gw=pulumi.get(__ret__, 'remote_gw'),
        use_sdwan=pulumi.get(__ret__, 'use_sdwan'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_system_ipip_tunnel)
def get_system_ipip_tunnel_output(name: Optional[pulumi.Input[str]] = None,
                                  vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemIpipTunnelResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
