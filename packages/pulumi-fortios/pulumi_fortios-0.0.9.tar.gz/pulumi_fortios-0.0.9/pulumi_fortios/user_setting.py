# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserSettingArgs', 'UserSetting']

@pulumi.input_type
class UserSettingArgs:
    def __init__(__self__, *,
                 auth_blackout_time: Optional[pulumi.Input[int]] = None,
                 auth_ca_cert: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_http_basic: Optional[pulumi.Input[str]] = None,
                 auth_invalid_max: Optional[pulumi.Input[int]] = None,
                 auth_lockout_duration: Optional[pulumi.Input[int]] = None,
                 auth_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 auth_on_demand: Optional[pulumi.Input[str]] = None,
                 auth_portal_timeout: Optional[pulumi.Input[int]] = None,
                 auth_ports: Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingAuthPortArgs']]]] = None,
                 auth_secure_http: Optional[pulumi.Input[str]] = None,
                 auth_src_mac: Optional[pulumi.Input[str]] = None,
                 auth_ssl_allow_renegotiation: Optional[pulumi.Input[str]] = None,
                 auth_ssl_max_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_sigalgs: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 auth_timeout_type: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 radius_ses_timeout_act: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserSetting resource.
        """
        if auth_blackout_time is not None:
            pulumi.set(__self__, "auth_blackout_time", auth_blackout_time)
        if auth_ca_cert is not None:
            pulumi.set(__self__, "auth_ca_cert", auth_ca_cert)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_http_basic is not None:
            pulumi.set(__self__, "auth_http_basic", auth_http_basic)
        if auth_invalid_max is not None:
            pulumi.set(__self__, "auth_invalid_max", auth_invalid_max)
        if auth_lockout_duration is not None:
            pulumi.set(__self__, "auth_lockout_duration", auth_lockout_duration)
        if auth_lockout_threshold is not None:
            pulumi.set(__self__, "auth_lockout_threshold", auth_lockout_threshold)
        if auth_on_demand is not None:
            pulumi.set(__self__, "auth_on_demand", auth_on_demand)
        if auth_portal_timeout is not None:
            pulumi.set(__self__, "auth_portal_timeout", auth_portal_timeout)
        if auth_ports is not None:
            pulumi.set(__self__, "auth_ports", auth_ports)
        if auth_secure_http is not None:
            pulumi.set(__self__, "auth_secure_http", auth_secure_http)
        if auth_src_mac is not None:
            pulumi.set(__self__, "auth_src_mac", auth_src_mac)
        if auth_ssl_allow_renegotiation is not None:
            pulumi.set(__self__, "auth_ssl_allow_renegotiation", auth_ssl_allow_renegotiation)
        if auth_ssl_max_proto_version is not None:
            pulumi.set(__self__, "auth_ssl_max_proto_version", auth_ssl_max_proto_version)
        if auth_ssl_min_proto_version is not None:
            pulumi.set(__self__, "auth_ssl_min_proto_version", auth_ssl_min_proto_version)
        if auth_ssl_sigalgs is not None:
            pulumi.set(__self__, "auth_ssl_sigalgs", auth_ssl_sigalgs)
        if auth_timeout is not None:
            pulumi.set(__self__, "auth_timeout", auth_timeout)
        if auth_timeout_type is not None:
            pulumi.set(__self__, "auth_timeout_type", auth_timeout_type)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if per_policy_disclaimer is not None:
            pulumi.set(__self__, "per_policy_disclaimer", per_policy_disclaimer)
        if radius_ses_timeout_act is not None:
            pulumi.set(__self__, "radius_ses_timeout_act", radius_ses_timeout_act)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authBlackoutTime")
    def auth_blackout_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_blackout_time")

    @auth_blackout_time.setter
    def auth_blackout_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_blackout_time", value)

    @property
    @pulumi.getter(name="authCaCert")
    def auth_ca_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_ca_cert")

    @auth_ca_cert.setter
    def auth_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ca_cert", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authHttpBasic")
    def auth_http_basic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_http_basic")

    @auth_http_basic.setter
    def auth_http_basic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_http_basic", value)

    @property
    @pulumi.getter(name="authInvalidMax")
    def auth_invalid_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_invalid_max")

    @auth_invalid_max.setter
    def auth_invalid_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_invalid_max", value)

    @property
    @pulumi.getter(name="authLockoutDuration")
    def auth_lockout_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_lockout_duration")

    @auth_lockout_duration.setter
    def auth_lockout_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_lockout_duration", value)

    @property
    @pulumi.getter(name="authLockoutThreshold")
    def auth_lockout_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_lockout_threshold")

    @auth_lockout_threshold.setter
    def auth_lockout_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_lockout_threshold", value)

    @property
    @pulumi.getter(name="authOnDemand")
    def auth_on_demand(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_on_demand")

    @auth_on_demand.setter
    def auth_on_demand(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_on_demand", value)

    @property
    @pulumi.getter(name="authPortalTimeout")
    def auth_portal_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_portal_timeout")

    @auth_portal_timeout.setter
    def auth_portal_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_portal_timeout", value)

    @property
    @pulumi.getter(name="authPorts")
    def auth_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingAuthPortArgs']]]]:
        return pulumi.get(self, "auth_ports")

    @auth_ports.setter
    def auth_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingAuthPortArgs']]]]):
        pulumi.set(self, "auth_ports", value)

    @property
    @pulumi.getter(name="authSecureHttp")
    def auth_secure_http(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_secure_http")

    @auth_secure_http.setter
    def auth_secure_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_secure_http", value)

    @property
    @pulumi.getter(name="authSrcMac")
    def auth_src_mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_src_mac")

    @auth_src_mac.setter
    def auth_src_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_src_mac", value)

    @property
    @pulumi.getter(name="authSslAllowRenegotiation")
    def auth_ssl_allow_renegotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_ssl_allow_renegotiation")

    @auth_ssl_allow_renegotiation.setter
    def auth_ssl_allow_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_allow_renegotiation", value)

    @property
    @pulumi.getter(name="authSslMaxProtoVersion")
    def auth_ssl_max_proto_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_ssl_max_proto_version")

    @auth_ssl_max_proto_version.setter
    def auth_ssl_max_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_max_proto_version", value)

    @property
    @pulumi.getter(name="authSslMinProtoVersion")
    def auth_ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_ssl_min_proto_version")

    @auth_ssl_min_proto_version.setter
    def auth_ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_min_proto_version", value)

    @property
    @pulumi.getter(name="authSslSigalgs")
    def auth_ssl_sigalgs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_ssl_sigalgs")

    @auth_ssl_sigalgs.setter
    def auth_ssl_sigalgs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_sigalgs", value)

    @property
    @pulumi.getter(name="authTimeout")
    def auth_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_timeout")

    @auth_timeout.setter
    def auth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_timeout", value)

    @property
    @pulumi.getter(name="authTimeoutType")
    def auth_timeout_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_timeout_type")

    @auth_timeout_type.setter
    def auth_timeout_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_timeout_type", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="perPolicyDisclaimer")
    def per_policy_disclaimer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "per_policy_disclaimer")

    @per_policy_disclaimer.setter
    def per_policy_disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_policy_disclaimer", value)

    @property
    @pulumi.getter(name="radiusSesTimeoutAct")
    def radius_ses_timeout_act(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_ses_timeout_act")

    @radius_ses_timeout_act.setter
    def radius_ses_timeout_act(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_ses_timeout_act", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _UserSettingState:
    def __init__(__self__, *,
                 auth_blackout_time: Optional[pulumi.Input[int]] = None,
                 auth_ca_cert: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_http_basic: Optional[pulumi.Input[str]] = None,
                 auth_invalid_max: Optional[pulumi.Input[int]] = None,
                 auth_lockout_duration: Optional[pulumi.Input[int]] = None,
                 auth_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 auth_on_demand: Optional[pulumi.Input[str]] = None,
                 auth_portal_timeout: Optional[pulumi.Input[int]] = None,
                 auth_ports: Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingAuthPortArgs']]]] = None,
                 auth_secure_http: Optional[pulumi.Input[str]] = None,
                 auth_src_mac: Optional[pulumi.Input[str]] = None,
                 auth_ssl_allow_renegotiation: Optional[pulumi.Input[str]] = None,
                 auth_ssl_max_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_sigalgs: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 auth_timeout_type: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 radius_ses_timeout_act: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserSetting resources.
        """
        if auth_blackout_time is not None:
            pulumi.set(__self__, "auth_blackout_time", auth_blackout_time)
        if auth_ca_cert is not None:
            pulumi.set(__self__, "auth_ca_cert", auth_ca_cert)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_http_basic is not None:
            pulumi.set(__self__, "auth_http_basic", auth_http_basic)
        if auth_invalid_max is not None:
            pulumi.set(__self__, "auth_invalid_max", auth_invalid_max)
        if auth_lockout_duration is not None:
            pulumi.set(__self__, "auth_lockout_duration", auth_lockout_duration)
        if auth_lockout_threshold is not None:
            pulumi.set(__self__, "auth_lockout_threshold", auth_lockout_threshold)
        if auth_on_demand is not None:
            pulumi.set(__self__, "auth_on_demand", auth_on_demand)
        if auth_portal_timeout is not None:
            pulumi.set(__self__, "auth_portal_timeout", auth_portal_timeout)
        if auth_ports is not None:
            pulumi.set(__self__, "auth_ports", auth_ports)
        if auth_secure_http is not None:
            pulumi.set(__self__, "auth_secure_http", auth_secure_http)
        if auth_src_mac is not None:
            pulumi.set(__self__, "auth_src_mac", auth_src_mac)
        if auth_ssl_allow_renegotiation is not None:
            pulumi.set(__self__, "auth_ssl_allow_renegotiation", auth_ssl_allow_renegotiation)
        if auth_ssl_max_proto_version is not None:
            pulumi.set(__self__, "auth_ssl_max_proto_version", auth_ssl_max_proto_version)
        if auth_ssl_min_proto_version is not None:
            pulumi.set(__self__, "auth_ssl_min_proto_version", auth_ssl_min_proto_version)
        if auth_ssl_sigalgs is not None:
            pulumi.set(__self__, "auth_ssl_sigalgs", auth_ssl_sigalgs)
        if auth_timeout is not None:
            pulumi.set(__self__, "auth_timeout", auth_timeout)
        if auth_timeout_type is not None:
            pulumi.set(__self__, "auth_timeout_type", auth_timeout_type)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if per_policy_disclaimer is not None:
            pulumi.set(__self__, "per_policy_disclaimer", per_policy_disclaimer)
        if radius_ses_timeout_act is not None:
            pulumi.set(__self__, "radius_ses_timeout_act", radius_ses_timeout_act)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authBlackoutTime")
    def auth_blackout_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_blackout_time")

    @auth_blackout_time.setter
    def auth_blackout_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_blackout_time", value)

    @property
    @pulumi.getter(name="authCaCert")
    def auth_ca_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_ca_cert")

    @auth_ca_cert.setter
    def auth_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ca_cert", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authHttpBasic")
    def auth_http_basic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_http_basic")

    @auth_http_basic.setter
    def auth_http_basic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_http_basic", value)

    @property
    @pulumi.getter(name="authInvalidMax")
    def auth_invalid_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_invalid_max")

    @auth_invalid_max.setter
    def auth_invalid_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_invalid_max", value)

    @property
    @pulumi.getter(name="authLockoutDuration")
    def auth_lockout_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_lockout_duration")

    @auth_lockout_duration.setter
    def auth_lockout_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_lockout_duration", value)

    @property
    @pulumi.getter(name="authLockoutThreshold")
    def auth_lockout_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_lockout_threshold")

    @auth_lockout_threshold.setter
    def auth_lockout_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_lockout_threshold", value)

    @property
    @pulumi.getter(name="authOnDemand")
    def auth_on_demand(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_on_demand")

    @auth_on_demand.setter
    def auth_on_demand(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_on_demand", value)

    @property
    @pulumi.getter(name="authPortalTimeout")
    def auth_portal_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_portal_timeout")

    @auth_portal_timeout.setter
    def auth_portal_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_portal_timeout", value)

    @property
    @pulumi.getter(name="authPorts")
    def auth_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingAuthPortArgs']]]]:
        return pulumi.get(self, "auth_ports")

    @auth_ports.setter
    def auth_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingAuthPortArgs']]]]):
        pulumi.set(self, "auth_ports", value)

    @property
    @pulumi.getter(name="authSecureHttp")
    def auth_secure_http(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_secure_http")

    @auth_secure_http.setter
    def auth_secure_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_secure_http", value)

    @property
    @pulumi.getter(name="authSrcMac")
    def auth_src_mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_src_mac")

    @auth_src_mac.setter
    def auth_src_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_src_mac", value)

    @property
    @pulumi.getter(name="authSslAllowRenegotiation")
    def auth_ssl_allow_renegotiation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_ssl_allow_renegotiation")

    @auth_ssl_allow_renegotiation.setter
    def auth_ssl_allow_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_allow_renegotiation", value)

    @property
    @pulumi.getter(name="authSslMaxProtoVersion")
    def auth_ssl_max_proto_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_ssl_max_proto_version")

    @auth_ssl_max_proto_version.setter
    def auth_ssl_max_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_max_proto_version", value)

    @property
    @pulumi.getter(name="authSslMinProtoVersion")
    def auth_ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_ssl_min_proto_version")

    @auth_ssl_min_proto_version.setter
    def auth_ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_min_proto_version", value)

    @property
    @pulumi.getter(name="authSslSigalgs")
    def auth_ssl_sigalgs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_ssl_sigalgs")

    @auth_ssl_sigalgs.setter
    def auth_ssl_sigalgs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_sigalgs", value)

    @property
    @pulumi.getter(name="authTimeout")
    def auth_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auth_timeout")

    @auth_timeout.setter
    def auth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_timeout", value)

    @property
    @pulumi.getter(name="authTimeoutType")
    def auth_timeout_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_timeout_type")

    @auth_timeout_type.setter
    def auth_timeout_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_timeout_type", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="perPolicyDisclaimer")
    def per_policy_disclaimer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "per_policy_disclaimer")

    @per_policy_disclaimer.setter
    def per_policy_disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_policy_disclaimer", value)

    @property
    @pulumi.getter(name="radiusSesTimeoutAct")
    def radius_ses_timeout_act(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "radius_ses_timeout_act")

    @radius_ses_timeout_act.setter
    def radius_ses_timeout_act(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_ses_timeout_act", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class UserSetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_blackout_time: Optional[pulumi.Input[int]] = None,
                 auth_ca_cert: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_http_basic: Optional[pulumi.Input[str]] = None,
                 auth_invalid_max: Optional[pulumi.Input[int]] = None,
                 auth_lockout_duration: Optional[pulumi.Input[int]] = None,
                 auth_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 auth_on_demand: Optional[pulumi.Input[str]] = None,
                 auth_portal_timeout: Optional[pulumi.Input[int]] = None,
                 auth_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserSettingAuthPortArgs']]]]] = None,
                 auth_secure_http: Optional[pulumi.Input[str]] = None,
                 auth_src_mac: Optional[pulumi.Input[str]] = None,
                 auth_ssl_allow_renegotiation: Optional[pulumi.Input[str]] = None,
                 auth_ssl_max_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_sigalgs: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 auth_timeout_type: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 radius_ses_timeout_act: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a UserSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[UserSettingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UserSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UserSettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserSettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_blackout_time: Optional[pulumi.Input[int]] = None,
                 auth_ca_cert: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_http_basic: Optional[pulumi.Input[str]] = None,
                 auth_invalid_max: Optional[pulumi.Input[int]] = None,
                 auth_lockout_duration: Optional[pulumi.Input[int]] = None,
                 auth_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 auth_on_demand: Optional[pulumi.Input[str]] = None,
                 auth_portal_timeout: Optional[pulumi.Input[int]] = None,
                 auth_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserSettingAuthPortArgs']]]]] = None,
                 auth_secure_http: Optional[pulumi.Input[str]] = None,
                 auth_src_mac: Optional[pulumi.Input[str]] = None,
                 auth_ssl_allow_renegotiation: Optional[pulumi.Input[str]] = None,
                 auth_ssl_max_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_sigalgs: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 auth_timeout_type: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 radius_ses_timeout_act: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserSettingArgs.__new__(UserSettingArgs)

            __props__.__dict__["auth_blackout_time"] = auth_blackout_time
            __props__.__dict__["auth_ca_cert"] = auth_ca_cert
            __props__.__dict__["auth_cert"] = auth_cert
            __props__.__dict__["auth_http_basic"] = auth_http_basic
            __props__.__dict__["auth_invalid_max"] = auth_invalid_max
            __props__.__dict__["auth_lockout_duration"] = auth_lockout_duration
            __props__.__dict__["auth_lockout_threshold"] = auth_lockout_threshold
            __props__.__dict__["auth_on_demand"] = auth_on_demand
            __props__.__dict__["auth_portal_timeout"] = auth_portal_timeout
            __props__.__dict__["auth_ports"] = auth_ports
            __props__.__dict__["auth_secure_http"] = auth_secure_http
            __props__.__dict__["auth_src_mac"] = auth_src_mac
            __props__.__dict__["auth_ssl_allow_renegotiation"] = auth_ssl_allow_renegotiation
            __props__.__dict__["auth_ssl_max_proto_version"] = auth_ssl_max_proto_version
            __props__.__dict__["auth_ssl_min_proto_version"] = auth_ssl_min_proto_version
            __props__.__dict__["auth_ssl_sigalgs"] = auth_ssl_sigalgs
            __props__.__dict__["auth_timeout"] = auth_timeout
            __props__.__dict__["auth_timeout_type"] = auth_timeout_type
            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["per_policy_disclaimer"] = per_policy_disclaimer
            __props__.__dict__["radius_ses_timeout_act"] = radius_ses_timeout_act
            __props__.__dict__["vdomparam"] = vdomparam
        super(UserSetting, __self__).__init__(
            'fortios:index/userSetting:UserSetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_blackout_time: Optional[pulumi.Input[int]] = None,
            auth_ca_cert: Optional[pulumi.Input[str]] = None,
            auth_cert: Optional[pulumi.Input[str]] = None,
            auth_http_basic: Optional[pulumi.Input[str]] = None,
            auth_invalid_max: Optional[pulumi.Input[int]] = None,
            auth_lockout_duration: Optional[pulumi.Input[int]] = None,
            auth_lockout_threshold: Optional[pulumi.Input[int]] = None,
            auth_on_demand: Optional[pulumi.Input[str]] = None,
            auth_portal_timeout: Optional[pulumi.Input[int]] = None,
            auth_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserSettingAuthPortArgs']]]]] = None,
            auth_secure_http: Optional[pulumi.Input[str]] = None,
            auth_src_mac: Optional[pulumi.Input[str]] = None,
            auth_ssl_allow_renegotiation: Optional[pulumi.Input[str]] = None,
            auth_ssl_max_proto_version: Optional[pulumi.Input[str]] = None,
            auth_ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
            auth_ssl_sigalgs: Optional[pulumi.Input[str]] = None,
            auth_timeout: Optional[pulumi.Input[int]] = None,
            auth_timeout_type: Optional[pulumi.Input[str]] = None,
            auth_type: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
            radius_ses_timeout_act: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'UserSetting':
        """
        Get an existing UserSetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserSettingState.__new__(_UserSettingState)

        __props__.__dict__["auth_blackout_time"] = auth_blackout_time
        __props__.__dict__["auth_ca_cert"] = auth_ca_cert
        __props__.__dict__["auth_cert"] = auth_cert
        __props__.__dict__["auth_http_basic"] = auth_http_basic
        __props__.__dict__["auth_invalid_max"] = auth_invalid_max
        __props__.__dict__["auth_lockout_duration"] = auth_lockout_duration
        __props__.__dict__["auth_lockout_threshold"] = auth_lockout_threshold
        __props__.__dict__["auth_on_demand"] = auth_on_demand
        __props__.__dict__["auth_portal_timeout"] = auth_portal_timeout
        __props__.__dict__["auth_ports"] = auth_ports
        __props__.__dict__["auth_secure_http"] = auth_secure_http
        __props__.__dict__["auth_src_mac"] = auth_src_mac
        __props__.__dict__["auth_ssl_allow_renegotiation"] = auth_ssl_allow_renegotiation
        __props__.__dict__["auth_ssl_max_proto_version"] = auth_ssl_max_proto_version
        __props__.__dict__["auth_ssl_min_proto_version"] = auth_ssl_min_proto_version
        __props__.__dict__["auth_ssl_sigalgs"] = auth_ssl_sigalgs
        __props__.__dict__["auth_timeout"] = auth_timeout
        __props__.__dict__["auth_timeout_type"] = auth_timeout_type
        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["per_policy_disclaimer"] = per_policy_disclaimer
        __props__.__dict__["radius_ses_timeout_act"] = radius_ses_timeout_act
        __props__.__dict__["vdomparam"] = vdomparam
        return UserSetting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authBlackoutTime")
    def auth_blackout_time(self) -> pulumi.Output[int]:
        return pulumi.get(self, "auth_blackout_time")

    @property
    @pulumi.getter(name="authCaCert")
    def auth_ca_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_ca_cert")

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_cert")

    @property
    @pulumi.getter(name="authHttpBasic")
    def auth_http_basic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_http_basic")

    @property
    @pulumi.getter(name="authInvalidMax")
    def auth_invalid_max(self) -> pulumi.Output[int]:
        return pulumi.get(self, "auth_invalid_max")

    @property
    @pulumi.getter(name="authLockoutDuration")
    def auth_lockout_duration(self) -> pulumi.Output[int]:
        return pulumi.get(self, "auth_lockout_duration")

    @property
    @pulumi.getter(name="authLockoutThreshold")
    def auth_lockout_threshold(self) -> pulumi.Output[int]:
        return pulumi.get(self, "auth_lockout_threshold")

    @property
    @pulumi.getter(name="authOnDemand")
    def auth_on_demand(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_on_demand")

    @property
    @pulumi.getter(name="authPortalTimeout")
    def auth_portal_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "auth_portal_timeout")

    @property
    @pulumi.getter(name="authPorts")
    def auth_ports(self) -> pulumi.Output[Optional[Sequence['outputs.UserSettingAuthPort']]]:
        return pulumi.get(self, "auth_ports")

    @property
    @pulumi.getter(name="authSecureHttp")
    def auth_secure_http(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_secure_http")

    @property
    @pulumi.getter(name="authSrcMac")
    def auth_src_mac(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_src_mac")

    @property
    @pulumi.getter(name="authSslAllowRenegotiation")
    def auth_ssl_allow_renegotiation(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_ssl_allow_renegotiation")

    @property
    @pulumi.getter(name="authSslMaxProtoVersion")
    def auth_ssl_max_proto_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_ssl_max_proto_version")

    @property
    @pulumi.getter(name="authSslMinProtoVersion")
    def auth_ssl_min_proto_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_ssl_min_proto_version")

    @property
    @pulumi.getter(name="authSslSigalgs")
    def auth_ssl_sigalgs(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_ssl_sigalgs")

    @property
    @pulumi.getter(name="authTimeout")
    def auth_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "auth_timeout")

    @property
    @pulumi.getter(name="authTimeoutType")
    def auth_timeout_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_timeout_type")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="perPolicyDisclaimer")
    def per_policy_disclaimer(self) -> pulumi.Output[str]:
        return pulumi.get(self, "per_policy_disclaimer")

    @property
    @pulumi.getter(name="radiusSesTimeoutAct")
    def radius_ses_timeout_act(self) -> pulumi.Output[str]:
        return pulumi.get(self, "radius_ses_timeout_act")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

