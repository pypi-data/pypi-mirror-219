# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExtenderControllerExtender1Args', 'ExtenderControllerExtender1']

@pulumi.input_type
class ExtenderControllerExtender1Args:
    def __init__(__self__, *,
                 authorized: pulumi.Input[str],
                 controller_report: Optional[pulumi.Input['ExtenderControllerExtender1ControllerReportArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ext_name: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 modem1: Optional[pulumi.Input['ExtenderControllerExtender1Modem1Args']] = None,
                 modem2: Optional[pulumi.Input['ExtenderControllerExtender1Modem2Args']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ExtenderControllerExtender1 resource.
        """
        pulumi.set(__self__, "authorized", authorized)
        if controller_report is not None:
            pulumi.set(__self__, "controller_report", controller_report)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ext_name is not None:
            pulumi.set(__self__, "ext_name", ext_name)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if login_password is not None:
            pulumi.set(__self__, "login_password", login_password)
        if modem1 is not None:
            pulumi.set(__self__, "modem1", modem1)
        if modem2 is not None:
            pulumi.set(__self__, "modem2", modem2)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def authorized(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authorized")

    @authorized.setter
    def authorized(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorized", value)

    @property
    @pulumi.getter(name="controllerReport")
    def controller_report(self) -> Optional[pulumi.Input['ExtenderControllerExtender1ControllerReportArgs']]:
        return pulumi.get(self, "controller_report")

    @controller_report.setter
    def controller_report(self, value: Optional[pulumi.Input['ExtenderControllerExtender1ControllerReportArgs']]):
        pulumi.set(self, "controller_report", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="extName")
    def ext_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ext_name")

    @ext_name.setter
    def ext_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_name", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_password")

    @login_password.setter
    def login_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password", value)

    @property
    @pulumi.getter
    def modem1(self) -> Optional[pulumi.Input['ExtenderControllerExtender1Modem1Args']]:
        return pulumi.get(self, "modem1")

    @modem1.setter
    def modem1(self, value: Optional[pulumi.Input['ExtenderControllerExtender1Modem1Args']]):
        pulumi.set(self, "modem1", value)

    @property
    @pulumi.getter
    def modem2(self) -> Optional[pulumi.Input['ExtenderControllerExtender1Modem2Args']]:
        return pulumi.get(self, "modem2")

    @modem2.setter
    def modem2(self, value: Optional[pulumi.Input['ExtenderControllerExtender1Modem2Args']]):
        pulumi.set(self, "modem2", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ExtenderControllerExtender1State:
    def __init__(__self__, *,
                 authorized: Optional[pulumi.Input[str]] = None,
                 controller_report: Optional[pulumi.Input['ExtenderControllerExtender1ControllerReportArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ext_name: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 modem1: Optional[pulumi.Input['ExtenderControllerExtender1Modem1Args']] = None,
                 modem2: Optional[pulumi.Input['ExtenderControllerExtender1Modem2Args']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ExtenderControllerExtender1 resources.
        """
        if authorized is not None:
            pulumi.set(__self__, "authorized", authorized)
        if controller_report is not None:
            pulumi.set(__self__, "controller_report", controller_report)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ext_name is not None:
            pulumi.set(__self__, "ext_name", ext_name)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if login_password is not None:
            pulumi.set(__self__, "login_password", login_password)
        if modem1 is not None:
            pulumi.set(__self__, "modem1", modem1)
        if modem2 is not None:
            pulumi.set(__self__, "modem2", modem2)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def authorized(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorized")

    @authorized.setter
    def authorized(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorized", value)

    @property
    @pulumi.getter(name="controllerReport")
    def controller_report(self) -> Optional[pulumi.Input['ExtenderControllerExtender1ControllerReportArgs']]:
        return pulumi.get(self, "controller_report")

    @controller_report.setter
    def controller_report(self, value: Optional[pulumi.Input['ExtenderControllerExtender1ControllerReportArgs']]):
        pulumi.set(self, "controller_report", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="extName")
    def ext_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ext_name")

    @ext_name.setter
    def ext_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_name", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_password")

    @login_password.setter
    def login_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password", value)

    @property
    @pulumi.getter
    def modem1(self) -> Optional[pulumi.Input['ExtenderControllerExtender1Modem1Args']]:
        return pulumi.get(self, "modem1")

    @modem1.setter
    def modem1(self, value: Optional[pulumi.Input['ExtenderControllerExtender1Modem1Args']]):
        pulumi.set(self, "modem1", value)

    @property
    @pulumi.getter
    def modem2(self) -> Optional[pulumi.Input['ExtenderControllerExtender1Modem2Args']]:
        return pulumi.get(self, "modem2")

    @modem2.setter
    def modem2(self, value: Optional[pulumi.Input['ExtenderControllerExtender1Modem2Args']]):
        pulumi.set(self, "modem2", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class ExtenderControllerExtender1(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorized: Optional[pulumi.Input[str]] = None,
                 controller_report: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtender1ControllerReportArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ext_name: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 modem1: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtender1Modem1Args']]] = None,
                 modem2: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtender1Modem2Args']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ExtenderControllerExtender1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExtenderControllerExtender1Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ExtenderControllerExtender1 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ExtenderControllerExtender1Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExtenderControllerExtender1Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorized: Optional[pulumi.Input[str]] = None,
                 controller_report: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtender1ControllerReportArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ext_name: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 modem1: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtender1Modem1Args']]] = None,
                 modem2: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtender1Modem2Args']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExtenderControllerExtender1Args.__new__(ExtenderControllerExtender1Args)

            if authorized is None and not opts.urn:
                raise TypeError("Missing required property 'authorized'")
            __props__.__dict__["authorized"] = authorized
            __props__.__dict__["controller_report"] = controller_report
            __props__.__dict__["description"] = description
            __props__.__dict__["ext_name"] = ext_name
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["login_password"] = None if login_password is None else pulumi.Output.secret(login_password)
            __props__.__dict__["modem1"] = modem1
            __props__.__dict__["modem2"] = modem2
            __props__.__dict__["name"] = name
            __props__.__dict__["vdom"] = vdom
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["loginPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ExtenderControllerExtender1, __self__).__init__(
            'fortios:index/extenderControllerExtender1:ExtenderControllerExtender1',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authorized: Optional[pulumi.Input[str]] = None,
            controller_report: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtender1ControllerReportArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            ext_name: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            login_password: Optional[pulumi.Input[str]] = None,
            modem1: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtender1Modem1Args']]] = None,
            modem2: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtender1Modem2Args']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            vdom: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'ExtenderControllerExtender1':
        """
        Get an existing ExtenderControllerExtender1 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExtenderControllerExtender1State.__new__(_ExtenderControllerExtender1State)

        __props__.__dict__["authorized"] = authorized
        __props__.__dict__["controller_report"] = controller_report
        __props__.__dict__["description"] = description
        __props__.__dict__["ext_name"] = ext_name
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["login_password"] = login_password
        __props__.__dict__["modem1"] = modem1
        __props__.__dict__["modem2"] = modem2
        __props__.__dict__["name"] = name
        __props__.__dict__["vdom"] = vdom
        __props__.__dict__["vdomparam"] = vdomparam
        return ExtenderControllerExtender1(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def authorized(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authorized")

    @property
    @pulumi.getter(name="controllerReport")
    def controller_report(self) -> pulumi.Output['outputs.ExtenderControllerExtender1ControllerReport']:
        return pulumi.get(self, "controller_report")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="extName")
    def ext_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ext_name")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "login_password")

    @property
    @pulumi.getter
    def modem1(self) -> pulumi.Output['outputs.ExtenderControllerExtender1Modem1']:
        return pulumi.get(self, "modem1")

    @property
    @pulumi.getter
    def modem2(self) -> pulumi.Output['outputs.ExtenderControllerExtender1Modem2']:
        return pulumi.get(self, "modem2")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vdom(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vdomparam")

