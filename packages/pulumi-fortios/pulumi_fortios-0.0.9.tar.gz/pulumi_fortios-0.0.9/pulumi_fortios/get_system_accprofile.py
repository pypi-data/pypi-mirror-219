# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetSystemAccprofileResult',
    'AwaitableGetSystemAccprofileResult',
    'get_system_accprofile',
    'get_system_accprofile_output',
]

@pulumi.output_type
class GetSystemAccprofileResult:
    """
    A collection of values returned by GetSystemAccprofile.
    """
    def __init__(__self__, admintimeout=None, admintimeout_override=None, authgrp=None, comments=None, ftviewgrp=None, fwgrp=None, fwgrp_permissions=None, id=None, loggrp=None, loggrp_permissions=None, name=None, netgrp=None, netgrp_permissions=None, scope=None, secfabgrp=None, sysgrp=None, sysgrp_permissions=None, system_diagnostics=None, system_execute_ssh=None, system_execute_telnet=None, utmgrp=None, utmgrp_permissions=None, vdomparam=None, vpngrp=None, wanoptgrp=None, wifi=None):
        if admintimeout and not isinstance(admintimeout, int):
            raise TypeError("Expected argument 'admintimeout' to be a int")
        pulumi.set(__self__, "admintimeout", admintimeout)
        if admintimeout_override and not isinstance(admintimeout_override, str):
            raise TypeError("Expected argument 'admintimeout_override' to be a str")
        pulumi.set(__self__, "admintimeout_override", admintimeout_override)
        if authgrp and not isinstance(authgrp, str):
            raise TypeError("Expected argument 'authgrp' to be a str")
        pulumi.set(__self__, "authgrp", authgrp)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if ftviewgrp and not isinstance(ftviewgrp, str):
            raise TypeError("Expected argument 'ftviewgrp' to be a str")
        pulumi.set(__self__, "ftviewgrp", ftviewgrp)
        if fwgrp and not isinstance(fwgrp, str):
            raise TypeError("Expected argument 'fwgrp' to be a str")
        pulumi.set(__self__, "fwgrp", fwgrp)
        if fwgrp_permissions and not isinstance(fwgrp_permissions, list):
            raise TypeError("Expected argument 'fwgrp_permissions' to be a list")
        pulumi.set(__self__, "fwgrp_permissions", fwgrp_permissions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if loggrp and not isinstance(loggrp, str):
            raise TypeError("Expected argument 'loggrp' to be a str")
        pulumi.set(__self__, "loggrp", loggrp)
        if loggrp_permissions and not isinstance(loggrp_permissions, list):
            raise TypeError("Expected argument 'loggrp_permissions' to be a list")
        pulumi.set(__self__, "loggrp_permissions", loggrp_permissions)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if netgrp and not isinstance(netgrp, str):
            raise TypeError("Expected argument 'netgrp' to be a str")
        pulumi.set(__self__, "netgrp", netgrp)
        if netgrp_permissions and not isinstance(netgrp_permissions, list):
            raise TypeError("Expected argument 'netgrp_permissions' to be a list")
        pulumi.set(__self__, "netgrp_permissions", netgrp_permissions)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)
        if secfabgrp and not isinstance(secfabgrp, str):
            raise TypeError("Expected argument 'secfabgrp' to be a str")
        pulumi.set(__self__, "secfabgrp", secfabgrp)
        if sysgrp and not isinstance(sysgrp, str):
            raise TypeError("Expected argument 'sysgrp' to be a str")
        pulumi.set(__self__, "sysgrp", sysgrp)
        if sysgrp_permissions and not isinstance(sysgrp_permissions, list):
            raise TypeError("Expected argument 'sysgrp_permissions' to be a list")
        pulumi.set(__self__, "sysgrp_permissions", sysgrp_permissions)
        if system_diagnostics and not isinstance(system_diagnostics, str):
            raise TypeError("Expected argument 'system_diagnostics' to be a str")
        pulumi.set(__self__, "system_diagnostics", system_diagnostics)
        if system_execute_ssh and not isinstance(system_execute_ssh, str):
            raise TypeError("Expected argument 'system_execute_ssh' to be a str")
        pulumi.set(__self__, "system_execute_ssh", system_execute_ssh)
        if system_execute_telnet and not isinstance(system_execute_telnet, str):
            raise TypeError("Expected argument 'system_execute_telnet' to be a str")
        pulumi.set(__self__, "system_execute_telnet", system_execute_telnet)
        if utmgrp and not isinstance(utmgrp, str):
            raise TypeError("Expected argument 'utmgrp' to be a str")
        pulumi.set(__self__, "utmgrp", utmgrp)
        if utmgrp_permissions and not isinstance(utmgrp_permissions, list):
            raise TypeError("Expected argument 'utmgrp_permissions' to be a list")
        pulumi.set(__self__, "utmgrp_permissions", utmgrp_permissions)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if vpngrp and not isinstance(vpngrp, str):
            raise TypeError("Expected argument 'vpngrp' to be a str")
        pulumi.set(__self__, "vpngrp", vpngrp)
        if wanoptgrp and not isinstance(wanoptgrp, str):
            raise TypeError("Expected argument 'wanoptgrp' to be a str")
        pulumi.set(__self__, "wanoptgrp", wanoptgrp)
        if wifi and not isinstance(wifi, str):
            raise TypeError("Expected argument 'wifi' to be a str")
        pulumi.set(__self__, "wifi", wifi)

    @property
    @pulumi.getter
    def admintimeout(self) -> int:
        return pulumi.get(self, "admintimeout")

    @property
    @pulumi.getter(name="admintimeoutOverride")
    def admintimeout_override(self) -> str:
        return pulumi.get(self, "admintimeout_override")

    @property
    @pulumi.getter
    def authgrp(self) -> str:
        return pulumi.get(self, "authgrp")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def ftviewgrp(self) -> str:
        return pulumi.get(self, "ftviewgrp")

    @property
    @pulumi.getter
    def fwgrp(self) -> str:
        return pulumi.get(self, "fwgrp")

    @property
    @pulumi.getter(name="fwgrpPermissions")
    def fwgrp_permissions(self) -> Sequence['outputs.GetSystemAccprofileFwgrpPermissionResult']:
        return pulumi.get(self, "fwgrp_permissions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def loggrp(self) -> str:
        return pulumi.get(self, "loggrp")

    @property
    @pulumi.getter(name="loggrpPermissions")
    def loggrp_permissions(self) -> Sequence['outputs.GetSystemAccprofileLoggrpPermissionResult']:
        return pulumi.get(self, "loggrp_permissions")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def netgrp(self) -> str:
        return pulumi.get(self, "netgrp")

    @property
    @pulumi.getter(name="netgrpPermissions")
    def netgrp_permissions(self) -> Sequence['outputs.GetSystemAccprofileNetgrpPermissionResult']:
        return pulumi.get(self, "netgrp_permissions")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def secfabgrp(self) -> str:
        return pulumi.get(self, "secfabgrp")

    @property
    @pulumi.getter
    def sysgrp(self) -> str:
        return pulumi.get(self, "sysgrp")

    @property
    @pulumi.getter(name="sysgrpPermissions")
    def sysgrp_permissions(self) -> Sequence['outputs.GetSystemAccprofileSysgrpPermissionResult']:
        return pulumi.get(self, "sysgrp_permissions")

    @property
    @pulumi.getter(name="systemDiagnostics")
    def system_diagnostics(self) -> str:
        return pulumi.get(self, "system_diagnostics")

    @property
    @pulumi.getter(name="systemExecuteSsh")
    def system_execute_ssh(self) -> str:
        return pulumi.get(self, "system_execute_ssh")

    @property
    @pulumi.getter(name="systemExecuteTelnet")
    def system_execute_telnet(self) -> str:
        return pulumi.get(self, "system_execute_telnet")

    @property
    @pulumi.getter
    def utmgrp(self) -> str:
        return pulumi.get(self, "utmgrp")

    @property
    @pulumi.getter(name="utmgrpPermissions")
    def utmgrp_permissions(self) -> Sequence['outputs.GetSystemAccprofileUtmgrpPermissionResult']:
        return pulumi.get(self, "utmgrp_permissions")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vpngrp(self) -> str:
        return pulumi.get(self, "vpngrp")

    @property
    @pulumi.getter
    def wanoptgrp(self) -> str:
        return pulumi.get(self, "wanoptgrp")

    @property
    @pulumi.getter
    def wifi(self) -> str:
        return pulumi.get(self, "wifi")


class AwaitableGetSystemAccprofileResult(GetSystemAccprofileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemAccprofileResult(
            admintimeout=self.admintimeout,
            admintimeout_override=self.admintimeout_override,
            authgrp=self.authgrp,
            comments=self.comments,
            ftviewgrp=self.ftviewgrp,
            fwgrp=self.fwgrp,
            fwgrp_permissions=self.fwgrp_permissions,
            id=self.id,
            loggrp=self.loggrp,
            loggrp_permissions=self.loggrp_permissions,
            name=self.name,
            netgrp=self.netgrp,
            netgrp_permissions=self.netgrp_permissions,
            scope=self.scope,
            secfabgrp=self.secfabgrp,
            sysgrp=self.sysgrp,
            sysgrp_permissions=self.sysgrp_permissions,
            system_diagnostics=self.system_diagnostics,
            system_execute_ssh=self.system_execute_ssh,
            system_execute_telnet=self.system_execute_telnet,
            utmgrp=self.utmgrp,
            utmgrp_permissions=self.utmgrp_permissions,
            vdomparam=self.vdomparam,
            vpngrp=self.vpngrp,
            wanoptgrp=self.wanoptgrp,
            wifi=self.wifi)


def get_system_accprofile(name: Optional[str] = None,
                          vdomparam: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemAccprofileResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:index/getSystemAccprofile:GetSystemAccprofile', __args__, opts=opts, typ=GetSystemAccprofileResult).value

    return AwaitableGetSystemAccprofileResult(
        admintimeout=pulumi.get(__ret__, 'admintimeout'),
        admintimeout_override=pulumi.get(__ret__, 'admintimeout_override'),
        authgrp=pulumi.get(__ret__, 'authgrp'),
        comments=pulumi.get(__ret__, 'comments'),
        ftviewgrp=pulumi.get(__ret__, 'ftviewgrp'),
        fwgrp=pulumi.get(__ret__, 'fwgrp'),
        fwgrp_permissions=pulumi.get(__ret__, 'fwgrp_permissions'),
        id=pulumi.get(__ret__, 'id'),
        loggrp=pulumi.get(__ret__, 'loggrp'),
        loggrp_permissions=pulumi.get(__ret__, 'loggrp_permissions'),
        name=pulumi.get(__ret__, 'name'),
        netgrp=pulumi.get(__ret__, 'netgrp'),
        netgrp_permissions=pulumi.get(__ret__, 'netgrp_permissions'),
        scope=pulumi.get(__ret__, 'scope'),
        secfabgrp=pulumi.get(__ret__, 'secfabgrp'),
        sysgrp=pulumi.get(__ret__, 'sysgrp'),
        sysgrp_permissions=pulumi.get(__ret__, 'sysgrp_permissions'),
        system_diagnostics=pulumi.get(__ret__, 'system_diagnostics'),
        system_execute_ssh=pulumi.get(__ret__, 'system_execute_ssh'),
        system_execute_telnet=pulumi.get(__ret__, 'system_execute_telnet'),
        utmgrp=pulumi.get(__ret__, 'utmgrp'),
        utmgrp_permissions=pulumi.get(__ret__, 'utmgrp_permissions'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        vpngrp=pulumi.get(__ret__, 'vpngrp'),
        wanoptgrp=pulumi.get(__ret__, 'wanoptgrp'),
        wifi=pulumi.get(__ret__, 'wifi'))


@_utilities.lift_output_func(get_system_accprofile)
def get_system_accprofile_output(name: Optional[pulumi.Input[str]] = None,
                                 vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemAccprofileResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
