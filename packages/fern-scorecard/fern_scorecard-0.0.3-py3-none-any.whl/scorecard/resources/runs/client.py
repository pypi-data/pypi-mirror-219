# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import ScorecardEnvironment
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.http_validation_error import HttpValidationError

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RunsClient:
    def __init__(self, *, environment: ScorecardEnvironment = ScorecardEnvironment.PRODUCTION, api_key: str):
        self._environment = environment
        self.api_key = api_key

    def create(
        self, *, testset_id: int, model_params: typing.Optional[typing.Dict[str, typing.Any]] = OMIT
    ) -> typing.Any:
        _request: typing.Dict[str, typing.Any] = {"testset_id": testset_id}
        if model_params is not OMIT:
            _request["model_params"] = model_params
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "create-run"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers({"X-API-Key": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(self, run_id: int, *, status: str) -> typing.Any:
        _response = httpx.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._environment.value}/", f"update-run/{run_id}"),
            params={"status": status},
            headers=remove_none_from_headers({"X-API-Key": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRunsClient:
    def __init__(self, *, environment: ScorecardEnvironment = ScorecardEnvironment.PRODUCTION, api_key: str):
        self._environment = environment
        self.api_key = api_key

    async def create(
        self, *, testset_id: int, model_params: typing.Optional[typing.Dict[str, typing.Any]] = OMIT
    ) -> typing.Any:
        _request: typing.Dict[str, typing.Any] = {"testset_id": testset_id}
        if model_params is not OMIT:
            _request["model_params"] = model_params
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "create-run"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers({"X-API-Key": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(self, run_id: int, *, status: str) -> typing.Any:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "PATCH",
                urllib.parse.urljoin(f"{self._environment.value}/", f"update-run/{run_id}"),
                params={"status": status},
                headers=remove_none_from_headers({"X-API-Key": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
