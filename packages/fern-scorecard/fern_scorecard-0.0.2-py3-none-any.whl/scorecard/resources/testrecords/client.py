# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import ScorecardEnvironment
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.http_validation_error import HttpValidationError

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TestrecordsClient:
    def __init__(self, *, environment: ScorecardEnvironment = ScorecardEnvironment.PRODUCTION, api_key: str):
        self._environment = environment
        self.api_key = api_key

    def score(self, *, scoring_model_name: str, run_id: int, testset_id: int, api_token: str) -> typing.Any:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "score-testrecords"),
            json=jsonable_encoder(
                {
                    "scoring_model_name": scoring_model_name,
                    "run_id": run_id,
                    "testset_id": testset_id,
                    "api_token": api_token,
                }
            ),
            headers=remove_none_from_headers({"X-API-Key": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        run_id: int,
        testcase_id: int,
        model_response: str,
        user_query: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        ideal: typing.Optional[str] = OMIT,
        model_params: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        testset_id: typing.Optional[int] = OMIT,
        status: typing.Optional[str] = OMIT,
    ) -> typing.Any:
        _request: typing.Dict[str, typing.Any] = {
            "run_id": run_id,
            "testcase_id": testcase_id,
            "model_response": model_response,
        }
        if user_query is not OMIT:
            _request["user_query"] = user_query
        if context is not OMIT:
            _request["context"] = context
        if prompt is not OMIT:
            _request["prompt"] = prompt
        if ideal is not OMIT:
            _request["ideal"] = ideal
        if model_params is not OMIT:
            _request["model_params"] = model_params
        if testset_id is not OMIT:
            _request["testset_id"] = testset_id
        if status is not OMIT:
            _request["status"] = status
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "create-testrecord"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers({"X-API-Key": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTestrecordsClient:
    def __init__(self, *, environment: ScorecardEnvironment = ScorecardEnvironment.PRODUCTION, api_key: str):
        self._environment = environment
        self.api_key = api_key

    async def score(self, *, scoring_model_name: str, run_id: int, testset_id: int, api_token: str) -> typing.Any:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "score-testrecords"),
                json=jsonable_encoder(
                    {
                        "scoring_model_name": scoring_model_name,
                        "run_id": run_id,
                        "testset_id": testset_id,
                        "api_token": api_token,
                    }
                ),
                headers=remove_none_from_headers({"X-API-Key": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        run_id: int,
        testcase_id: int,
        model_response: str,
        user_query: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        ideal: typing.Optional[str] = OMIT,
        model_params: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        testset_id: typing.Optional[int] = OMIT,
        status: typing.Optional[str] = OMIT,
    ) -> typing.Any:
        _request: typing.Dict[str, typing.Any] = {
            "run_id": run_id,
            "testcase_id": testcase_id,
            "model_response": model_response,
        }
        if user_query is not OMIT:
            _request["user_query"] = user_query
        if context is not OMIT:
            _request["context"] = context
        if prompt is not OMIT:
            _request["prompt"] = prompt
        if ideal is not OMIT:
            _request["ideal"] = ideal
        if model_params is not OMIT:
            _request["model_params"] = model_params
        if testset_id is not OMIT:
            _request["testset_id"] = testset_id
        if status is not OMIT:
            _request["status"] = status
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "create-testrecord"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers({"X-API-Key": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
