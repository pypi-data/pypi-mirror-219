# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 display_strategy: pulumi.Input[str],
                 instance_name: pulumi.Input[str],
                 login_settings: pulumi.Input[Mapping[str, Any]],
                 pay_mode: pulumi.Input[int],
                 placement: pulumi.Input[Mapping[str, Any]],
                 product_id: pulumi.Input[int],
                 softwares: pulumi.Input[Sequence[pulumi.Input[str]]],
                 support_ha: pulumi.Input[int],
                 time_span: pulumi.Input[int],
                 time_unit: pulumi.Input[str],
                 vpc_settings: pulumi.Input[Mapping[str, Any]],
                 extend_fs_field: Optional[pulumi.Input[str]] = None,
                 need_master_wan: Optional[pulumi.Input[str]] = None,
                 resource_spec: Optional[pulumi.Input['ClusterResourceSpecArgs']] = None,
                 sg_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[str] display_strategy: Display strategy of EMR instance.
        :param pulumi.Input[str] instance_name: Name of the instance, which can contain 6 to 36 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        :param pulumi.Input[Mapping[str, Any]] login_settings: Instance login settings.
        :param pulumi.Input[int] pay_mode: The pay mode of instance. 0 represent POSTPAID_BY_HOUR, 1 represent PREPAID.
        :param pulumi.Input[Mapping[str, Any]] placement: The location of the instance.
        :param pulumi.Input[int] product_id: Product ID. Different products ID represents different EMR product versions. Value range:
               - 16: represents EMR-V2.3.0
               - 20: indicates EMR-V2.5.0
               - 25: represents EMR-V3.1.0
               - 27: represents KAFKA-V1.0.0
               - 30: indicates EMR-V2.6.0
               - 33: represents EMR-V3.2.1
               - 34: stands for EMR-V3.3.0
               - 36: represents STARROCKS-V1.0.0
               - 37: indicates EMR-V3.4.0
               - 38: represents EMR-V2.7.0
               - 39: stands for STARROCKS-V1.1.0
               - 41: represents DRUID-V1.1.0.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] softwares: The softwares of a EMR instance.
        :param pulumi.Input[int] support_ha: The flag whether the instance support high availability.(0=>not support, 1=>support).
        :param pulumi.Input[int] time_span: The length of time the instance was purchased. Use with TimeUnit.When TimeUnit is s, the parameter can only be filled in at 3600, representing a metered instance.
               When TimeUnit is m, the number filled in by this parameter indicates the length of purchase of the monthly instance of the package year, such as 1 for one month of purchase.
        :param pulumi.Input[str] time_unit: The unit of time in which the instance was purchased. When PayMode is 0, TimeUnit can only take values of s(second). When PayMode is 1, TimeUnit can only take the value m(month).
        :param pulumi.Input[Mapping[str, Any]] vpc_settings: The private net config of EMR instance.
        :param pulumi.Input[str] extend_fs_field: Access the external file system.
        :param pulumi.Input[str] need_master_wan: Whether to enable the cluster Master node public network. Value range:
               - NEED_MASTER_WAN: Indicates that the cluster Master node public network is enabled.
               - NOT_NEED_MASTER_WAN: Indicates that it is not turned on.
               By default, the cluster Master node internet is enabled.
        :param pulumi.Input['ClusterResourceSpecArgs'] resource_spec: Resource specification of EMR instance.
        :param pulumi.Input[str] sg_id: The ID of the security group to which the instance belongs, in the form of sg-xxxxxxxx.
        """
        pulumi.set(__self__, "display_strategy", display_strategy)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "login_settings", login_settings)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "placement", placement)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "softwares", softwares)
        pulumi.set(__self__, "support_ha", support_ha)
        pulumi.set(__self__, "time_span", time_span)
        pulumi.set(__self__, "time_unit", time_unit)
        pulumi.set(__self__, "vpc_settings", vpc_settings)
        if extend_fs_field is not None:
            pulumi.set(__self__, "extend_fs_field", extend_fs_field)
        if need_master_wan is not None:
            pulumi.set(__self__, "need_master_wan", need_master_wan)
        if resource_spec is not None:
            pulumi.set(__self__, "resource_spec", resource_spec)
        if sg_id is not None:
            pulumi.set(__self__, "sg_id", sg_id)

    @property
    @pulumi.getter(name="displayStrategy")
    def display_strategy(self) -> pulumi.Input[str]:
        """
        Display strategy of EMR instance.
        """
        return pulumi.get(self, "display_strategy")

    @display_strategy.setter
    def display_strategy(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_strategy", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        Name of the instance, which can contain 6 to 36 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="loginSettings")
    def login_settings(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        Instance login settings.
        """
        return pulumi.get(self, "login_settings")

    @login_settings.setter
    def login_settings(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "login_settings", value)

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> pulumi.Input[int]:
        """
        The pay mode of instance. 0 represent POSTPAID_BY_HOUR, 1 represent PREPAID.
        """
        return pulumi.get(self, "pay_mode")

    @pay_mode.setter
    def pay_mode(self, value: pulumi.Input[int]):
        pulumi.set(self, "pay_mode", value)

    @property
    @pulumi.getter
    def placement(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        The location of the instance.
        """
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[int]:
        """
        Product ID. Different products ID represents different EMR product versions. Value range:
        - 16: represents EMR-V2.3.0
        - 20: indicates EMR-V2.5.0
        - 25: represents EMR-V3.1.0
        - 27: represents KAFKA-V1.0.0
        - 30: indicates EMR-V2.6.0
        - 33: represents EMR-V3.2.1
        - 34: stands for EMR-V3.3.0
        - 36: represents STARROCKS-V1.0.0
        - 37: indicates EMR-V3.4.0
        - 38: represents EMR-V2.7.0
        - 39: stands for STARROCKS-V1.1.0
        - 41: represents DRUID-V1.1.0.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter
    def softwares(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The softwares of a EMR instance.
        """
        return pulumi.get(self, "softwares")

    @softwares.setter
    def softwares(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "softwares", value)

    @property
    @pulumi.getter(name="supportHa")
    def support_ha(self) -> pulumi.Input[int]:
        """
        The flag whether the instance support high availability.(0=>not support, 1=>support).
        """
        return pulumi.get(self, "support_ha")

    @support_ha.setter
    def support_ha(self, value: pulumi.Input[int]):
        pulumi.set(self, "support_ha", value)

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> pulumi.Input[int]:
        """
        The length of time the instance was purchased. Use with TimeUnit.When TimeUnit is s, the parameter can only be filled in at 3600, representing a metered instance.
        When TimeUnit is m, the number filled in by this parameter indicates the length of purchase of the monthly instance of the package year, such as 1 for one month of purchase.
        """
        return pulumi.get(self, "time_span")

    @time_span.setter
    def time_span(self, value: pulumi.Input[int]):
        pulumi.set(self, "time_span", value)

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> pulumi.Input[str]:
        """
        The unit of time in which the instance was purchased. When PayMode is 0, TimeUnit can only take values of s(second). When PayMode is 1, TimeUnit can only take the value m(month).
        """
        return pulumi.get(self, "time_unit")

    @time_unit.setter
    def time_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_unit", value)

    @property
    @pulumi.getter(name="vpcSettings")
    def vpc_settings(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        The private net config of EMR instance.
        """
        return pulumi.get(self, "vpc_settings")

    @vpc_settings.setter
    def vpc_settings(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "vpc_settings", value)

    @property
    @pulumi.getter(name="extendFsField")
    def extend_fs_field(self) -> Optional[pulumi.Input[str]]:
        """
        Access the external file system.
        """
        return pulumi.get(self, "extend_fs_field")

    @extend_fs_field.setter
    def extend_fs_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extend_fs_field", value)

    @property
    @pulumi.getter(name="needMasterWan")
    def need_master_wan(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable the cluster Master node public network. Value range:
        - NEED_MASTER_WAN: Indicates that the cluster Master node public network is enabled.
        - NOT_NEED_MASTER_WAN: Indicates that it is not turned on.
        By default, the cluster Master node internet is enabled.
        """
        return pulumi.get(self, "need_master_wan")

    @need_master_wan.setter
    def need_master_wan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "need_master_wan", value)

    @property
    @pulumi.getter(name="resourceSpec")
    def resource_spec(self) -> Optional[pulumi.Input['ClusterResourceSpecArgs']]:
        """
        Resource specification of EMR instance.
        """
        return pulumi.get(self, "resource_spec")

    @resource_spec.setter
    def resource_spec(self, value: Optional[pulumi.Input['ClusterResourceSpecArgs']]):
        pulumi.set(self, "resource_spec", value)

    @property
    @pulumi.getter(name="sgId")
    def sg_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the security group to which the instance belongs, in the form of sg-xxxxxxxx.
        """
        return pulumi.get(self, "sg_id")

    @sg_id.setter
    def sg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sg_id", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 display_strategy: Optional[pulumi.Input[str]] = None,
                 extend_fs_field: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 login_settings: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 need_master_wan: Optional[pulumi.Input[str]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 placement: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 product_id: Optional[pulumi.Input[int]] = None,
                 resource_spec: Optional[pulumi.Input['ClusterResourceSpecArgs']] = None,
                 sg_id: Optional[pulumi.Input[str]] = None,
                 softwares: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 support_ha: Optional[pulumi.Input[int]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 vpc_settings: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[str] display_strategy: Display strategy of EMR instance.
        :param pulumi.Input[str] extend_fs_field: Access the external file system.
        :param pulumi.Input[str] instance_id: Created EMR instance id.
        :param pulumi.Input[str] instance_name: Name of the instance, which can contain 6 to 36 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        :param pulumi.Input[Mapping[str, Any]] login_settings: Instance login settings.
        :param pulumi.Input[str] need_master_wan: Whether to enable the cluster Master node public network. Value range:
               - NEED_MASTER_WAN: Indicates that the cluster Master node public network is enabled.
               - NOT_NEED_MASTER_WAN: Indicates that it is not turned on.
               By default, the cluster Master node internet is enabled.
        :param pulumi.Input[int] pay_mode: The pay mode of instance. 0 represent POSTPAID_BY_HOUR, 1 represent PREPAID.
        :param pulumi.Input[Mapping[str, Any]] placement: The location of the instance.
        :param pulumi.Input[int] product_id: Product ID. Different products ID represents different EMR product versions. Value range:
               - 16: represents EMR-V2.3.0
               - 20: indicates EMR-V2.5.0
               - 25: represents EMR-V3.1.0
               - 27: represents KAFKA-V1.0.0
               - 30: indicates EMR-V2.6.0
               - 33: represents EMR-V3.2.1
               - 34: stands for EMR-V3.3.0
               - 36: represents STARROCKS-V1.0.0
               - 37: indicates EMR-V3.4.0
               - 38: represents EMR-V2.7.0
               - 39: stands for STARROCKS-V1.1.0
               - 41: represents DRUID-V1.1.0.
        :param pulumi.Input['ClusterResourceSpecArgs'] resource_spec: Resource specification of EMR instance.
        :param pulumi.Input[str] sg_id: The ID of the security group to which the instance belongs, in the form of sg-xxxxxxxx.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] softwares: The softwares of a EMR instance.
        :param pulumi.Input[int] support_ha: The flag whether the instance support high availability.(0=>not support, 1=>support).
        :param pulumi.Input[int] time_span: The length of time the instance was purchased. Use with TimeUnit.When TimeUnit is s, the parameter can only be filled in at 3600, representing a metered instance.
               When TimeUnit is m, the number filled in by this parameter indicates the length of purchase of the monthly instance of the package year, such as 1 for one month of purchase.
        :param pulumi.Input[str] time_unit: The unit of time in which the instance was purchased. When PayMode is 0, TimeUnit can only take values of s(second). When PayMode is 1, TimeUnit can only take the value m(month).
        :param pulumi.Input[Mapping[str, Any]] vpc_settings: The private net config of EMR instance.
        """
        if display_strategy is not None:
            pulumi.set(__self__, "display_strategy", display_strategy)
        if extend_fs_field is not None:
            pulumi.set(__self__, "extend_fs_field", extend_fs_field)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if login_settings is not None:
            pulumi.set(__self__, "login_settings", login_settings)
        if need_master_wan is not None:
            pulumi.set(__self__, "need_master_wan", need_master_wan)
        if pay_mode is not None:
            pulumi.set(__self__, "pay_mode", pay_mode)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if resource_spec is not None:
            pulumi.set(__self__, "resource_spec", resource_spec)
        if sg_id is not None:
            pulumi.set(__self__, "sg_id", sg_id)
        if softwares is not None:
            pulumi.set(__self__, "softwares", softwares)
        if support_ha is not None:
            pulumi.set(__self__, "support_ha", support_ha)
        if time_span is not None:
            pulumi.set(__self__, "time_span", time_span)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)
        if vpc_settings is not None:
            pulumi.set(__self__, "vpc_settings", vpc_settings)

    @property
    @pulumi.getter(name="displayStrategy")
    def display_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Display strategy of EMR instance.
        """
        return pulumi.get(self, "display_strategy")

    @display_strategy.setter
    def display_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_strategy", value)

    @property
    @pulumi.getter(name="extendFsField")
    def extend_fs_field(self) -> Optional[pulumi.Input[str]]:
        """
        Access the external file system.
        """
        return pulumi.get(self, "extend_fs_field")

    @extend_fs_field.setter
    def extend_fs_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extend_fs_field", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Created EMR instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the instance, which can contain 6 to 36 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="loginSettings")
    def login_settings(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Instance login settings.
        """
        return pulumi.get(self, "login_settings")

    @login_settings.setter
    def login_settings(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "login_settings", value)

    @property
    @pulumi.getter(name="needMasterWan")
    def need_master_wan(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable the cluster Master node public network. Value range:
        - NEED_MASTER_WAN: Indicates that the cluster Master node public network is enabled.
        - NOT_NEED_MASTER_WAN: Indicates that it is not turned on.
        By default, the cluster Master node internet is enabled.
        """
        return pulumi.get(self, "need_master_wan")

    @need_master_wan.setter
    def need_master_wan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "need_master_wan", value)

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[pulumi.Input[int]]:
        """
        The pay mode of instance. 0 represent POSTPAID_BY_HOUR, 1 represent PREPAID.
        """
        return pulumi.get(self, "pay_mode")

    @pay_mode.setter
    def pay_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_mode", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The location of the instance.
        """
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[int]]:
        """
        Product ID. Different products ID represents different EMR product versions. Value range:
        - 16: represents EMR-V2.3.0
        - 20: indicates EMR-V2.5.0
        - 25: represents EMR-V3.1.0
        - 27: represents KAFKA-V1.0.0
        - 30: indicates EMR-V2.6.0
        - 33: represents EMR-V3.2.1
        - 34: stands for EMR-V3.3.0
        - 36: represents STARROCKS-V1.0.0
        - 37: indicates EMR-V3.4.0
        - 38: represents EMR-V2.7.0
        - 39: stands for STARROCKS-V1.1.0
        - 41: represents DRUID-V1.1.0.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter(name="resourceSpec")
    def resource_spec(self) -> Optional[pulumi.Input['ClusterResourceSpecArgs']]:
        """
        Resource specification of EMR instance.
        """
        return pulumi.get(self, "resource_spec")

    @resource_spec.setter
    def resource_spec(self, value: Optional[pulumi.Input['ClusterResourceSpecArgs']]):
        pulumi.set(self, "resource_spec", value)

    @property
    @pulumi.getter(name="sgId")
    def sg_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the security group to which the instance belongs, in the form of sg-xxxxxxxx.
        """
        return pulumi.get(self, "sg_id")

    @sg_id.setter
    def sg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sg_id", value)

    @property
    @pulumi.getter
    def softwares(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The softwares of a EMR instance.
        """
        return pulumi.get(self, "softwares")

    @softwares.setter
    def softwares(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "softwares", value)

    @property
    @pulumi.getter(name="supportHa")
    def support_ha(self) -> Optional[pulumi.Input[int]]:
        """
        The flag whether the instance support high availability.(0=>not support, 1=>support).
        """
        return pulumi.get(self, "support_ha")

    @support_ha.setter
    def support_ha(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "support_ha", value)

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> Optional[pulumi.Input[int]]:
        """
        The length of time the instance was purchased. Use with TimeUnit.When TimeUnit is s, the parameter can only be filled in at 3600, representing a metered instance.
        When TimeUnit is m, the number filled in by this parameter indicates the length of purchase of the monthly instance of the package year, such as 1 for one month of purchase.
        """
        return pulumi.get(self, "time_span")

    @time_span.setter
    def time_span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_span", value)

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit of time in which the instance was purchased. When PayMode is 0, TimeUnit can only take values of s(second). When PayMode is 1, TimeUnit can only take the value m(month).
        """
        return pulumi.get(self, "time_unit")

    @time_unit.setter
    def time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_unit", value)

    @property
    @pulumi.getter(name="vpcSettings")
    def vpc_settings(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The private net config of EMR instance.
        """
        return pulumi.get(self, "vpc_settings")

    @vpc_settings.setter
    def vpc_settings(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "vpc_settings", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_strategy: Optional[pulumi.Input[str]] = None,
                 extend_fs_field: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 login_settings: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 need_master_wan: Optional[pulumi.Input[str]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 placement: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 product_id: Optional[pulumi.Input[int]] = None,
                 resource_spec: Optional[pulumi.Input[pulumi.InputType['ClusterResourceSpecArgs']]] = None,
                 sg_id: Optional[pulumi.Input[str]] = None,
                 softwares: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 support_ha: Optional[pulumi.Input[int]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 vpc_settings: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        Provide a resource to create a emr cluster.

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        emrrrr = tencentcloud.emr.Cluster("emrrrr",
            product_id=4,
            display_strategy="clusterList",
            vpc_settings={
                "vpc_id": "vpc-fuwly8x5",
                "subnet_id": "subnet-d830wfso",
            },
            softwares=[
                "hadoop-2.8.4",
                "zookeeper-3.4.9",
            ],
            support_ha=0,
            instance_name="emr-test",
            resource_spec=tencentcloud.emr.ClusterResourceSpecArgs(
                master_resource_spec=tencentcloud.emr.ClusterResourceSpecMasterResourceSpecArgs(
                    mem_size=8192,
                    cpu=4,
                    disk_size=100,
                    disk_type="CLOUD_PREMIUM",
                    spec="CVM.S2",
                    storage_type=5,
                ),
                core_resource_spec=tencentcloud.emr.ClusterResourceSpecCoreResourceSpecArgs(
                    mem_size=8192,
                    cpu=4,
                    disk_size=100,
                    disk_type="CLOUD_PREMIUM",
                    spec="CVM.S2",
                    storage_type=5,
                ),
                master_count=1,
                core_count=2,
            ),
            login_settings={
                "password": "Tencent@cloud123",
            },
            time_span=1,
            time_unit="m",
            pay_mode=1,
            placement={
                "zone": "ap-guangzhou-3",
                "project_id": 0,
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_strategy: Display strategy of EMR instance.
        :param pulumi.Input[str] extend_fs_field: Access the external file system.
        :param pulumi.Input[str] instance_name: Name of the instance, which can contain 6 to 36 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        :param pulumi.Input[Mapping[str, Any]] login_settings: Instance login settings.
        :param pulumi.Input[str] need_master_wan: Whether to enable the cluster Master node public network. Value range:
               - NEED_MASTER_WAN: Indicates that the cluster Master node public network is enabled.
               - NOT_NEED_MASTER_WAN: Indicates that it is not turned on.
               By default, the cluster Master node internet is enabled.
        :param pulumi.Input[int] pay_mode: The pay mode of instance. 0 represent POSTPAID_BY_HOUR, 1 represent PREPAID.
        :param pulumi.Input[Mapping[str, Any]] placement: The location of the instance.
        :param pulumi.Input[int] product_id: Product ID. Different products ID represents different EMR product versions. Value range:
               - 16: represents EMR-V2.3.0
               - 20: indicates EMR-V2.5.0
               - 25: represents EMR-V3.1.0
               - 27: represents KAFKA-V1.0.0
               - 30: indicates EMR-V2.6.0
               - 33: represents EMR-V3.2.1
               - 34: stands for EMR-V3.3.0
               - 36: represents STARROCKS-V1.0.0
               - 37: indicates EMR-V3.4.0
               - 38: represents EMR-V2.7.0
               - 39: stands for STARROCKS-V1.1.0
               - 41: represents DRUID-V1.1.0.
        :param pulumi.Input[pulumi.InputType['ClusterResourceSpecArgs']] resource_spec: Resource specification of EMR instance.
        :param pulumi.Input[str] sg_id: The ID of the security group to which the instance belongs, in the form of sg-xxxxxxxx.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] softwares: The softwares of a EMR instance.
        :param pulumi.Input[int] support_ha: The flag whether the instance support high availability.(0=>not support, 1=>support).
        :param pulumi.Input[int] time_span: The length of time the instance was purchased. Use with TimeUnit.When TimeUnit is s, the parameter can only be filled in at 3600, representing a metered instance.
               When TimeUnit is m, the number filled in by this parameter indicates the length of purchase of the monthly instance of the package year, such as 1 for one month of purchase.
        :param pulumi.Input[str] time_unit: The unit of time in which the instance was purchased. When PayMode is 0, TimeUnit can only take values of s(second). When PayMode is 1, TimeUnit can only take the value m(month).
        :param pulumi.Input[Mapping[str, Any]] vpc_settings: The private net config of EMR instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create a emr cluster.

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        emrrrr = tencentcloud.emr.Cluster("emrrrr",
            product_id=4,
            display_strategy="clusterList",
            vpc_settings={
                "vpc_id": "vpc-fuwly8x5",
                "subnet_id": "subnet-d830wfso",
            },
            softwares=[
                "hadoop-2.8.4",
                "zookeeper-3.4.9",
            ],
            support_ha=0,
            instance_name="emr-test",
            resource_spec=tencentcloud.emr.ClusterResourceSpecArgs(
                master_resource_spec=tencentcloud.emr.ClusterResourceSpecMasterResourceSpecArgs(
                    mem_size=8192,
                    cpu=4,
                    disk_size=100,
                    disk_type="CLOUD_PREMIUM",
                    spec="CVM.S2",
                    storage_type=5,
                ),
                core_resource_spec=tencentcloud.emr.ClusterResourceSpecCoreResourceSpecArgs(
                    mem_size=8192,
                    cpu=4,
                    disk_size=100,
                    disk_type="CLOUD_PREMIUM",
                    spec="CVM.S2",
                    storage_type=5,
                ),
                master_count=1,
                core_count=2,
            ),
            login_settings={
                "password": "Tencent@cloud123",
            },
            time_span=1,
            time_unit="m",
            pay_mode=1,
            placement={
                "zone": "ap-guangzhou-3",
                "project_id": 0,
            })
        ```

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_strategy: Optional[pulumi.Input[str]] = None,
                 extend_fs_field: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 login_settings: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 need_master_wan: Optional[pulumi.Input[str]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 placement: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 product_id: Optional[pulumi.Input[int]] = None,
                 resource_spec: Optional[pulumi.Input[pulumi.InputType['ClusterResourceSpecArgs']]] = None,
                 sg_id: Optional[pulumi.Input[str]] = None,
                 softwares: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 support_ha: Optional[pulumi.Input[int]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 vpc_settings: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            if display_strategy is None and not opts.urn:
                raise TypeError("Missing required property 'display_strategy'")
            __props__.__dict__["display_strategy"] = display_strategy
            __props__.__dict__["extend_fs_field"] = extend_fs_field
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            if login_settings is None and not opts.urn:
                raise TypeError("Missing required property 'login_settings'")
            __props__.__dict__["login_settings"] = login_settings
            __props__.__dict__["need_master_wan"] = need_master_wan
            if pay_mode is None and not opts.urn:
                raise TypeError("Missing required property 'pay_mode'")
            __props__.__dict__["pay_mode"] = pay_mode
            if placement is None and not opts.urn:
                raise TypeError("Missing required property 'placement'")
            __props__.__dict__["placement"] = placement
            if product_id is None and not opts.urn:
                raise TypeError("Missing required property 'product_id'")
            __props__.__dict__["product_id"] = product_id
            __props__.__dict__["resource_spec"] = resource_spec
            __props__.__dict__["sg_id"] = sg_id
            if softwares is None and not opts.urn:
                raise TypeError("Missing required property 'softwares'")
            __props__.__dict__["softwares"] = softwares
            if support_ha is None and not opts.urn:
                raise TypeError("Missing required property 'support_ha'")
            __props__.__dict__["support_ha"] = support_ha
            if time_span is None and not opts.urn:
                raise TypeError("Missing required property 'time_span'")
            __props__.__dict__["time_span"] = time_span
            if time_unit is None and not opts.urn:
                raise TypeError("Missing required property 'time_unit'")
            __props__.__dict__["time_unit"] = time_unit
            if vpc_settings is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_settings'")
            __props__.__dict__["vpc_settings"] = vpc_settings
            __props__.__dict__["instance_id"] = None
        super(Cluster, __self__).__init__(
            'tencentcloud:Emr/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            display_strategy: Optional[pulumi.Input[str]] = None,
            extend_fs_field: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            login_settings: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            need_master_wan: Optional[pulumi.Input[str]] = None,
            pay_mode: Optional[pulumi.Input[int]] = None,
            placement: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            product_id: Optional[pulumi.Input[int]] = None,
            resource_spec: Optional[pulumi.Input[pulumi.InputType['ClusterResourceSpecArgs']]] = None,
            sg_id: Optional[pulumi.Input[str]] = None,
            softwares: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            support_ha: Optional[pulumi.Input[int]] = None,
            time_span: Optional[pulumi.Input[int]] = None,
            time_unit: Optional[pulumi.Input[str]] = None,
            vpc_settings: Optional[pulumi.Input[Mapping[str, Any]]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_strategy: Display strategy of EMR instance.
        :param pulumi.Input[str] extend_fs_field: Access the external file system.
        :param pulumi.Input[str] instance_id: Created EMR instance id.
        :param pulumi.Input[str] instance_name: Name of the instance, which can contain 6 to 36 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        :param pulumi.Input[Mapping[str, Any]] login_settings: Instance login settings.
        :param pulumi.Input[str] need_master_wan: Whether to enable the cluster Master node public network. Value range:
               - NEED_MASTER_WAN: Indicates that the cluster Master node public network is enabled.
               - NOT_NEED_MASTER_WAN: Indicates that it is not turned on.
               By default, the cluster Master node internet is enabled.
        :param pulumi.Input[int] pay_mode: The pay mode of instance. 0 represent POSTPAID_BY_HOUR, 1 represent PREPAID.
        :param pulumi.Input[Mapping[str, Any]] placement: The location of the instance.
        :param pulumi.Input[int] product_id: Product ID. Different products ID represents different EMR product versions. Value range:
               - 16: represents EMR-V2.3.0
               - 20: indicates EMR-V2.5.0
               - 25: represents EMR-V3.1.0
               - 27: represents KAFKA-V1.0.0
               - 30: indicates EMR-V2.6.0
               - 33: represents EMR-V3.2.1
               - 34: stands for EMR-V3.3.0
               - 36: represents STARROCKS-V1.0.0
               - 37: indicates EMR-V3.4.0
               - 38: represents EMR-V2.7.0
               - 39: stands for STARROCKS-V1.1.0
               - 41: represents DRUID-V1.1.0.
        :param pulumi.Input[pulumi.InputType['ClusterResourceSpecArgs']] resource_spec: Resource specification of EMR instance.
        :param pulumi.Input[str] sg_id: The ID of the security group to which the instance belongs, in the form of sg-xxxxxxxx.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] softwares: The softwares of a EMR instance.
        :param pulumi.Input[int] support_ha: The flag whether the instance support high availability.(0=>not support, 1=>support).
        :param pulumi.Input[int] time_span: The length of time the instance was purchased. Use with TimeUnit.When TimeUnit is s, the parameter can only be filled in at 3600, representing a metered instance.
               When TimeUnit is m, the number filled in by this parameter indicates the length of purchase of the monthly instance of the package year, such as 1 for one month of purchase.
        :param pulumi.Input[str] time_unit: The unit of time in which the instance was purchased. When PayMode is 0, TimeUnit can only take values of s(second). When PayMode is 1, TimeUnit can only take the value m(month).
        :param pulumi.Input[Mapping[str, Any]] vpc_settings: The private net config of EMR instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["display_strategy"] = display_strategy
        __props__.__dict__["extend_fs_field"] = extend_fs_field
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["login_settings"] = login_settings
        __props__.__dict__["need_master_wan"] = need_master_wan
        __props__.__dict__["pay_mode"] = pay_mode
        __props__.__dict__["placement"] = placement
        __props__.__dict__["product_id"] = product_id
        __props__.__dict__["resource_spec"] = resource_spec
        __props__.__dict__["sg_id"] = sg_id
        __props__.__dict__["softwares"] = softwares
        __props__.__dict__["support_ha"] = support_ha
        __props__.__dict__["time_span"] = time_span
        __props__.__dict__["time_unit"] = time_unit
        __props__.__dict__["vpc_settings"] = vpc_settings
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="displayStrategy")
    def display_strategy(self) -> pulumi.Output[str]:
        """
        Display strategy of EMR instance.
        """
        return pulumi.get(self, "display_strategy")

    @property
    @pulumi.getter(name="extendFsField")
    def extend_fs_field(self) -> pulumi.Output[Optional[str]]:
        """
        Access the external file system.
        """
        return pulumi.get(self, "extend_fs_field")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Created EMR instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        Name of the instance, which can contain 6 to 36 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="loginSettings")
    def login_settings(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Instance login settings.
        """
        return pulumi.get(self, "login_settings")

    @property
    @pulumi.getter(name="needMasterWan")
    def need_master_wan(self) -> pulumi.Output[Optional[str]]:
        """
        Whether to enable the cluster Master node public network. Value range:
        - NEED_MASTER_WAN: Indicates that the cluster Master node public network is enabled.
        - NOT_NEED_MASTER_WAN: Indicates that it is not turned on.
        By default, the cluster Master node internet is enabled.
        """
        return pulumi.get(self, "need_master_wan")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> pulumi.Output[int]:
        """
        The pay mode of instance. 0 represent POSTPAID_BY_HOUR, 1 represent PREPAID.
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter
    def placement(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        The location of the instance.
        """
        return pulumi.get(self, "placement")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Output[int]:
        """
        Product ID. Different products ID represents different EMR product versions. Value range:
        - 16: represents EMR-V2.3.0
        - 20: indicates EMR-V2.5.0
        - 25: represents EMR-V3.1.0
        - 27: represents KAFKA-V1.0.0
        - 30: indicates EMR-V2.6.0
        - 33: represents EMR-V3.2.1
        - 34: stands for EMR-V3.3.0
        - 36: represents STARROCKS-V1.0.0
        - 37: indicates EMR-V3.4.0
        - 38: represents EMR-V2.7.0
        - 39: stands for STARROCKS-V1.1.0
        - 41: represents DRUID-V1.1.0.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="resourceSpec")
    def resource_spec(self) -> pulumi.Output[Optional['outputs.ClusterResourceSpec']]:
        """
        Resource specification of EMR instance.
        """
        return pulumi.get(self, "resource_spec")

    @property
    @pulumi.getter(name="sgId")
    def sg_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the security group to which the instance belongs, in the form of sg-xxxxxxxx.
        """
        return pulumi.get(self, "sg_id")

    @property
    @pulumi.getter
    def softwares(self) -> pulumi.Output[Sequence[str]]:
        """
        The softwares of a EMR instance.
        """
        return pulumi.get(self, "softwares")

    @property
    @pulumi.getter(name="supportHa")
    def support_ha(self) -> pulumi.Output[int]:
        """
        The flag whether the instance support high availability.(0=>not support, 1=>support).
        """
        return pulumi.get(self, "support_ha")

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> pulumi.Output[int]:
        """
        The length of time the instance was purchased. Use with TimeUnit.When TimeUnit is s, the parameter can only be filled in at 3600, representing a metered instance.
        When TimeUnit is m, the number filled in by this parameter indicates the length of purchase of the monthly instance of the package year, such as 1 for one month of purchase.
        """
        return pulumi.get(self, "time_span")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> pulumi.Output[str]:
        """
        The unit of time in which the instance was purchased. When PayMode is 0, TimeUnit can only take values of s(second). When PayMode is 1, TimeUnit can only take the value m(month).
        """
        return pulumi.get(self, "time_unit")

    @property
    @pulumi.getter(name="vpcSettings")
    def vpc_settings(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        The private net config of EMR instance.
        """
        return pulumi.get(self, "vpc_settings")

