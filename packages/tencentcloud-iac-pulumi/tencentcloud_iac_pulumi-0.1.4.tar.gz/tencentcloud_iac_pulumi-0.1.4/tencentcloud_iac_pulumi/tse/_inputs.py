# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceEngineRegionInfoArgs',
    'InstanceEngineRegionInfoVpcInfoArgs',
]

@pulumi.input_type
class InstanceEngineRegionInfoArgs:
    def __init__(__self__, *,
                 engine_region: pulumi.Input[str],
                 replica: pulumi.Input[int],
                 vpc_infos: pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoVpcInfoArgs']]]):
        """
        :param pulumi.Input[str] engine_region: Engine node region.
        :param pulumi.Input[int] replica: The number of nodes allocated in this region.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoVpcInfoArgs']]] vpc_infos: Cluster network information.
        """
        pulumi.set(__self__, "engine_region", engine_region)
        pulumi.set(__self__, "replica", replica)
        pulumi.set(__self__, "vpc_infos", vpc_infos)

    @property
    @pulumi.getter(name="engineRegion")
    def engine_region(self) -> pulumi.Input[str]:
        """
        Engine node region.
        """
        return pulumi.get(self, "engine_region")

    @engine_region.setter
    def engine_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine_region", value)

    @property
    @pulumi.getter
    def replica(self) -> pulumi.Input[int]:
        """
        The number of nodes allocated in this region.
        """
        return pulumi.get(self, "replica")

    @replica.setter
    def replica(self, value: pulumi.Input[int]):
        pulumi.set(self, "replica", value)

    @property
    @pulumi.getter(name="vpcInfos")
    def vpc_infos(self) -> pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoVpcInfoArgs']]]:
        """
        Cluster network information.
        """
        return pulumi.get(self, "vpc_infos")

    @vpc_infos.setter
    def vpc_infos(self, value: pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoVpcInfoArgs']]]):
        pulumi.set(self, "vpc_infos", value)


@pulumi.input_type
class InstanceEngineRegionInfoVpcInfoArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 intranet_address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet_id: Subnet ID.
        :param pulumi.Input[str] vpc_id: Vpc Id.
        :param pulumi.Input[str] intranet_address: Intranet access addressNote: This field may return null, indicating that a valid value is not available..
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if intranet_address is not None:
            pulumi.set(__self__, "intranet_address", intranet_address)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        Vpc Id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="intranetAddress")
    def intranet_address(self) -> Optional[pulumi.Input[str]]:
        """
        Intranet access addressNote: This field may return null, indicating that a valid value is not available..
        """
        return pulumi.get(self, "intranet_address")

    @intranet_address.setter
    def intranet_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intranet_address", value)


