# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZoneArgs', 'Zone']

@pulumi.input_type
class ZoneArgs:
    def __init__(__self__, *,
                 plan_type: pulumi.Input[str],
                 zone_name: pulumi.Input[str],
                 cname_speed_up: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vanity_name_servers: Optional[pulumi.Input['ZoneVanityNameServersArgs']] = None):
        """
        The set of arguments for constructing a Zone resource.
        :param pulumi.Input[str] plan_type: Plan type of the zone. See details in data source `zone_available_plans`.
        :param pulumi.Input[str] zone_name: Site name.
        :param pulumi.Input[str] cname_speed_up: Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[bool] paused: Indicates whether the site is disabled.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] type: Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected via CNAME.
        :param pulumi.Input['ZoneVanityNameServersArgs'] vanity_name_servers: User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "plan_type", plan_type)
        pulumi.set(__self__, "zone_name", zone_name)
        if cname_speed_up is not None:
            pulumi.set(__self__, "cname_speed_up", cname_speed_up)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vanity_name_servers is not None:
            pulumi.set(__self__, "vanity_name_servers", vanity_name_servers)

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> pulumi.Input[str]:
        """
        Plan type of the zone. See details in data source `zone_available_plans`.
        """
        return pulumi.get(self, "plan_type")

    @plan_type.setter
    def plan_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_type", value)

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> pulumi.Input[str]:
        """
        Site name.
        """
        return pulumi.get(self, "zone_name")

    @zone_name.setter
    def zone_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_name", value)

    @property
    @pulumi.getter(name="cnameSpeedUp")
    def cname_speed_up(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
        """
        return pulumi.get(self, "cname_speed_up")

    @cname_speed_up.setter
    def cname_speed_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_speed_up", value)

    @property
    @pulumi.getter
    def paused(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the site is disabled.
        """
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected via CNAME.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vanityNameServers")
    def vanity_name_servers(self) -> Optional[pulumi.Input['ZoneVanityNameServersArgs']]:
        """
        User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "vanity_name_servers")

    @vanity_name_servers.setter
    def vanity_name_servers(self, value: Optional[pulumi.Input['ZoneVanityNameServersArgs']]):
        pulumi.set(self, "vanity_name_servers", value)


@pulumi.input_type
class _ZoneState:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 cname_speed_up: Optional[pulumi.Input[str]] = None,
                 cname_status: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 modified_on: Optional[pulumi.Input[str]] = None,
                 name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 original_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 plan_type: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneResourceArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vanity_name_servers: Optional[pulumi.Input['ZoneVanityNameServersArgs']] = None,
                 vanity_name_servers_ips: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneVanityNameServersIpArgs']]]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 zone_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Zone resources.
        :param pulumi.Input[str] area: Valid values: `mainland`, `overseas`.
        :param pulumi.Input[str] cname_speed_up: Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[str] cname_status: Ownership verification status of the site when it accesses via CNAME.- `finished`: The site is verified.- `pending`: The site is waiting for verification.
        :param pulumi.Input[str] created_on: Site creation date.
        :param pulumi.Input[str] modified_on: Site modification date.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] name_servers: List of name servers assigned by Tencent Cloud.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] original_name_servers: Name server used by the site.
        :param pulumi.Input[bool] paused: Indicates whether the site is disabled.
        :param pulumi.Input[str] plan_type: Plan type of the zone. See details in data source `zone_available_plans`.
        :param pulumi.Input[Sequence[pulumi.Input['ZoneResourceArgs']]] resources: Billing resources of the zone.
        :param pulumi.Input[str] status: Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.- `deactivated`: this site is blocked.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] type: Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected via CNAME.
        :param pulumi.Input['ZoneVanityNameServersArgs'] vanity_name_servers: User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[Sequence[pulumi.Input['ZoneVanityNameServersIpArgs']]] vanity_name_servers_ips: User-defined name server IP information. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] zone_id: Site ID.
        :param pulumi.Input[str] zone_name: Site name.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if cname_speed_up is not None:
            pulumi.set(__self__, "cname_speed_up", cname_speed_up)
        if cname_status is not None:
            pulumi.set(__self__, "cname_status", cname_status)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if name_servers is not None:
            pulumi.set(__self__, "name_servers", name_servers)
        if original_name_servers is not None:
            pulumi.set(__self__, "original_name_servers", original_name_servers)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if plan_type is not None:
            pulumi.set(__self__, "plan_type", plan_type)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vanity_name_servers is not None:
            pulumi.set(__self__, "vanity_name_servers", vanity_name_servers)
        if vanity_name_servers_ips is not None:
            pulumi.set(__self__, "vanity_name_servers_ips", vanity_name_servers_ips)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)
        if zone_name is not None:
            pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values: `mainland`, `overseas`.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter(name="cnameSpeedUp")
    def cname_speed_up(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
        """
        return pulumi.get(self, "cname_speed_up")

    @cname_speed_up.setter
    def cname_speed_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_speed_up", value)

    @property
    @pulumi.getter(name="cnameStatus")
    def cname_status(self) -> Optional[pulumi.Input[str]]:
        """
        Ownership verification status of the site when it accesses via CNAME.- `finished`: The site is verified.- `pending`: The site is waiting for verification.
        """
        return pulumi.get(self, "cname_status")

    @cname_status.setter
    def cname_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_status", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        """
        Site creation date.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[str]]:
        """
        Site modification date.
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified_on", value)

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of name servers assigned by Tencent Cloud.
        """
        return pulumi.get(self, "name_servers")

    @name_servers.setter
    def name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "name_servers", value)

    @property
    @pulumi.getter(name="originalNameServers")
    def original_name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name server used by the site.
        """
        return pulumi.get(self, "original_name_servers")

    @original_name_servers.setter
    def original_name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "original_name_servers", value)

    @property
    @pulumi.getter
    def paused(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the site is disabled.
        """
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> Optional[pulumi.Input[str]]:
        """
        Plan type of the zone. See details in data source `zone_available_plans`.
        """
        return pulumi.get(self, "plan_type")

    @plan_type.setter
    def plan_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_type", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneResourceArgs']]]]:
        """
        Billing resources of the zone.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.- `deactivated`: this site is blocked.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected via CNAME.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vanityNameServers")
    def vanity_name_servers(self) -> Optional[pulumi.Input['ZoneVanityNameServersArgs']]:
        """
        User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "vanity_name_servers")

    @vanity_name_servers.setter
    def vanity_name_servers(self, value: Optional[pulumi.Input['ZoneVanityNameServersArgs']]):
        pulumi.set(self, "vanity_name_servers", value)

    @property
    @pulumi.getter(name="vanityNameServersIps")
    def vanity_name_servers_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneVanityNameServersIpArgs']]]]:
        """
        User-defined name server IP information. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "vanity_name_servers_ips")

    @vanity_name_servers_ips.setter
    def vanity_name_servers_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneVanityNameServersIpArgs']]]]):
        pulumi.set(self, "vanity_name_servers_ips", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        Site name.
        """
        return pulumi.get(self, "zone_name")

    @zone_name.setter
    def zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_name", value)


class Zone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cname_speed_up: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 plan_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vanity_name_servers: Optional[pulumi.Input[pulumi.InputType['ZoneVanityNameServersArgs']]] = None,
                 zone_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a teo zone

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        zone = tencentcloud.teo.Zone("zone",
            cname_speed_up="enabled",
            paused=False,
            plan_type="sta",
            tags={
                "createdBy": "terraform",
            },
            type="full",
            zone_name="toutiao2.com")
        ```

        ## Import

        teo zone can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Teo/zone:Zone zone zone_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cname_speed_up: Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[bool] paused: Indicates whether the site is disabled.
        :param pulumi.Input[str] plan_type: Plan type of the zone. See details in data source `zone_available_plans`.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] type: Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected via CNAME.
        :param pulumi.Input[pulumi.InputType['ZoneVanityNameServersArgs']] vanity_name_servers: User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] zone_name: Site name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ZoneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a teo zone

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        zone = tencentcloud.teo.Zone("zone",
            cname_speed_up="enabled",
            paused=False,
            plan_type="sta",
            tags={
                "createdBy": "terraform",
            },
            type="full",
            zone_name="toutiao2.com")
        ```

        ## Import

        teo zone can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Teo/zone:Zone zone zone_id
        ```

        :param str resource_name: The name of the resource.
        :param ZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cname_speed_up: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 plan_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vanity_name_servers: Optional[pulumi.Input[pulumi.InputType['ZoneVanityNameServersArgs']]] = None,
                 zone_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZoneArgs.__new__(ZoneArgs)

            __props__.__dict__["cname_speed_up"] = cname_speed_up
            __props__.__dict__["paused"] = paused
            if plan_type is None and not opts.urn:
                raise TypeError("Missing required property 'plan_type'")
            __props__.__dict__["plan_type"] = plan_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["type"] = type
            __props__.__dict__["vanity_name_servers"] = vanity_name_servers
            if zone_name is None and not opts.urn:
                raise TypeError("Missing required property 'zone_name'")
            __props__.__dict__["zone_name"] = zone_name
            __props__.__dict__["area"] = None
            __props__.__dict__["cname_status"] = None
            __props__.__dict__["created_on"] = None
            __props__.__dict__["modified_on"] = None
            __props__.__dict__["name_servers"] = None
            __props__.__dict__["original_name_servers"] = None
            __props__.__dict__["resources"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["vanity_name_servers_ips"] = None
            __props__.__dict__["zone_id"] = None
        super(Zone, __self__).__init__(
            'tencentcloud:Teo/zone:Zone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            area: Optional[pulumi.Input[str]] = None,
            cname_speed_up: Optional[pulumi.Input[str]] = None,
            cname_status: Optional[pulumi.Input[str]] = None,
            created_on: Optional[pulumi.Input[str]] = None,
            modified_on: Optional[pulumi.Input[str]] = None,
            name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            original_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            paused: Optional[pulumi.Input[bool]] = None,
            plan_type: Optional[pulumi.Input[str]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneResourceArgs']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vanity_name_servers: Optional[pulumi.Input[pulumi.InputType['ZoneVanityNameServersArgs']]] = None,
            vanity_name_servers_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneVanityNameServersIpArgs']]]]] = None,
            zone_id: Optional[pulumi.Input[str]] = None,
            zone_name: Optional[pulumi.Input[str]] = None) -> 'Zone':
        """
        Get an existing Zone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: Valid values: `mainland`, `overseas`.
        :param pulumi.Input[str] cname_speed_up: Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[str] cname_status: Ownership verification status of the site when it accesses via CNAME.- `finished`: The site is verified.- `pending`: The site is waiting for verification.
        :param pulumi.Input[str] created_on: Site creation date.
        :param pulumi.Input[str] modified_on: Site modification date.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] name_servers: List of name servers assigned by Tencent Cloud.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] original_name_servers: Name server used by the site.
        :param pulumi.Input[bool] paused: Indicates whether the site is disabled.
        :param pulumi.Input[str] plan_type: Plan type of the zone. See details in data source `zone_available_plans`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneResourceArgs']]]] resources: Billing resources of the zone.
        :param pulumi.Input[str] status: Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.- `deactivated`: this site is blocked.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] type: Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected via CNAME.
        :param pulumi.Input[pulumi.InputType['ZoneVanityNameServersArgs']] vanity_name_servers: User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneVanityNameServersIpArgs']]]] vanity_name_servers_ips: User-defined name server IP information. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] zone_id: Site ID.
        :param pulumi.Input[str] zone_name: Site name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZoneState.__new__(_ZoneState)

        __props__.__dict__["area"] = area
        __props__.__dict__["cname_speed_up"] = cname_speed_up
        __props__.__dict__["cname_status"] = cname_status
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["name_servers"] = name_servers
        __props__.__dict__["original_name_servers"] = original_name_servers
        __props__.__dict__["paused"] = paused
        __props__.__dict__["plan_type"] = plan_type
        __props__.__dict__["resources"] = resources
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["vanity_name_servers"] = vanity_name_servers
        __props__.__dict__["vanity_name_servers_ips"] = vanity_name_servers_ips
        __props__.__dict__["zone_id"] = zone_id
        __props__.__dict__["zone_name"] = zone_name
        return Zone(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def area(self) -> pulumi.Output[str]:
        """
        Valid values: `mainland`, `overseas`.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter(name="cnameSpeedUp")
    def cname_speed_up(self) -> pulumi.Output[str]:
        """
        Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
        """
        return pulumi.get(self, "cname_speed_up")

    @property
    @pulumi.getter(name="cnameStatus")
    def cname_status(self) -> pulumi.Output[str]:
        """
        Ownership verification status of the site when it accesses via CNAME.- `finished`: The site is verified.- `pending`: The site is waiting for verification.
        """
        return pulumi.get(self, "cname_status")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[str]:
        """
        Site creation date.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[str]:
        """
        Site modification date.
        """
        return pulumi.get(self, "modified_on")

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> pulumi.Output[Sequence[str]]:
        """
        List of name servers assigned by Tencent Cloud.
        """
        return pulumi.get(self, "name_servers")

    @property
    @pulumi.getter(name="originalNameServers")
    def original_name_servers(self) -> pulumi.Output[Sequence[str]]:
        """
        Name server used by the site.
        """
        return pulumi.get(self, "original_name_servers")

    @property
    @pulumi.getter
    def paused(self) -> pulumi.Output[bool]:
        """
        Indicates whether the site is disabled.
        """
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> pulumi.Output[str]:
        """
        Plan type of the zone. See details in data source `zone_available_plans`.
        """
        return pulumi.get(self, "plan_type")

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Sequence['outputs.ZoneResource']]:
        """
        Billing resources of the zone.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.- `deactivated`: this site is blocked.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected via CNAME.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vanityNameServers")
    def vanity_name_servers(self) -> pulumi.Output[Optional['outputs.ZoneVanityNameServers']]:
        """
        User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "vanity_name_servers")

    @property
    @pulumi.getter(name="vanityNameServersIps")
    def vanity_name_servers_ips(self) -> pulumi.Output[Sequence['outputs.ZoneVanityNameServersIp']]:
        """
        User-defined name server IP information. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "vanity_name_servers_ips")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> pulumi.Output[str]:
        """
        Site name.
        """
        return pulumi.get(self, "zone_name")

