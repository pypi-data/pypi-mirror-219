# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ApplicationProxyIpv6',
    'DdosPolicyDdosRule',
    'DdosPolicyDdosRuleAcl',
    'DdosPolicyDdosRuleAclAcl',
    'DdosPolicyDdosRuleAllowBlock',
    'DdosPolicyDdosRuleAllowBlockAllowBlockIp',
    'DdosPolicyDdosRuleAntiPly',
    'DdosPolicyDdosRuleGeoIp',
    'DdosPolicyDdosRulePacketFilter',
    'DdosPolicyDdosRulePacketFilterPacketFilter',
    'DdosPolicyDdosRuleSpeedLimit',
    'DdosPolicyDdosRuleStatusInfo',
    'DnsSecDnssec',
    'OriginGroupOriginRecord',
    'OriginGroupOriginRecordPrivateParameter',
    'RuleEnginePriorityRulesPriority',
    'RuleEngineRule',
    'RuleEngineRuleAction',
    'RuleEngineRuleActionCodeAction',
    'RuleEngineRuleActionCodeActionParameter',
    'RuleEngineRuleActionNormalAction',
    'RuleEngineRuleActionNormalActionParameter',
    'RuleEngineRuleActionRewriteAction',
    'RuleEngineRuleActionRewriteActionParameter',
    'RuleEngineRuleOr',
    'RuleEngineRuleOrAnd',
    'RuleEngineRuleSubRule',
    'RuleEngineRuleSubRuleRule',
    'RuleEngineRuleSubRuleRuleAction',
    'RuleEngineRuleSubRuleRuleActionCodeAction',
    'RuleEngineRuleSubRuleRuleActionCodeActionParameter',
    'RuleEngineRuleSubRuleRuleActionNormalAction',
    'RuleEngineRuleSubRuleRuleActionNormalActionParameter',
    'RuleEngineRuleSubRuleRuleActionRewriteAction',
    'RuleEngineRuleSubRuleRuleActionRewriteActionParameter',
    'RuleEngineRuleSubRuleRuleOr',
    'RuleEngineRuleSubRuleRuleOrAnd',
    'SecurityPolicyConfig',
    'SecurityPolicyConfigAclConfig',
    'SecurityPolicyConfigAclConfigUserRule',
    'SecurityPolicyConfigAclConfigUserRuleCondition',
    'SecurityPolicyConfigBotConfig',
    'SecurityPolicyConfigBotConfigIntelligenceRule',
    'SecurityPolicyConfigBotConfigIntelligenceRuleItem',
    'SecurityPolicyConfigBotConfigManagedRule',
    'SecurityPolicyConfigBotConfigPortraitRule',
    'SecurityPolicyConfigDropPageConfig',
    'SecurityPolicyConfigDropPageConfigAclDropPageDetail',
    'SecurityPolicyConfigDropPageConfigWafDropPageDetail',
    'SecurityPolicyConfigExceptConfig',
    'SecurityPolicyConfigExceptConfigExceptUserRule',
    'SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleCondition',
    'SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleScope',
    'SecurityPolicyConfigIpTableConfig',
    'SecurityPolicyConfigIpTableConfigRule',
    'SecurityPolicyConfigRateLimitConfig',
    'SecurityPolicyConfigRateLimitConfigIntelligence',
    'SecurityPolicyConfigRateLimitConfigTemplate',
    'SecurityPolicyConfigRateLimitConfigTemplateDetail',
    'SecurityPolicyConfigRateLimitConfigUserRule',
    'SecurityPolicyConfigRateLimitConfigUserRuleCondition',
    'SecurityPolicyConfigSwitchConfig',
    'SecurityPolicyConfigWafConfig',
    'SecurityPolicyConfigWafConfigAiRule',
    'SecurityPolicyConfigWafConfigWafRules',
    'ZoneResource',
    'ZoneResourceSv',
    'ZoneSettingCache',
    'ZoneSettingCacheCache',
    'ZoneSettingCacheFollowOrigin',
    'ZoneSettingCacheKey',
    'ZoneSettingCacheKeyQueryString',
    'ZoneSettingCacheNoCache',
    'ZoneSettingCachePrefresh',
    'ZoneSettingClientIpHeader',
    'ZoneSettingCompression',
    'ZoneSettingForceRedirect',
    'ZoneSettingHttps',
    'ZoneSettingHttpsHsts',
    'ZoneSettingIpv6',
    'ZoneSettingMaxAge',
    'ZoneSettingOfflineCache',
    'ZoneSettingOrigin',
    'ZoneSettingPostMaxSize',
    'ZoneSettingQuic',
    'ZoneSettingSmartRouting',
    'ZoneSettingUpstreamHttp2',
    'ZoneSettingWebSocket',
    'ZoneVanityNameServers',
    'ZoneVanityNameServersIp',
    'GetBotManagedRulesRuleResult',
    'GetBotPortraitRulesRuleResult',
    'GetRuleEngineSettingsActionResult',
    'GetRuleEngineSettingsActionPropertyResult',
    'GetRuleEngineSettingsActionPropertyChoicePropertyResult',
    'GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterResult',
    'GetRuleEngineSettingsActionPropertyExtraParameterResult',
    'GetSecurityPolicyRegionsGeoIpResult',
    'GetWafRuleGroupsWafRuleGroupResult',
    'GetWafRuleGroupsWafRuleGroupRuleResult',
    'GetZoneAvailablePlansPlanInfoListResult',
    'GetZoneDdosPolicyDomainResult',
    'GetZoneDdosPolicyShieldAreaResult',
    'GetZoneDdosPolicyShieldAreaApplicationResult',
]

@pulumi.output_type
class ApplicationProxyIpv6(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: - `on`: Enable.- `off`: Disable.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class DdosPolicyDdosRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowBlock":
            suggest = "allow_block"
        elif key == "antiPly":
            suggest = "anti_ply"
        elif key == "geoIp":
            suggest = "geo_ip"
        elif key == "packetFilter":
            suggest = "packet_filter"
        elif key == "speedLimit":
            suggest = "speed_limit"
        elif key == "statusInfo":
            suggest = "status_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdosPolicyDdosRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdosPolicyDdosRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdosPolicyDdosRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl: Optional['outputs.DdosPolicyDdosRuleAcl'] = None,
                 allow_block: Optional['outputs.DdosPolicyDdosRuleAllowBlock'] = None,
                 anti_ply: Optional['outputs.DdosPolicyDdosRuleAntiPly'] = None,
                 geo_ip: Optional['outputs.DdosPolicyDdosRuleGeoIp'] = None,
                 packet_filter: Optional['outputs.DdosPolicyDdosRulePacketFilter'] = None,
                 speed_limit: Optional['outputs.DdosPolicyDdosRuleSpeedLimit'] = None,
                 status_info: Optional['outputs.DdosPolicyDdosRuleStatusInfo'] = None,
                 switch: Optional[str] = None):
        """
        :param 'DdosPolicyDdosRuleAclArgs' acl: DDoS ACL rule configuration.
        :param 'DdosPolicyDdosRuleAllowBlockArgs' allow_block: DDoS black-white list.
        :param 'DdosPolicyDdosRuleAntiPlyArgs' anti_ply: DDoS protocol and connection protection.
        :param 'DdosPolicyDdosRuleGeoIpArgs' geo_ip: DDoS Protection by Geo Info.
        :param 'DdosPolicyDdosRulePacketFilterArgs' packet_filter: DDoS feature filtering configuration.
        :param 'DdosPolicyDdosRuleSpeedLimitArgs' speed_limit: DDoS access origin site speed limit configuration.
        :param 'DdosPolicyDdosRuleStatusInfoArgs' status_info: DDoS protection level.
        :param str switch: DDoS protection switch. Valid values:- `on`: Enable.- `off`: Disable.
        """
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if allow_block is not None:
            pulumi.set(__self__, "allow_block", allow_block)
        if anti_ply is not None:
            pulumi.set(__self__, "anti_ply", anti_ply)
        if geo_ip is not None:
            pulumi.set(__self__, "geo_ip", geo_ip)
        if packet_filter is not None:
            pulumi.set(__self__, "packet_filter", packet_filter)
        if speed_limit is not None:
            pulumi.set(__self__, "speed_limit", speed_limit)
        if status_info is not None:
            pulumi.set(__self__, "status_info", status_info)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def acl(self) -> Optional['outputs.DdosPolicyDdosRuleAcl']:
        """
        DDoS ACL rule configuration.
        """
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="allowBlock")
    def allow_block(self) -> Optional['outputs.DdosPolicyDdosRuleAllowBlock']:
        """
        DDoS black-white list.
        """
        return pulumi.get(self, "allow_block")

    @property
    @pulumi.getter(name="antiPly")
    def anti_ply(self) -> Optional['outputs.DdosPolicyDdosRuleAntiPly']:
        """
        DDoS protocol and connection protection.
        """
        return pulumi.get(self, "anti_ply")

    @property
    @pulumi.getter(name="geoIp")
    def geo_ip(self) -> Optional['outputs.DdosPolicyDdosRuleGeoIp']:
        """
        DDoS Protection by Geo Info.
        """
        return pulumi.get(self, "geo_ip")

    @property
    @pulumi.getter(name="packetFilter")
    def packet_filter(self) -> Optional['outputs.DdosPolicyDdosRulePacketFilter']:
        """
        DDoS feature filtering configuration.
        """
        return pulumi.get(self, "packet_filter")

    @property
    @pulumi.getter(name="speedLimit")
    def speed_limit(self) -> Optional['outputs.DdosPolicyDdosRuleSpeedLimit']:
        """
        DDoS access origin site speed limit configuration.
        """
        return pulumi.get(self, "speed_limit")

    @property
    @pulumi.getter(name="statusInfo")
    def status_info(self) -> Optional['outputs.DdosPolicyDdosRuleStatusInfo']:
        """
        DDoS protection level.
        """
        return pulumi.get(self, "status_info")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        DDoS protection switch. Valid values:- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class DdosPolicyDdosRuleAcl(dict):
    def __init__(__self__, *,
                 acls: Optional[Sequence['outputs.DdosPolicyDdosRuleAclAcl']] = None,
                 switch: Optional[str] = None):
        """
        :param Sequence['DdosPolicyDdosRuleAclAclArgs'] acls: DDoS ACL rule configuration detail.
        :param str switch: - `on`: Enable. `Acl` parameter is require.- `off`: Disable.
        """
        if acls is not None:
            pulumi.set(__self__, "acls", acls)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def acls(self) -> Optional[Sequence['outputs.DdosPolicyDdosRuleAclAcl']]:
        """
        DDoS ACL rule configuration detail.
        """
        return pulumi.get(self, "acls")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        - `on`: Enable. `Acl` parameter is require.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class DdosPolicyDdosRuleAclAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dportEnd":
            suggest = "dport_end"
        elif key == "dportStart":
            suggest = "dport_start"
        elif key == "sportEnd":
            suggest = "sport_end"
        elif key == "sportStart":
            suggest = "sport_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdosPolicyDdosRuleAclAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdosPolicyDdosRuleAclAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdosPolicyDdosRuleAclAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 dport_end: Optional[int] = None,
                 dport_start: Optional[int] = None,
                 protocol: Optional[str] = None,
                 sport_end: Optional[int] = None,
                 sport_start: Optional[int] = None):
        """
        :param str action: Action to take. Valid values: `drop`, `transmit`, `forward`.
        :param int dport_end: End of the dest port range. Valid value range: 0-65535.
        :param int dport_start: Start of the dest port range. Valid value range: 0-65535.
        :param str protocol: Valid values: `tcp`, `udp`, `all`.
        :param int sport_end: End of the source port range. Valid value range: 0-65535.
        :param int sport_start: Start of the source port range. Valid value range: 0-65535.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if dport_end is not None:
            pulumi.set(__self__, "dport_end", dport_end)
        if dport_start is not None:
            pulumi.set(__self__, "dport_start", dport_start)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sport_end is not None:
            pulumi.set(__self__, "sport_end", sport_end)
        if sport_start is not None:
            pulumi.set(__self__, "sport_start", sport_start)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action to take. Valid values: `drop`, `transmit`, `forward`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="dportEnd")
    def dport_end(self) -> Optional[int]:
        """
        End of the dest port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "dport_end")

    @property
    @pulumi.getter(name="dportStart")
    def dport_start(self) -> Optional[int]:
        """
        Start of the dest port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "dport_start")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Valid values: `tcp`, `udp`, `all`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="sportEnd")
    def sport_end(self) -> Optional[int]:
        """
        End of the source port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "sport_end")

    @property
    @pulumi.getter(name="sportStart")
    def sport_start(self) -> Optional[int]:
        """
        Start of the source port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "sport_start")


@pulumi.output_type
class DdosPolicyDdosRuleAllowBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowBlockIps":
            suggest = "allow_block_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdosPolicyDdosRuleAllowBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdosPolicyDdosRuleAllowBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdosPolicyDdosRuleAllowBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_block_ips: Optional[Sequence['outputs.DdosPolicyDdosRuleAllowBlockAllowBlockIp']] = None,
                 switch: Optional[str] = None):
        """
        :param Sequence['DdosPolicyDdosRuleAllowBlockAllowBlockIpArgs'] allow_block_ips: DDoS black-white list detail.
        :param str switch: - `on`: Enable. `AllowBlockIps` parameter is required.- `off`: Disable.
        """
        if allow_block_ips is not None:
            pulumi.set(__self__, "allow_block_ips", allow_block_ips)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="allowBlockIps")
    def allow_block_ips(self) -> Optional[Sequence['outputs.DdosPolicyDdosRuleAllowBlockAllowBlockIp']]:
        """
        DDoS black-white list detail.
        """
        return pulumi.get(self, "allow_block_ips")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        - `on`: Enable. `AllowBlockIps` parameter is required.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class DdosPolicyDdosRuleAllowBlockAllowBlockIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdosPolicyDdosRuleAllowBlockAllowBlockIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdosPolicyDdosRuleAllowBlockAllowBlockIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdosPolicyDdosRuleAllowBlockAllowBlockIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 ip: Optional[str] = None,
                 update_time: Optional[int] = None):
        """
        :param str type: Valid values: `block`, `allow`.
        :param str ip: Valid value format:- ip, for example 1.1.1.1- ip range, for example 1.1.1.2-1.1.1.3- network segment, for example 1.2.1.0/24- network segment range, for example 1.2.1.0/24-1.2.2.0/24.
        """
        pulumi.set(__self__, "type", type)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Valid values: `block`, `allow`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        Valid value format:- ip, for example 1.1.1.1- ip range, for example 1.1.1.2-1.1.1.3- network segment, for example 1.2.1.0/24- network segment range, for example 1.2.1.0/24-1.2.2.0/24.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[int]:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class DdosPolicyDdosRuleAntiPly(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "abnormalConnectNum":
            suggest = "abnormal_connect_num"
        elif key == "abnormalSynNum":
            suggest = "abnormal_syn_num"
        elif key == "abnormalSynRatio":
            suggest = "abnormal_syn_ratio"
        elif key == "connectTimeout":
            suggest = "connect_timeout"
        elif key == "destinationConnectLimit":
            suggest = "destination_connect_limit"
        elif key == "destinationCreateLimit":
            suggest = "destination_create_limit"
        elif key == "dropIcmp":
            suggest = "drop_icmp"
        elif key == "dropOther":
            suggest = "drop_other"
        elif key == "dropTcp":
            suggest = "drop_tcp"
        elif key == "dropUdp":
            suggest = "drop_udp"
        elif key == "emptyConnectProtect":
            suggest = "empty_connect_protect"
        elif key == "sourceConnectLimit":
            suggest = "source_connect_limit"
        elif key == "sourceCreateLimit":
            suggest = "source_create_limit"
        elif key == "udpShard":
            suggest = "udp_shard"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdosPolicyDdosRuleAntiPly. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdosPolicyDdosRuleAntiPly.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdosPolicyDdosRuleAntiPly.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 abnormal_connect_num: int,
                 abnormal_syn_num: int,
                 abnormal_syn_ratio: int,
                 connect_timeout: int,
                 destination_connect_limit: int,
                 destination_create_limit: int,
                 drop_icmp: str,
                 drop_other: str,
                 drop_tcp: str,
                 drop_udp: str,
                 empty_connect_protect: str,
                 source_connect_limit: int,
                 source_create_limit: int,
                 udp_shard: Optional[str] = None):
        """
        :param int abnormal_connect_num: Abnormal connections threshold. Valid value range: 0-4294967295.
        :param int abnormal_syn_num: Abnormal syn packet number threshold. Valid value range: 0-65535.
        :param int abnormal_syn_ratio: Abnormal syn packet ratio threshold. Valid value range: 0-100.
        :param int connect_timeout: Connection timeout detection per second. Valid value range: 0-65535.
        :param int destination_connect_limit: Limitation of connections to dest port. Valid value range: 0-4294967295.
        :param int destination_create_limit: Limitation of new connection to dest port per second. Valid value range: 0-4294967295.
        :param str drop_icmp: Block ICMP protocol. Valid values: `on`, `off`.
        :param str drop_other: Block other protocols. Valid values: `on`, `off`.
        :param str drop_tcp: Block TCP protocol. Valid values: `on`, `off`.
        :param str drop_udp: Block UDP protocol. Valid values: `on`, `off`.
        :param str empty_connect_protect: Empty connection protection switch. Valid values: `on`, `off`.
        :param int source_connect_limit: Limitation of connections to origin site. Valid value range: 0-4294967295.
        :param int source_create_limit: Limitation of new connection to origin site per second. Valid value range: 0-4294967295.
        :param str udp_shard: UDP shard protection switch. Valid values: `on`, `off`.
        """
        pulumi.set(__self__, "abnormal_connect_num", abnormal_connect_num)
        pulumi.set(__self__, "abnormal_syn_num", abnormal_syn_num)
        pulumi.set(__self__, "abnormal_syn_ratio", abnormal_syn_ratio)
        pulumi.set(__self__, "connect_timeout", connect_timeout)
        pulumi.set(__self__, "destination_connect_limit", destination_connect_limit)
        pulumi.set(__self__, "destination_create_limit", destination_create_limit)
        pulumi.set(__self__, "drop_icmp", drop_icmp)
        pulumi.set(__self__, "drop_other", drop_other)
        pulumi.set(__self__, "drop_tcp", drop_tcp)
        pulumi.set(__self__, "drop_udp", drop_udp)
        pulumi.set(__self__, "empty_connect_protect", empty_connect_protect)
        pulumi.set(__self__, "source_connect_limit", source_connect_limit)
        pulumi.set(__self__, "source_create_limit", source_create_limit)
        if udp_shard is not None:
            pulumi.set(__self__, "udp_shard", udp_shard)

    @property
    @pulumi.getter(name="abnormalConnectNum")
    def abnormal_connect_num(self) -> int:
        """
        Abnormal connections threshold. Valid value range: 0-4294967295.
        """
        return pulumi.get(self, "abnormal_connect_num")

    @property
    @pulumi.getter(name="abnormalSynNum")
    def abnormal_syn_num(self) -> int:
        """
        Abnormal syn packet number threshold. Valid value range: 0-65535.
        """
        return pulumi.get(self, "abnormal_syn_num")

    @property
    @pulumi.getter(name="abnormalSynRatio")
    def abnormal_syn_ratio(self) -> int:
        """
        Abnormal syn packet ratio threshold. Valid value range: 0-100.
        """
        return pulumi.get(self, "abnormal_syn_ratio")

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> int:
        """
        Connection timeout detection per second. Valid value range: 0-65535.
        """
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter(name="destinationConnectLimit")
    def destination_connect_limit(self) -> int:
        """
        Limitation of connections to dest port. Valid value range: 0-4294967295.
        """
        return pulumi.get(self, "destination_connect_limit")

    @property
    @pulumi.getter(name="destinationCreateLimit")
    def destination_create_limit(self) -> int:
        """
        Limitation of new connection to dest port per second. Valid value range: 0-4294967295.
        """
        return pulumi.get(self, "destination_create_limit")

    @property
    @pulumi.getter(name="dropIcmp")
    def drop_icmp(self) -> str:
        """
        Block ICMP protocol. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "drop_icmp")

    @property
    @pulumi.getter(name="dropOther")
    def drop_other(self) -> str:
        """
        Block other protocols. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "drop_other")

    @property
    @pulumi.getter(name="dropTcp")
    def drop_tcp(self) -> str:
        """
        Block TCP protocol. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "drop_tcp")

    @property
    @pulumi.getter(name="dropUdp")
    def drop_udp(self) -> str:
        """
        Block UDP protocol. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "drop_udp")

    @property
    @pulumi.getter(name="emptyConnectProtect")
    def empty_connect_protect(self) -> str:
        """
        Empty connection protection switch. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "empty_connect_protect")

    @property
    @pulumi.getter(name="sourceConnectLimit")
    def source_connect_limit(self) -> int:
        """
        Limitation of connections to origin site. Valid value range: 0-4294967295.
        """
        return pulumi.get(self, "source_connect_limit")

    @property
    @pulumi.getter(name="sourceCreateLimit")
    def source_create_limit(self) -> int:
        """
        Limitation of new connection to origin site per second. Valid value range: 0-4294967295.
        """
        return pulumi.get(self, "source_create_limit")

    @property
    @pulumi.getter(name="udpShard")
    def udp_shard(self) -> Optional[str]:
        """
        UDP shard protection switch. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "udp_shard")


@pulumi.output_type
class DdosPolicyDdosRuleGeoIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "regionIds":
            suggest = "region_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdosPolicyDdosRuleGeoIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdosPolicyDdosRuleGeoIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdosPolicyDdosRuleGeoIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region_ids: Optional[Sequence[int]] = None,
                 switch: Optional[str] = None):
        """
        :param Sequence[int] region_ids: Region ID. See details in data source `security_policy_regions`.
        :param str switch: - `on`: Enable.- `off`: Disable.
        """
        if region_ids is not None:
            pulumi.set(__self__, "region_ids", region_ids)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="regionIds")
    def region_ids(self) -> Optional[Sequence[int]]:
        """
        Region ID. See details in data source `security_policy_regions`.
        """
        return pulumi.get(self, "region_ids")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class DdosPolicyDdosRulePacketFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packetFilters":
            suggest = "packet_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdosPolicyDdosRulePacketFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdosPolicyDdosRulePacketFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdosPolicyDdosRulePacketFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 packet_filters: Optional[Sequence['outputs.DdosPolicyDdosRulePacketFilterPacketFilter']] = None,
                 switch: Optional[str] = None):
        """
        :param Sequence['DdosPolicyDdosRulePacketFilterPacketFilterArgs'] packet_filters: DDoS feature filtering configuration detail.
        :param str switch: - `on`: Enable. `PacketFilters` parameter is required.- `off`: Disable.
        """
        if packet_filters is not None:
            pulumi.set(__self__, "packet_filters", packet_filters)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="packetFilters")
    def packet_filters(self) -> Optional[Sequence['outputs.DdosPolicyDdosRulePacketFilterPacketFilter']]:
        """
        DDoS feature filtering configuration detail.
        """
        return pulumi.get(self, "packet_filters")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        - `on`: Enable. `PacketFilters` parameter is required.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class DdosPolicyDdosRulePacketFilterPacketFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dportEnd":
            suggest = "dport_end"
        elif key == "dportStart":
            suggest = "dport_start"
        elif key == "isNot":
            suggest = "is_not"
        elif key == "isNot2":
            suggest = "is_not2"
        elif key == "matchBegin":
            suggest = "match_begin"
        elif key == "matchBegin2":
            suggest = "match_begin2"
        elif key == "matchLogic":
            suggest = "match_logic"
        elif key == "matchType":
            suggest = "match_type"
        elif key == "matchType2":
            suggest = "match_type2"
        elif key == "packetMax":
            suggest = "packet_max"
        elif key == "packetMin":
            suggest = "packet_min"
        elif key == "sportEnd":
            suggest = "sport_end"
        elif key == "sportStart":
            suggest = "sport_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdosPolicyDdosRulePacketFilterPacketFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdosPolicyDdosRulePacketFilterPacketFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdosPolicyDdosRulePacketFilterPacketFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 depth: Optional[int] = None,
                 depth2: Optional[int] = None,
                 dport_end: Optional[int] = None,
                 dport_start: Optional[int] = None,
                 is_not: Optional[int] = None,
                 is_not2: Optional[int] = None,
                 match_begin: Optional[str] = None,
                 match_begin2: Optional[str] = None,
                 match_logic: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_type2: Optional[str] = None,
                 offset: Optional[int] = None,
                 offset2: Optional[int] = None,
                 packet_max: Optional[int] = None,
                 packet_min: Optional[int] = None,
                 protocol: Optional[str] = None,
                 sport_end: Optional[int] = None,
                 sport_start: Optional[int] = None,
                 str: Optional[str] = None,
                 str2: Optional[str] = None):
        """
        :param str action: Action to take. Valid values: `drop`, `transmit`, `drop_block`, `forward`.
        :param int depth: Packet character depth to check of feature 1. Valid value range: 1-1500.
        :param int depth2: Packet character depth to check of feature 2. Valid value range: 1-1500.
        :param int dport_end: End of the dest port range. Valid value range: 0-65535.
        :param int dport_start: Start of the dest port range. Valid value range: 0-65535.
        :param int is_not: Negate the match condition of feature 1. Valid values:- `0`: match.- `1`: not match.
        :param int is_not2: Negate the match condition of feature 2. Valid values:- `0`: match.- `1`: not match.
        :param str match_begin: Packet layer for matching begin of feature 1. Valid values:- `begin_l5`: matching from packet payload.- `begin_l4`: matching from TCP/UDP header.- `begin_l3`: matching from IP header.
        :param str match_begin2: Packet layer for matching begin of feature 2. Valid values:- `begin_l5`: matching from packet payload.- `begin_l4`: matching from TCP/UDP header.- `begin_l3`: matching from IP header.
        :param str match_logic: Relation between multi features. Valid values: `and`, `or`, `none` (only feature 1 is used).
        :param str match_type: Match type of feature 1. Valid values:- `pcre`: regex expression.- `sunday`: string match.
        :param str match_type2: Match type of feature 2. Valid values:- `pcre`: regex expression.- `sunday`: string match.
        :param int offset: Offset of feature 1. Valid value range: 1-1500.
        :param int offset2: Offset of feature 2. Valid value range: 1-1500.
        :param int packet_max: Max packet size. Valid value range: 0-1500.
        :param int packet_min: Min packet size. Valid value range: 0-1500.
        :param str protocol: Valid value: `tcp`, `udp`, `icmp`, `all`.
        :param int sport_end: End of the source port range. Valid value range: 0-65535.
        :param int sport_start: Start of the source port range. Valid value range: 0-65535.
        :param str str: Regex expression or string to match.
        :param str str2: Regex expression or string to match.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if depth is not None:
            pulumi.set(__self__, "depth", depth)
        if depth2 is not None:
            pulumi.set(__self__, "depth2", depth2)
        if dport_end is not None:
            pulumi.set(__self__, "dport_end", dport_end)
        if dport_start is not None:
            pulumi.set(__self__, "dport_start", dport_start)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)
        if is_not2 is not None:
            pulumi.set(__self__, "is_not2", is_not2)
        if match_begin is not None:
            pulumi.set(__self__, "match_begin", match_begin)
        if match_begin2 is not None:
            pulumi.set(__self__, "match_begin2", match_begin2)
        if match_logic is not None:
            pulumi.set(__self__, "match_logic", match_logic)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_type2 is not None:
            pulumi.set(__self__, "match_type2", match_type2)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if offset2 is not None:
            pulumi.set(__self__, "offset2", offset2)
        if packet_max is not None:
            pulumi.set(__self__, "packet_max", packet_max)
        if packet_min is not None:
            pulumi.set(__self__, "packet_min", packet_min)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sport_end is not None:
            pulumi.set(__self__, "sport_end", sport_end)
        if sport_start is not None:
            pulumi.set(__self__, "sport_start", sport_start)
        if str is not None:
            pulumi.set(__self__, "str", str)
        if str2 is not None:
            pulumi.set(__self__, "str2", str2)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action to take. Valid values: `drop`, `transmit`, `drop_block`, `forward`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def depth(self) -> Optional[int]:
        """
        Packet character depth to check of feature 1. Valid value range: 1-1500.
        """
        return pulumi.get(self, "depth")

    @property
    @pulumi.getter
    def depth2(self) -> Optional[int]:
        """
        Packet character depth to check of feature 2. Valid value range: 1-1500.
        """
        return pulumi.get(self, "depth2")

    @property
    @pulumi.getter(name="dportEnd")
    def dport_end(self) -> Optional[int]:
        """
        End of the dest port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "dport_end")

    @property
    @pulumi.getter(name="dportStart")
    def dport_start(self) -> Optional[int]:
        """
        Start of the dest port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "dport_start")

    @property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[int]:
        """
        Negate the match condition of feature 1. Valid values:- `0`: match.- `1`: not match.
        """
        return pulumi.get(self, "is_not")

    @property
    @pulumi.getter(name="isNot2")
    def is_not2(self) -> Optional[int]:
        """
        Negate the match condition of feature 2. Valid values:- `0`: match.- `1`: not match.
        """
        return pulumi.get(self, "is_not2")

    @property
    @pulumi.getter(name="matchBegin")
    def match_begin(self) -> Optional[str]:
        """
        Packet layer for matching begin of feature 1. Valid values:- `begin_l5`: matching from packet payload.- `begin_l4`: matching from TCP/UDP header.- `begin_l3`: matching from IP header.
        """
        return pulumi.get(self, "match_begin")

    @property
    @pulumi.getter(name="matchBegin2")
    def match_begin2(self) -> Optional[str]:
        """
        Packet layer for matching begin of feature 2. Valid values:- `begin_l5`: matching from packet payload.- `begin_l4`: matching from TCP/UDP header.- `begin_l3`: matching from IP header.
        """
        return pulumi.get(self, "match_begin2")

    @property
    @pulumi.getter(name="matchLogic")
    def match_logic(self) -> Optional[str]:
        """
        Relation between multi features. Valid values: `and`, `or`, `none` (only feature 1 is used).
        """
        return pulumi.get(self, "match_logic")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        """
        Match type of feature 1. Valid values:- `pcre`: regex expression.- `sunday`: string match.
        """
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchType2")
    def match_type2(self) -> Optional[str]:
        """
        Match type of feature 2. Valid values:- `pcre`: regex expression.- `sunday`: string match.
        """
        return pulumi.get(self, "match_type2")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        """
        Offset of feature 1. Valid value range: 1-1500.
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def offset2(self) -> Optional[int]:
        """
        Offset of feature 2. Valid value range: 1-1500.
        """
        return pulumi.get(self, "offset2")

    @property
    @pulumi.getter(name="packetMax")
    def packet_max(self) -> Optional[int]:
        """
        Max packet size. Valid value range: 0-1500.
        """
        return pulumi.get(self, "packet_max")

    @property
    @pulumi.getter(name="packetMin")
    def packet_min(self) -> Optional[int]:
        """
        Min packet size. Valid value range: 0-1500.
        """
        return pulumi.get(self, "packet_min")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Valid value: `tcp`, `udp`, `icmp`, `all`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="sportEnd")
    def sport_end(self) -> Optional[int]:
        """
        End of the source port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "sport_end")

    @property
    @pulumi.getter(name="sportStart")
    def sport_start(self) -> Optional[int]:
        """
        Start of the source port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "sport_start")

    @property
    @pulumi.getter
    def str(self) -> Optional[str]:
        """
        Regex expression or string to match.
        """
        return pulumi.get(self, "str")

    @property
    @pulumi.getter
    def str2(self) -> Optional[str]:
        """
        Regex expression or string to match.
        """
        return pulumi.get(self, "str2")


@pulumi.output_type
class DdosPolicyDdosRuleSpeedLimit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fluxLimit":
            suggest = "flux_limit"
        elif key == "packageLimit":
            suggest = "package_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdosPolicyDdosRuleSpeedLimit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdosPolicyDdosRuleSpeedLimit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdosPolicyDdosRuleSpeedLimit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flux_limit: Optional[str] = None,
                 package_limit: Optional[str] = None):
        """
        :param str flux_limit: Limit the number of fluxes. Valid range: 1 bps-10000 Gbps, 0 means no limitation, supported units: `pps`,`Kpps`,`Mpps`,`Gpps`.
        :param str package_limit: Limit the number of packages. Valid range: 1 pps-10000 Gpps, 0 means no limitation, supported units: `pps`,`Kpps`,`Mpps`,`Gpps`.
        """
        if flux_limit is not None:
            pulumi.set(__self__, "flux_limit", flux_limit)
        if package_limit is not None:
            pulumi.set(__self__, "package_limit", package_limit)

    @property
    @pulumi.getter(name="fluxLimit")
    def flux_limit(self) -> Optional[str]:
        """
        Limit the number of fluxes. Valid range: 1 bps-10000 Gbps, 0 means no limitation, supported units: `pps`,`Kpps`,`Mpps`,`Gpps`.
        """
        return pulumi.get(self, "flux_limit")

    @property
    @pulumi.getter(name="packageLimit")
    def package_limit(self) -> Optional[str]:
        """
        Limit the number of packages. Valid range: 1 pps-10000 Gpps, 0 means no limitation, supported units: `pps`,`Kpps`,`Mpps`,`Gpps`.
        """
        return pulumi.get(self, "package_limit")


@pulumi.output_type
class DdosPolicyDdosRuleStatusInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "plyLevel":
            suggest = "ply_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdosPolicyDdosRuleStatusInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdosPolicyDdosRuleStatusInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdosPolicyDdosRuleStatusInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ply_level: str):
        """
        :param str ply_level: Policy level. Valid values:- `low`: loose.- `middle`: moderate.- `high`: strict.
        """
        pulumi.set(__self__, "ply_level", ply_level)

    @property
    @pulumi.getter(name="plyLevel")
    def ply_level(self) -> str:
        """
        Policy level. Valid values:- `low`: loose.- `middle`: moderate.- `high`: strict.
        """
        return pulumi.get(self, "ply_level")


@pulumi.output_type
class DnsSecDnssec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dS":
            suggest = "d_s"
        elif key == "digestAlgorithm":
            suggest = "digest_algorithm"
        elif key == "digestType":
            suggest = "digest_type"
        elif key == "keyTag":
            suggest = "key_tag"
        elif key == "keyType":
            suggest = "key_type"
        elif key == "publicKey":
            suggest = "public_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DnsSecDnssec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DnsSecDnssec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DnsSecDnssec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 d_s: Optional[str] = None,
                 digest: Optional[str] = None,
                 digest_algorithm: Optional[str] = None,
                 digest_type: Optional[str] = None,
                 flags: Optional[int] = None,
                 key_tag: Optional[int] = None,
                 key_type: Optional[str] = None,
                 public_key: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if d_s is not None:
            pulumi.set(__self__, "d_s", d_s)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if digest_algorithm is not None:
            pulumi.set(__self__, "digest_algorithm", digest_algorithm)
        if digest_type is not None:
            pulumi.set(__self__, "digest_type", digest_type)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if key_tag is not None:
            pulumi.set(__self__, "key_tag", key_tag)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="dS")
    def d_s(self) -> Optional[str]:
        return pulumi.get(self, "d_s")

    @property
    @pulumi.getter
    def digest(self) -> Optional[str]:
        return pulumi.get(self, "digest")

    @property
    @pulumi.getter(name="digestAlgorithm")
    def digest_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "digest_algorithm")

    @property
    @pulumi.getter(name="digestType")
    def digest_type(self) -> Optional[str]:
        return pulumi.get(self, "digest_type")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter(name="keyTag")
    def key_tag(self) -> Optional[int]:
        return pulumi.get(self, "key_tag")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[str]:
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")


@pulumi.output_type
class OriginGroupOriginRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateParameters":
            suggest = "private_parameters"
        elif key == "recordId":
            suggest = "record_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OriginGroupOriginRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OriginGroupOriginRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OriginGroupOriginRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 record: str,
                 areas: Optional[Sequence[str]] = None,
                 private: Optional[bool] = None,
                 private_parameters: Optional[Sequence['outputs.OriginGroupOriginRecordPrivateParameter']] = None,
                 record_id: Optional[str] = None,
                 weight: Optional[int] = None):
        """
        :param int port: Port of the origin site. Valid value range: 1-65535.
        :param str record: Record value, which could be an IPv4/IPv6 address or a domain.
        :param Sequence[str] areas: Indicating origin site&#39;s area when `Type` field is `area`. An empty List indicate the default area. Valid value:- Asia, Americas, Europe, Africa or Oceania.- 2 characters ISO 3166 area code.
        :param bool private: Whether origin site is using private authentication. Only valid when `OriginType` is `third_party`.
        :param Sequence['OriginGroupOriginRecordPrivateParameterArgs'] private_parameters: Parameters for private authentication. Only valid when `Private` is `true`.
        :param int weight: Indicating origin site&#39;s weight when `Type` field is `weight`. Valid value range: 1-100. Sum of all weights should be 100.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "record", record)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if private_parameters is not None:
            pulumi.set(__self__, "private_parameters", private_parameters)
        if record_id is not None:
            pulumi.set(__self__, "record_id", record_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port of the origin site. Valid value range: 1-65535.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def record(self) -> str:
        """
        Record value, which could be an IPv4/IPv6 address or a domain.
        """
        return pulumi.get(self, "record")

    @property
    @pulumi.getter
    def areas(self) -> Optional[Sequence[str]]:
        """
        Indicating origin site&#39;s area when `Type` field is `area`. An empty List indicate the default area. Valid value:- Asia, Americas, Europe, Africa or Oceania.- 2 characters ISO 3166 area code.
        """
        return pulumi.get(self, "areas")

    @property
    @pulumi.getter
    def private(self) -> Optional[bool]:
        """
        Whether origin site is using private authentication. Only valid when `OriginType` is `third_party`.
        """
        return pulumi.get(self, "private")

    @property
    @pulumi.getter(name="privateParameters")
    def private_parameters(self) -> Optional[Sequence['outputs.OriginGroupOriginRecordPrivateParameter']]:
        """
        Parameters for private authentication. Only valid when `Private` is `true`.
        """
        return pulumi.get(self, "private_parameters")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[str]:
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Indicating origin site&#39;s weight when `Type` field is `weight`. Valid value range: 1-100. Sum of all weights should be 100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class OriginGroupOriginRecordPrivateParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Parameter Name. Valid values:- AccessKeyId:Access Key ID.- SecretAccessKey:Secret Access Key.
        :param str value: Parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter Name. Valid values:- AccessKeyId:Access Key ID.- SecretAccessKey:Secret Access Key.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RuleEnginePriorityRulesPriority(dict):
    def __init__(__self__, *,
                 index: Optional[int] = None,
                 value: Optional[str] = None):
        """
        :param int index: Priority order of rules.
        :param str value: Priority of rules id.
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        Priority order of rules.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Priority of rules id.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RuleEngineRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subRules":
            suggest = "sub_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Sequence['outputs.RuleEngineRuleAction'],
                 ors: Sequence['outputs.RuleEngineRuleOr'],
                 sub_rules: Optional[Sequence['outputs.RuleEngineRuleSubRule']] = None):
        """
        :param Sequence['RuleEngineRuleActionArgs'] actions: Actions list of the rule. See details in data source `rule_engine_setting`.
        :param Sequence['RuleEngineRuleOrArgs'] ors: OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        :param Sequence['RuleEngineRuleSubRuleArgs'] sub_rules: Actions list of the rule. See details in data source `rule_engine_setting`.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "ors", ors)
        if sub_rules is not None:
            pulumi.set(__self__, "sub_rules", sub_rules)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.RuleEngineRuleAction']:
        """
        Actions list of the rule. See details in data source `rule_engine_setting`.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def ors(self) -> Sequence['outputs.RuleEngineRuleOr']:
        """
        OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        """
        return pulumi.get(self, "ors")

    @property
    @pulumi.getter(name="subRules")
    def sub_rules(self) -> Optional[Sequence['outputs.RuleEngineRuleSubRule']]:
        """
        Actions list of the rule. See details in data source `rule_engine_setting`.
        """
        return pulumi.get(self, "sub_rules")


@pulumi.output_type
class RuleEngineRuleAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeAction":
            suggest = "code_action"
        elif key == "normalAction":
            suggest = "normal_action"
        elif key == "rewriteAction":
            suggest = "rewrite_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_action: Optional['outputs.RuleEngineRuleActionCodeAction'] = None,
                 normal_action: Optional['outputs.RuleEngineRuleActionNormalAction'] = None,
                 rewrite_action: Optional['outputs.RuleEngineRuleActionRewriteAction'] = None):
        """
        :param 'RuleEngineRuleActionCodeActionArgs' code_action: Define a code action.
        :param 'RuleEngineRuleActionNormalActionArgs' normal_action: Define a normal action.
        :param 'RuleEngineRuleActionRewriteActionArgs' rewrite_action: Define a rewrite action.
        """
        if code_action is not None:
            pulumi.set(__self__, "code_action", code_action)
        if normal_action is not None:
            pulumi.set(__self__, "normal_action", normal_action)
        if rewrite_action is not None:
            pulumi.set(__self__, "rewrite_action", rewrite_action)

    @property
    @pulumi.getter(name="codeAction")
    def code_action(self) -> Optional['outputs.RuleEngineRuleActionCodeAction']:
        """
        Define a code action.
        """
        return pulumi.get(self, "code_action")

    @property
    @pulumi.getter(name="normalAction")
    def normal_action(self) -> Optional['outputs.RuleEngineRuleActionNormalAction']:
        """
        Define a normal action.
        """
        return pulumi.get(self, "normal_action")

    @property
    @pulumi.getter(name="rewriteAction")
    def rewrite_action(self) -> Optional['outputs.RuleEngineRuleActionRewriteAction']:
        """
        Define a rewrite action.
        """
        return pulumi.get(self, "rewrite_action")


@pulumi.output_type
class RuleEngineRuleActionCodeAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleActionCodeActionParameter']):
        """
        :param str action: Action name.
        :param Sequence['RuleEngineRuleActionCodeActionParameterArgs'] parameters: Action parameters.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleActionCodeActionParameter']:
        """
        Action parameters.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleActionCodeActionParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleActionCodeActionParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleActionCodeActionParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleActionCodeActionParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 status_code: int,
                 values: Sequence[str]):
        """
        :param str name: Parameter Name.
        :param int status_code: HTTP status code to use.
        :param Sequence[str] values: Parameter Values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        """
        HTTP status code to use.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter Values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleActionNormalAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleActionNormalActionParameter']):
        """
        :param str action: Action name.
        :param Sequence['RuleEngineRuleActionNormalActionParameterArgs'] parameters: Action parameters.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleActionNormalActionParameter']:
        """
        Action parameters.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleActionNormalActionParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Parameter Name.
        :param Sequence[str] values: Parameter Values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter Values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleActionRewriteAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleActionRewriteActionParameter']):
        """
        :param str action: Action name.
        :param Sequence['RuleEngineRuleActionRewriteActionParameterArgs'] parameters: Action parameters.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleActionRewriteActionParameter']:
        """
        Action parameters.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleActionRewriteActionParameter(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 values: Sequence[str]):
        """
        :param str action: Action to take on the HEADER. Valid values: `add`, `del`, `set`.
        :param str name: Parameter Name.
        :param Sequence[str] values: Parameter Values.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action to take on the HEADER. Valid values: `add`, `del`, `set`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter Values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleOr(dict):
    def __init__(__self__, *,
                 ands: Sequence['outputs.RuleEngineRuleOrAnd']):
        """
        :param Sequence['RuleEngineRuleOrAndArgs'] ands: AND Conditions list of the rule. Rule would be triggered if all conditions are true.
        """
        pulumi.set(__self__, "ands", ands)

    @property
    @pulumi.getter
    def ands(self) -> Sequence['outputs.RuleEngineRuleOrAnd']:
        """
        AND Conditions list of the rule. Rule would be triggered if all conditions are true.
        """
        return pulumi.get(self, "ands")


@pulumi.output_type
class RuleEngineRuleOrAnd(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreCase":
            suggest = "ignore_case"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleOrAnd. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleOrAnd.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleOrAnd.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: str,
                 target: str,
                 values: Sequence[str],
                 ignore_case: Optional[bool] = None,
                 name: Optional[str] = None):
        """
        :param str operator: Condition operator. Valid values are `equal`, `notequal`.
        :param str target: Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
        :param Sequence[str] values: Condition Value.
        :param bool ignore_case: Whether to ignore the case of the parameter value, the default value is false.
        :param str name: The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "values", values)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Condition operator. Valid values are `equal`, `notequal`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Condition Value.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[bool]:
        """
        Whether to ignore the case of the parameter value, the default value is false.
        """
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RuleEngineRuleSubRule(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.RuleEngineRuleSubRuleRule'],
                 tags: Optional[Sequence[str]] = None):
        """
        :param Sequence['RuleEngineRuleSubRuleRuleArgs'] rules: Rule items list.
        :param Sequence[str] tags: rule tag list.
        """
        pulumi.set(__self__, "rules", rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.RuleEngineRuleSubRuleRule']:
        """
        Rule items list.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        rule tag list.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class RuleEngineRuleSubRuleRule(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.RuleEngineRuleSubRuleRuleAction'],
                 ors: Sequence['outputs.RuleEngineRuleSubRuleRuleOr']):
        """
        :param Sequence['RuleEngineRuleSubRuleRuleActionArgs'] actions: Actions list of the rule. See details in data source `rule_engine_setting`.
        :param Sequence['RuleEngineRuleSubRuleRuleOrArgs'] ors: OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "ors", ors)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleAction']:
        """
        Actions list of the rule. See details in data source `rule_engine_setting`.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def ors(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleOr']:
        """
        OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        """
        return pulumi.get(self, "ors")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeAction":
            suggest = "code_action"
        elif key == "normalAction":
            suggest = "normal_action"
        elif key == "rewriteAction":
            suggest = "rewrite_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleSubRuleRuleAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleSubRuleRuleAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleSubRuleRuleAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_action: Optional['outputs.RuleEngineRuleSubRuleRuleActionCodeAction'] = None,
                 normal_action: Optional['outputs.RuleEngineRuleSubRuleRuleActionNormalAction'] = None,
                 rewrite_action: Optional['outputs.RuleEngineRuleSubRuleRuleActionRewriteAction'] = None):
        """
        :param 'RuleEngineRuleSubRuleRuleActionCodeActionArgs' code_action: Define a code action.
        :param 'RuleEngineRuleSubRuleRuleActionNormalActionArgs' normal_action: Define a normal action.
        :param 'RuleEngineRuleSubRuleRuleActionRewriteActionArgs' rewrite_action: Define a rewrite action.
        """
        if code_action is not None:
            pulumi.set(__self__, "code_action", code_action)
        if normal_action is not None:
            pulumi.set(__self__, "normal_action", normal_action)
        if rewrite_action is not None:
            pulumi.set(__self__, "rewrite_action", rewrite_action)

    @property
    @pulumi.getter(name="codeAction")
    def code_action(self) -> Optional['outputs.RuleEngineRuleSubRuleRuleActionCodeAction']:
        """
        Define a code action.
        """
        return pulumi.get(self, "code_action")

    @property
    @pulumi.getter(name="normalAction")
    def normal_action(self) -> Optional['outputs.RuleEngineRuleSubRuleRuleActionNormalAction']:
        """
        Define a normal action.
        """
        return pulumi.get(self, "normal_action")

    @property
    @pulumi.getter(name="rewriteAction")
    def rewrite_action(self) -> Optional['outputs.RuleEngineRuleSubRuleRuleActionRewriteAction']:
        """
        Define a rewrite action.
        """
        return pulumi.get(self, "rewrite_action")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionCodeAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleSubRuleRuleActionCodeActionParameter']):
        """
        :param str action: Action name.
        :param Sequence['RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs'] parameters: Action parameters.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleActionCodeActionParameter']:
        """
        Action parameters.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionCodeActionParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleSubRuleRuleActionCodeActionParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleSubRuleRuleActionCodeActionParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleSubRuleRuleActionCodeActionParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 status_code: int,
                 values: Sequence[str]):
        """
        :param str name: Parameter Name.
        :param int status_code: HTTP status code to use.
        :param Sequence[str] values: Parameter Values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        """
        HTTP status code to use.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter Values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionNormalAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleSubRuleRuleActionNormalActionParameter']):
        """
        :param str action: Action name.
        :param Sequence['RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs'] parameters: Action parameters.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleActionNormalActionParameter']:
        """
        Action parameters.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionNormalActionParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Parameter Name.
        :param Sequence[str] values: Parameter Values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter Values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionRewriteAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleSubRuleRuleActionRewriteActionParameter']):
        """
        :param str action: Action name.
        :param Sequence['RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs'] parameters: Action parameters.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleActionRewriteActionParameter']:
        """
        Action parameters.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionRewriteActionParameter(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 values: Sequence[str]):
        """
        :param str action: Action to take on the HEADER. Valid values: `add`, `del`, `set`.
        :param str name: Parameter Name.
        :param Sequence[str] values: Parameter Values.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action to take on the HEADER. Valid values: `add`, `del`, `set`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter Values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleOr(dict):
    def __init__(__self__, *,
                 ands: Sequence['outputs.RuleEngineRuleSubRuleRuleOrAnd']):
        """
        :param Sequence['RuleEngineRuleSubRuleRuleOrAndArgs'] ands: AND Conditions list of the rule. Rule would be triggered if all conditions are true.
        """
        pulumi.set(__self__, "ands", ands)

    @property
    @pulumi.getter
    def ands(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleOrAnd']:
        """
        AND Conditions list of the rule. Rule would be triggered if all conditions are true.
        """
        return pulumi.get(self, "ands")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleOrAnd(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreCase":
            suggest = "ignore_case"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleSubRuleRuleOrAnd. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleSubRuleRuleOrAnd.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleSubRuleRuleOrAnd.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: str,
                 target: str,
                 values: Sequence[str],
                 ignore_case: Optional[bool] = None,
                 name: Optional[str] = None):
        """
        :param str operator: Condition operator. Valid values are `equal`, `notequal`.
        :param str target: Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
        :param Sequence[str] values: Condition Value.
        :param bool ignore_case: Whether to ignore the case of the parameter value, the default value is false.
        :param str name: The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "values", values)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Condition operator. Valid values are `equal`, `notequal`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Condition Value.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[bool]:
        """
        Whether to ignore the case of the parameter value, the default value is false.
        """
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SecurityPolicyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclConfig":
            suggest = "acl_config"
        elif key == "botConfig":
            suggest = "bot_config"
        elif key == "dropPageConfig":
            suggest = "drop_page_config"
        elif key == "exceptConfig":
            suggest = "except_config"
        elif key == "ipTableConfig":
            suggest = "ip_table_config"
        elif key == "rateLimitConfig":
            suggest = "rate_limit_config"
        elif key == "switchConfig":
            suggest = "switch_config"
        elif key == "wafConfig":
            suggest = "waf_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_config: Optional['outputs.SecurityPolicyConfigAclConfig'] = None,
                 bot_config: Optional['outputs.SecurityPolicyConfigBotConfig'] = None,
                 drop_page_config: Optional['outputs.SecurityPolicyConfigDropPageConfig'] = None,
                 except_config: Optional['outputs.SecurityPolicyConfigExceptConfig'] = None,
                 ip_table_config: Optional['outputs.SecurityPolicyConfigIpTableConfig'] = None,
                 rate_limit_config: Optional['outputs.SecurityPolicyConfigRateLimitConfig'] = None,
                 switch_config: Optional['outputs.SecurityPolicyConfigSwitchConfig'] = None,
                 waf_config: Optional['outputs.SecurityPolicyConfigWafConfig'] = None):
        """
        :param 'SecurityPolicyConfigAclConfigArgs' acl_config: ACL configuration.
        :param 'SecurityPolicyConfigBotConfigArgs' bot_config: Bot Configuration.
        :param 'SecurityPolicyConfigDropPageConfigArgs' drop_page_config: Custom drop page configuration.
        :param 'SecurityPolicyConfigExceptConfigArgs' except_config: Exception rule configuration.
        :param 'SecurityPolicyConfigIpTableConfigArgs' ip_table_config: Basic access control.
        :param 'SecurityPolicyConfigRateLimitConfigArgs' rate_limit_config: RateLimit Configuration.
        :param 'SecurityPolicyConfigSwitchConfigArgs' switch_config: Main switch of 7-layer security.
        :param 'SecurityPolicyConfigWafConfigArgs' waf_config: WAF (Web Application Firewall) Configuration.
        """
        if acl_config is not None:
            pulumi.set(__self__, "acl_config", acl_config)
        if bot_config is not None:
            pulumi.set(__self__, "bot_config", bot_config)
        if drop_page_config is not None:
            pulumi.set(__self__, "drop_page_config", drop_page_config)
        if except_config is not None:
            pulumi.set(__self__, "except_config", except_config)
        if ip_table_config is not None:
            pulumi.set(__self__, "ip_table_config", ip_table_config)
        if rate_limit_config is not None:
            pulumi.set(__self__, "rate_limit_config", rate_limit_config)
        if switch_config is not None:
            pulumi.set(__self__, "switch_config", switch_config)
        if waf_config is not None:
            pulumi.set(__self__, "waf_config", waf_config)

    @property
    @pulumi.getter(name="aclConfig")
    def acl_config(self) -> Optional['outputs.SecurityPolicyConfigAclConfig']:
        """
        ACL configuration.
        """
        return pulumi.get(self, "acl_config")

    @property
    @pulumi.getter(name="botConfig")
    def bot_config(self) -> Optional['outputs.SecurityPolicyConfigBotConfig']:
        """
        Bot Configuration.
        """
        return pulumi.get(self, "bot_config")

    @property
    @pulumi.getter(name="dropPageConfig")
    def drop_page_config(self) -> Optional['outputs.SecurityPolicyConfigDropPageConfig']:
        """
        Custom drop page configuration.
        """
        return pulumi.get(self, "drop_page_config")

    @property
    @pulumi.getter(name="exceptConfig")
    def except_config(self) -> Optional['outputs.SecurityPolicyConfigExceptConfig']:
        """
        Exception rule configuration.
        """
        return pulumi.get(self, "except_config")

    @property
    @pulumi.getter(name="ipTableConfig")
    def ip_table_config(self) -> Optional['outputs.SecurityPolicyConfigIpTableConfig']:
        """
        Basic access control.
        """
        return pulumi.get(self, "ip_table_config")

    @property
    @pulumi.getter(name="rateLimitConfig")
    def rate_limit_config(self) -> Optional['outputs.SecurityPolicyConfigRateLimitConfig']:
        """
        RateLimit Configuration.
        """
        return pulumi.get(self, "rate_limit_config")

    @property
    @pulumi.getter(name="switchConfig")
    def switch_config(self) -> Optional['outputs.SecurityPolicyConfigSwitchConfig']:
        """
        Main switch of 7-layer security.
        """
        return pulumi.get(self, "switch_config")

    @property
    @pulumi.getter(name="wafConfig")
    def waf_config(self) -> Optional['outputs.SecurityPolicyConfigWafConfig']:
        """
        WAF (Web Application Firewall) Configuration.
        """
        return pulumi.get(self, "waf_config")


@pulumi.output_type
class SecurityPolicyConfigAclConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userRules":
            suggest = "user_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigAclConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigAclConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigAclConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 user_rules: Optional[Sequence['outputs.SecurityPolicyConfigAclConfigUserRule']] = None):
        """
        :param str switch: - `on`: Enable.- `off`: Disable.
        :param Sequence['SecurityPolicyConfigAclConfigUserRuleArgs'] user_rules: Custom configuration.
        """
        pulumi.set(__self__, "switch", switch)
        if user_rules is not None:
            pulumi.set(__self__, "user_rules", user_rules)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="userRules")
    def user_rules(self) -> Optional[Sequence['outputs.SecurityPolicyConfigAclConfigUserRule']]:
        """
        Custom configuration.
        """
        return pulumi.get(self, "user_rules")


@pulumi.output_type
class SecurityPolicyConfigAclConfigUserRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"
        elif key == "rulePriority":
            suggest = "rule_priority"
        elif key == "ruleStatus":
            suggest = "rule_status"
        elif key == "pageId":
            suggest = "page_id"
        elif key == "punishTime":
            suggest = "punish_time"
        elif key == "punishTimeUnit":
            suggest = "punish_time_unit"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "responseCode":
            suggest = "response_code"
        elif key == "ruleId":
            suggest = "rule_id"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigAclConfigUserRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigAclConfigUserRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigAclConfigUserRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 conditions: Sequence['outputs.SecurityPolicyConfigAclConfigUserRuleCondition'],
                 rule_name: str,
                 rule_priority: int,
                 rule_status: str,
                 name: Optional[str] = None,
                 page_id: Optional[int] = None,
                 punish_time: Optional[int] = None,
                 punish_time_unit: Optional[str] = None,
                 redirect_url: Optional[str] = None,
                 response_code: Optional[int] = None,
                 rule_id: Optional[int] = None,
                 update_time: Optional[str] = None):
        """
        :param str action: Valid values: `monitor`, `drop`.
        :param Sequence['SecurityPolicyConfigAclConfigUserRuleConditionArgs'] conditions: Conditions of the rule.
        :param str rule_name: Rule Name.
        :param int rule_priority: Priority of the rule. Valid value range: 1-100.
        :param str rule_status: Status of the rule. Valid values: `on`, `off`, `hour`.
        :param str name: Name of the custom response page.
        :param int page_id: ID of the custom response page.
        :param int punish_time: Punish time, Valid value range: 0-2 days.
        :param str punish_time_unit: Time unit of the punish time. Valid values: `second`, `minutes`, `hour`.
        :param str redirect_url: Redirect target URL, must be an sub-domain from one of the account&#39;s site.
        :param int response_code: Response code to use when redirecting.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_priority", rule_priority)
        pulumi.set(__self__, "rule_status", rule_status)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if page_id is not None:
            pulumi.set(__self__, "page_id", page_id)
        if punish_time is not None:
            pulumi.set(__self__, "punish_time", punish_time)
        if punish_time_unit is not None:
            pulumi.set(__self__, "punish_time_unit", punish_time_unit)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Valid values: `monitor`, `drop`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.SecurityPolicyConfigAclConfigUserRuleCondition']:
        """
        Conditions of the rule.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Rule Name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> int:
        """
        Priority of the rule. Valid value range: 1-100.
        """
        return pulumi.get(self, "rule_priority")

    @property
    @pulumi.getter(name="ruleStatus")
    def rule_status(self) -> str:
        """
        Status of the rule. Valid values: `on`, `off`, `hour`.
        """
        return pulumi.get(self, "rule_status")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the custom response page.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> Optional[int]:
        """
        ID of the custom response page.
        """
        return pulumi.get(self, "page_id")

    @property
    @pulumi.getter(name="punishTime")
    def punish_time(self) -> Optional[int]:
        """
        Punish time, Valid value range: 0-2 days.
        """
        return pulumi.get(self, "punish_time")

    @property
    @pulumi.getter(name="punishTimeUnit")
    def punish_time_unit(self) -> Optional[str]:
        """
        Time unit of the punish time. Valid values: `second`, `minutes`, `hour`.
        """
        return pulumi.get(self, "punish_time_unit")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        Redirect target URL, must be an sub-domain from one of the account&#39;s site.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        """
        Response code to use when redirecting.
        """
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class SecurityPolicyConfigAclConfigUserRuleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchContent":
            suggest = "match_content"
        elif key == "matchFrom":
            suggest = "match_from"
        elif key == "matchParam":
            suggest = "match_param"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigAclConfigUserRuleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigAclConfigUserRuleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigAclConfigUserRuleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_content: str,
                 match_from: str,
                 match_param: str,
                 operator: str):
        """
        :param str match_content: Content to match.
        :param str match_from: Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sip_proto`: Network protocol of the request.
        :param str match_param: Parameter for match item. For example, when match from header, match parameter can be set to a header key.
        :param str operator: Valid values:- `equal`: string equal.- `not_equal`: string not equal.- `include`: string include.- `not_include`: string not include.- `match`: ip match.- `not_match`: ip not match.- `include_area`: area include.- `is_empty`: field existed but empty.- `not_exists`: field is not existed.- `regexp`: regex match.- `len_gt`: value greater than.- `len_lt`: value less than.- `len_eq`: value equal.- `match_prefix`: string prefix match.- `match_suffix`: string suffix match.- `wildcard`: wildcard match.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_from", match_from)
        pulumi.set(__self__, "match_param", match_param)
        pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> str:
        """
        Content to match.
        """
        return pulumi.get(self, "match_content")

    @property
    @pulumi.getter(name="matchFrom")
    def match_from(self) -> str:
        """
        Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sip_proto`: Network protocol of the request.
        """
        return pulumi.get(self, "match_from")

    @property
    @pulumi.getter(name="matchParam")
    def match_param(self) -> str:
        """
        Parameter for match item. For example, when match from header, match parameter can be set to a header key.
        """
        return pulumi.get(self, "match_param")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Valid values:- `equal`: string equal.- `not_equal`: string not equal.- `include`: string include.- `not_include`: string not include.- `match`: ip match.- `not_match`: ip not match.- `include_area`: area include.- `is_empty`: field existed but empty.- `not_exists`: field is not existed.- `regexp`: regex match.- `len_gt`: value greater than.- `len_lt`: value less than.- `len_eq`: value equal.- `match_prefix`: string prefix match.- `match_suffix`: string suffix match.- `wildcard`: wildcard match.
        """
        return pulumi.get(self, "operator")


@pulumi.output_type
class SecurityPolicyConfigBotConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intelligenceRule":
            suggest = "intelligence_rule"
        elif key == "managedRule":
            suggest = "managed_rule"
        elif key == "portraitRule":
            suggest = "portrait_rule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigBotConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigBotConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigBotConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 intelligence_rule: Optional['outputs.SecurityPolicyConfigBotConfigIntelligenceRule'] = None,
                 managed_rule: Optional['outputs.SecurityPolicyConfigBotConfigManagedRule'] = None,
                 portrait_rule: Optional['outputs.SecurityPolicyConfigBotConfigPortraitRule'] = None,
                 switch: Optional[str] = None):
        """
        :param 'SecurityPolicyConfigBotConfigIntelligenceRuleArgs' intelligence_rule: Bot intelligent rule configuration.
        :param 'SecurityPolicyConfigBotConfigManagedRuleArgs' managed_rule: Preset rules.
        :param 'SecurityPolicyConfigBotConfigPortraitRuleArgs' portrait_rule: Portrait rule.
        :param str switch: - `on`: Enable.- `off`: Disable.
        """
        if intelligence_rule is not None:
            pulumi.set(__self__, "intelligence_rule", intelligence_rule)
        if managed_rule is not None:
            pulumi.set(__self__, "managed_rule", managed_rule)
        if portrait_rule is not None:
            pulumi.set(__self__, "portrait_rule", portrait_rule)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="intelligenceRule")
    def intelligence_rule(self) -> Optional['outputs.SecurityPolicyConfigBotConfigIntelligenceRule']:
        """
        Bot intelligent rule configuration.
        """
        return pulumi.get(self, "intelligence_rule")

    @property
    @pulumi.getter(name="managedRule")
    def managed_rule(self) -> Optional['outputs.SecurityPolicyConfigBotConfigManagedRule']:
        """
        Preset rules.
        """
        return pulumi.get(self, "managed_rule")

    @property
    @pulumi.getter(name="portraitRule")
    def portrait_rule(self) -> Optional['outputs.SecurityPolicyConfigBotConfigPortraitRule']:
        """
        Portrait rule.
        """
        return pulumi.get(self, "portrait_rule")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class SecurityPolicyConfigBotConfigIntelligenceRule(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.SecurityPolicyConfigBotConfigIntelligenceRuleItem']] = None,
                 switch: Optional[str] = None):
        """
        :param Sequence['SecurityPolicyConfigBotConfigIntelligenceRuleItemArgs'] items: Configuration detail.
        :param str switch: - `on`: Enable.- `off`: Disable.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.SecurityPolicyConfigBotConfigIntelligenceRuleItem']]:
        """
        Configuration detail.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class SecurityPolicyConfigBotConfigIntelligenceRuleItem(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 label: Optional[str] = None):
        """
        :param str action: Action to take. Valid values: `trans`, `monitor`, `alg`, `captcha`, `drop`.
        :param str label: Bot label, valid values: `evil_bot`, `suspect_bot`, `good_bot`, `normal`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action to take. Valid values: `trans`, `monitor`, `alg`, `captcha`, `drop`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        Bot label, valid values: `evil_bot`, `suspect_bot`, `good_bot`, `normal`.
        """
        return pulumi.get(self, "label")


@pulumi.output_type
class SecurityPolicyConfigBotConfigManagedRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "algManagedIds":
            suggest = "alg_managed_ids"
        elif key == "capManagedIds":
            suggest = "cap_managed_ids"
        elif key == "dropManagedIds":
            suggest = "drop_managed_ids"
        elif key == "monManagedIds":
            suggest = "mon_managed_ids"
        elif key == "pageId":
            suggest = "page_id"
        elif key == "punishTime":
            suggest = "punish_time"
        elif key == "punishTimeUnit":
            suggest = "punish_time_unit"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "responseCode":
            suggest = "response_code"
        elif key == "ruleId":
            suggest = "rule_id"
        elif key == "transManagedIds":
            suggest = "trans_managed_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigBotConfigManagedRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigBotConfigManagedRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigBotConfigManagedRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 alg_managed_ids: Optional[Sequence[int]] = None,
                 cap_managed_ids: Optional[Sequence[int]] = None,
                 drop_managed_ids: Optional[Sequence[int]] = None,
                 mon_managed_ids: Optional[Sequence[int]] = None,
                 name: Optional[str] = None,
                 page_id: Optional[int] = None,
                 punish_time: Optional[int] = None,
                 punish_time_unit: Optional[str] = None,
                 redirect_url: Optional[str] = None,
                 response_code: Optional[int] = None,
                 rule_id: Optional[int] = None,
                 trans_managed_ids: Optional[Sequence[int]] = None):
        """
        :param str action: Action to take. Valid values: `drop`, `trans`, `monitor`, `alg`.
        :param Sequence[int] alg_managed_ids: Rules to enable when action is `alg`. See details in data source `bot_managed_rules`.
        :param Sequence[int] cap_managed_ids: Rules to enable when action is `captcha`. See details in data source `bot_managed_rules`.
        :param Sequence[int] drop_managed_ids: Rules to enable when action is `drop`. See details in data source `bot_managed_rules`.
        :param Sequence[int] mon_managed_ids: Rules to enable when action is `monitor`. See details in data source `bot_managed_rules`.
        :param str name: Name of the custom response page.
        :param int page_id: ID of the custom response page.
        :param int punish_time: Punish time.
        :param str punish_time_unit: Time unit of the punish time.
        :param str redirect_url: Redirect target URL, must be an sub-domain from one of the account&#39;s site.
        :param int response_code: Response code to use when redirecting.
        :param Sequence[int] trans_managed_ids: Rules to enable when action is `trans`. See details in data source `bot_managed_rules`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if alg_managed_ids is not None:
            pulumi.set(__self__, "alg_managed_ids", alg_managed_ids)
        if cap_managed_ids is not None:
            pulumi.set(__self__, "cap_managed_ids", cap_managed_ids)
        if drop_managed_ids is not None:
            pulumi.set(__self__, "drop_managed_ids", drop_managed_ids)
        if mon_managed_ids is not None:
            pulumi.set(__self__, "mon_managed_ids", mon_managed_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if page_id is not None:
            pulumi.set(__self__, "page_id", page_id)
        if punish_time is not None:
            pulumi.set(__self__, "punish_time", punish_time)
        if punish_time_unit is not None:
            pulumi.set(__self__, "punish_time_unit", punish_time_unit)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if trans_managed_ids is not None:
            pulumi.set(__self__, "trans_managed_ids", trans_managed_ids)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action to take. Valid values: `drop`, `trans`, `monitor`, `alg`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="algManagedIds")
    def alg_managed_ids(self) -> Optional[Sequence[int]]:
        """
        Rules to enable when action is `alg`. See details in data source `bot_managed_rules`.
        """
        return pulumi.get(self, "alg_managed_ids")

    @property
    @pulumi.getter(name="capManagedIds")
    def cap_managed_ids(self) -> Optional[Sequence[int]]:
        """
        Rules to enable when action is `captcha`. See details in data source `bot_managed_rules`.
        """
        return pulumi.get(self, "cap_managed_ids")

    @property
    @pulumi.getter(name="dropManagedIds")
    def drop_managed_ids(self) -> Optional[Sequence[int]]:
        """
        Rules to enable when action is `drop`. See details in data source `bot_managed_rules`.
        """
        return pulumi.get(self, "drop_managed_ids")

    @property
    @pulumi.getter(name="monManagedIds")
    def mon_managed_ids(self) -> Optional[Sequence[int]]:
        """
        Rules to enable when action is `monitor`. See details in data source `bot_managed_rules`.
        """
        return pulumi.get(self, "mon_managed_ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the custom response page.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> Optional[int]:
        """
        ID of the custom response page.
        """
        return pulumi.get(self, "page_id")

    @property
    @pulumi.getter(name="punishTime")
    def punish_time(self) -> Optional[int]:
        """
        Punish time.
        """
        return pulumi.get(self, "punish_time")

    @property
    @pulumi.getter(name="punishTimeUnit")
    def punish_time_unit(self) -> Optional[str]:
        """
        Time unit of the punish time.
        """
        return pulumi.get(self, "punish_time_unit")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        Redirect target URL, must be an sub-domain from one of the account&#39;s site.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        """
        Response code to use when redirecting.
        """
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="transManagedIds")
    def trans_managed_ids(self) -> Optional[Sequence[int]]:
        """
        Rules to enable when action is `trans`. See details in data source `bot_managed_rules`.
        """
        return pulumi.get(self, "trans_managed_ids")


@pulumi.output_type
class SecurityPolicyConfigBotConfigPortraitRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "algManagedIds":
            suggest = "alg_managed_ids"
        elif key == "capManagedIds":
            suggest = "cap_managed_ids"
        elif key == "dropManagedIds":
            suggest = "drop_managed_ids"
        elif key == "monManagedIds":
            suggest = "mon_managed_ids"
        elif key == "ruleId":
            suggest = "rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigBotConfigPortraitRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigBotConfigPortraitRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigBotConfigPortraitRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alg_managed_ids: Optional[Sequence[int]] = None,
                 cap_managed_ids: Optional[Sequence[int]] = None,
                 drop_managed_ids: Optional[Sequence[int]] = None,
                 mon_managed_ids: Optional[Sequence[int]] = None,
                 rule_id: Optional[int] = None,
                 switch: Optional[str] = None):
        """
        :param Sequence[int] alg_managed_ids: Rules to enable when action is `alg`. See details in data source `bot_portrait_rules`.
        :param Sequence[int] cap_managed_ids: Rules to enable when action is `captcha`. See details in data source `bot_portrait_rules`.
        :param Sequence[int] drop_managed_ids: Rules to enable when action is `drop`. See details in data source `bot_portrait_rules`.
        :param Sequence[int] mon_managed_ids: Rules to enable when action is `monitor`. See details in data source `bot_portrait_rules`.
        :param str switch: - `on`: Enable.- `off`: Disable.
        """
        if alg_managed_ids is not None:
            pulumi.set(__self__, "alg_managed_ids", alg_managed_ids)
        if cap_managed_ids is not None:
            pulumi.set(__self__, "cap_managed_ids", cap_managed_ids)
        if drop_managed_ids is not None:
            pulumi.set(__self__, "drop_managed_ids", drop_managed_ids)
        if mon_managed_ids is not None:
            pulumi.set(__self__, "mon_managed_ids", mon_managed_ids)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="algManagedIds")
    def alg_managed_ids(self) -> Optional[Sequence[int]]:
        """
        Rules to enable when action is `alg`. See details in data source `bot_portrait_rules`.
        """
        return pulumi.get(self, "alg_managed_ids")

    @property
    @pulumi.getter(name="capManagedIds")
    def cap_managed_ids(self) -> Optional[Sequence[int]]:
        """
        Rules to enable when action is `captcha`. See details in data source `bot_portrait_rules`.
        """
        return pulumi.get(self, "cap_managed_ids")

    @property
    @pulumi.getter(name="dropManagedIds")
    def drop_managed_ids(self) -> Optional[Sequence[int]]:
        """
        Rules to enable when action is `drop`. See details in data source `bot_portrait_rules`.
        """
        return pulumi.get(self, "drop_managed_ids")

    @property
    @pulumi.getter(name="monManagedIds")
    def mon_managed_ids(self) -> Optional[Sequence[int]]:
        """
        Rules to enable when action is `monitor`. See details in data source `bot_portrait_rules`.
        """
        return pulumi.get(self, "mon_managed_ids")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class SecurityPolicyConfigDropPageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclDropPageDetail":
            suggest = "acl_drop_page_detail"
        elif key == "wafDropPageDetail":
            suggest = "waf_drop_page_detail"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigDropPageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigDropPageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigDropPageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_drop_page_detail: Optional['outputs.SecurityPolicyConfigDropPageConfigAclDropPageDetail'] = None,
                 switch: Optional[str] = None,
                 waf_drop_page_detail: Optional['outputs.SecurityPolicyConfigDropPageConfigWafDropPageDetail'] = None):
        """
        :param 'SecurityPolicyConfigDropPageConfigAclDropPageDetailArgs' acl_drop_page_detail: Custom error page of ACL rules.
        :param str switch: - `on`: Enable.- `off`: Disable.
        :param 'SecurityPolicyConfigDropPageConfigWafDropPageDetailArgs' waf_drop_page_detail: Custom error page of WAF rules.
        """
        if acl_drop_page_detail is not None:
            pulumi.set(__self__, "acl_drop_page_detail", acl_drop_page_detail)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if waf_drop_page_detail is not None:
            pulumi.set(__self__, "waf_drop_page_detail", waf_drop_page_detail)

    @property
    @pulumi.getter(name="aclDropPageDetail")
    def acl_drop_page_detail(self) -> Optional['outputs.SecurityPolicyConfigDropPageConfigAclDropPageDetail']:
        """
        Custom error page of ACL rules.
        """
        return pulumi.get(self, "acl_drop_page_detail")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="wafDropPageDetail")
    def waf_drop_page_detail(self) -> Optional['outputs.SecurityPolicyConfigDropPageConfigWafDropPageDetail']:
        """
        Custom error page of WAF rules.
        """
        return pulumi.get(self, "waf_drop_page_detail")


@pulumi.output_type
class SecurityPolicyConfigDropPageConfigAclDropPageDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pageId":
            suggest = "page_id"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigDropPageConfigAclDropPageDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigDropPageConfigAclDropPageDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigDropPageConfigAclDropPageDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 page_id: Optional[int] = None,
                 status_code: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str name: File name or URL.
        :param int page_id: ID of the custom error page. when set to 0, use system default error page.
        :param int status_code: HTTP status code to use. Valid range: 100-600.
        :param str type: Type of the custom error page. Valid values: `file`, `url`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if page_id is not None:
            pulumi.set(__self__, "page_id", page_id)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        File name or URL.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> Optional[int]:
        """
        ID of the custom error page. when set to 0, use system default error page.
        """
        return pulumi.get(self, "page_id")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        """
        HTTP status code to use. Valid range: 100-600.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the custom error page. Valid values: `file`, `url`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SecurityPolicyConfigDropPageConfigWafDropPageDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pageId":
            suggest = "page_id"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigDropPageConfigWafDropPageDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigDropPageConfigWafDropPageDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigDropPageConfigWafDropPageDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 page_id: Optional[int] = None,
                 status_code: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str name: File name or URL.
        :param int page_id: ID of the custom error page. when set to 0, use system default error page.
        :param int status_code: HTTP status code to use. Valid range: 100-600.
        :param str type: Type of the custom error page. Valid values: `file`, `url`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if page_id is not None:
            pulumi.set(__self__, "page_id", page_id)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        File name or URL.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> Optional[int]:
        """
        ID of the custom error page. when set to 0, use system default error page.
        """
        return pulumi.get(self, "page_id")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        """
        HTTP status code to use. Valid range: 100-600.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the custom error page. Valid values: `file`, `url`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SecurityPolicyConfigExceptConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptUserRules":
            suggest = "except_user_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigExceptConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigExceptConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigExceptConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 except_user_rules: Optional[Sequence['outputs.SecurityPolicyConfigExceptConfigExceptUserRule']] = None,
                 switch: Optional[str] = None):
        """
        :param Sequence['SecurityPolicyConfigExceptConfigExceptUserRuleArgs'] except_user_rules: Exception rules.
        :param str switch: - `on`: Enable.- `off`: Disable.
        """
        if except_user_rules is not None:
            pulumi.set(__self__, "except_user_rules", except_user_rules)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="exceptUserRules")
    def except_user_rules(self) -> Optional[Sequence['outputs.SecurityPolicyConfigExceptConfigExceptUserRule']]:
        """
        Exception rules.
        """
        return pulumi.get(self, "except_user_rules")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class SecurityPolicyConfigExceptConfigExceptUserRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptUserRuleConditions":
            suggest = "except_user_rule_conditions"
        elif key == "exceptUserRuleScope":
            suggest = "except_user_rule_scope"
        elif key == "ruleId":
            suggest = "rule_id"
        elif key == "ruleName":
            suggest = "rule_name"
        elif key == "rulePriority":
            suggest = "rule_priority"
        elif key == "ruleStatus":
            suggest = "rule_status"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigExceptConfigExceptUserRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigExceptConfigExceptUserRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigExceptConfigExceptUserRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 except_user_rule_conditions: Optional[Sequence['outputs.SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleCondition']] = None,
                 except_user_rule_scope: Optional['outputs.SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleScope'] = None,
                 rule_id: Optional[int] = None,
                 rule_name: Optional[str] = None,
                 rule_priority: Optional[int] = None,
                 rule_status: Optional[str] = None,
                 update_time: Optional[str] = None):
        """
        :param str action: Action to take. Valid values: `skip`.
        :param Sequence['SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleConditionArgs'] except_user_rule_conditions: Conditions of the rule.
        :param 'SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleScopeArgs' except_user_rule_scope: Scope of the rule in effect.
        :param str rule_name: Rule name.
        :param int rule_priority: Priority of the rule. Valid value range: 0-100.
        :param str rule_status: Status of the rule. Valid values:- `on`: Enabled.- `off`: Disabled.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if except_user_rule_conditions is not None:
            pulumi.set(__self__, "except_user_rule_conditions", except_user_rule_conditions)
        if except_user_rule_scope is not None:
            pulumi.set(__self__, "except_user_rule_scope", except_user_rule_scope)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_priority is not None:
            pulumi.set(__self__, "rule_priority", rule_priority)
        if rule_status is not None:
            pulumi.set(__self__, "rule_status", rule_status)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action to take. Valid values: `skip`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="exceptUserRuleConditions")
    def except_user_rule_conditions(self) -> Optional[Sequence['outputs.SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleCondition']]:
        """
        Conditions of the rule.
        """
        return pulumi.get(self, "except_user_rule_conditions")

    @property
    @pulumi.getter(name="exceptUserRuleScope")
    def except_user_rule_scope(self) -> Optional['outputs.SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleScope']:
        """
        Scope of the rule in effect.
        """
        return pulumi.get(self, "except_user_rule_scope")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[str]:
        """
        Rule name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> Optional[int]:
        """
        Priority of the rule. Valid value range: 0-100.
        """
        return pulumi.get(self, "rule_priority")

    @property
    @pulumi.getter(name="ruleStatus")
    def rule_status(self) -> Optional[str]:
        """
        Status of the rule. Valid values:- `on`: Enabled.- `off`: Disabled.
        """
        return pulumi.get(self, "rule_status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchContent":
            suggest = "match_content"
        elif key == "matchFrom":
            suggest = "match_from"
        elif key == "matchParam":
            suggest = "match_param"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_content: Optional[str] = None,
                 match_from: Optional[str] = None,
                 match_param: Optional[str] = None,
                 operator: Optional[str] = None):
        """
        :param str match_content: Content to match.
        :param str match_from: Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sip_proto`: Network protocol of the request.
        :param str match_param: Parameter for match item. For example, when match from header, match parameter can be set to a header key.
        :param str operator: Valid values:- `equal`: string equal.- `not_equal`: string not equal.- `include`: string include.- `not_include`: string not include.- `match`: ip match.- `not_match`: ip not match.- `include_area`: area include.- `is_empty`: field existed but empty.- `not_exists`: field is not existed.- `regexp`: regex match.- `len_gt`: value greater than.- `len_lt`: value less than.- `len_eq`: value equal.- `match_prefix`: string prefix match.- `match_suffix`: string suffix match.- `wildcard`: wildcard match.
        """
        if match_content is not None:
            pulumi.set(__self__, "match_content", match_content)
        if match_from is not None:
            pulumi.set(__self__, "match_from", match_from)
        if match_param is not None:
            pulumi.set(__self__, "match_param", match_param)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> Optional[str]:
        """
        Content to match.
        """
        return pulumi.get(self, "match_content")

    @property
    @pulumi.getter(name="matchFrom")
    def match_from(self) -> Optional[str]:
        """
        Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sip_proto`: Network protocol of the request.
        """
        return pulumi.get(self, "match_from")

    @property
    @pulumi.getter(name="matchParam")
    def match_param(self) -> Optional[str]:
        """
        Parameter for match item. For example, when match from header, match parameter can be set to a header key.
        """
        return pulumi.get(self, "match_param")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Valid values:- `equal`: string equal.- `not_equal`: string not equal.- `include`: string include.- `not_include`: string not include.- `match`: ip match.- `not_match`: ip not match.- `include_area`: area include.- `is_empty`: field existed but empty.- `not_exists`: field is not existed.- `regexp`: regex match.- `len_gt`: value greater than.- `len_lt`: value less than.- `len_eq`: value equal.- `match_prefix`: string prefix match.- `match_suffix`: string suffix match.- `wildcard`: wildcard match.
        """
        return pulumi.get(self, "operator")


@pulumi.output_type
class SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleScope(dict):
    def __init__(__self__, *,
                 modules: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] modules: Modules in which the rule take effect. Valid values: `waf`.
        """
        if modules is not None:
            pulumi.set(__self__, "modules", modules)

    @property
    @pulumi.getter
    def modules(self) -> Optional[Sequence[str]]:
        """
        Modules in which the rule take effect. Valid values: `waf`.
        """
        return pulumi.get(self, "modules")


@pulumi.output_type
class SecurityPolicyConfigIpTableConfig(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.SecurityPolicyConfigIpTableConfigRule']] = None,
                 switch: Optional[str] = None):
        """
        :param Sequence['SecurityPolicyConfigIpTableConfigRuleArgs'] rules: Rules list.
        :param str switch: - `on`: Enable.- `off`: Disable.
        """
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.SecurityPolicyConfigIpTableConfigRule']]:
        """
        Rules list.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class SecurityPolicyConfigIpTableConfigRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchContent":
            suggest = "match_content"
        elif key == "matchFrom":
            suggest = "match_from"
        elif key == "ruleId":
            suggest = "rule_id"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigIpTableConfigRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigIpTableConfigRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigIpTableConfigRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 match_content: Optional[str] = None,
                 match_from: Optional[str] = None,
                 rule_id: Optional[int] = None,
                 update_time: Optional[str] = None):
        """
        :param str action: Actions to take. Valid values: `drop`, `trans`, `monitor`.
        :param str match_content: Matching content.
        :param str match_from: Matching type. Valid values: `ip`, `area`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if match_content is not None:
            pulumi.set(__self__, "match_content", match_content)
        if match_from is not None:
            pulumi.set(__self__, "match_from", match_from)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Actions to take. Valid values: `drop`, `trans`, `monitor`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> Optional[str]:
        """
        Matching content.
        """
        return pulumi.get(self, "match_content")

    @property
    @pulumi.getter(name="matchFrom")
    def match_from(self) -> Optional[str]:
        """
        Matching type. Valid values: `ip`, `area`.
        """
        return pulumi.get(self, "match_from")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class SecurityPolicyConfigRateLimitConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userRules":
            suggest = "user_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigRateLimitConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigRateLimitConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigRateLimitConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 intelligence: Optional['outputs.SecurityPolicyConfigRateLimitConfigIntelligence'] = None,
                 switch: Optional[str] = None,
                 template: Optional['outputs.SecurityPolicyConfigRateLimitConfigTemplate'] = None,
                 user_rules: Optional[Sequence['outputs.SecurityPolicyConfigRateLimitConfigUserRule']] = None):
        """
        :param 'SecurityPolicyConfigRateLimitConfigIntelligenceArgs' intelligence: Intelligent client filter.
        :param str switch: - `on`: Enable.- `off`: Disable.
        :param 'SecurityPolicyConfigRateLimitConfigTemplateArgs' template: Default Template. Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['SecurityPolicyConfigRateLimitConfigUserRuleArgs'] user_rules: Custom configuration.
        """
        if intelligence is not None:
            pulumi.set(__self__, "intelligence", intelligence)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if user_rules is not None:
            pulumi.set(__self__, "user_rules", user_rules)

    @property
    @pulumi.getter
    def intelligence(self) -> Optional['outputs.SecurityPolicyConfigRateLimitConfigIntelligence']:
        """
        Intelligent client filter.
        """
        return pulumi.get(self, "intelligence")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.SecurityPolicyConfigRateLimitConfigTemplate']:
        """
        Default Template. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="userRules")
    def user_rules(self) -> Optional[Sequence['outputs.SecurityPolicyConfigRateLimitConfigUserRule']]:
        """
        Custom configuration.
        """
        return pulumi.get(self, "user_rules")


@pulumi.output_type
class SecurityPolicyConfigRateLimitConfigIntelligence(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 switch: Optional[str] = None):
        """
        :param str action: Action to take. Valid values: `monitor`, `alg`.
        :param str switch: - `on`: Enable.- `off`: Disable.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action to take. Valid values: `monitor`, `alg`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class SecurityPolicyConfigRateLimitConfigTemplate(dict):
    def __init__(__self__, *,
                 detail: Optional['outputs.SecurityPolicyConfigRateLimitConfigTemplateDetail'] = None,
                 mode: Optional[str] = None):
        """
        :param 'SecurityPolicyConfigRateLimitConfigTemplateDetailArgs' detail: Detail of the template.
        :param str mode: Template Name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def detail(self) -> Optional['outputs.SecurityPolicyConfigRateLimitConfigTemplateDetail']:
        """
        Detail of the template.
        """
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Template Name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class SecurityPolicyConfigRateLimitConfigTemplateDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "punishTime":
            suggest = "punish_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigRateLimitConfigTemplateDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigRateLimitConfigTemplateDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigRateLimitConfigTemplateDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 mode: Optional[str] = None,
                 period: Optional[int] = None,
                 punish_time: Optional[int] = None,
                 threshold: Optional[int] = None):
        """
        :param str action: Action to take.
        :param int id: Template ID. Note: This field may return null, indicating that no valid value can be obtained.
        :param str mode: Template Name. Note: This field may return null, indicating that no valid value can be obtained.
        :param int period: Period.
        :param int punish_time: Punish time.
        :param int threshold: Threshold.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if punish_time is not None:
            pulumi.set(__self__, "punish_time", punish_time)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action to take.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Template ID. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Template Name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        """
        Period.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="punishTime")
    def punish_time(self) -> Optional[int]:
        """
        Punish time.
        """
        return pulumi.get(self, "punish_time")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[int]:
        """
        Threshold.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class SecurityPolicyConfigRateLimitConfigUserRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "punishTime":
            suggest = "punish_time"
        elif key == "punishTimeUnit":
            suggest = "punish_time_unit"
        elif key == "ruleName":
            suggest = "rule_name"
        elif key == "rulePriority":
            suggest = "rule_priority"
        elif key == "freqFields":
            suggest = "freq_fields"
        elif key == "ruleId":
            suggest = "rule_id"
        elif key == "ruleStatus":
            suggest = "rule_status"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigRateLimitConfigUserRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigRateLimitConfigUserRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigRateLimitConfigUserRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 conditions: Sequence['outputs.SecurityPolicyConfigRateLimitConfigUserRuleCondition'],
                 period: int,
                 punish_time: int,
                 punish_time_unit: str,
                 rule_name: str,
                 rule_priority: int,
                 threshold: int,
                 freq_fields: Optional[Sequence[str]] = None,
                 rule_id: Optional[int] = None,
                 rule_status: Optional[str] = None,
                 update_time: Optional[str] = None):
        """
        :param str action: Valid values: `monitor`, `drop`.
        :param Sequence['SecurityPolicyConfigRateLimitConfigUserRuleConditionArgs'] conditions: Conditions of the rule.
        :param int period: Period of the rate limit. Valid values: 10, 20, 30, 40, 50, 60 (in seconds).
        :param int punish_time: Punish time, Valid value range: 0-2 days.
        :param str punish_time_unit: Time unit of the punish time. Valid values: `second`, `minutes`, `hour`.
        :param str rule_name: Rule Name.
        :param int rule_priority: Priority of the rule. Valid value range: 1-100.
        :param int threshold: Threshold of the rate limit. Valid value range: 0-4294967294.
        :param Sequence[str] freq_fields: Filter words.
        :param str rule_status: Status of the rule. Valid values: `on`, `off`, `hour`.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "punish_time", punish_time)
        pulumi.set(__self__, "punish_time_unit", punish_time_unit)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_priority", rule_priority)
        pulumi.set(__self__, "threshold", threshold)
        if freq_fields is not None:
            pulumi.set(__self__, "freq_fields", freq_fields)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if rule_status is not None:
            pulumi.set(__self__, "rule_status", rule_status)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Valid values: `monitor`, `drop`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.SecurityPolicyConfigRateLimitConfigUserRuleCondition']:
        """
        Conditions of the rule.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        Period of the rate limit. Valid values: 10, 20, 30, 40, 50, 60 (in seconds).
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="punishTime")
    def punish_time(self) -> int:
        """
        Punish time, Valid value range: 0-2 days.
        """
        return pulumi.get(self, "punish_time")

    @property
    @pulumi.getter(name="punishTimeUnit")
    def punish_time_unit(self) -> str:
        """
        Time unit of the punish time. Valid values: `second`, `minutes`, `hour`.
        """
        return pulumi.get(self, "punish_time_unit")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Rule Name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> int:
        """
        Priority of the rule. Valid value range: 1-100.
        """
        return pulumi.get(self, "rule_priority")

    @property
    @pulumi.getter
    def threshold(self) -> int:
        """
        Threshold of the rate limit. Valid value range: 0-4294967294.
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="freqFields")
    def freq_fields(self) -> Optional[Sequence[str]]:
        """
        Filter words.
        """
        return pulumi.get(self, "freq_fields")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleStatus")
    def rule_status(self) -> Optional[str]:
        """
        Status of the rule. Valid values: `on`, `off`, `hour`.
        """
        return pulumi.get(self, "rule_status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class SecurityPolicyConfigRateLimitConfigUserRuleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchContent":
            suggest = "match_content"
        elif key == "matchFrom":
            suggest = "match_from"
        elif key == "matchParam":
            suggest = "match_param"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigRateLimitConfigUserRuleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigRateLimitConfigUserRuleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigRateLimitConfigUserRuleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_content: str,
                 match_from: str,
                 match_param: str,
                 operator: str):
        """
        :param str match_content: Content to match.
        :param str match_from: Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sip_proto`: Network protocol of the request.
        :param str match_param: Parameter for match item. For example, when match from header, match parameter can be set to a header key.
        :param str operator: Valid values:- `equal`: string equal.- `not_equal`: string not equal.- `include`: string include.- `not_include`: string not include.- `match`: ip match.- `not_match`: ip not match.- `include_area`: area include.- `is_empty`: field existed but empty.- `not_exists`: field is not existed.- `regexp`: regex match.- `len_gt`: value greater than.- `len_lt`: value less than.- `len_eq`: value equal.- `match_prefix`: string prefix match.- `match_suffix`: string suffix match.- `wildcard`: wildcard match.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_from", match_from)
        pulumi.set(__self__, "match_param", match_param)
        pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> str:
        """
        Content to match.
        """
        return pulumi.get(self, "match_content")

    @property
    @pulumi.getter(name="matchFrom")
    def match_from(self) -> str:
        """
        Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sip_proto`: Network protocol of the request.
        """
        return pulumi.get(self, "match_from")

    @property
    @pulumi.getter(name="matchParam")
    def match_param(self) -> str:
        """
        Parameter for match item. For example, when match from header, match parameter can be set to a header key.
        """
        return pulumi.get(self, "match_param")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Valid values:- `equal`: string equal.- `not_equal`: string not equal.- `include`: string include.- `not_include`: string not include.- `match`: ip match.- `not_match`: ip not match.- `include_area`: area include.- `is_empty`: field existed but empty.- `not_exists`: field is not existed.- `regexp`: regex match.- `len_gt`: value greater than.- `len_lt`: value less than.- `len_eq`: value equal.- `match_prefix`: string prefix match.- `match_suffix`: string suffix match.- `wildcard`: wildcard match.
        """
        return pulumi.get(self, "operator")


@pulumi.output_type
class SecurityPolicyConfigSwitchConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "webSwitch":
            suggest = "web_switch"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigSwitchConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigSwitchConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigSwitchConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 web_switch: Optional[str] = None):
        """
        :param str web_switch: - `on`: Enable.- `off`: Disable.
        """
        if web_switch is not None:
            pulumi.set(__self__, "web_switch", web_switch)

    @property
    @pulumi.getter(name="webSwitch")
    def web_switch(self) -> Optional[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "web_switch")


@pulumi.output_type
class SecurityPolicyConfigWafConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "wafRules":
            suggest = "waf_rules"
        elif key == "aiRule":
            suggest = "ai_rule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigWafConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigWafConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigWafConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level: str,
                 mode: str,
                 switch: str,
                 waf_rules: 'outputs.SecurityPolicyConfigWafConfigWafRules',
                 ai_rule: Optional['outputs.SecurityPolicyConfigWafConfigAiRule'] = None):
        """
        :param str level: Protection level. Valid values: `loose`, `normal`, `strict`, `stricter`, `custom`.
        :param str mode: Protection mode. Valid values:- `block`: use block mode globally, you still can set a group of rules to use observe mode.- `observe`: use observe mode globally.
        :param str switch: Whether to enable WAF rules. Valid values:- `on`: Enable.- `off`: Disable.
        :param 'SecurityPolicyConfigWafConfigWafRulesArgs' waf_rules: WAF Rules Configuration.
        :param 'SecurityPolicyConfigWafConfigAiRuleArgs' ai_rule: AI based rules configuration.
        """
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "switch", switch)
        pulumi.set(__self__, "waf_rules", waf_rules)
        if ai_rule is not None:
            pulumi.set(__self__, "ai_rule", ai_rule)

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        Protection level. Valid values: `loose`, `normal`, `strict`, `stricter`, `custom`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Protection mode. Valid values:- `block`: use block mode globally, you still can set a group of rules to use observe mode.- `observe`: use observe mode globally.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable WAF rules. Valid values:- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="wafRules")
    def waf_rules(self) -> 'outputs.SecurityPolicyConfigWafConfigWafRules':
        """
        WAF Rules Configuration.
        """
        return pulumi.get(self, "waf_rules")

    @property
    @pulumi.getter(name="aiRule")
    def ai_rule(self) -> Optional['outputs.SecurityPolicyConfigWafConfigAiRule']:
        """
        AI based rules configuration.
        """
        return pulumi.get(self, "ai_rule")


@pulumi.output_type
class SecurityPolicyConfigWafConfigAiRule(dict):
    def __init__(__self__, *,
                 mode: Optional[str] = None):
        """
        :param str mode: Valid values:- `smart_status_close`: disabled.- `smart_status_open`: blocked.- `smart_status_observe`: observed.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Valid values:- `smart_status_close`: disabled.- `smart_status_open`: blocked.- `smart_status_observe`: observed.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class SecurityPolicyConfigWafConfigWafRules(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockRuleIds":
            suggest = "block_rule_ids"
        elif key == "observeRuleIds":
            suggest = "observe_rule_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyConfigWafConfigWafRules. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyConfigWafConfigWafRules.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyConfigWafConfigWafRules.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_rule_ids: Sequence[int],
                 switch: str,
                 observe_rule_ids: Optional[Sequence[int]] = None):
        """
        :param Sequence[int] block_rule_ids: Block mode rules list. See details in data source `waf_managed_rules`.
        :param str switch: Whether to host the rules&#39; configuration.- `on`: Enable.- `off`: Disable.
        :param Sequence[int] observe_rule_ids: Observe rules list. See details in data source `waf_managed_rules`.
        """
        pulumi.set(__self__, "block_rule_ids", block_rule_ids)
        pulumi.set(__self__, "switch", switch)
        if observe_rule_ids is not None:
            pulumi.set(__self__, "observe_rule_ids", observe_rule_ids)

    @property
    @pulumi.getter(name="blockRuleIds")
    def block_rule_ids(self) -> Sequence[int]:
        """
        Block mode rules list. See details in data source `waf_managed_rules`.
        """
        return pulumi.get(self, "block_rule_ids")

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to host the rules&#39; configuration.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="observeRuleIds")
    def observe_rule_ids(self) -> Optional[Sequence[int]]:
        """
        Observe rules list. See details in data source `waf_managed_rules`.
        """
        return pulumi.get(self, "observe_rule_ids")


@pulumi.output_type
class ZoneResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoRenewFlag":
            suggest = "auto_renew_flag"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "enableTime":
            suggest = "enable_time"
        elif key == "expireTime":
            suggest = "expire_time"
        elif key == "payMode":
            suggest = "pay_mode"
        elif key == "planId":
            suggest = "plan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area: Optional[str] = None,
                 auto_renew_flag: Optional[int] = None,
                 create_time: Optional[str] = None,
                 enable_time: Optional[str] = None,
                 expire_time: Optional[str] = None,
                 id: Optional[str] = None,
                 pay_mode: Optional[int] = None,
                 plan_id: Optional[str] = None,
                 status: Optional[str] = None,
                 svs: Optional[Sequence['outputs.ZoneResourceSv']] = None):
        """
        :param str area: Valid values: `mainland`, `overseas`.
        :param int auto_renew_flag: Whether to automatically renew. Valid values:- `0`: Default.- `1`: Enable automatic renewal.- `2`: Disable automatic renewal.
        :param str create_time: Resource creation date.
        :param str enable_time: Enable time of the resource.
        :param str expire_time: Expire time of the resource.
        :param str id: Resource ID.
        :param int pay_mode: Resource pay mode. Valid values:- `0`: post pay mode.
        :param str plan_id: Associated plan ID.
        :param str status: Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.- `deactivated`: this site is blocked.
        :param Sequence['ZoneResourceSvArgs'] svs: Price inquiry parameters.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable_time is not None:
            pulumi.set(__self__, "enable_time", enable_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pay_mode is not None:
            pulumi.set(__self__, "pay_mode", pay_mode)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if svs is not None:
            pulumi.set(__self__, "svs", svs)

    @property
    @pulumi.getter
    def area(self) -> Optional[str]:
        """
        Valid values: `mainland`, `overseas`.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[int]:
        """
        Whether to automatically renew. Valid values:- `0`: Default.- `1`: Enable automatic renewal.- `2`: Disable automatic renewal.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        Resource creation date.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="enableTime")
    def enable_time(self) -> Optional[str]:
        """
        Enable time of the resource.
        """
        return pulumi.get(self, "enable_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[str]:
        """
        Expire time of the resource.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[int]:
        """
        Resource pay mode. Valid values:- `0`: post pay mode.
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[str]:
        """
        Associated plan ID.
        """
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.- `deactivated`: this site is blocked.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def svs(self) -> Optional[Sequence['outputs.ZoneResourceSv']]:
        """
        Price inquiry parameters.
        """
        return pulumi.get(self, "svs")


@pulumi.output_type
class ZoneResourceSv(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Parameter Key.
        :param str value: Parameter Value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Parameter Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Parameter Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ZoneSettingCache(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "followOrigin":
            suggest = "follow_origin"
        elif key == "noCache":
            suggest = "no_cache"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingCache. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingCache.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingCache.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache: Optional['outputs.ZoneSettingCacheCache'] = None,
                 follow_origin: Optional['outputs.ZoneSettingCacheFollowOrigin'] = None,
                 no_cache: Optional['outputs.ZoneSettingCacheNoCache'] = None):
        """
        :param 'ZoneSettingCacheCacheArgs' cache: Cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ZoneSettingCacheFollowOriginArgs' follow_origin: Follows the origin server configuration. Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ZoneSettingCacheNoCacheArgs' no_cache: No-cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if cache is not None:
            pulumi.set(__self__, "cache", cache)
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)
        if no_cache is not None:
            pulumi.set(__self__, "no_cache", no_cache)

    @property
    @pulumi.getter
    def cache(self) -> Optional['outputs.ZoneSettingCacheCache']:
        """
        Cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cache")

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional['outputs.ZoneSettingCacheFollowOrigin']:
        """
        Follows the origin server configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "follow_origin")

    @property
    @pulumi.getter(name="noCache")
    def no_cache(self) -> Optional['outputs.ZoneSettingCacheNoCache']:
        """
        No-cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "no_cache")


@pulumi.output_type
class ZoneSettingCacheCache(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheTime":
            suggest = "cache_time"
        elif key == "ignoreCacheControl":
            suggest = "ignore_cache_control"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingCacheCache. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingCacheCache.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingCacheCache.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache_time: Optional[int] = None,
                 ignore_cache_control: Optional[str] = None,
                 switch: Optional[str] = None):
        """
        :param int cache_time: Cache expiration time settings.Unit: second. The maximum value is 365 days. Note: This field may return null, indicating that no valid value can be obtained.
        :param str ignore_cache_control: Specifies whether to enable force cache.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        :param str switch: Cache configuration switch.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if cache_time is not None:
            pulumi.set(__self__, "cache_time", cache_time)
        if ignore_cache_control is not None:
            pulumi.set(__self__, "ignore_cache_control", ignore_cache_control)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="cacheTime")
    def cache_time(self) -> Optional[int]:
        """
        Cache expiration time settings.Unit: second. The maximum value is 365 days. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cache_time")

    @property
    @pulumi.getter(name="ignoreCacheControl")
    def ignore_cache_control(self) -> Optional[str]:
        """
        Specifies whether to enable force cache.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ignore_cache_control")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Cache configuration switch.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingCacheFollowOrigin(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None):
        """
        :param str switch: Specifies whether to follow the origin server configuration.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Specifies whether to follow the origin server configuration.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingCacheKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fullUrlCache":
            suggest = "full_url_cache"
        elif key == "ignoreCase":
            suggest = "ignore_case"
        elif key == "queryString":
            suggest = "query_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingCacheKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingCacheKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingCacheKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 full_url_cache: Optional[str] = None,
                 ignore_case: Optional[str] = None,
                 query_string: Optional['outputs.ZoneSettingCacheKeyQueryString'] = None):
        """
        :param str full_url_cache: Specifies whether to enable full-path cache.- `on`: Enable full-path cache (i.e., disable Ignore Query String).- `off`: Disable full-path cache (i.e., enable Ignore Query String). Note: This field may return null, indicating that no valid value can be obtained.
        :param str ignore_case: Specifies whether the cache key is case-sensitive. Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ZoneSettingCacheKeyQueryStringArgs' query_string: Request parameter contained in CacheKey. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[str]:
        """
        Specifies whether to enable full-path cache.- `on`: Enable full-path cache (i.e., disable Ignore Query String).- `off`: Disable full-path cache (i.e., enable Ignore Query String). Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "full_url_cache")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[str]:
        """
        Specifies whether the cache key is case-sensitive. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional['outputs.ZoneSettingCacheKeyQueryString']:
        """
        Request parameter contained in CacheKey. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "query_string")


@pulumi.output_type
class ZoneSettingCacheKeyQueryString(dict):
    def __init__(__self__, *,
                 switch: str,
                 action: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str switch: Whether to use QueryString as part of CacheKey.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        :param str action: - `includeCustom`: Include the specified query strings.- `excludeCustom`: Exclude the specified query strings. Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence[str] values: Array of query strings used/excluded. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to use QueryString as part of CacheKey.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        - `includeCustom`: Include the specified query strings.- `excludeCustom`: Exclude the specified query strings. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Array of query strings used/excluded. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ZoneSettingCacheNoCache(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None):
        """
        :param str switch: Whether to cache the configuration.- `on`: Do not cache.- `off`: Cache. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Whether to cache the configuration.- `on`: Do not cache.- `off`: Cache. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingCachePrefresh(dict):
    def __init__(__self__, *,
                 switch: str,
                 percent: Optional[int] = None):
        """
        :param str switch: Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
        :param int percent: Percentage of cache time before try to prefresh. Valid value range: 1-99.
        """
        pulumi.set(__self__, "switch", switch)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def percent(self) -> Optional[int]:
        """
        Percentage of cache time before try to prefresh. Valid value range: 1-99.
        """
        return pulumi.get(self, "percent")


@pulumi.output_type
class ZoneSettingClientIpHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerName":
            suggest = "header_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingClientIpHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingClientIpHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingClientIpHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 header_name: Optional[str] = None):
        """
        :param str switch: Specifies whether to enable client IP header.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        :param str header_name: Name of the origin-pull client IP request header. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Specifies whether to enable client IP header.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        """
        Name of the origin-pull client IP request header. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "header_name")


@pulumi.output_type
class ZoneSettingCompression(dict):
    def __init__(__self__, *,
                 switch: str,
                 algorithms: Optional[Sequence[str]] = None):
        """
        :param str switch: Whether to enable Smart compression.- `on`: Enable.- `off`: Disable.
        :param Sequence[str] algorithms: Compression algorithms to select. Valid values: `brotli`, `gzip`.
        """
        pulumi.set(__self__, "switch", switch)
        if algorithms is not None:
            pulumi.set(__self__, "algorithms", algorithms)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable Smart compression.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def algorithms(self) -> Optional[Sequence[str]]:
        """
        Compression algorithms to select. Valid values: `brotli`, `gzip`.
        """
        return pulumi.get(self, "algorithms")


@pulumi.output_type
class ZoneSettingForceRedirect(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redirectStatusCode":
            suggest = "redirect_status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingForceRedirect. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingForceRedirect.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingForceRedirect.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 redirect_status_code: Optional[int] = None):
        """
        :param str switch: Whether to enable force redirect.- `on`: Enable.- `off`: Disable.
        :param int redirect_status_code: Redirection status code.- 301- 302 Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if redirect_status_code is not None:
            pulumi.set(__self__, "redirect_status_code", redirect_status_code)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable force redirect.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[int]:
        """
        Redirection status code.- 301- 302 Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "redirect_status_code")


@pulumi.output_type
class ZoneSettingHttps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ocspStapling":
            suggest = "ocsp_stapling"
        elif key == "tlsVersions":
            suggest = "tls_versions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingHttps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingHttps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingHttps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hsts: Optional['outputs.ZoneSettingHttpsHsts'] = None,
                 http2: Optional[str] = None,
                 ocsp_stapling: Optional[str] = None,
                 tls_versions: Optional[Sequence[str]] = None):
        """
        :param 'ZoneSettingHttpsHstsArgs' hsts: HSTS Configuration. Note: This field may return null, indicating that no valid value can be obtained.
        :param str http2: HTTP2 configuration switch.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        :param str ocsp_stapling: OCSP configuration switch.- `on`: Enable.- `off`: Disable.It is disabled by default. Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence[str] tls_versions: TLS version settings. Valid values: `TLSv1`, `TLSV1.1`, `TLSV1.2`, and `TLSv1.3`.Only consecutive versions can be enabled at the same time. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if hsts is not None:
            pulumi.set(__self__, "hsts", hsts)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if ocsp_stapling is not None:
            pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        if tls_versions is not None:
            pulumi.set(__self__, "tls_versions", tls_versions)

    @property
    @pulumi.getter
    def hsts(self) -> Optional['outputs.ZoneSettingHttpsHsts']:
        """
        HSTS Configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "hsts")

    @property
    @pulumi.getter
    def http2(self) -> Optional[str]:
        """
        HTTP2 configuration switch.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "http2")

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[str]:
        """
        OCSP configuration switch.- `on`: Enable.- `off`: Disable.It is disabled by default. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ocsp_stapling")

    @property
    @pulumi.getter(name="tlsVersions")
    def tls_versions(self) -> Optional[Sequence[str]]:
        """
        TLS version settings. Valid values: `TLSv1`, `TLSV1.1`, `TLSV1.2`, and `TLSv1.3`.Only consecutive versions can be enabled at the same time. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "tls_versions")


@pulumi.output_type
class ZoneSettingHttpsHsts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeSubDomains":
            suggest = "include_sub_domains"
        elif key == "maxAge":
            suggest = "max_age"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingHttpsHsts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingHttpsHsts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingHttpsHsts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 include_sub_domains: Optional[str] = None,
                 max_age: Optional[int] = None,
                 preload: Optional[str] = None):
        """
        :param str switch: - `on`: Enable.- `off`: Disable.
        :param str include_sub_domains: Specifies whether to include subdomain names. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        :param int max_age: MaxAge value in seconds, should be no more than 1 day. Note: This field may return null, indicating that no valid value can be obtained.
        :param str preload: Specifies whether to preload. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if include_sub_domains is not None:
            pulumi.set(__self__, "include_sub_domains", include_sub_domains)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if preload is not None:
            pulumi.set(__self__, "preload", preload)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="includeSubDomains")
    def include_sub_domains(self) -> Optional[str]:
        """
        Specifies whether to include subdomain names. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "include_sub_domains")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[int]:
        """
        MaxAge value in seconds, should be no more than 1 day. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter
    def preload(self) -> Optional[str]:
        """
        Specifies whether to preload. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "preload")


@pulumi.output_type
class ZoneSettingIpv6(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingMaxAge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "followOrigin":
            suggest = "follow_origin"
        elif key == "maxAgeTime":
            suggest = "max_age_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingMaxAge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingMaxAge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingMaxAge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 follow_origin: Optional[str] = None,
                 max_age_time: Optional[int] = None):
        """
        :param str follow_origin: Specifies whether to follow the max cache age of the origin server.- `on`: Enable.- `off`: Disable.If it&#39;s on, MaxAgeTime is ignored. Note: This field may return null, indicating that no valid value can be obtained.
        :param int max_age_time: Specifies the max age of the cache (in seconds). The maximum value is 365 days. Note: the value 0 means not to cache. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)
        if max_age_time is not None:
            pulumi.set(__self__, "max_age_time", max_age_time)

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional[str]:
        """
        Specifies whether to follow the max cache age of the origin server.- `on`: Enable.- `off`: Disable.If it&#39;s on, MaxAgeTime is ignored. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "follow_origin")

    @property
    @pulumi.getter(name="maxAgeTime")
    def max_age_time(self) -> Optional[int]:
        """
        Specifies the max age of the cache (in seconds). The maximum value is 365 days. Note: the value 0 means not to cache. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "max_age_time")


@pulumi.output_type
class ZoneSettingOfflineCache(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Whether to enable offline cache.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable offline cache.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingOrigin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupOrigins":
            suggest = "backup_origins"
        elif key == "cosPrivateAccess":
            suggest = "cos_private_access"
        elif key == "originPullProtocol":
            suggest = "origin_pull_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingOrigin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingOrigin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingOrigin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_origins: Optional[Sequence[str]] = None,
                 cos_private_access: Optional[str] = None,
                 origin_pull_protocol: Optional[str] = None,
                 origins: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] backup_origins: Backup origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        :param str cos_private_access: Whether access private cos bucket is allowed when `OriginType` is cos. Note: This field may return null, indicating that no valid value can be obtained.
        :param str origin_pull_protocol: Origin-pull protocol.- `http`: Switch HTTPS requests to HTTP.- `follow`: Follow the protocol of the request.- `https`: Switch HTTP requests to HTTPS. This only supports port 443 on the origin server. Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence[str] origins: Origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if backup_origins is not None:
            pulumi.set(__self__, "backup_origins", backup_origins)
        if cos_private_access is not None:
            pulumi.set(__self__, "cos_private_access", cos_private_access)
        if origin_pull_protocol is not None:
            pulumi.set(__self__, "origin_pull_protocol", origin_pull_protocol)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)

    @property
    @pulumi.getter(name="backupOrigins")
    def backup_origins(self) -> Optional[Sequence[str]]:
        """
        Backup origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "backup_origins")

    @property
    @pulumi.getter(name="cosPrivateAccess")
    def cos_private_access(self) -> Optional[str]:
        """
        Whether access private cos bucket is allowed when `OriginType` is cos. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_private_access")

    @property
    @pulumi.getter(name="originPullProtocol")
    def origin_pull_protocol(self) -> Optional[str]:
        """
        Origin-pull protocol.- `http`: Switch HTTPS requests to HTTP.- `follow`: Follow the protocol of the request.- `https`: Switch HTTP requests to HTTPS. This only supports port 443 on the origin server. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "origin_pull_protocol")

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence[str]]:
        """
        Origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "origins")


@pulumi.output_type
class ZoneSettingPostMaxSize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxSize":
            suggest = "max_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingPostMaxSize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingPostMaxSize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingPostMaxSize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 max_size: Optional[int] = None):
        """
        :param str switch: Specifies whether to enable custom setting of the maximum file size.- `on`: Enable. You can set a custom max size.- `off`: Disable. In this case, the max size defaults to 32 MB.
        :param int max_size: Maximum size. Value range: 1-500 MB. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Specifies whether to enable custom setting of the maximum file size.- `on`: Enable. You can set a custom max size.- `off`: Disable. In this case, the max size defaults to 32 MB.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[int]:
        """
        Maximum size. Value range: 1-500 MB. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "max_size")


@pulumi.output_type
class ZoneSettingQuic(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Whether to enable QUIC.- `on`: Enable.- `off`: Disable.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable QUIC.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingSmartRouting(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Whether to enable HTTP2 origin-pull.- `on`: Enable.- `off`: Disable.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable HTTP2 origin-pull.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingUpstreamHttp2(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingWebSocket(dict):
    def __init__(__self__, *,
                 switch: str,
                 timeout: Optional[int] = None):
        """
        :param str switch: Whether to enable custom WebSocket timeout setting. When it&#39;s off: it means to keep the default WebSocket connection timeout period, which is 15 seconds. To change the timeout period, please set it to on.
        :param int timeout: Sets timeout period in seconds. Maximum value: 120.
        """
        pulumi.set(__self__, "switch", switch)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable custom WebSocket timeout setting. When it&#39;s off: it means to keep the default WebSocket connection timeout period, which is 15 seconds. To change the timeout period, please set it to on.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Sets timeout period in seconds. Maximum value: 120.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ZoneVanityNameServers(dict):
    def __init__(__self__, *,
                 switch: str,
                 servers: Optional[Sequence[str]] = None):
        """
        :param str switch: Whether to enable the custom name server.- `on`: Enable.- `off`: Disable.
        :param Sequence[str] servers: List of custom name servers.
        """
        pulumi.set(__self__, "switch", switch)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable the custom name server.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence[str]]:
        """
        List of custom name servers.
        """
        return pulumi.get(self, "servers")


@pulumi.output_type
class ZoneVanityNameServersIp(dict):
    def __init__(__self__, *,
                 ipv4: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str ipv4: IPv4 address of the custom name server.
        :param str name: Name of the custom name server.
        """
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[str]:
        """
        IPv4 address of the custom name server.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the custom name server.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetBotManagedRulesRuleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 rule_id: int,
                 rule_type_name: str,
                 status: str):
        """
        :param str description: Description of the rule.
        :param int rule_id: Rule ID.
        :param str rule_type_name: Type of the rule.
        :param str status: Status of the rule.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "rule_type_name", rule_type_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> int:
        """
        Rule ID.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleTypeName")
    def rule_type_name(self) -> str:
        """
        Type of the rule.
        """
        return pulumi.get(self, "rule_type_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the rule.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetBotPortraitRulesRuleResult(dict):
    def __init__(__self__, *,
                 classification_id: int,
                 description: str,
                 rule_id: int,
                 rule_type_name: str,
                 status: str):
        """
        :param int classification_id: Classification of the rule. Note: This field may return null, indicating that no valid value can be obtained.
        :param str description: Description of the rule. Note: This field may return null, indicating that no valid value can be obtained.
        :param int rule_id: Rule ID.
        :param str rule_type_name: Type of the rule. Note: This field may return null, indicating that no valid value can be obtained.
        :param str status: Status of the rule. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "classification_id", classification_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "rule_type_name", rule_type_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="classificationId")
    def classification_id(self) -> int:
        """
        Classification of the rule. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "classification_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the rule. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> int:
        """
        Rule ID.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleTypeName")
    def rule_type_name(self) -> str:
        """
        Type of the rule. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "rule_type_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the rule. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRuleEngineSettingsActionResult(dict):
    def __init__(__self__, *,
                 action: str,
                 properties: Sequence['outputs.GetRuleEngineSettingsActionPropertyResult']):
        """
        :param str action: Action name.
        :param Sequence['GetRuleEngineSettingsActionPropertyArgs'] properties: Action properties.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetRuleEngineSettingsActionPropertyResult']:
        """
        Action properties.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetRuleEngineSettingsActionPropertyResult(dict):
    def __init__(__self__, *,
                 choice_properties: Sequence['outputs.GetRuleEngineSettingsActionPropertyChoicePropertyResult'],
                 choices_values: Sequence[str],
                 extra_parameters: Sequence['outputs.GetRuleEngineSettingsActionPropertyExtraParameterResult'],
                 is_allow_empty: bool,
                 is_multiple: bool,
                 max: int,
                 min: int,
                 name: str,
                 type: str):
        """
        :param Sequence['GetRuleEngineSettingsActionPropertyChoicePropertyArgs'] choice_properties: Associative properties of this property, they are all required. Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence[str] choices_values: The choices which can be used. This list may be empty.
        :param Sequence['GetRuleEngineSettingsActionPropertyExtraParameterArgs'] extra_parameters: Special parameter. Note: This field may return null, indicating that no valid value can be obtained.
        :param bool is_allow_empty: Whether this property is allowed to set empty.
        :param bool is_multiple: Whether this property is allowed to set multiple values.
        :param int max: Max integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        :param int min: Min integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        :param str name: Property name.
        :param str type: Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        pulumi.set(__self__, "choice_properties", choice_properties)
        pulumi.set(__self__, "choices_values", choices_values)
        pulumi.set(__self__, "extra_parameters", extra_parameters)
        pulumi.set(__self__, "is_allow_empty", is_allow_empty)
        pulumi.set(__self__, "is_multiple", is_multiple)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="choiceProperties")
    def choice_properties(self) -> Sequence['outputs.GetRuleEngineSettingsActionPropertyChoicePropertyResult']:
        """
        Associative properties of this property, they are all required. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "choice_properties")

    @property
    @pulumi.getter(name="choicesValues")
    def choices_values(self) -> Sequence[str]:
        """
        The choices which can be used. This list may be empty.
        """
        return pulumi.get(self, "choices_values")

    @property
    @pulumi.getter(name="extraParameters")
    def extra_parameters(self) -> Sequence['outputs.GetRuleEngineSettingsActionPropertyExtraParameterResult']:
        """
        Special parameter. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "extra_parameters")

    @property
    @pulumi.getter(name="isAllowEmpty")
    def is_allow_empty(self) -> bool:
        """
        Whether this property is allowed to set empty.
        """
        return pulumi.get(self, "is_allow_empty")

    @property
    @pulumi.getter(name="isMultiple")
    def is_multiple(self) -> bool:
        """
        Whether this property is allowed to set multiple values.
        """
        return pulumi.get(self, "is_multiple")

    @property
    @pulumi.getter
    def max(self) -> int:
        """
        Max integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        """
        Min integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Property name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRuleEngineSettingsActionPropertyChoicePropertyResult(dict):
    def __init__(__self__, *,
                 choices_values: Sequence[str],
                 extra_parameters: Sequence['outputs.GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterResult'],
                 is_allow_empty: bool,
                 is_multiple: bool,
                 max: int,
                 min: int,
                 name: str,
                 type: str):
        """
        :param Sequence[str] choices_values: The choices which can be used. This list may be empty.
        :param Sequence['GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterArgs'] extra_parameters: Special parameter. Note: This field may return null, indicating that no valid value can be obtained.
        :param bool is_allow_empty: Whether this property is allowed to set empty.
        :param bool is_multiple: Whether this property is allowed to set multiple values.
        :param int max: Max integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        :param int min: Min integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        :param str name: Property name.
        :param str type: Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        pulumi.set(__self__, "choices_values", choices_values)
        pulumi.set(__self__, "extra_parameters", extra_parameters)
        pulumi.set(__self__, "is_allow_empty", is_allow_empty)
        pulumi.set(__self__, "is_multiple", is_multiple)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="choicesValues")
    def choices_values(self) -> Sequence[str]:
        """
        The choices which can be used. This list may be empty.
        """
        return pulumi.get(self, "choices_values")

    @property
    @pulumi.getter(name="extraParameters")
    def extra_parameters(self) -> Sequence['outputs.GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterResult']:
        """
        Special parameter. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "extra_parameters")

    @property
    @pulumi.getter(name="isAllowEmpty")
    def is_allow_empty(self) -> bool:
        """
        Whether this property is allowed to set empty.
        """
        return pulumi.get(self, "is_allow_empty")

    @property
    @pulumi.getter(name="isMultiple")
    def is_multiple(self) -> bool:
        """
        Whether this property is allowed to set multiple values.
        """
        return pulumi.get(self, "is_multiple")

    @property
    @pulumi.getter
    def max(self) -> int:
        """
        Max integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        """
        Min integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Property name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterResult(dict):
    def __init__(__self__, *,
                 choices: Sequence[str],
                 id: str,
                 type: str):
        """
        :param Sequence[str] choices: A list of choices which can be used when `Type` is `CHOICE`.
        :param str id: Parameter name. Valid values:- `Action`: this extra parameter is required when modify HTTP header, this action should be a `RewriteAction`.- `StatusCode`: this extra parameter is required when modify HTTP status code, this action should be a `CodeAction`.- `NULL`: this action should be a `NormalAction`.
        :param str type: Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        pulumi.set(__self__, "choices", choices)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def choices(self) -> Sequence[str]:
        """
        A list of choices which can be used when `Type` is `CHOICE`.
        """
        return pulumi.get(self, "choices")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Parameter name. Valid values:- `Action`: this extra parameter is required when modify HTTP header, this action should be a `RewriteAction`.- `StatusCode`: this extra parameter is required when modify HTTP status code, this action should be a `CodeAction`.- `NULL`: this action should be a `NormalAction`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRuleEngineSettingsActionPropertyExtraParameterResult(dict):
    def __init__(__self__, *,
                 choices: Sequence[str],
                 id: str,
                 type: str):
        """
        :param Sequence[str] choices: A list of choices which can be used when `Type` is `CHOICE`.
        :param str id: Parameter name. Valid values:- `Action`: this extra parameter is required when modify HTTP header, this action should be a `RewriteAction`.- `StatusCode`: this extra parameter is required when modify HTTP status code, this action should be a `CodeAction`.- `NULL`: this action should be a `NormalAction`.
        :param str type: Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        pulumi.set(__self__, "choices", choices)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def choices(self) -> Sequence[str]:
        """
        A list of choices which can be used when `Type` is `CHOICE`.
        """
        return pulumi.get(self, "choices")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Parameter name. Valid values:- `Action`: this extra parameter is required when modify HTTP header, this action should be a `RewriteAction`.- `StatusCode`: this extra parameter is required when modify HTTP status code, this action should be a `CodeAction`.- `NULL`: this action should be a `NormalAction`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSecurityPolicyRegionsGeoIpResult(dict):
    def __init__(__self__, *,
                 continent: str,
                 country: str,
                 province: str,
                 region_id: int):
        """
        :param str continent: Name of the continent.
        :param str country: Name of the country.
        :param str province: Province of the region. Note: This field may return null, indicating that no valid value can be obtained.
        :param int region_id: Region ID.
        """
        pulumi.set(__self__, "continent", continent)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "province", province)
        pulumi.set(__self__, "region_id", region_id)

    @property
    @pulumi.getter
    def continent(self) -> str:
        """
        Name of the continent.
        """
        return pulumi.get(self, "continent")

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        Name of the country.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def province(self) -> str:
        """
        Province of the region. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "province")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        Region ID.
        """
        return pulumi.get(self, "region_id")


@pulumi.output_type
class GetWafRuleGroupsWafRuleGroupResult(dict):
    def __init__(__self__, *,
                 rule_type_desc: str,
                 rule_type_id: int,
                 rule_type_name: str,
                 rules: Sequence['outputs.GetWafRuleGroupsWafRuleGroupRuleResult']):
        """
        :param str rule_type_desc: Description of rule type in this group.
        :param int rule_type_id: Type id of rules in this group.
        :param str rule_type_name: Type name of rules in this group.
        :param Sequence['GetWafRuleGroupsWafRuleGroupRuleArgs'] rules: Rules detail.
        """
        pulumi.set(__self__, "rule_type_desc", rule_type_desc)
        pulumi.set(__self__, "rule_type_id", rule_type_id)
        pulumi.set(__self__, "rule_type_name", rule_type_name)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="ruleTypeDesc")
    def rule_type_desc(self) -> str:
        """
        Description of rule type in this group.
        """
        return pulumi.get(self, "rule_type_desc")

    @property
    @pulumi.getter(name="ruleTypeId")
    def rule_type_id(self) -> int:
        """
        Type id of rules in this group.
        """
        return pulumi.get(self, "rule_type_id")

    @property
    @pulumi.getter(name="ruleTypeName")
    def rule_type_name(self) -> str:
        """
        Type name of rules in this group.
        """
        return pulumi.get(self, "rule_type_name")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetWafRuleGroupsWafRuleGroupRuleResult']:
        """
        Rules detail.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetWafRuleGroupsWafRuleGroupRuleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 rule_id: int,
                 rule_level_desc: str,
                 rule_tags: Sequence[str]):
        """
        :param str description: Description of the rule.
        :param int rule_id: WAF managed rule id.
        :param str rule_level_desc: System default level of the rule.
        :param Sequence[str] rule_tags: Tags of the rule. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "rule_level_desc", rule_level_desc)
        pulumi.set(__self__, "rule_tags", rule_tags)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> int:
        """
        WAF managed rule id.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleLevelDesc")
    def rule_level_desc(self) -> str:
        """
        System default level of the rule.
        """
        return pulumi.get(self, "rule_level_desc")

    @property
    @pulumi.getter(name="ruleTags")
    def rule_tags(self) -> Sequence[str]:
        """
        Tags of the rule. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "rule_tags")


@pulumi.output_type
class GetZoneAvailablePlansPlanInfoListResult(dict):
    def __init__(__self__, *,
                 area: str,
                 currency: str,
                 flux: int,
                 frequency: str,
                 plan_type: str,
                 price: int,
                 request: int,
                 site_number: int):
        """
        :param str area: Acceleration area of the plan. Valid value: `mainland`, `overseas`.
        :param str currency: Settlement Currency Type. Valid values: `CNY`, `USD`.
        :param int flux: The number of fluxes included in the zone plan. Unit: Byte.
        :param str frequency: Billing cycle. Valid values:- `y`: Billed by the year.- `m`: Billed by the month.- `h`: Billed by the hour.- `M`: Billed by the minute.- `s`: Billed by the second.
        :param str plan_type: Plan type.
        :param int price: Price of the plan. Unit: cent.
        :param int request: The number of requests included in the zone plan.
        :param int site_number: The number of zones this zone plan can bind.
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "flux", flux)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "plan_type", plan_type)
        pulumi.set(__self__, "price", price)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "site_number", site_number)

    @property
    @pulumi.getter
    def area(self) -> str:
        """
        Acceleration area of the plan. Valid value: `mainland`, `overseas`.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def currency(self) -> str:
        """
        Settlement Currency Type. Valid values: `CNY`, `USD`.
        """
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter
    def flux(self) -> int:
        """
        The number of fluxes included in the zone plan. Unit: Byte.
        """
        return pulumi.get(self, "flux")

    @property
    @pulumi.getter
    def frequency(self) -> str:
        """
        Billing cycle. Valid values:- `y`: Billed by the year.- `m`: Billed by the month.- `h`: Billed by the hour.- `M`: Billed by the minute.- `s`: Billed by the second.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> str:
        """
        Plan type.
        """
        return pulumi.get(self, "plan_type")

    @property
    @pulumi.getter
    def price(self) -> int:
        """
        Price of the plan. Unit: cent.
        """
        return pulumi.get(self, "price")

    @property
    @pulumi.getter
    def request(self) -> int:
        """
        The number of requests included in the zone plan.
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter(name="siteNumber")
    def site_number(self) -> int:
        """
        The number of zones this zone plan can bind.
        """
        return pulumi.get(self, "site_number")


@pulumi.output_type
class GetZoneDdosPolicyDomainResult(dict):
    def __init__(__self__, *,
                 accelerate_type: str,
                 host: str,
                 security_type: str,
                 status: str):
        """
        :param str accelerate_type: Acceleration function switch. Valid values:- `on`: Enable.- `off`: Disable.
        :param str host: Subdomain.
        :param str security_type: Security function switch. Valid values:- `on`: Enable.- `off`: Disable.
        :param str status: Status of the subdomain. Valid values:- `init`: waiting to config NS.- `offline`: need to enable site accelerating.- `process`: processing the config deployment.- `online`: normal status. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "accelerate_type", accelerate_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "security_type", security_type)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accelerateType")
    def accelerate_type(self) -> str:
        """
        Acceleration function switch. Valid values:- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "accelerate_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Subdomain.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="securityType")
    def security_type(self) -> str:
        """
        Security function switch. Valid values:- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "security_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the subdomain. Valid values:- `init`: waiting to config NS.- `offline`: need to enable site accelerating.- `process`: processing the config deployment.- `online`: normal status. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetZoneDdosPolicyShieldAreaResult(dict):
    def __init__(__self__, *,
                 applications: Sequence['outputs.GetZoneDdosPolicyShieldAreaApplicationResult'],
                 entity: str,
                 entity_name: str,
                 policy_id: int,
                 tcp_num: int,
                 type: str,
                 udp_num: int,
                 zone_id: str):
        """
        :param Sequence['GetZoneDdosPolicyShieldAreaApplicationArgs'] applications: DDoS layer 7 application.
        :param str entity: When `Type` is `domain`, this field is `ZoneId`. When `Type` is `application`, this field is `ProxyId`. Note: This field may return null, indicating that no valid value can be obtained.
        :param str entity_name: When `Type` is `domain`, this field is `ZoneName`. When `Type` is `application`, this field is `ProxyName`. Note: This field may return null, indicating that no valid value can be obtained.
        :param int policy_id: Policy ID.
        :param int tcp_num: TCP forwarding rule number of layer 4 application.
        :param str type: Valid values: `domain`, `application`.
        :param int udp_num: UDP forwarding rule number of layer 4 application.
        :param str zone_id: Site ID.
        """
        pulumi.set(__self__, "applications", applications)
        pulumi.set(__self__, "entity", entity)
        pulumi.set(__self__, "entity_name", entity_name)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "tcp_num", tcp_num)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "udp_num", udp_num)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetZoneDdosPolicyShieldAreaApplicationResult']:
        """
        DDoS layer 7 application.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter
    def entity(self) -> str:
        """
        When `Type` is `domain`, this field is `ZoneId`. When `Type` is `application`, this field is `ProxyId`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "entity")

    @property
    @pulumi.getter(name="entityName")
    def entity_name(self) -> str:
        """
        When `Type` is `domain`, this field is `ZoneName`. When `Type` is `application`, this field is `ProxyName`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "entity_name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> int:
        """
        Policy ID.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="tcpNum")
    def tcp_num(self) -> int:
        """
        TCP forwarding rule number of layer 4 application.
        """
        return pulumi.get(self, "tcp_num")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Valid values: `domain`, `application`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="udpNum")
    def udp_num(self) -> int:
        """
        UDP forwarding rule number of layer 4 application.
        """
        return pulumi.get(self, "udp_num")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetZoneDdosPolicyShieldAreaApplicationResult(dict):
    def __init__(__self__, *,
                 accelerate_type: str,
                 host: str,
                 security_type: str,
                 status: str):
        """
        :param str accelerate_type: Acceleration function switch. Valid values:- `on`: Enable.- `off`: Disable.
        :param str host: Subdomain.
        :param str security_type: Security function switch. Valid values:- `on`: Enable.- `off`: Disable.
        :param str status: Status of the subdomain. Valid values:- `init`: waiting to config NS.- `offline`: need to enable site accelerating.- `process`: processing the config deployment.- `online`: normal status. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "accelerate_type", accelerate_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "security_type", security_type)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accelerateType")
    def accelerate_type(self) -> str:
        """
        Acceleration function switch. Valid values:- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "accelerate_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Subdomain.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="securityType")
    def security_type(self) -> str:
        """
        Security function switch. Valid values:- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "security_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the subdomain. Valid values:- `init`: waiting to config NS.- `offline`: need to enable site accelerating.- `process`: processing the config deployment.- `online`: normal status. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "status")


