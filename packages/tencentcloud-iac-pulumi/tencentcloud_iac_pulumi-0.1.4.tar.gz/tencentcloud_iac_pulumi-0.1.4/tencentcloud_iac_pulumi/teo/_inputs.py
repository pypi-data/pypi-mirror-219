# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ApplicationProxyIpv6Args',
    'DdosPolicyDdosRuleArgs',
    'DdosPolicyDdosRuleAclArgs',
    'DdosPolicyDdosRuleAclAclArgs',
    'DdosPolicyDdosRuleAllowBlockArgs',
    'DdosPolicyDdosRuleAllowBlockAllowBlockIpArgs',
    'DdosPolicyDdosRuleAntiPlyArgs',
    'DdosPolicyDdosRuleGeoIpArgs',
    'DdosPolicyDdosRulePacketFilterArgs',
    'DdosPolicyDdosRulePacketFilterPacketFilterArgs',
    'DdosPolicyDdosRuleSpeedLimitArgs',
    'DdosPolicyDdosRuleStatusInfoArgs',
    'DnsSecDnssecArgs',
    'OriginGroupOriginRecordArgs',
    'OriginGroupOriginRecordPrivateParameterArgs',
    'RuleEnginePriorityRulesPriorityArgs',
    'RuleEngineRuleArgs',
    'RuleEngineRuleActionArgs',
    'RuleEngineRuleActionCodeActionArgs',
    'RuleEngineRuleActionCodeActionParameterArgs',
    'RuleEngineRuleActionNormalActionArgs',
    'RuleEngineRuleActionNormalActionParameterArgs',
    'RuleEngineRuleActionRewriteActionArgs',
    'RuleEngineRuleActionRewriteActionParameterArgs',
    'RuleEngineRuleOrArgs',
    'RuleEngineRuleOrAndArgs',
    'RuleEngineRuleSubRuleArgs',
    'RuleEngineRuleSubRuleRuleArgs',
    'RuleEngineRuleSubRuleRuleActionArgs',
    'RuleEngineRuleSubRuleRuleActionCodeActionArgs',
    'RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs',
    'RuleEngineRuleSubRuleRuleActionNormalActionArgs',
    'RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs',
    'RuleEngineRuleSubRuleRuleActionRewriteActionArgs',
    'RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs',
    'RuleEngineRuleSubRuleRuleOrArgs',
    'RuleEngineRuleSubRuleRuleOrAndArgs',
    'SecurityPolicyConfigArgs',
    'SecurityPolicyConfigAclConfigArgs',
    'SecurityPolicyConfigAclConfigUserRuleArgs',
    'SecurityPolicyConfigAclConfigUserRuleConditionArgs',
    'SecurityPolicyConfigBotConfigArgs',
    'SecurityPolicyConfigBotConfigIntelligenceRuleArgs',
    'SecurityPolicyConfigBotConfigIntelligenceRuleItemArgs',
    'SecurityPolicyConfigBotConfigManagedRuleArgs',
    'SecurityPolicyConfigBotConfigPortraitRuleArgs',
    'SecurityPolicyConfigDropPageConfigArgs',
    'SecurityPolicyConfigDropPageConfigAclDropPageDetailArgs',
    'SecurityPolicyConfigDropPageConfigWafDropPageDetailArgs',
    'SecurityPolicyConfigExceptConfigArgs',
    'SecurityPolicyConfigExceptConfigExceptUserRuleArgs',
    'SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleConditionArgs',
    'SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleScopeArgs',
    'SecurityPolicyConfigIpTableConfigArgs',
    'SecurityPolicyConfigIpTableConfigRuleArgs',
    'SecurityPolicyConfigRateLimitConfigArgs',
    'SecurityPolicyConfigRateLimitConfigIntelligenceArgs',
    'SecurityPolicyConfigRateLimitConfigTemplateArgs',
    'SecurityPolicyConfigRateLimitConfigTemplateDetailArgs',
    'SecurityPolicyConfigRateLimitConfigUserRuleArgs',
    'SecurityPolicyConfigRateLimitConfigUserRuleConditionArgs',
    'SecurityPolicyConfigSwitchConfigArgs',
    'SecurityPolicyConfigWafConfigArgs',
    'SecurityPolicyConfigWafConfigAiRuleArgs',
    'SecurityPolicyConfigWafConfigWafRulesArgs',
    'ZoneResourceArgs',
    'ZoneResourceSvArgs',
    'ZoneSettingCacheArgs',
    'ZoneSettingCacheCacheArgs',
    'ZoneSettingCacheFollowOriginArgs',
    'ZoneSettingCacheKeyArgs',
    'ZoneSettingCacheKeyQueryStringArgs',
    'ZoneSettingCacheNoCacheArgs',
    'ZoneSettingCachePrefreshArgs',
    'ZoneSettingClientIpHeaderArgs',
    'ZoneSettingCompressionArgs',
    'ZoneSettingForceRedirectArgs',
    'ZoneSettingHttpsArgs',
    'ZoneSettingHttpsHstsArgs',
    'ZoneSettingIpv6Args',
    'ZoneSettingMaxAgeArgs',
    'ZoneSettingOfflineCacheArgs',
    'ZoneSettingOriginArgs',
    'ZoneSettingPostMaxSizeArgs',
    'ZoneSettingQuicArgs',
    'ZoneSettingSmartRoutingArgs',
    'ZoneSettingUpstreamHttp2Args',
    'ZoneSettingWebSocketArgs',
    'ZoneVanityNameServersArgs',
    'ZoneVanityNameServersIpArgs',
]

@pulumi.input_type
class ApplicationProxyIpv6Args:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        """
        :param pulumi.Input[str] switch: - `on`: Enable.- `off`: Disable.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class DdosPolicyDdosRuleArgs:
    def __init__(__self__, *,
                 acl: Optional[pulumi.Input['DdosPolicyDdosRuleAclArgs']] = None,
                 allow_block: Optional[pulumi.Input['DdosPolicyDdosRuleAllowBlockArgs']] = None,
                 anti_ply: Optional[pulumi.Input['DdosPolicyDdosRuleAntiPlyArgs']] = None,
                 geo_ip: Optional[pulumi.Input['DdosPolicyDdosRuleGeoIpArgs']] = None,
                 packet_filter: Optional[pulumi.Input['DdosPolicyDdosRulePacketFilterArgs']] = None,
                 speed_limit: Optional[pulumi.Input['DdosPolicyDdosRuleSpeedLimitArgs']] = None,
                 status_info: Optional[pulumi.Input['DdosPolicyDdosRuleStatusInfoArgs']] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['DdosPolicyDdosRuleAclArgs'] acl: DDoS ACL rule configuration.
        :param pulumi.Input['DdosPolicyDdosRuleAllowBlockArgs'] allow_block: DDoS black-white list.
        :param pulumi.Input['DdosPolicyDdosRuleAntiPlyArgs'] anti_ply: DDoS protocol and connection protection.
        :param pulumi.Input['DdosPolicyDdosRuleGeoIpArgs'] geo_ip: DDoS Protection by Geo Info.
        :param pulumi.Input['DdosPolicyDdosRulePacketFilterArgs'] packet_filter: DDoS feature filtering configuration.
        :param pulumi.Input['DdosPolicyDdosRuleSpeedLimitArgs'] speed_limit: DDoS access origin site speed limit configuration.
        :param pulumi.Input['DdosPolicyDdosRuleStatusInfoArgs'] status_info: DDoS protection level.
        :param pulumi.Input[str] switch: DDoS protection switch. Valid values:- `on`: Enable.- `off`: Disable.
        """
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if allow_block is not None:
            pulumi.set(__self__, "allow_block", allow_block)
        if anti_ply is not None:
            pulumi.set(__self__, "anti_ply", anti_ply)
        if geo_ip is not None:
            pulumi.set(__self__, "geo_ip", geo_ip)
        if packet_filter is not None:
            pulumi.set(__self__, "packet_filter", packet_filter)
        if speed_limit is not None:
            pulumi.set(__self__, "speed_limit", speed_limit)
        if status_info is not None:
            pulumi.set(__self__, "status_info", status_info)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input['DdosPolicyDdosRuleAclArgs']]:
        """
        DDoS ACL rule configuration.
        """
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input['DdosPolicyDdosRuleAclArgs']]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter(name="allowBlock")
    def allow_block(self) -> Optional[pulumi.Input['DdosPolicyDdosRuleAllowBlockArgs']]:
        """
        DDoS black-white list.
        """
        return pulumi.get(self, "allow_block")

    @allow_block.setter
    def allow_block(self, value: Optional[pulumi.Input['DdosPolicyDdosRuleAllowBlockArgs']]):
        pulumi.set(self, "allow_block", value)

    @property
    @pulumi.getter(name="antiPly")
    def anti_ply(self) -> Optional[pulumi.Input['DdosPolicyDdosRuleAntiPlyArgs']]:
        """
        DDoS protocol and connection protection.
        """
        return pulumi.get(self, "anti_ply")

    @anti_ply.setter
    def anti_ply(self, value: Optional[pulumi.Input['DdosPolicyDdosRuleAntiPlyArgs']]):
        pulumi.set(self, "anti_ply", value)

    @property
    @pulumi.getter(name="geoIp")
    def geo_ip(self) -> Optional[pulumi.Input['DdosPolicyDdosRuleGeoIpArgs']]:
        """
        DDoS Protection by Geo Info.
        """
        return pulumi.get(self, "geo_ip")

    @geo_ip.setter
    def geo_ip(self, value: Optional[pulumi.Input['DdosPolicyDdosRuleGeoIpArgs']]):
        pulumi.set(self, "geo_ip", value)

    @property
    @pulumi.getter(name="packetFilter")
    def packet_filter(self) -> Optional[pulumi.Input['DdosPolicyDdosRulePacketFilterArgs']]:
        """
        DDoS feature filtering configuration.
        """
        return pulumi.get(self, "packet_filter")

    @packet_filter.setter
    def packet_filter(self, value: Optional[pulumi.Input['DdosPolicyDdosRulePacketFilterArgs']]):
        pulumi.set(self, "packet_filter", value)

    @property
    @pulumi.getter(name="speedLimit")
    def speed_limit(self) -> Optional[pulumi.Input['DdosPolicyDdosRuleSpeedLimitArgs']]:
        """
        DDoS access origin site speed limit configuration.
        """
        return pulumi.get(self, "speed_limit")

    @speed_limit.setter
    def speed_limit(self, value: Optional[pulumi.Input['DdosPolicyDdosRuleSpeedLimitArgs']]):
        pulumi.set(self, "speed_limit", value)

    @property
    @pulumi.getter(name="statusInfo")
    def status_info(self) -> Optional[pulumi.Input['DdosPolicyDdosRuleStatusInfoArgs']]:
        """
        DDoS protection level.
        """
        return pulumi.get(self, "status_info")

    @status_info.setter
    def status_info(self, value: Optional[pulumi.Input['DdosPolicyDdosRuleStatusInfoArgs']]):
        pulumi.set(self, "status_info", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        DDoS protection switch. Valid values:- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class DdosPolicyDdosRuleAclArgs:
    def __init__(__self__, *,
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input['DdosPolicyDdosRuleAclAclArgs']]]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DdosPolicyDdosRuleAclAclArgs']]] acls: DDoS ACL rule configuration detail.
        :param pulumi.Input[str] switch: - `on`: Enable. `Acl` parameter is require.- `off`: Disable.
        """
        if acls is not None:
            pulumi.set(__self__, "acls", acls)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DdosPolicyDdosRuleAclAclArgs']]]]:
        """
        DDoS ACL rule configuration detail.
        """
        return pulumi.get(self, "acls")

    @acls.setter
    def acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DdosPolicyDdosRuleAclAclArgs']]]]):
        pulumi.set(self, "acls", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        - `on`: Enable. `Acl` parameter is require.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class DdosPolicyDdosRuleAclAclArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 dport_end: Optional[pulumi.Input[int]] = None,
                 dport_start: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 sport_end: Optional[pulumi.Input[int]] = None,
                 sport_start: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Action to take. Valid values: `drop`, `transmit`, `forward`.
        :param pulumi.Input[int] dport_end: End of the dest port range. Valid value range: 0-65535.
        :param pulumi.Input[int] dport_start: Start of the dest port range. Valid value range: 0-65535.
        :param pulumi.Input[str] protocol: Valid values: `tcp`, `udp`, `all`.
        :param pulumi.Input[int] sport_end: End of the source port range. Valid value range: 0-65535.
        :param pulumi.Input[int] sport_start: Start of the source port range. Valid value range: 0-65535.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if dport_end is not None:
            pulumi.set(__self__, "dport_end", dport_end)
        if dport_start is not None:
            pulumi.set(__self__, "dport_start", dport_start)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sport_end is not None:
            pulumi.set(__self__, "sport_end", sport_end)
        if sport_start is not None:
            pulumi.set(__self__, "sport_start", sport_start)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take. Valid values: `drop`, `transmit`, `forward`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="dportEnd")
    def dport_end(self) -> Optional[pulumi.Input[int]]:
        """
        End of the dest port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "dport_end")

    @dport_end.setter
    def dport_end(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dport_end", value)

    @property
    @pulumi.getter(name="dportStart")
    def dport_start(self) -> Optional[pulumi.Input[int]]:
        """
        Start of the dest port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "dport_start")

    @dport_start.setter
    def dport_start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dport_start", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values: `tcp`, `udp`, `all`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sportEnd")
    def sport_end(self) -> Optional[pulumi.Input[int]]:
        """
        End of the source port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "sport_end")

    @sport_end.setter
    def sport_end(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sport_end", value)

    @property
    @pulumi.getter(name="sportStart")
    def sport_start(self) -> Optional[pulumi.Input[int]]:
        """
        Start of the source port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "sport_start")

    @sport_start.setter
    def sport_start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sport_start", value)


@pulumi.input_type
class DdosPolicyDdosRuleAllowBlockArgs:
    def __init__(__self__, *,
                 allow_block_ips: Optional[pulumi.Input[Sequence[pulumi.Input['DdosPolicyDdosRuleAllowBlockAllowBlockIpArgs']]]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DdosPolicyDdosRuleAllowBlockAllowBlockIpArgs']]] allow_block_ips: DDoS black-white list detail.
        :param pulumi.Input[str] switch: - `on`: Enable. `AllowBlockIps` parameter is required.- `off`: Disable.
        """
        if allow_block_ips is not None:
            pulumi.set(__self__, "allow_block_ips", allow_block_ips)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="allowBlockIps")
    def allow_block_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DdosPolicyDdosRuleAllowBlockAllowBlockIpArgs']]]]:
        """
        DDoS black-white list detail.
        """
        return pulumi.get(self, "allow_block_ips")

    @allow_block_ips.setter
    def allow_block_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DdosPolicyDdosRuleAllowBlockAllowBlockIpArgs']]]]):
        pulumi.set(self, "allow_block_ips", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        - `on`: Enable. `AllowBlockIps` parameter is required.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class DdosPolicyDdosRuleAllowBlockAllowBlockIpArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 ip: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] type: Valid values: `block`, `allow`.
        :param pulumi.Input[str] ip: Valid value format:- ip, for example 1.1.1.1- ip range, for example 1.1.1.2-1.1.1.3- network segment, for example 1.2.1.0/24- network segment range, for example 1.2.1.0/24-1.2.2.0/24.
        """
        pulumi.set(__self__, "type", type)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Valid values: `block`, `allow`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Valid value format:- ip, for example 1.1.1.1- ip range, for example 1.1.1.2-1.1.1.3- network segment, for example 1.2.1.0/24- network segment range, for example 1.2.1.0/24-1.2.2.0/24.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class DdosPolicyDdosRuleAntiPlyArgs:
    def __init__(__self__, *,
                 abnormal_connect_num: pulumi.Input[int],
                 abnormal_syn_num: pulumi.Input[int],
                 abnormal_syn_ratio: pulumi.Input[int],
                 connect_timeout: pulumi.Input[int],
                 destination_connect_limit: pulumi.Input[int],
                 destination_create_limit: pulumi.Input[int],
                 drop_icmp: pulumi.Input[str],
                 drop_other: pulumi.Input[str],
                 drop_tcp: pulumi.Input[str],
                 drop_udp: pulumi.Input[str],
                 empty_connect_protect: pulumi.Input[str],
                 source_connect_limit: pulumi.Input[int],
                 source_create_limit: pulumi.Input[int],
                 udp_shard: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] abnormal_connect_num: Abnormal connections threshold. Valid value range: 0-4294967295.
        :param pulumi.Input[int] abnormal_syn_num: Abnormal syn packet number threshold. Valid value range: 0-65535.
        :param pulumi.Input[int] abnormal_syn_ratio: Abnormal syn packet ratio threshold. Valid value range: 0-100.
        :param pulumi.Input[int] connect_timeout: Connection timeout detection per second. Valid value range: 0-65535.
        :param pulumi.Input[int] destination_connect_limit: Limitation of connections to dest port. Valid value range: 0-4294967295.
        :param pulumi.Input[int] destination_create_limit: Limitation of new connection to dest port per second. Valid value range: 0-4294967295.
        :param pulumi.Input[str] drop_icmp: Block ICMP protocol. Valid values: `on`, `off`.
        :param pulumi.Input[str] drop_other: Block other protocols. Valid values: `on`, `off`.
        :param pulumi.Input[str] drop_tcp: Block TCP protocol. Valid values: `on`, `off`.
        :param pulumi.Input[str] drop_udp: Block UDP protocol. Valid values: `on`, `off`.
        :param pulumi.Input[str] empty_connect_protect: Empty connection protection switch. Valid values: `on`, `off`.
        :param pulumi.Input[int] source_connect_limit: Limitation of connections to origin site. Valid value range: 0-4294967295.
        :param pulumi.Input[int] source_create_limit: Limitation of new connection to origin site per second. Valid value range: 0-4294967295.
        :param pulumi.Input[str] udp_shard: UDP shard protection switch. Valid values: `on`, `off`.
        """
        pulumi.set(__self__, "abnormal_connect_num", abnormal_connect_num)
        pulumi.set(__self__, "abnormal_syn_num", abnormal_syn_num)
        pulumi.set(__self__, "abnormal_syn_ratio", abnormal_syn_ratio)
        pulumi.set(__self__, "connect_timeout", connect_timeout)
        pulumi.set(__self__, "destination_connect_limit", destination_connect_limit)
        pulumi.set(__self__, "destination_create_limit", destination_create_limit)
        pulumi.set(__self__, "drop_icmp", drop_icmp)
        pulumi.set(__self__, "drop_other", drop_other)
        pulumi.set(__self__, "drop_tcp", drop_tcp)
        pulumi.set(__self__, "drop_udp", drop_udp)
        pulumi.set(__self__, "empty_connect_protect", empty_connect_protect)
        pulumi.set(__self__, "source_connect_limit", source_connect_limit)
        pulumi.set(__self__, "source_create_limit", source_create_limit)
        if udp_shard is not None:
            pulumi.set(__self__, "udp_shard", udp_shard)

    @property
    @pulumi.getter(name="abnormalConnectNum")
    def abnormal_connect_num(self) -> pulumi.Input[int]:
        """
        Abnormal connections threshold. Valid value range: 0-4294967295.
        """
        return pulumi.get(self, "abnormal_connect_num")

    @abnormal_connect_num.setter
    def abnormal_connect_num(self, value: pulumi.Input[int]):
        pulumi.set(self, "abnormal_connect_num", value)

    @property
    @pulumi.getter(name="abnormalSynNum")
    def abnormal_syn_num(self) -> pulumi.Input[int]:
        """
        Abnormal syn packet number threshold. Valid value range: 0-65535.
        """
        return pulumi.get(self, "abnormal_syn_num")

    @abnormal_syn_num.setter
    def abnormal_syn_num(self, value: pulumi.Input[int]):
        pulumi.set(self, "abnormal_syn_num", value)

    @property
    @pulumi.getter(name="abnormalSynRatio")
    def abnormal_syn_ratio(self) -> pulumi.Input[int]:
        """
        Abnormal syn packet ratio threshold. Valid value range: 0-100.
        """
        return pulumi.get(self, "abnormal_syn_ratio")

    @abnormal_syn_ratio.setter
    def abnormal_syn_ratio(self, value: pulumi.Input[int]):
        pulumi.set(self, "abnormal_syn_ratio", value)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> pulumi.Input[int]:
        """
        Connection timeout detection per second. Valid value range: 0-65535.
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="destinationConnectLimit")
    def destination_connect_limit(self) -> pulumi.Input[int]:
        """
        Limitation of connections to dest port. Valid value range: 0-4294967295.
        """
        return pulumi.get(self, "destination_connect_limit")

    @destination_connect_limit.setter
    def destination_connect_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "destination_connect_limit", value)

    @property
    @pulumi.getter(name="destinationCreateLimit")
    def destination_create_limit(self) -> pulumi.Input[int]:
        """
        Limitation of new connection to dest port per second. Valid value range: 0-4294967295.
        """
        return pulumi.get(self, "destination_create_limit")

    @destination_create_limit.setter
    def destination_create_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "destination_create_limit", value)

    @property
    @pulumi.getter(name="dropIcmp")
    def drop_icmp(self) -> pulumi.Input[str]:
        """
        Block ICMP protocol. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "drop_icmp")

    @drop_icmp.setter
    def drop_icmp(self, value: pulumi.Input[str]):
        pulumi.set(self, "drop_icmp", value)

    @property
    @pulumi.getter(name="dropOther")
    def drop_other(self) -> pulumi.Input[str]:
        """
        Block other protocols. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "drop_other")

    @drop_other.setter
    def drop_other(self, value: pulumi.Input[str]):
        pulumi.set(self, "drop_other", value)

    @property
    @pulumi.getter(name="dropTcp")
    def drop_tcp(self) -> pulumi.Input[str]:
        """
        Block TCP protocol. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "drop_tcp")

    @drop_tcp.setter
    def drop_tcp(self, value: pulumi.Input[str]):
        pulumi.set(self, "drop_tcp", value)

    @property
    @pulumi.getter(name="dropUdp")
    def drop_udp(self) -> pulumi.Input[str]:
        """
        Block UDP protocol. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "drop_udp")

    @drop_udp.setter
    def drop_udp(self, value: pulumi.Input[str]):
        pulumi.set(self, "drop_udp", value)

    @property
    @pulumi.getter(name="emptyConnectProtect")
    def empty_connect_protect(self) -> pulumi.Input[str]:
        """
        Empty connection protection switch. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "empty_connect_protect")

    @empty_connect_protect.setter
    def empty_connect_protect(self, value: pulumi.Input[str]):
        pulumi.set(self, "empty_connect_protect", value)

    @property
    @pulumi.getter(name="sourceConnectLimit")
    def source_connect_limit(self) -> pulumi.Input[int]:
        """
        Limitation of connections to origin site. Valid value range: 0-4294967295.
        """
        return pulumi.get(self, "source_connect_limit")

    @source_connect_limit.setter
    def source_connect_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "source_connect_limit", value)

    @property
    @pulumi.getter(name="sourceCreateLimit")
    def source_create_limit(self) -> pulumi.Input[int]:
        """
        Limitation of new connection to origin site per second. Valid value range: 0-4294967295.
        """
        return pulumi.get(self, "source_create_limit")

    @source_create_limit.setter
    def source_create_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "source_create_limit", value)

    @property
    @pulumi.getter(name="udpShard")
    def udp_shard(self) -> Optional[pulumi.Input[str]]:
        """
        UDP shard protection switch. Valid values: `on`, `off`.
        """
        return pulumi.get(self, "udp_shard")

    @udp_shard.setter
    def udp_shard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udp_shard", value)


@pulumi.input_type
class DdosPolicyDdosRuleGeoIpArgs:
    def __init__(__self__, *,
                 region_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] region_ids: Region ID. See details in data source `security_policy_regions`.
        :param pulumi.Input[str] switch: - `on`: Enable.- `off`: Disable.
        """
        if region_ids is not None:
            pulumi.set(__self__, "region_ids", region_ids)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="regionIds")
    def region_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Region ID. See details in data source `security_policy_regions`.
        """
        return pulumi.get(self, "region_ids")

    @region_ids.setter
    def region_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "region_ids", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class DdosPolicyDdosRulePacketFilterArgs:
    def __init__(__self__, *,
                 packet_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DdosPolicyDdosRulePacketFilterPacketFilterArgs']]]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DdosPolicyDdosRulePacketFilterPacketFilterArgs']]] packet_filters: DDoS feature filtering configuration detail.
        :param pulumi.Input[str] switch: - `on`: Enable. `PacketFilters` parameter is required.- `off`: Disable.
        """
        if packet_filters is not None:
            pulumi.set(__self__, "packet_filters", packet_filters)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="packetFilters")
    def packet_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DdosPolicyDdosRulePacketFilterPacketFilterArgs']]]]:
        """
        DDoS feature filtering configuration detail.
        """
        return pulumi.get(self, "packet_filters")

    @packet_filters.setter
    def packet_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DdosPolicyDdosRulePacketFilterPacketFilterArgs']]]]):
        pulumi.set(self, "packet_filters", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        - `on`: Enable. `PacketFilters` parameter is required.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class DdosPolicyDdosRulePacketFilterPacketFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 depth: Optional[pulumi.Input[int]] = None,
                 depth2: Optional[pulumi.Input[int]] = None,
                 dport_end: Optional[pulumi.Input[int]] = None,
                 dport_start: Optional[pulumi.Input[int]] = None,
                 is_not: Optional[pulumi.Input[int]] = None,
                 is_not2: Optional[pulumi.Input[int]] = None,
                 match_begin: Optional[pulumi.Input[str]] = None,
                 match_begin2: Optional[pulumi.Input[str]] = None,
                 match_logic: Optional[pulumi.Input[str]] = None,
                 match_type: Optional[pulumi.Input[str]] = None,
                 match_type2: Optional[pulumi.Input[str]] = None,
                 offset: Optional[pulumi.Input[int]] = None,
                 offset2: Optional[pulumi.Input[int]] = None,
                 packet_max: Optional[pulumi.Input[int]] = None,
                 packet_min: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 sport_end: Optional[pulumi.Input[int]] = None,
                 sport_start: Optional[pulumi.Input[int]] = None,
                 str: Optional[pulumi.Input[str]] = None,
                 str2: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to take. Valid values: `drop`, `transmit`, `drop_block`, `forward`.
        :param pulumi.Input[int] depth: Packet character depth to check of feature 1. Valid value range: 1-1500.
        :param pulumi.Input[int] depth2: Packet character depth to check of feature 2. Valid value range: 1-1500.
        :param pulumi.Input[int] dport_end: End of the dest port range. Valid value range: 0-65535.
        :param pulumi.Input[int] dport_start: Start of the dest port range. Valid value range: 0-65535.
        :param pulumi.Input[int] is_not: Negate the match condition of feature 1. Valid values:- `0`: match.- `1`: not match.
        :param pulumi.Input[int] is_not2: Negate the match condition of feature 2. Valid values:- `0`: match.- `1`: not match.
        :param pulumi.Input[str] match_begin: Packet layer for matching begin of feature 1. Valid values:- `begin_l5`: matching from packet payload.- `begin_l4`: matching from TCP/UDP header.- `begin_l3`: matching from IP header.
        :param pulumi.Input[str] match_begin2: Packet layer for matching begin of feature 2. Valid values:- `begin_l5`: matching from packet payload.- `begin_l4`: matching from TCP/UDP header.- `begin_l3`: matching from IP header.
        :param pulumi.Input[str] match_logic: Relation between multi features. Valid values: `and`, `or`, `none` (only feature 1 is used).
        :param pulumi.Input[str] match_type: Match type of feature 1. Valid values:- `pcre`: regex expression.- `sunday`: string match.
        :param pulumi.Input[str] match_type2: Match type of feature 2. Valid values:- `pcre`: regex expression.- `sunday`: string match.
        :param pulumi.Input[int] offset: Offset of feature 1. Valid value range: 1-1500.
        :param pulumi.Input[int] offset2: Offset of feature 2. Valid value range: 1-1500.
        :param pulumi.Input[int] packet_max: Max packet size. Valid value range: 0-1500.
        :param pulumi.Input[int] packet_min: Min packet size. Valid value range: 0-1500.
        :param pulumi.Input[str] protocol: Valid value: `tcp`, `udp`, `icmp`, `all`.
        :param pulumi.Input[int] sport_end: End of the source port range. Valid value range: 0-65535.
        :param pulumi.Input[int] sport_start: Start of the source port range. Valid value range: 0-65535.
        :param pulumi.Input[str] str: Regex expression or string to match.
        :param pulumi.Input[str] str2: Regex expression or string to match.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if depth is not None:
            pulumi.set(__self__, "depth", depth)
        if depth2 is not None:
            pulumi.set(__self__, "depth2", depth2)
        if dport_end is not None:
            pulumi.set(__self__, "dport_end", dport_end)
        if dport_start is not None:
            pulumi.set(__self__, "dport_start", dport_start)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)
        if is_not2 is not None:
            pulumi.set(__self__, "is_not2", is_not2)
        if match_begin is not None:
            pulumi.set(__self__, "match_begin", match_begin)
        if match_begin2 is not None:
            pulumi.set(__self__, "match_begin2", match_begin2)
        if match_logic is not None:
            pulumi.set(__self__, "match_logic", match_logic)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_type2 is not None:
            pulumi.set(__self__, "match_type2", match_type2)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if offset2 is not None:
            pulumi.set(__self__, "offset2", offset2)
        if packet_max is not None:
            pulumi.set(__self__, "packet_max", packet_max)
        if packet_min is not None:
            pulumi.set(__self__, "packet_min", packet_min)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sport_end is not None:
            pulumi.set(__self__, "sport_end", sport_end)
        if sport_start is not None:
            pulumi.set(__self__, "sport_start", sport_start)
        if str is not None:
            pulumi.set(__self__, "str", str)
        if str2 is not None:
            pulumi.set(__self__, "str2", str2)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take. Valid values: `drop`, `transmit`, `drop_block`, `forward`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def depth(self) -> Optional[pulumi.Input[int]]:
        """
        Packet character depth to check of feature 1. Valid value range: 1-1500.
        """
        return pulumi.get(self, "depth")

    @depth.setter
    def depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "depth", value)

    @property
    @pulumi.getter
    def depth2(self) -> Optional[pulumi.Input[int]]:
        """
        Packet character depth to check of feature 2. Valid value range: 1-1500.
        """
        return pulumi.get(self, "depth2")

    @depth2.setter
    def depth2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "depth2", value)

    @property
    @pulumi.getter(name="dportEnd")
    def dport_end(self) -> Optional[pulumi.Input[int]]:
        """
        End of the dest port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "dport_end")

    @dport_end.setter
    def dport_end(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dport_end", value)

    @property
    @pulumi.getter(name="dportStart")
    def dport_start(self) -> Optional[pulumi.Input[int]]:
        """
        Start of the dest port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "dport_start")

    @dport_start.setter
    def dport_start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dport_start", value)

    @property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[pulumi.Input[int]]:
        """
        Negate the match condition of feature 1. Valid values:- `0`: match.- `1`: not match.
        """
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_not", value)

    @property
    @pulumi.getter(name="isNot2")
    def is_not2(self) -> Optional[pulumi.Input[int]]:
        """
        Negate the match condition of feature 2. Valid values:- `0`: match.- `1`: not match.
        """
        return pulumi.get(self, "is_not2")

    @is_not2.setter
    def is_not2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_not2", value)

    @property
    @pulumi.getter(name="matchBegin")
    def match_begin(self) -> Optional[pulumi.Input[str]]:
        """
        Packet layer for matching begin of feature 1. Valid values:- `begin_l5`: matching from packet payload.- `begin_l4`: matching from TCP/UDP header.- `begin_l3`: matching from IP header.
        """
        return pulumi.get(self, "match_begin")

    @match_begin.setter
    def match_begin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_begin", value)

    @property
    @pulumi.getter(name="matchBegin2")
    def match_begin2(self) -> Optional[pulumi.Input[str]]:
        """
        Packet layer for matching begin of feature 2. Valid values:- `begin_l5`: matching from packet payload.- `begin_l4`: matching from TCP/UDP header.- `begin_l3`: matching from IP header.
        """
        return pulumi.get(self, "match_begin2")

    @match_begin2.setter
    def match_begin2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_begin2", value)

    @property
    @pulumi.getter(name="matchLogic")
    def match_logic(self) -> Optional[pulumi.Input[str]]:
        """
        Relation between multi features. Valid values: `and`, `or`, `none` (only feature 1 is used).
        """
        return pulumi.get(self, "match_logic")

    @match_logic.setter
    def match_logic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_logic", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[pulumi.Input[str]]:
        """
        Match type of feature 1. Valid values:- `pcre`: regex expression.- `sunday`: string match.
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchType2")
    def match_type2(self) -> Optional[pulumi.Input[str]]:
        """
        Match type of feature 2. Valid values:- `pcre`: regex expression.- `sunday`: string match.
        """
        return pulumi.get(self, "match_type2")

    @match_type2.setter
    def match_type2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_type2", value)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[int]]:
        """
        Offset of feature 1. Valid value range: 1-1500.
        """
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def offset2(self) -> Optional[pulumi.Input[int]]:
        """
        Offset of feature 2. Valid value range: 1-1500.
        """
        return pulumi.get(self, "offset2")

    @offset2.setter
    def offset2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "offset2", value)

    @property
    @pulumi.getter(name="packetMax")
    def packet_max(self) -> Optional[pulumi.Input[int]]:
        """
        Max packet size. Valid value range: 0-1500.
        """
        return pulumi.get(self, "packet_max")

    @packet_max.setter
    def packet_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_max", value)

    @property
    @pulumi.getter(name="packetMin")
    def packet_min(self) -> Optional[pulumi.Input[int]]:
        """
        Min packet size. Valid value range: 0-1500.
        """
        return pulumi.get(self, "packet_min")

    @packet_min.setter
    def packet_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_min", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Valid value: `tcp`, `udp`, `icmp`, `all`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sportEnd")
    def sport_end(self) -> Optional[pulumi.Input[int]]:
        """
        End of the source port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "sport_end")

    @sport_end.setter
    def sport_end(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sport_end", value)

    @property
    @pulumi.getter(name="sportStart")
    def sport_start(self) -> Optional[pulumi.Input[int]]:
        """
        Start of the source port range. Valid value range: 0-65535.
        """
        return pulumi.get(self, "sport_start")

    @sport_start.setter
    def sport_start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sport_start", value)

    @property
    @pulumi.getter
    def str(self) -> Optional[pulumi.Input[str]]:
        """
        Regex expression or string to match.
        """
        return pulumi.get(self, "str")

    @str.setter
    def str(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "str", value)

    @property
    @pulumi.getter
    def str2(self) -> Optional[pulumi.Input[str]]:
        """
        Regex expression or string to match.
        """
        return pulumi.get(self, "str2")

    @str2.setter
    def str2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "str2", value)


@pulumi.input_type
class DdosPolicyDdosRuleSpeedLimitArgs:
    def __init__(__self__, *,
                 flux_limit: Optional[pulumi.Input[str]] = None,
                 package_limit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] flux_limit: Limit the number of fluxes. Valid range: 1 bps-10000 Gbps, 0 means no limitation, supported units: `pps`,`Kpps`,`Mpps`,`Gpps`.
        :param pulumi.Input[str] package_limit: Limit the number of packages. Valid range: 1 pps-10000 Gpps, 0 means no limitation, supported units: `pps`,`Kpps`,`Mpps`,`Gpps`.
        """
        if flux_limit is not None:
            pulumi.set(__self__, "flux_limit", flux_limit)
        if package_limit is not None:
            pulumi.set(__self__, "package_limit", package_limit)

    @property
    @pulumi.getter(name="fluxLimit")
    def flux_limit(self) -> Optional[pulumi.Input[str]]:
        """
        Limit the number of fluxes. Valid range: 1 bps-10000 Gbps, 0 means no limitation, supported units: `pps`,`Kpps`,`Mpps`,`Gpps`.
        """
        return pulumi.get(self, "flux_limit")

    @flux_limit.setter
    def flux_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flux_limit", value)

    @property
    @pulumi.getter(name="packageLimit")
    def package_limit(self) -> Optional[pulumi.Input[str]]:
        """
        Limit the number of packages. Valid range: 1 pps-10000 Gpps, 0 means no limitation, supported units: `pps`,`Kpps`,`Mpps`,`Gpps`.
        """
        return pulumi.get(self, "package_limit")

    @package_limit.setter
    def package_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_limit", value)


@pulumi.input_type
class DdosPolicyDdosRuleStatusInfoArgs:
    def __init__(__self__, *,
                 ply_level: pulumi.Input[str]):
        """
        :param pulumi.Input[str] ply_level: Policy level. Valid values:- `low`: loose.- `middle`: moderate.- `high`: strict.
        """
        pulumi.set(__self__, "ply_level", ply_level)

    @property
    @pulumi.getter(name="plyLevel")
    def ply_level(self) -> pulumi.Input[str]:
        """
        Policy level. Valid values:- `low`: loose.- `middle`: moderate.- `high`: strict.
        """
        return pulumi.get(self, "ply_level")

    @ply_level.setter
    def ply_level(self, value: pulumi.Input[str]):
        pulumi.set(self, "ply_level", value)


@pulumi.input_type
class DnsSecDnssecArgs:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 d_s: Optional[pulumi.Input[str]] = None,
                 digest: Optional[pulumi.Input[str]] = None,
                 digest_algorithm: Optional[pulumi.Input[str]] = None,
                 digest_type: Optional[pulumi.Input[str]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 key_tag: Optional[pulumi.Input[int]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if d_s is not None:
            pulumi.set(__self__, "d_s", d_s)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if digest_algorithm is not None:
            pulumi.set(__self__, "digest_algorithm", digest_algorithm)
        if digest_type is not None:
            pulumi.set(__self__, "digest_type", digest_type)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if key_tag is not None:
            pulumi.set(__self__, "key_tag", key_tag)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="dS")
    def d_s(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "d_s")

    @d_s.setter
    def d_s(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "d_s", value)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter(name="digestAlgorithm")
    def digest_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "digest_algorithm")

    @digest_algorithm.setter
    def digest_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest_algorithm", value)

    @property
    @pulumi.getter(name="digestType")
    def digest_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "digest_type")

    @digest_type.setter
    def digest_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest_type", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter(name="keyTag")
    def key_tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_tag")

    @key_tag.setter
    def key_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_tag", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)


@pulumi.input_type
class OriginGroupOriginRecordArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 record: pulumi.Input[str],
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 private_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['OriginGroupOriginRecordPrivateParameterArgs']]]] = None,
                 record_id: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] port: Port of the origin site. Valid value range: 1-65535.
        :param pulumi.Input[str] record: Record value, which could be an IPv4/IPv6 address or a domain.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] areas: Indicating origin site&#39;s area when `Type` field is `area`. An empty List indicate the default area. Valid value:- Asia, Americas, Europe, Africa or Oceania.- 2 characters ISO 3166 area code.
        :param pulumi.Input[bool] private: Whether origin site is using private authentication. Only valid when `OriginType` is `third_party`.
        :param pulumi.Input[Sequence[pulumi.Input['OriginGroupOriginRecordPrivateParameterArgs']]] private_parameters: Parameters for private authentication. Only valid when `Private` is `true`.
        :param pulumi.Input[int] weight: Indicating origin site&#39;s weight when `Type` field is `weight`. Valid value range: 1-100. Sum of all weights should be 100.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "record", record)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if private_parameters is not None:
            pulumi.set(__self__, "private_parameters", private_parameters)
        if record_id is not None:
            pulumi.set(__self__, "record_id", record_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Port of the origin site. Valid value range: 1-65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def record(self) -> pulumi.Input[str]:
        """
        Record value, which could be an IPv4/IPv6 address or a domain.
        """
        return pulumi.get(self, "record")

    @record.setter
    def record(self, value: pulumi.Input[str]):
        pulumi.set(self, "record", value)

    @property
    @pulumi.getter
    def areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Indicating origin site&#39;s area when `Type` field is `area`. An empty List indicate the default area. Valid value:- Asia, Americas, Europe, Africa or Oceania.- 2 characters ISO 3166 area code.
        """
        return pulumi.get(self, "areas")

    @areas.setter
    def areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "areas", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether origin site is using private authentication. Only valid when `OriginType` is `third_party`.
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter(name="privateParameters")
    def private_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OriginGroupOriginRecordPrivateParameterArgs']]]]:
        """
        Parameters for private authentication. Only valid when `Private` is `true`.
        """
        return pulumi.get(self, "private_parameters")

    @private_parameters.setter
    def private_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OriginGroupOriginRecordPrivateParameterArgs']]]]):
        pulumi.set(self, "private_parameters", value)

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "record_id")

    @record_id.setter
    def record_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_id", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Indicating origin site&#39;s weight when `Type` field is `weight`. Valid value range: 1-100. Sum of all weights should be 100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class OriginGroupOriginRecordPrivateParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Parameter Name. Valid values:- AccessKeyId:Access Key ID.- SecretAccessKey:Secret Access Key.
        :param pulumi.Input[str] value: Parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter Name. Valid values:- AccessKeyId:Access Key ID.- SecretAccessKey:Secret Access Key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RuleEnginePriorityRulesPriorityArgs:
    def __init__(__self__, *,
                 index: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] index: Priority order of rules.
        :param pulumi.Input[str] value: Priority of rules id.
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        Priority order of rules.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Priority of rules id.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RuleEngineRuleArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionArgs']]],
                 ors: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrArgs']]],
                 sub_rules: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionArgs']]] actions: Actions list of the rule. See details in data source `rule_engine_setting`.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrArgs']]] ors: OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleArgs']]] sub_rules: Actions list of the rule. See details in data source `rule_engine_setting`.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "ors", ors)
        if sub_rules is not None:
            pulumi.set(__self__, "sub_rules", sub_rules)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionArgs']]]:
        """
        Actions list of the rule. See details in data source `rule_engine_setting`.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionArgs']]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def ors(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrArgs']]]:
        """
        OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        """
        return pulumi.get(self, "ors")

    @ors.setter
    def ors(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrArgs']]]):
        pulumi.set(self, "ors", value)

    @property
    @pulumi.getter(name="subRules")
    def sub_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleArgs']]]]:
        """
        Actions list of the rule. See details in data source `rule_engine_setting`.
        """
        return pulumi.get(self, "sub_rules")

    @sub_rules.setter
    def sub_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleArgs']]]]):
        pulumi.set(self, "sub_rules", value)


@pulumi.input_type
class RuleEngineRuleActionArgs:
    def __init__(__self__, *,
                 code_action: Optional[pulumi.Input['RuleEngineRuleActionCodeActionArgs']] = None,
                 normal_action: Optional[pulumi.Input['RuleEngineRuleActionNormalActionArgs']] = None,
                 rewrite_action: Optional[pulumi.Input['RuleEngineRuleActionRewriteActionArgs']] = None):
        """
        :param pulumi.Input['RuleEngineRuleActionCodeActionArgs'] code_action: Define a code action.
        :param pulumi.Input['RuleEngineRuleActionNormalActionArgs'] normal_action: Define a normal action.
        :param pulumi.Input['RuleEngineRuleActionRewriteActionArgs'] rewrite_action: Define a rewrite action.
        """
        if code_action is not None:
            pulumi.set(__self__, "code_action", code_action)
        if normal_action is not None:
            pulumi.set(__self__, "normal_action", normal_action)
        if rewrite_action is not None:
            pulumi.set(__self__, "rewrite_action", rewrite_action)

    @property
    @pulumi.getter(name="codeAction")
    def code_action(self) -> Optional[pulumi.Input['RuleEngineRuleActionCodeActionArgs']]:
        """
        Define a code action.
        """
        return pulumi.get(self, "code_action")

    @code_action.setter
    def code_action(self, value: Optional[pulumi.Input['RuleEngineRuleActionCodeActionArgs']]):
        pulumi.set(self, "code_action", value)

    @property
    @pulumi.getter(name="normalAction")
    def normal_action(self) -> Optional[pulumi.Input['RuleEngineRuleActionNormalActionArgs']]:
        """
        Define a normal action.
        """
        return pulumi.get(self, "normal_action")

    @normal_action.setter
    def normal_action(self, value: Optional[pulumi.Input['RuleEngineRuleActionNormalActionArgs']]):
        pulumi.set(self, "normal_action", value)

    @property
    @pulumi.getter(name="rewriteAction")
    def rewrite_action(self) -> Optional[pulumi.Input['RuleEngineRuleActionRewriteActionArgs']]:
        """
        Define a rewrite action.
        """
        return pulumi.get(self, "rewrite_action")

    @rewrite_action.setter
    def rewrite_action(self, value: Optional[pulumi.Input['RuleEngineRuleActionRewriteActionArgs']]):
        pulumi.set(self, "rewrite_action", value)


@pulumi.input_type
class RuleEngineRuleActionCodeActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionCodeActionParameterArgs']]]):
        """
        :param pulumi.Input[str] action: Action name.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionCodeActionParameterArgs']]] parameters: Action parameters.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionCodeActionParameterArgs']]]:
        """
        Action parameters.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionCodeActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleActionCodeActionParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 status_code: pulumi.Input[int],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Parameter Name.
        :param pulumi.Input[int] status_code: HTTP status code to use.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Parameter Values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[int]:
        """
        HTTP status code to use.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Parameter Values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleActionNormalActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionNormalActionParameterArgs']]]):
        """
        :param pulumi.Input[str] action: Action name.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionNormalActionParameterArgs']]] parameters: Action parameters.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionNormalActionParameterArgs']]]:
        """
        Action parameters.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionNormalActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleActionNormalActionParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Parameter Name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Parameter Values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Parameter Values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleActionRewriteActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionRewriteActionParameterArgs']]]):
        """
        :param pulumi.Input[str] action: Action name.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionRewriteActionParameterArgs']]] parameters: Action parameters.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionRewriteActionParameterArgs']]]:
        """
        Action parameters.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionRewriteActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleActionRewriteActionParameterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] action: Action to take on the HEADER. Valid values: `add`, `del`, `set`.
        :param pulumi.Input[str] name: Parameter Name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Parameter Values.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Action to take on the HEADER. Valid values: `add`, `del`, `set`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Parameter Values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleOrArgs:
    def __init__(__self__, *,
                 ands: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrAndArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrAndArgs']]] ands: AND Conditions list of the rule. Rule would be triggered if all conditions are true.
        """
        pulumi.set(__self__, "ands", ands)

    @property
    @pulumi.getter
    def ands(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrAndArgs']]]:
        """
        AND Conditions list of the rule. Rule would be triggered if all conditions are true.
        """
        return pulumi.get(self, "ands")

    @ands.setter
    def ands(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrAndArgs']]]):
        pulumi.set(self, "ands", value)


@pulumi.input_type
class RuleEngineRuleOrAndArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 target: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] operator: Condition operator. Valid values are `equal`, `notequal`.
        :param pulumi.Input[str] target: Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Condition Value.
        :param pulumi.Input[bool] ignore_case: Whether to ignore the case of the parameter value, the default value is false.
        :param pulumi.Input[str] name: The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "values", values)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Condition operator. Valid values are `equal`, `notequal`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Condition Value.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to ignore the case of the parameter value, the default value is false.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RuleEngineRuleSubRuleArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleArgs']]],
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleArgs']]] rules: Rule items list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: rule tag list.
        """
        pulumi.set(__self__, "rules", rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleArgs']]]:
        """
        Rule items list.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        rule tag list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionArgs']]],
                 ors: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionArgs']]] actions: Actions list of the rule. See details in data source `rule_engine_setting`.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrArgs']]] ors: OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "ors", ors)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionArgs']]]:
        """
        Actions list of the rule. See details in data source `rule_engine_setting`.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionArgs']]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def ors(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrArgs']]]:
        """
        OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        """
        return pulumi.get(self, "ors")

    @ors.setter
    def ors(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrArgs']]]):
        pulumi.set(self, "ors", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionArgs:
    def __init__(__self__, *,
                 code_action: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionArgs']] = None,
                 normal_action: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionArgs']] = None,
                 rewrite_action: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionArgs']] = None):
        """
        :param pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionArgs'] code_action: Define a code action.
        :param pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionArgs'] normal_action: Define a normal action.
        :param pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionArgs'] rewrite_action: Define a rewrite action.
        """
        if code_action is not None:
            pulumi.set(__self__, "code_action", code_action)
        if normal_action is not None:
            pulumi.set(__self__, "normal_action", normal_action)
        if rewrite_action is not None:
            pulumi.set(__self__, "rewrite_action", rewrite_action)

    @property
    @pulumi.getter(name="codeAction")
    def code_action(self) -> Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionArgs']]:
        """
        Define a code action.
        """
        return pulumi.get(self, "code_action")

    @code_action.setter
    def code_action(self, value: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionArgs']]):
        pulumi.set(self, "code_action", value)

    @property
    @pulumi.getter(name="normalAction")
    def normal_action(self) -> Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionArgs']]:
        """
        Define a normal action.
        """
        return pulumi.get(self, "normal_action")

    @normal_action.setter
    def normal_action(self, value: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionArgs']]):
        pulumi.set(self, "normal_action", value)

    @property
    @pulumi.getter(name="rewriteAction")
    def rewrite_action(self) -> Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionArgs']]:
        """
        Define a rewrite action.
        """
        return pulumi.get(self, "rewrite_action")

    @rewrite_action.setter
    def rewrite_action(self, value: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionArgs']]):
        pulumi.set(self, "rewrite_action", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionCodeActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs']]]):
        """
        :param pulumi.Input[str] action: Action name.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs']]] parameters: Action parameters.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs']]]:
        """
        Action parameters.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 status_code: pulumi.Input[int],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Parameter Name.
        :param pulumi.Input[int] status_code: HTTP status code to use.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Parameter Values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[int]:
        """
        HTTP status code to use.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Parameter Values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionNormalActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs']]]):
        """
        :param pulumi.Input[str] action: Action name.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs']]] parameters: Action parameters.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs']]]:
        """
        Action parameters.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Parameter Name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Parameter Values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Parameter Values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionRewriteActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs']]]):
        """
        :param pulumi.Input[str] action: Action name.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs']]] parameters: Action parameters.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs']]]:
        """
        Action parameters.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] action: Action to take on the HEADER. Valid values: `add`, `del`, `set`.
        :param pulumi.Input[str] name: Parameter Name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Parameter Values.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Action to take on the HEADER. Valid values: `add`, `del`, `set`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Parameter Values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleOrArgs:
    def __init__(__self__, *,
                 ands: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrAndArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrAndArgs']]] ands: AND Conditions list of the rule. Rule would be triggered if all conditions are true.
        """
        pulumi.set(__self__, "ands", ands)

    @property
    @pulumi.getter
    def ands(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrAndArgs']]]:
        """
        AND Conditions list of the rule. Rule would be triggered if all conditions are true.
        """
        return pulumi.get(self, "ands")

    @ands.setter
    def ands(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrAndArgs']]]):
        pulumi.set(self, "ands", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleOrAndArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 target: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] operator: Condition operator. Valid values are `equal`, `notequal`.
        :param pulumi.Input[str] target: Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Condition Value.
        :param pulumi.Input[bool] ignore_case: Whether to ignore the case of the parameter value, the default value is false.
        :param pulumi.Input[str] name: The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "values", values)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Condition operator. Valid values are `equal`, `notequal`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Condition Value.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to ignore the case of the parameter value, the default value is false.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecurityPolicyConfigArgs:
    def __init__(__self__, *,
                 acl_config: Optional[pulumi.Input['SecurityPolicyConfigAclConfigArgs']] = None,
                 bot_config: Optional[pulumi.Input['SecurityPolicyConfigBotConfigArgs']] = None,
                 drop_page_config: Optional[pulumi.Input['SecurityPolicyConfigDropPageConfigArgs']] = None,
                 except_config: Optional[pulumi.Input['SecurityPolicyConfigExceptConfigArgs']] = None,
                 ip_table_config: Optional[pulumi.Input['SecurityPolicyConfigIpTableConfigArgs']] = None,
                 rate_limit_config: Optional[pulumi.Input['SecurityPolicyConfigRateLimitConfigArgs']] = None,
                 switch_config: Optional[pulumi.Input['SecurityPolicyConfigSwitchConfigArgs']] = None,
                 waf_config: Optional[pulumi.Input['SecurityPolicyConfigWafConfigArgs']] = None):
        """
        :param pulumi.Input['SecurityPolicyConfigAclConfigArgs'] acl_config: ACL configuration.
        :param pulumi.Input['SecurityPolicyConfigBotConfigArgs'] bot_config: Bot Configuration.
        :param pulumi.Input['SecurityPolicyConfigDropPageConfigArgs'] drop_page_config: Custom drop page configuration.
        :param pulumi.Input['SecurityPolicyConfigExceptConfigArgs'] except_config: Exception rule configuration.
        :param pulumi.Input['SecurityPolicyConfigIpTableConfigArgs'] ip_table_config: Basic access control.
        :param pulumi.Input['SecurityPolicyConfigRateLimitConfigArgs'] rate_limit_config: RateLimit Configuration.
        :param pulumi.Input['SecurityPolicyConfigSwitchConfigArgs'] switch_config: Main switch of 7-layer security.
        :param pulumi.Input['SecurityPolicyConfigWafConfigArgs'] waf_config: WAF (Web Application Firewall) Configuration.
        """
        if acl_config is not None:
            pulumi.set(__self__, "acl_config", acl_config)
        if bot_config is not None:
            pulumi.set(__self__, "bot_config", bot_config)
        if drop_page_config is not None:
            pulumi.set(__self__, "drop_page_config", drop_page_config)
        if except_config is not None:
            pulumi.set(__self__, "except_config", except_config)
        if ip_table_config is not None:
            pulumi.set(__self__, "ip_table_config", ip_table_config)
        if rate_limit_config is not None:
            pulumi.set(__self__, "rate_limit_config", rate_limit_config)
        if switch_config is not None:
            pulumi.set(__self__, "switch_config", switch_config)
        if waf_config is not None:
            pulumi.set(__self__, "waf_config", waf_config)

    @property
    @pulumi.getter(name="aclConfig")
    def acl_config(self) -> Optional[pulumi.Input['SecurityPolicyConfigAclConfigArgs']]:
        """
        ACL configuration.
        """
        return pulumi.get(self, "acl_config")

    @acl_config.setter
    def acl_config(self, value: Optional[pulumi.Input['SecurityPolicyConfigAclConfigArgs']]):
        pulumi.set(self, "acl_config", value)

    @property
    @pulumi.getter(name="botConfig")
    def bot_config(self) -> Optional[pulumi.Input['SecurityPolicyConfigBotConfigArgs']]:
        """
        Bot Configuration.
        """
        return pulumi.get(self, "bot_config")

    @bot_config.setter
    def bot_config(self, value: Optional[pulumi.Input['SecurityPolicyConfigBotConfigArgs']]):
        pulumi.set(self, "bot_config", value)

    @property
    @pulumi.getter(name="dropPageConfig")
    def drop_page_config(self) -> Optional[pulumi.Input['SecurityPolicyConfigDropPageConfigArgs']]:
        """
        Custom drop page configuration.
        """
        return pulumi.get(self, "drop_page_config")

    @drop_page_config.setter
    def drop_page_config(self, value: Optional[pulumi.Input['SecurityPolicyConfigDropPageConfigArgs']]):
        pulumi.set(self, "drop_page_config", value)

    @property
    @pulumi.getter(name="exceptConfig")
    def except_config(self) -> Optional[pulumi.Input['SecurityPolicyConfigExceptConfigArgs']]:
        """
        Exception rule configuration.
        """
        return pulumi.get(self, "except_config")

    @except_config.setter
    def except_config(self, value: Optional[pulumi.Input['SecurityPolicyConfigExceptConfigArgs']]):
        pulumi.set(self, "except_config", value)

    @property
    @pulumi.getter(name="ipTableConfig")
    def ip_table_config(self) -> Optional[pulumi.Input['SecurityPolicyConfigIpTableConfigArgs']]:
        """
        Basic access control.
        """
        return pulumi.get(self, "ip_table_config")

    @ip_table_config.setter
    def ip_table_config(self, value: Optional[pulumi.Input['SecurityPolicyConfigIpTableConfigArgs']]):
        pulumi.set(self, "ip_table_config", value)

    @property
    @pulumi.getter(name="rateLimitConfig")
    def rate_limit_config(self) -> Optional[pulumi.Input['SecurityPolicyConfigRateLimitConfigArgs']]:
        """
        RateLimit Configuration.
        """
        return pulumi.get(self, "rate_limit_config")

    @rate_limit_config.setter
    def rate_limit_config(self, value: Optional[pulumi.Input['SecurityPolicyConfigRateLimitConfigArgs']]):
        pulumi.set(self, "rate_limit_config", value)

    @property
    @pulumi.getter(name="switchConfig")
    def switch_config(self) -> Optional[pulumi.Input['SecurityPolicyConfigSwitchConfigArgs']]:
        """
        Main switch of 7-layer security.
        """
        return pulumi.get(self, "switch_config")

    @switch_config.setter
    def switch_config(self, value: Optional[pulumi.Input['SecurityPolicyConfigSwitchConfigArgs']]):
        pulumi.set(self, "switch_config", value)

    @property
    @pulumi.getter(name="wafConfig")
    def waf_config(self) -> Optional[pulumi.Input['SecurityPolicyConfigWafConfigArgs']]:
        """
        WAF (Web Application Firewall) Configuration.
        """
        return pulumi.get(self, "waf_config")

    @waf_config.setter
    def waf_config(self, value: Optional[pulumi.Input['SecurityPolicyConfigWafConfigArgs']]):
        pulumi.set(self, "waf_config", value)


@pulumi.input_type
class SecurityPolicyConfigAclConfigArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 user_rules: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigAclConfigUserRuleArgs']]]] = None):
        """
        :param pulumi.Input[str] switch: - `on`: Enable.- `off`: Disable.
        :param pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigAclConfigUserRuleArgs']]] user_rules: Custom configuration.
        """
        pulumi.set(__self__, "switch", switch)
        if user_rules is not None:
            pulumi.set(__self__, "user_rules", user_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="userRules")
    def user_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigAclConfigUserRuleArgs']]]]:
        """
        Custom configuration.
        """
        return pulumi.get(self, "user_rules")

    @user_rules.setter
    def user_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigAclConfigUserRuleArgs']]]]):
        pulumi.set(self, "user_rules", value)


@pulumi.input_type
class SecurityPolicyConfigAclConfigUserRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 conditions: pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigAclConfigUserRuleConditionArgs']]],
                 rule_name: pulumi.Input[str],
                 rule_priority: pulumi.Input[int],
                 rule_status: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 page_id: Optional[pulumi.Input[int]] = None,
                 punish_time: Optional[pulumi.Input[int]] = None,
                 punish_time_unit: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 response_code: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Valid values: `monitor`, `drop`.
        :param pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigAclConfigUserRuleConditionArgs']]] conditions: Conditions of the rule.
        :param pulumi.Input[str] rule_name: Rule Name.
        :param pulumi.Input[int] rule_priority: Priority of the rule. Valid value range: 1-100.
        :param pulumi.Input[str] rule_status: Status of the rule. Valid values: `on`, `off`, `hour`.
        :param pulumi.Input[str] name: Name of the custom response page.
        :param pulumi.Input[int] page_id: ID of the custom response page.
        :param pulumi.Input[int] punish_time: Punish time, Valid value range: 0-2 days.
        :param pulumi.Input[str] punish_time_unit: Time unit of the punish time. Valid values: `second`, `minutes`, `hour`.
        :param pulumi.Input[str] redirect_url: Redirect target URL, must be an sub-domain from one of the account&#39;s site.
        :param pulumi.Input[int] response_code: Response code to use when redirecting.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_priority", rule_priority)
        pulumi.set(__self__, "rule_status", rule_status)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if page_id is not None:
            pulumi.set(__self__, "page_id", page_id)
        if punish_time is not None:
            pulumi.set(__self__, "punish_time", punish_time)
        if punish_time_unit is not None:
            pulumi.set(__self__, "punish_time_unit", punish_time_unit)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Valid values: `monitor`, `drop`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigAclConfigUserRuleConditionArgs']]]:
        """
        Conditions of the rule.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigAclConfigUserRuleConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        """
        Rule Name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> pulumi.Input[int]:
        """
        Priority of the rule. Valid value range: 1-100.
        """
        return pulumi.get(self, "rule_priority")

    @rule_priority.setter
    def rule_priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "rule_priority", value)

    @property
    @pulumi.getter(name="ruleStatus")
    def rule_status(self) -> pulumi.Input[str]:
        """
        Status of the rule. Valid values: `on`, `off`, `hour`.
        """
        return pulumi.get(self, "rule_status")

    @rule_status.setter
    def rule_status(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_status", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the custom response page.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the custom response page.
        """
        return pulumi.get(self, "page_id")

    @page_id.setter
    def page_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_id", value)

    @property
    @pulumi.getter(name="punishTime")
    def punish_time(self) -> Optional[pulumi.Input[int]]:
        """
        Punish time, Valid value range: 0-2 days.
        """
        return pulumi.get(self, "punish_time")

    @punish_time.setter
    def punish_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "punish_time", value)

    @property
    @pulumi.getter(name="punishTimeUnit")
    def punish_time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Time unit of the punish time. Valid values: `second`, `minutes`, `hour`.
        """
        return pulumi.get(self, "punish_time_unit")

    @punish_time_unit.setter
    def punish_time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "punish_time_unit", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect target URL, must be an sub-domain from one of the account&#39;s site.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[pulumi.Input[int]]:
        """
        Response code to use when redirecting.
        """
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class SecurityPolicyConfigAclConfigUserRuleConditionArgs:
    def __init__(__self__, *,
                 match_content: pulumi.Input[str],
                 match_from: pulumi.Input[str],
                 match_param: pulumi.Input[str],
                 operator: pulumi.Input[str]):
        """
        :param pulumi.Input[str] match_content: Content to match.
        :param pulumi.Input[str] match_from: Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sip_proto`: Network protocol of the request.
        :param pulumi.Input[str] match_param: Parameter for match item. For example, when match from header, match parameter can be set to a header key.
        :param pulumi.Input[str] operator: Valid values:- `equal`: string equal.- `not_equal`: string not equal.- `include`: string include.- `not_include`: string not include.- `match`: ip match.- `not_match`: ip not match.- `include_area`: area include.- `is_empty`: field existed but empty.- `not_exists`: field is not existed.- `regexp`: regex match.- `len_gt`: value greater than.- `len_lt`: value less than.- `len_eq`: value equal.- `match_prefix`: string prefix match.- `match_suffix`: string suffix match.- `wildcard`: wildcard match.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_from", match_from)
        pulumi.set(__self__, "match_param", match_param)
        pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> pulumi.Input[str]:
        """
        Content to match.
        """
        return pulumi.get(self, "match_content")

    @match_content.setter
    def match_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_content", value)

    @property
    @pulumi.getter(name="matchFrom")
    def match_from(self) -> pulumi.Input[str]:
        """
        Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sip_proto`: Network protocol of the request.
        """
        return pulumi.get(self, "match_from")

    @match_from.setter
    def match_from(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_from", value)

    @property
    @pulumi.getter(name="matchParam")
    def match_param(self) -> pulumi.Input[str]:
        """
        Parameter for match item. For example, when match from header, match parameter can be set to a header key.
        """
        return pulumi.get(self, "match_param")

    @match_param.setter
    def match_param(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_param", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Valid values:- `equal`: string equal.- `not_equal`: string not equal.- `include`: string include.- `not_include`: string not include.- `match`: ip match.- `not_match`: ip not match.- `include_area`: area include.- `is_empty`: field existed but empty.- `not_exists`: field is not existed.- `regexp`: regex match.- `len_gt`: value greater than.- `len_lt`: value less than.- `len_eq`: value equal.- `match_prefix`: string prefix match.- `match_suffix`: string suffix match.- `wildcard`: wildcard match.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)


@pulumi.input_type
class SecurityPolicyConfigBotConfigArgs:
    def __init__(__self__, *,
                 intelligence_rule: Optional[pulumi.Input['SecurityPolicyConfigBotConfigIntelligenceRuleArgs']] = None,
                 managed_rule: Optional[pulumi.Input['SecurityPolicyConfigBotConfigManagedRuleArgs']] = None,
                 portrait_rule: Optional[pulumi.Input['SecurityPolicyConfigBotConfigPortraitRuleArgs']] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['SecurityPolicyConfigBotConfigIntelligenceRuleArgs'] intelligence_rule: Bot intelligent rule configuration.
        :param pulumi.Input['SecurityPolicyConfigBotConfigManagedRuleArgs'] managed_rule: Preset rules.
        :param pulumi.Input['SecurityPolicyConfigBotConfigPortraitRuleArgs'] portrait_rule: Portrait rule.
        :param pulumi.Input[str] switch: - `on`: Enable.- `off`: Disable.
        """
        if intelligence_rule is not None:
            pulumi.set(__self__, "intelligence_rule", intelligence_rule)
        if managed_rule is not None:
            pulumi.set(__self__, "managed_rule", managed_rule)
        if portrait_rule is not None:
            pulumi.set(__self__, "portrait_rule", portrait_rule)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="intelligenceRule")
    def intelligence_rule(self) -> Optional[pulumi.Input['SecurityPolicyConfigBotConfigIntelligenceRuleArgs']]:
        """
        Bot intelligent rule configuration.
        """
        return pulumi.get(self, "intelligence_rule")

    @intelligence_rule.setter
    def intelligence_rule(self, value: Optional[pulumi.Input['SecurityPolicyConfigBotConfigIntelligenceRuleArgs']]):
        pulumi.set(self, "intelligence_rule", value)

    @property
    @pulumi.getter(name="managedRule")
    def managed_rule(self) -> Optional[pulumi.Input['SecurityPolicyConfigBotConfigManagedRuleArgs']]:
        """
        Preset rules.
        """
        return pulumi.get(self, "managed_rule")

    @managed_rule.setter
    def managed_rule(self, value: Optional[pulumi.Input['SecurityPolicyConfigBotConfigManagedRuleArgs']]):
        pulumi.set(self, "managed_rule", value)

    @property
    @pulumi.getter(name="portraitRule")
    def portrait_rule(self) -> Optional[pulumi.Input['SecurityPolicyConfigBotConfigPortraitRuleArgs']]:
        """
        Portrait rule.
        """
        return pulumi.get(self, "portrait_rule")

    @portrait_rule.setter
    def portrait_rule(self, value: Optional[pulumi.Input['SecurityPolicyConfigBotConfigPortraitRuleArgs']]):
        pulumi.set(self, "portrait_rule", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class SecurityPolicyConfigBotConfigIntelligenceRuleArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigBotConfigIntelligenceRuleItemArgs']]]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigBotConfigIntelligenceRuleItemArgs']]] items: Configuration detail.
        :param pulumi.Input[str] switch: - `on`: Enable.- `off`: Disable.
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigBotConfigIntelligenceRuleItemArgs']]]]:
        """
        Configuration detail.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigBotConfigIntelligenceRuleItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class SecurityPolicyConfigBotConfigIntelligenceRuleItemArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to take. Valid values: `trans`, `monitor`, `alg`, `captcha`, `drop`.
        :param pulumi.Input[str] label: Bot label, valid values: `evil_bot`, `suspect_bot`, `good_bot`, `normal`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take. Valid values: `trans`, `monitor`, `alg`, `captcha`, `drop`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Bot label, valid values: `evil_bot`, `suspect_bot`, `good_bot`, `normal`.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class SecurityPolicyConfigBotConfigManagedRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 alg_managed_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 cap_managed_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 drop_managed_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 mon_managed_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 page_id: Optional[pulumi.Input[int]] = None,
                 punish_time: Optional[pulumi.Input[int]] = None,
                 punish_time_unit: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 response_code: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 trans_managed_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        :param pulumi.Input[str] action: Action to take. Valid values: `drop`, `trans`, `monitor`, `alg`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] alg_managed_ids: Rules to enable when action is `alg`. See details in data source `bot_managed_rules`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] cap_managed_ids: Rules to enable when action is `captcha`. See details in data source `bot_managed_rules`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] drop_managed_ids: Rules to enable when action is `drop`. See details in data source `bot_managed_rules`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] mon_managed_ids: Rules to enable when action is `monitor`. See details in data source `bot_managed_rules`.
        :param pulumi.Input[str] name: Name of the custom response page.
        :param pulumi.Input[int] page_id: ID of the custom response page.
        :param pulumi.Input[int] punish_time: Punish time.
        :param pulumi.Input[str] punish_time_unit: Time unit of the punish time.
        :param pulumi.Input[str] redirect_url: Redirect target URL, must be an sub-domain from one of the account&#39;s site.
        :param pulumi.Input[int] response_code: Response code to use when redirecting.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] trans_managed_ids: Rules to enable when action is `trans`. See details in data source `bot_managed_rules`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if alg_managed_ids is not None:
            pulumi.set(__self__, "alg_managed_ids", alg_managed_ids)
        if cap_managed_ids is not None:
            pulumi.set(__self__, "cap_managed_ids", cap_managed_ids)
        if drop_managed_ids is not None:
            pulumi.set(__self__, "drop_managed_ids", drop_managed_ids)
        if mon_managed_ids is not None:
            pulumi.set(__self__, "mon_managed_ids", mon_managed_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if page_id is not None:
            pulumi.set(__self__, "page_id", page_id)
        if punish_time is not None:
            pulumi.set(__self__, "punish_time", punish_time)
        if punish_time_unit is not None:
            pulumi.set(__self__, "punish_time_unit", punish_time_unit)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if trans_managed_ids is not None:
            pulumi.set(__self__, "trans_managed_ids", trans_managed_ids)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take. Valid values: `drop`, `trans`, `monitor`, `alg`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="algManagedIds")
    def alg_managed_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Rules to enable when action is `alg`. See details in data source `bot_managed_rules`.
        """
        return pulumi.get(self, "alg_managed_ids")

    @alg_managed_ids.setter
    def alg_managed_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "alg_managed_ids", value)

    @property
    @pulumi.getter(name="capManagedIds")
    def cap_managed_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Rules to enable when action is `captcha`. See details in data source `bot_managed_rules`.
        """
        return pulumi.get(self, "cap_managed_ids")

    @cap_managed_ids.setter
    def cap_managed_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "cap_managed_ids", value)

    @property
    @pulumi.getter(name="dropManagedIds")
    def drop_managed_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Rules to enable when action is `drop`. See details in data source `bot_managed_rules`.
        """
        return pulumi.get(self, "drop_managed_ids")

    @drop_managed_ids.setter
    def drop_managed_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "drop_managed_ids", value)

    @property
    @pulumi.getter(name="monManagedIds")
    def mon_managed_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Rules to enable when action is `monitor`. See details in data source `bot_managed_rules`.
        """
        return pulumi.get(self, "mon_managed_ids")

    @mon_managed_ids.setter
    def mon_managed_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "mon_managed_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the custom response page.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the custom response page.
        """
        return pulumi.get(self, "page_id")

    @page_id.setter
    def page_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_id", value)

    @property
    @pulumi.getter(name="punishTime")
    def punish_time(self) -> Optional[pulumi.Input[int]]:
        """
        Punish time.
        """
        return pulumi.get(self, "punish_time")

    @punish_time.setter
    def punish_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "punish_time", value)

    @property
    @pulumi.getter(name="punishTimeUnit")
    def punish_time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Time unit of the punish time.
        """
        return pulumi.get(self, "punish_time_unit")

    @punish_time_unit.setter
    def punish_time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "punish_time_unit", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        Redirect target URL, must be an sub-domain from one of the account&#39;s site.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[pulumi.Input[int]]:
        """
        Response code to use when redirecting.
        """
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="transManagedIds")
    def trans_managed_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Rules to enable when action is `trans`. See details in data source `bot_managed_rules`.
        """
        return pulumi.get(self, "trans_managed_ids")

    @trans_managed_ids.setter
    def trans_managed_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "trans_managed_ids", value)


@pulumi.input_type
class SecurityPolicyConfigBotConfigPortraitRuleArgs:
    def __init__(__self__, *,
                 alg_managed_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 cap_managed_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 drop_managed_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 mon_managed_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] alg_managed_ids: Rules to enable when action is `alg`. See details in data source `bot_portrait_rules`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] cap_managed_ids: Rules to enable when action is `captcha`. See details in data source `bot_portrait_rules`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] drop_managed_ids: Rules to enable when action is `drop`. See details in data source `bot_portrait_rules`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] mon_managed_ids: Rules to enable when action is `monitor`. See details in data source `bot_portrait_rules`.
        :param pulumi.Input[str] switch: - `on`: Enable.- `off`: Disable.
        """
        if alg_managed_ids is not None:
            pulumi.set(__self__, "alg_managed_ids", alg_managed_ids)
        if cap_managed_ids is not None:
            pulumi.set(__self__, "cap_managed_ids", cap_managed_ids)
        if drop_managed_ids is not None:
            pulumi.set(__self__, "drop_managed_ids", drop_managed_ids)
        if mon_managed_ids is not None:
            pulumi.set(__self__, "mon_managed_ids", mon_managed_ids)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="algManagedIds")
    def alg_managed_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Rules to enable when action is `alg`. See details in data source `bot_portrait_rules`.
        """
        return pulumi.get(self, "alg_managed_ids")

    @alg_managed_ids.setter
    def alg_managed_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "alg_managed_ids", value)

    @property
    @pulumi.getter(name="capManagedIds")
    def cap_managed_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Rules to enable when action is `captcha`. See details in data source `bot_portrait_rules`.
        """
        return pulumi.get(self, "cap_managed_ids")

    @cap_managed_ids.setter
    def cap_managed_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "cap_managed_ids", value)

    @property
    @pulumi.getter(name="dropManagedIds")
    def drop_managed_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Rules to enable when action is `drop`. See details in data source `bot_portrait_rules`.
        """
        return pulumi.get(self, "drop_managed_ids")

    @drop_managed_ids.setter
    def drop_managed_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "drop_managed_ids", value)

    @property
    @pulumi.getter(name="monManagedIds")
    def mon_managed_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Rules to enable when action is `monitor`. See details in data source `bot_portrait_rules`.
        """
        return pulumi.get(self, "mon_managed_ids")

    @mon_managed_ids.setter
    def mon_managed_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "mon_managed_ids", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class SecurityPolicyConfigDropPageConfigArgs:
    def __init__(__self__, *,
                 acl_drop_page_detail: Optional[pulumi.Input['SecurityPolicyConfigDropPageConfigAclDropPageDetailArgs']] = None,
                 switch: Optional[pulumi.Input[str]] = None,
                 waf_drop_page_detail: Optional[pulumi.Input['SecurityPolicyConfigDropPageConfigWafDropPageDetailArgs']] = None):
        """
        :param pulumi.Input['SecurityPolicyConfigDropPageConfigAclDropPageDetailArgs'] acl_drop_page_detail: Custom error page of ACL rules.
        :param pulumi.Input[str] switch: - `on`: Enable.- `off`: Disable.
        :param pulumi.Input['SecurityPolicyConfigDropPageConfigWafDropPageDetailArgs'] waf_drop_page_detail: Custom error page of WAF rules.
        """
        if acl_drop_page_detail is not None:
            pulumi.set(__self__, "acl_drop_page_detail", acl_drop_page_detail)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if waf_drop_page_detail is not None:
            pulumi.set(__self__, "waf_drop_page_detail", waf_drop_page_detail)

    @property
    @pulumi.getter(name="aclDropPageDetail")
    def acl_drop_page_detail(self) -> Optional[pulumi.Input['SecurityPolicyConfigDropPageConfigAclDropPageDetailArgs']]:
        """
        Custom error page of ACL rules.
        """
        return pulumi.get(self, "acl_drop_page_detail")

    @acl_drop_page_detail.setter
    def acl_drop_page_detail(self, value: Optional[pulumi.Input['SecurityPolicyConfigDropPageConfigAclDropPageDetailArgs']]):
        pulumi.set(self, "acl_drop_page_detail", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="wafDropPageDetail")
    def waf_drop_page_detail(self) -> Optional[pulumi.Input['SecurityPolicyConfigDropPageConfigWafDropPageDetailArgs']]:
        """
        Custom error page of WAF rules.
        """
        return pulumi.get(self, "waf_drop_page_detail")

    @waf_drop_page_detail.setter
    def waf_drop_page_detail(self, value: Optional[pulumi.Input['SecurityPolicyConfigDropPageConfigWafDropPageDetailArgs']]):
        pulumi.set(self, "waf_drop_page_detail", value)


@pulumi.input_type
class SecurityPolicyConfigDropPageConfigAclDropPageDetailArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 page_id: Optional[pulumi.Input[int]] = None,
                 status_code: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: File name or URL.
        :param pulumi.Input[int] page_id: ID of the custom error page. when set to 0, use system default error page.
        :param pulumi.Input[int] status_code: HTTP status code to use. Valid range: 100-600.
        :param pulumi.Input[str] type: Type of the custom error page. Valid values: `file`, `url`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if page_id is not None:
            pulumi.set(__self__, "page_id", page_id)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File name or URL.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the custom error page. when set to 0, use system default error page.
        """
        return pulumi.get(self, "page_id")

    @page_id.setter
    def page_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_id", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP status code to use. Valid range: 100-600.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the custom error page. Valid values: `file`, `url`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SecurityPolicyConfigDropPageConfigWafDropPageDetailArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 page_id: Optional[pulumi.Input[int]] = None,
                 status_code: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: File name or URL.
        :param pulumi.Input[int] page_id: ID of the custom error page. when set to 0, use system default error page.
        :param pulumi.Input[int] status_code: HTTP status code to use. Valid range: 100-600.
        :param pulumi.Input[str] type: Type of the custom error page. Valid values: `file`, `url`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if page_id is not None:
            pulumi.set(__self__, "page_id", page_id)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File name or URL.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the custom error page. when set to 0, use system default error page.
        """
        return pulumi.get(self, "page_id")

    @page_id.setter
    def page_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_id", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP status code to use. Valid range: 100-600.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the custom error page. Valid values: `file`, `url`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SecurityPolicyConfigExceptConfigArgs:
    def __init__(__self__, *,
                 except_user_rules: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigExceptConfigExceptUserRuleArgs']]]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigExceptConfigExceptUserRuleArgs']]] except_user_rules: Exception rules.
        :param pulumi.Input[str] switch: - `on`: Enable.- `off`: Disable.
        """
        if except_user_rules is not None:
            pulumi.set(__self__, "except_user_rules", except_user_rules)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="exceptUserRules")
    def except_user_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigExceptConfigExceptUserRuleArgs']]]]:
        """
        Exception rules.
        """
        return pulumi.get(self, "except_user_rules")

    @except_user_rules.setter
    def except_user_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigExceptConfigExceptUserRuleArgs']]]]):
        pulumi.set(self, "except_user_rules", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class SecurityPolicyConfigExceptConfigExceptUserRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 except_user_rule_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleConditionArgs']]]] = None,
                 except_user_rule_scope: Optional[pulumi.Input['SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleScopeArgs']] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_priority: Optional[pulumi.Input[int]] = None,
                 rule_status: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to take. Valid values: `skip`.
        :param pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleConditionArgs']]] except_user_rule_conditions: Conditions of the rule.
        :param pulumi.Input['SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleScopeArgs'] except_user_rule_scope: Scope of the rule in effect.
        :param pulumi.Input[str] rule_name: Rule name.
        :param pulumi.Input[int] rule_priority: Priority of the rule. Valid value range: 0-100.
        :param pulumi.Input[str] rule_status: Status of the rule. Valid values:- `on`: Enabled.- `off`: Disabled.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if except_user_rule_conditions is not None:
            pulumi.set(__self__, "except_user_rule_conditions", except_user_rule_conditions)
        if except_user_rule_scope is not None:
            pulumi.set(__self__, "except_user_rule_scope", except_user_rule_scope)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_priority is not None:
            pulumi.set(__self__, "rule_priority", rule_priority)
        if rule_status is not None:
            pulumi.set(__self__, "rule_status", rule_status)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take. Valid values: `skip`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="exceptUserRuleConditions")
    def except_user_rule_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleConditionArgs']]]]:
        """
        Conditions of the rule.
        """
        return pulumi.get(self, "except_user_rule_conditions")

    @except_user_rule_conditions.setter
    def except_user_rule_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleConditionArgs']]]]):
        pulumi.set(self, "except_user_rule_conditions", value)

    @property
    @pulumi.getter(name="exceptUserRuleScope")
    def except_user_rule_scope(self) -> Optional[pulumi.Input['SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleScopeArgs']]:
        """
        Scope of the rule in effect.
        """
        return pulumi.get(self, "except_user_rule_scope")

    @except_user_rule_scope.setter
    def except_user_rule_scope(self, value: Optional[pulumi.Input['SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleScopeArgs']]):
        pulumi.set(self, "except_user_rule_scope", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the rule. Valid value range: 0-100.
        """
        return pulumi.get(self, "rule_priority")

    @rule_priority.setter
    def rule_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_priority", value)

    @property
    @pulumi.getter(name="ruleStatus")
    def rule_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the rule. Valid values:- `on`: Enabled.- `off`: Disabled.
        """
        return pulumi.get(self, "rule_status")

    @rule_status.setter
    def rule_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_status", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleConditionArgs:
    def __init__(__self__, *,
                 match_content: Optional[pulumi.Input[str]] = None,
                 match_from: Optional[pulumi.Input[str]] = None,
                 match_param: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] match_content: Content to match.
        :param pulumi.Input[str] match_from: Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sip_proto`: Network protocol of the request.
        :param pulumi.Input[str] match_param: Parameter for match item. For example, when match from header, match parameter can be set to a header key.
        :param pulumi.Input[str] operator: Valid values:- `equal`: string equal.- `not_equal`: string not equal.- `include`: string include.- `not_include`: string not include.- `match`: ip match.- `not_match`: ip not match.- `include_area`: area include.- `is_empty`: field existed but empty.- `not_exists`: field is not existed.- `regexp`: regex match.- `len_gt`: value greater than.- `len_lt`: value less than.- `len_eq`: value equal.- `match_prefix`: string prefix match.- `match_suffix`: string suffix match.- `wildcard`: wildcard match.
        """
        if match_content is not None:
            pulumi.set(__self__, "match_content", match_content)
        if match_from is not None:
            pulumi.set(__self__, "match_from", match_from)
        if match_param is not None:
            pulumi.set(__self__, "match_param", match_param)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> Optional[pulumi.Input[str]]:
        """
        Content to match.
        """
        return pulumi.get(self, "match_content")

    @match_content.setter
    def match_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_content", value)

    @property
    @pulumi.getter(name="matchFrom")
    def match_from(self) -> Optional[pulumi.Input[str]]:
        """
        Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sip_proto`: Network protocol of the request.
        """
        return pulumi.get(self, "match_from")

    @match_from.setter
    def match_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_from", value)

    @property
    @pulumi.getter(name="matchParam")
    def match_param(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter for match item. For example, when match from header, match parameter can be set to a header key.
        """
        return pulumi.get(self, "match_param")

    @match_param.setter
    def match_param(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_param", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values:- `equal`: string equal.- `not_equal`: string not equal.- `include`: string include.- `not_include`: string not include.- `match`: ip match.- `not_match`: ip not match.- `include_area`: area include.- `is_empty`: field existed but empty.- `not_exists`: field is not existed.- `regexp`: regex match.- `len_gt`: value greater than.- `len_lt`: value less than.- `len_eq`: value equal.- `match_prefix`: string prefix match.- `match_suffix`: string suffix match.- `wildcard`: wildcard match.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)


@pulumi.input_type
class SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleScopeArgs:
    def __init__(__self__, *,
                 modules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] modules: Modules in which the rule take effect. Valid values: `waf`.
        """
        if modules is not None:
            pulumi.set(__self__, "modules", modules)

    @property
    @pulumi.getter
    def modules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Modules in which the rule take effect. Valid values: `waf`.
        """
        return pulumi.get(self, "modules")

    @modules.setter
    def modules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "modules", value)


@pulumi.input_type
class SecurityPolicyConfigIpTableConfigArgs:
    def __init__(__self__, *,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigIpTableConfigRuleArgs']]]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigIpTableConfigRuleArgs']]] rules: Rules list.
        :param pulumi.Input[str] switch: - `on`: Enable.- `off`: Disable.
        """
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigIpTableConfigRuleArgs']]]]:
        """
        Rules list.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigIpTableConfigRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class SecurityPolicyConfigIpTableConfigRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 match_content: Optional[pulumi.Input[str]] = None,
                 match_from: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Actions to take. Valid values: `drop`, `trans`, `monitor`.
        :param pulumi.Input[str] match_content: Matching content.
        :param pulumi.Input[str] match_from: Matching type. Valid values: `ip`, `area`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if match_content is not None:
            pulumi.set(__self__, "match_content", match_content)
        if match_from is not None:
            pulumi.set(__self__, "match_from", match_from)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Actions to take. Valid values: `drop`, `trans`, `monitor`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> Optional[pulumi.Input[str]]:
        """
        Matching content.
        """
        return pulumi.get(self, "match_content")

    @match_content.setter
    def match_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_content", value)

    @property
    @pulumi.getter(name="matchFrom")
    def match_from(self) -> Optional[pulumi.Input[str]]:
        """
        Matching type. Valid values: `ip`, `area`.
        """
        return pulumi.get(self, "match_from")

    @match_from.setter
    def match_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_from", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class SecurityPolicyConfigRateLimitConfigArgs:
    def __init__(__self__, *,
                 intelligence: Optional[pulumi.Input['SecurityPolicyConfigRateLimitConfigIntelligenceArgs']] = None,
                 switch: Optional[pulumi.Input[str]] = None,
                 template: Optional[pulumi.Input['SecurityPolicyConfigRateLimitConfigTemplateArgs']] = None,
                 user_rules: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigRateLimitConfigUserRuleArgs']]]] = None):
        """
        :param pulumi.Input['SecurityPolicyConfigRateLimitConfigIntelligenceArgs'] intelligence: Intelligent client filter.
        :param pulumi.Input[str] switch: - `on`: Enable.- `off`: Disable.
        :param pulumi.Input['SecurityPolicyConfigRateLimitConfigTemplateArgs'] template: Default Template. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigRateLimitConfigUserRuleArgs']]] user_rules: Custom configuration.
        """
        if intelligence is not None:
            pulumi.set(__self__, "intelligence", intelligence)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if user_rules is not None:
            pulumi.set(__self__, "user_rules", user_rules)

    @property
    @pulumi.getter
    def intelligence(self) -> Optional[pulumi.Input['SecurityPolicyConfigRateLimitConfigIntelligenceArgs']]:
        """
        Intelligent client filter.
        """
        return pulumi.get(self, "intelligence")

    @intelligence.setter
    def intelligence(self, value: Optional[pulumi.Input['SecurityPolicyConfigRateLimitConfigIntelligenceArgs']]):
        pulumi.set(self, "intelligence", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input['SecurityPolicyConfigRateLimitConfigTemplateArgs']]:
        """
        Default Template. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input['SecurityPolicyConfigRateLimitConfigTemplateArgs']]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="userRules")
    def user_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigRateLimitConfigUserRuleArgs']]]]:
        """
        Custom configuration.
        """
        return pulumi.get(self, "user_rules")

    @user_rules.setter
    def user_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigRateLimitConfigUserRuleArgs']]]]):
        pulumi.set(self, "user_rules", value)


@pulumi.input_type
class SecurityPolicyConfigRateLimitConfigIntelligenceArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to take. Valid values: `monitor`, `alg`.
        :param pulumi.Input[str] switch: - `on`: Enable.- `off`: Disable.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take. Valid values: `monitor`, `alg`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class SecurityPolicyConfigRateLimitConfigTemplateArgs:
    def __init__(__self__, *,
                 detail: Optional[pulumi.Input['SecurityPolicyConfigRateLimitConfigTemplateDetailArgs']] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['SecurityPolicyConfigRateLimitConfigTemplateDetailArgs'] detail: Detail of the template.
        :param pulumi.Input[str] mode: Template Name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def detail(self) -> Optional[pulumi.Input['SecurityPolicyConfigRateLimitConfigTemplateDetailArgs']]:
        """
        Detail of the template.
        """
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: Optional[pulumi.Input['SecurityPolicyConfigRateLimitConfigTemplateDetailArgs']]):
        pulumi.set(self, "detail", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Template Name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SecurityPolicyConfigRateLimitConfigTemplateDetailArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 punish_time: Optional[pulumi.Input[int]] = None,
                 threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Action to take.
        :param pulumi.Input[int] id: Template ID. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] mode: Template Name. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[int] period: Period.
        :param pulumi.Input[int] punish_time: Punish time.
        :param pulumi.Input[int] threshold: Threshold.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if punish_time is not None:
            pulumi.set(__self__, "punish_time", punish_time)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Template ID. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Template Name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Period.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="punishTime")
    def punish_time(self) -> Optional[pulumi.Input[int]]:
        """
        Punish time.
        """
        return pulumi.get(self, "punish_time")

    @punish_time.setter
    def punish_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "punish_time", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class SecurityPolicyConfigRateLimitConfigUserRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 conditions: pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigRateLimitConfigUserRuleConditionArgs']]],
                 period: pulumi.Input[int],
                 punish_time: pulumi.Input[int],
                 punish_time_unit: pulumi.Input[str],
                 rule_name: pulumi.Input[str],
                 rule_priority: pulumi.Input[int],
                 threshold: pulumi.Input[int],
                 freq_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 rule_status: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Valid values: `monitor`, `drop`.
        :param pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigRateLimitConfigUserRuleConditionArgs']]] conditions: Conditions of the rule.
        :param pulumi.Input[int] period: Period of the rate limit. Valid values: 10, 20, 30, 40, 50, 60 (in seconds).
        :param pulumi.Input[int] punish_time: Punish time, Valid value range: 0-2 days.
        :param pulumi.Input[str] punish_time_unit: Time unit of the punish time. Valid values: `second`, `minutes`, `hour`.
        :param pulumi.Input[str] rule_name: Rule Name.
        :param pulumi.Input[int] rule_priority: Priority of the rule. Valid value range: 1-100.
        :param pulumi.Input[int] threshold: Threshold of the rate limit. Valid value range: 0-4294967294.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] freq_fields: Filter words.
        :param pulumi.Input[str] rule_status: Status of the rule. Valid values: `on`, `off`, `hour`.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "punish_time", punish_time)
        pulumi.set(__self__, "punish_time_unit", punish_time_unit)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_priority", rule_priority)
        pulumi.set(__self__, "threshold", threshold)
        if freq_fields is not None:
            pulumi.set(__self__, "freq_fields", freq_fields)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if rule_status is not None:
            pulumi.set(__self__, "rule_status", rule_status)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Valid values: `monitor`, `drop`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigRateLimitConfigUserRuleConditionArgs']]]:
        """
        Conditions of the rule.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['SecurityPolicyConfigRateLimitConfigUserRuleConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[int]:
        """
        Period of the rate limit. Valid values: 10, 20, 30, 40, 50, 60 (in seconds).
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[int]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="punishTime")
    def punish_time(self) -> pulumi.Input[int]:
        """
        Punish time, Valid value range: 0-2 days.
        """
        return pulumi.get(self, "punish_time")

    @punish_time.setter
    def punish_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "punish_time", value)

    @property
    @pulumi.getter(name="punishTimeUnit")
    def punish_time_unit(self) -> pulumi.Input[str]:
        """
        Time unit of the punish time. Valid values: `second`, `minutes`, `hour`.
        """
        return pulumi.get(self, "punish_time_unit")

    @punish_time_unit.setter
    def punish_time_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "punish_time_unit", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        """
        Rule Name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="rulePriority")
    def rule_priority(self) -> pulumi.Input[int]:
        """
        Priority of the rule. Valid value range: 1-100.
        """
        return pulumi.get(self, "rule_priority")

    @rule_priority.setter
    def rule_priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "rule_priority", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        """
        Threshold of the rate limit. Valid value range: 0-4294967294.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter(name="freqFields")
    def freq_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Filter words.
        """
        return pulumi.get(self, "freq_fields")

    @freq_fields.setter
    def freq_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "freq_fields", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="ruleStatus")
    def rule_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the rule. Valid values: `on`, `off`, `hour`.
        """
        return pulumi.get(self, "rule_status")

    @rule_status.setter
    def rule_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_status", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class SecurityPolicyConfigRateLimitConfigUserRuleConditionArgs:
    def __init__(__self__, *,
                 match_content: pulumi.Input[str],
                 match_from: pulumi.Input[str],
                 match_param: pulumi.Input[str],
                 operator: pulumi.Input[str]):
        """
        :param pulumi.Input[str] match_content: Content to match.
        :param pulumi.Input[str] match_from: Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sip_proto`: Network protocol of the request.
        :param pulumi.Input[str] match_param: Parameter for match item. For example, when match from header, match parameter can be set to a header key.
        :param pulumi.Input[str] operator: Valid values:- `equal`: string equal.- `not_equal`: string not equal.- `include`: string include.- `not_include`: string not include.- `match`: ip match.- `not_match`: ip not match.- `include_area`: area include.- `is_empty`: field existed but empty.- `not_exists`: field is not existed.- `regexp`: regex match.- `len_gt`: value greater than.- `len_lt`: value less than.- `len_eq`: value equal.- `match_prefix`: string prefix match.- `match_suffix`: string suffix match.- `wildcard`: wildcard match.
        """
        pulumi.set(__self__, "match_content", match_content)
        pulumi.set(__self__, "match_from", match_from)
        pulumi.set(__self__, "match_param", match_param)
        pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter(name="matchContent")
    def match_content(self) -> pulumi.Input[str]:
        """
        Content to match.
        """
        return pulumi.get(self, "match_content")

    @match_content.setter
    def match_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_content", value)

    @property
    @pulumi.getter(name="matchFrom")
    def match_from(self) -> pulumi.Input[str]:
        """
        Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sip_proto`: Network protocol of the request.
        """
        return pulumi.get(self, "match_from")

    @match_from.setter
    def match_from(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_from", value)

    @property
    @pulumi.getter(name="matchParam")
    def match_param(self) -> pulumi.Input[str]:
        """
        Parameter for match item. For example, when match from header, match parameter can be set to a header key.
        """
        return pulumi.get(self, "match_param")

    @match_param.setter
    def match_param(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_param", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Valid values:- `equal`: string equal.- `not_equal`: string not equal.- `include`: string include.- `not_include`: string not include.- `match`: ip match.- `not_match`: ip not match.- `include_area`: area include.- `is_empty`: field existed but empty.- `not_exists`: field is not existed.- `regexp`: regex match.- `len_gt`: value greater than.- `len_lt`: value less than.- `len_eq`: value equal.- `match_prefix`: string prefix match.- `match_suffix`: string suffix match.- `wildcard`: wildcard match.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)


@pulumi.input_type
class SecurityPolicyConfigSwitchConfigArgs:
    def __init__(__self__, *,
                 web_switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] web_switch: - `on`: Enable.- `off`: Disable.
        """
        if web_switch is not None:
            pulumi.set(__self__, "web_switch", web_switch)

    @property
    @pulumi.getter(name="webSwitch")
    def web_switch(self) -> Optional[pulumi.Input[str]]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "web_switch")

    @web_switch.setter
    def web_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_switch", value)


@pulumi.input_type
class SecurityPolicyConfigWafConfigArgs:
    def __init__(__self__, *,
                 level: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 switch: pulumi.Input[str],
                 waf_rules: pulumi.Input['SecurityPolicyConfigWafConfigWafRulesArgs'],
                 ai_rule: Optional[pulumi.Input['SecurityPolicyConfigWafConfigAiRuleArgs']] = None):
        """
        :param pulumi.Input[str] level: Protection level. Valid values: `loose`, `normal`, `strict`, `stricter`, `custom`.
        :param pulumi.Input[str] mode: Protection mode. Valid values:- `block`: use block mode globally, you still can set a group of rules to use observe mode.- `observe`: use observe mode globally.
        :param pulumi.Input[str] switch: Whether to enable WAF rules. Valid values:- `on`: Enable.- `off`: Disable.
        :param pulumi.Input['SecurityPolicyConfigWafConfigWafRulesArgs'] waf_rules: WAF Rules Configuration.
        :param pulumi.Input['SecurityPolicyConfigWafConfigAiRuleArgs'] ai_rule: AI based rules configuration.
        """
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "switch", switch)
        pulumi.set(__self__, "waf_rules", waf_rules)
        if ai_rule is not None:
            pulumi.set(__self__, "ai_rule", ai_rule)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[str]:
        """
        Protection level. Valid values: `loose`, `normal`, `strict`, `stricter`, `custom`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[str]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        """
        Protection mode. Valid values:- `block`: use block mode globally, you still can set a group of rules to use observe mode.- `observe`: use observe mode globally.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable WAF rules. Valid values:- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="wafRules")
    def waf_rules(self) -> pulumi.Input['SecurityPolicyConfigWafConfigWafRulesArgs']:
        """
        WAF Rules Configuration.
        """
        return pulumi.get(self, "waf_rules")

    @waf_rules.setter
    def waf_rules(self, value: pulumi.Input['SecurityPolicyConfigWafConfigWafRulesArgs']):
        pulumi.set(self, "waf_rules", value)

    @property
    @pulumi.getter(name="aiRule")
    def ai_rule(self) -> Optional[pulumi.Input['SecurityPolicyConfigWafConfigAiRuleArgs']]:
        """
        AI based rules configuration.
        """
        return pulumi.get(self, "ai_rule")

    @ai_rule.setter
    def ai_rule(self, value: Optional[pulumi.Input['SecurityPolicyConfigWafConfigAiRuleArgs']]):
        pulumi.set(self, "ai_rule", value)


@pulumi.input_type
class SecurityPolicyConfigWafConfigAiRuleArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mode: Valid values:- `smart_status_close`: disabled.- `smart_status_open`: blocked.- `smart_status_observe`: observed.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values:- `smart_status_close`: disabled.- `smart_status_open`: blocked.- `smart_status_observe`: observed.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SecurityPolicyConfigWafConfigWafRulesArgs:
    def __init__(__self__, *,
                 block_rule_ids: pulumi.Input[Sequence[pulumi.Input[int]]],
                 switch: pulumi.Input[str],
                 observe_rule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] block_rule_ids: Block mode rules list. See details in data source `waf_managed_rules`.
        :param pulumi.Input[str] switch: Whether to host the rules&#39; configuration.- `on`: Enable.- `off`: Disable.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] observe_rule_ids: Observe rules list. See details in data source `waf_managed_rules`.
        """
        pulumi.set(__self__, "block_rule_ids", block_rule_ids)
        pulumi.set(__self__, "switch", switch)
        if observe_rule_ids is not None:
            pulumi.set(__self__, "observe_rule_ids", observe_rule_ids)

    @property
    @pulumi.getter(name="blockRuleIds")
    def block_rule_ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        Block mode rules list. See details in data source `waf_managed_rules`.
        """
        return pulumi.get(self, "block_rule_ids")

    @block_rule_ids.setter
    def block_rule_ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "block_rule_ids", value)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to host the rules&#39; configuration.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="observeRuleIds")
    def observe_rule_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Observe rules list. See details in data source `waf_managed_rules`.
        """
        return pulumi.get(self, "observe_rule_ids")

    @observe_rule_ids.setter
    def observe_rule_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "observe_rule_ids", value)


@pulumi.input_type
class ZoneResourceArgs:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 enable_time: Optional[pulumi.Input[str]] = None,
                 expire_time: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 plan_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 svs: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneResourceSvArgs']]]] = None):
        """
        :param pulumi.Input[str] area: Valid values: `mainland`, `overseas`.
        :param pulumi.Input[int] auto_renew_flag: Whether to automatically renew. Valid values:- `0`: Default.- `1`: Enable automatic renewal.- `2`: Disable automatic renewal.
        :param pulumi.Input[str] create_time: Resource creation date.
        :param pulumi.Input[str] enable_time: Enable time of the resource.
        :param pulumi.Input[str] expire_time: Expire time of the resource.
        :param pulumi.Input[str] id: Resource ID.
        :param pulumi.Input[int] pay_mode: Resource pay mode. Valid values:- `0`: post pay mode.
        :param pulumi.Input[str] plan_id: Associated plan ID.
        :param pulumi.Input[str] status: Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.- `deactivated`: this site is blocked.
        :param pulumi.Input[Sequence[pulumi.Input['ZoneResourceSvArgs']]] svs: Price inquiry parameters.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable_time is not None:
            pulumi.set(__self__, "enable_time", enable_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pay_mode is not None:
            pulumi.set(__self__, "pay_mode", pay_mode)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if svs is not None:
            pulumi.set(__self__, "svs", svs)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values: `mainland`, `overseas`.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to automatically renew. Valid values:- `0`: Default.- `1`: Enable automatic renewal.- `2`: Disable automatic renewal.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Resource creation date.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="enableTime")
    def enable_time(self) -> Optional[pulumi.Input[str]]:
        """
        Enable time of the resource.
        """
        return pulumi.get(self, "enable_time")

    @enable_time.setter
    def enable_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_time", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        Expire time of the resource.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Resource pay mode. Valid values:- `0`: post pay mode.
        """
        return pulumi.get(self, "pay_mode")

    @pay_mode.setter
    def pay_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_mode", value)

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[pulumi.Input[str]]:
        """
        Associated plan ID.
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.- `deactivated`: this site is blocked.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def svs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneResourceSvArgs']]]]:
        """
        Price inquiry parameters.
        """
        return pulumi.get(self, "svs")

    @svs.setter
    def svs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneResourceSvArgs']]]]):
        pulumi.set(self, "svs", value)


@pulumi.input_type
class ZoneResourceSvArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Parameter Key.
        :param pulumi.Input[str] value: Parameter Value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter Key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ZoneSettingCacheArgs:
    def __init__(__self__, *,
                 cache: Optional[pulumi.Input['ZoneSettingCacheCacheArgs']] = None,
                 follow_origin: Optional[pulumi.Input['ZoneSettingCacheFollowOriginArgs']] = None,
                 no_cache: Optional[pulumi.Input['ZoneSettingCacheNoCacheArgs']] = None):
        """
        :param pulumi.Input['ZoneSettingCacheCacheArgs'] cache: Cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input['ZoneSettingCacheFollowOriginArgs'] follow_origin: Follows the origin server configuration. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input['ZoneSettingCacheNoCacheArgs'] no_cache: No-cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if cache is not None:
            pulumi.set(__self__, "cache", cache)
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)
        if no_cache is not None:
            pulumi.set(__self__, "no_cache", no_cache)

    @property
    @pulumi.getter
    def cache(self) -> Optional[pulumi.Input['ZoneSettingCacheCacheArgs']]:
        """
        Cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cache")

    @cache.setter
    def cache(self, value: Optional[pulumi.Input['ZoneSettingCacheCacheArgs']]):
        pulumi.set(self, "cache", value)

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional[pulumi.Input['ZoneSettingCacheFollowOriginArgs']]:
        """
        Follows the origin server configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "follow_origin")

    @follow_origin.setter
    def follow_origin(self, value: Optional[pulumi.Input['ZoneSettingCacheFollowOriginArgs']]):
        pulumi.set(self, "follow_origin", value)

    @property
    @pulumi.getter(name="noCache")
    def no_cache(self) -> Optional[pulumi.Input['ZoneSettingCacheNoCacheArgs']]:
        """
        No-cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "no_cache")

    @no_cache.setter
    def no_cache(self, value: Optional[pulumi.Input['ZoneSettingCacheNoCacheArgs']]):
        pulumi.set(self, "no_cache", value)


@pulumi.input_type
class ZoneSettingCacheCacheArgs:
    def __init__(__self__, *,
                 cache_time: Optional[pulumi.Input[int]] = None,
                 ignore_cache_control: Optional[pulumi.Input[str]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] cache_time: Cache expiration time settings.Unit: second. The maximum value is 365 days. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] ignore_cache_control: Specifies whether to enable force cache.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] switch: Cache configuration switch.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if cache_time is not None:
            pulumi.set(__self__, "cache_time", cache_time)
        if ignore_cache_control is not None:
            pulumi.set(__self__, "ignore_cache_control", ignore_cache_control)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="cacheTime")
    def cache_time(self) -> Optional[pulumi.Input[int]]:
        """
        Cache expiration time settings.Unit: second. The maximum value is 365 days. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cache_time")

    @cache_time.setter
    def cache_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_time", value)

    @property
    @pulumi.getter(name="ignoreCacheControl")
    def ignore_cache_control(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to enable force cache.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ignore_cache_control")

    @ignore_cache_control.setter
    def ignore_cache_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_cache_control", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Cache configuration switch.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingCacheFollowOriginArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: Specifies whether to follow the origin server configuration.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to follow the origin server configuration.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingCacheKeyArgs:
    def __init__(__self__, *,
                 full_url_cache: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[str]] = None,
                 query_string: Optional[pulumi.Input['ZoneSettingCacheKeyQueryStringArgs']] = None):
        """
        :param pulumi.Input[str] full_url_cache: Specifies whether to enable full-path cache.- `on`: Enable full-path cache (i.e., disable Ignore Query String).- `off`: Disable full-path cache (i.e., enable Ignore Query String). Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] ignore_case: Specifies whether the cache key is case-sensitive. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input['ZoneSettingCacheKeyQueryStringArgs'] query_string: Request parameter contained in CacheKey. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to enable full-path cache.- `on`: Enable full-path cache (i.e., disable Ignore Query String).- `off`: Disable full-path cache (i.e., enable Ignore Query String). Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "full_url_cache")

    @full_url_cache.setter
    def full_url_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_url_cache", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the cache key is case-sensitive. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[pulumi.Input['ZoneSettingCacheKeyQueryStringArgs']]:
        """
        Request parameter contained in CacheKey. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[pulumi.Input['ZoneSettingCacheKeyQueryStringArgs']]):
        pulumi.set(self, "query_string", value)


@pulumi.input_type
class ZoneSettingCacheKeyQueryStringArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] switch: Whether to use QueryString as part of CacheKey.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] action: - `includeCustom`: Include the specified query strings.- `excludeCustom`: Exclude the specified query strings. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Array of query strings used/excluded. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to use QueryString as part of CacheKey.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        - `includeCustom`: Include the specified query strings.- `excludeCustom`: Exclude the specified query strings. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of query strings used/excluded. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ZoneSettingCacheNoCacheArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: Whether to cache the configuration.- `on`: Do not cache.- `off`: Cache. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to cache the configuration.- `on`: Do not cache.- `off`: Cache. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingCachePrefreshArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 percent: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] switch: Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
        :param pulumi.Input[int] percent: Percentage of cache time before try to prefresh. Valid value range: 1-99.
        """
        pulumi.set(__self__, "switch", switch)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[int]]:
        """
        Percentage of cache time before try to prefresh. Valid value range: 1-99.
        """
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percent", value)


@pulumi.input_type
class ZoneSettingClientIpHeaderArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 header_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: Specifies whether to enable client IP header.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] header_name: Name of the origin-pull client IP request header. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Specifies whether to enable client IP header.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the origin-pull client IP request header. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)


@pulumi.input_type
class ZoneSettingCompressionArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] switch: Whether to enable Smart compression.- `on`: Enable.- `off`: Disable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] algorithms: Compression algorithms to select. Valid values: `brotli`, `gzip`.
        """
        pulumi.set(__self__, "switch", switch)
        if algorithms is not None:
            pulumi.set(__self__, "algorithms", algorithms)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable Smart compression.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Compression algorithms to select. Valid values: `brotli`, `gzip`.
        """
        return pulumi.get(self, "algorithms")

    @algorithms.setter
    def algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "algorithms", value)


@pulumi.input_type
class ZoneSettingForceRedirectArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 redirect_status_code: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] switch: Whether to enable force redirect.- `on`: Enable.- `off`: Disable.
        :param pulumi.Input[int] redirect_status_code: Redirection status code.- 301- 302 Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if redirect_status_code is not None:
            pulumi.set(__self__, "redirect_status_code", redirect_status_code)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable force redirect.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[pulumi.Input[int]]:
        """
        Redirection status code.- 301- 302 Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "redirect_status_code")

    @redirect_status_code.setter
    def redirect_status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redirect_status_code", value)


@pulumi.input_type
class ZoneSettingHttpsArgs:
    def __init__(__self__, *,
                 hsts: Optional[pulumi.Input['ZoneSettingHttpsHstsArgs']] = None,
                 http2: Optional[pulumi.Input[str]] = None,
                 ocsp_stapling: Optional[pulumi.Input[str]] = None,
                 tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['ZoneSettingHttpsHstsArgs'] hsts: HSTS Configuration. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] http2: HTTP2 configuration switch.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] ocsp_stapling: OCSP configuration switch.- `on`: Enable.- `off`: Disable.It is disabled by default. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tls_versions: TLS version settings. Valid values: `TLSv1`, `TLSV1.1`, `TLSV1.2`, and `TLSv1.3`.Only consecutive versions can be enabled at the same time. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if hsts is not None:
            pulumi.set(__self__, "hsts", hsts)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if ocsp_stapling is not None:
            pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        if tls_versions is not None:
            pulumi.set(__self__, "tls_versions", tls_versions)

    @property
    @pulumi.getter
    def hsts(self) -> Optional[pulumi.Input['ZoneSettingHttpsHstsArgs']]:
        """
        HSTS Configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "hsts")

    @hsts.setter
    def hsts(self, value: Optional[pulumi.Input['ZoneSettingHttpsHstsArgs']]):
        pulumi.set(self, "hsts", value)

    @property
    @pulumi.getter
    def http2(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP2 configuration switch.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "http2")

    @http2.setter
    def http2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http2", value)

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[pulumi.Input[str]]:
        """
        OCSP configuration switch.- `on`: Enable.- `off`: Disable.It is disabled by default. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ocsp_stapling")

    @ocsp_stapling.setter
    def ocsp_stapling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_stapling", value)

    @property
    @pulumi.getter(name="tlsVersions")
    def tls_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TLS version settings. Valid values: `TLSv1`, `TLSV1.1`, `TLSV1.2`, and `TLSv1.3`.Only consecutive versions can be enabled at the same time. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "tls_versions")

    @tls_versions.setter
    def tls_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_versions", value)


@pulumi.input_type
class ZoneSettingHttpsHstsArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 include_sub_domains: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 preload: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: - `on`: Enable.- `off`: Disable.
        :param pulumi.Input[str] include_sub_domains: Specifies whether to include subdomain names. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[int] max_age: MaxAge value in seconds, should be no more than 1 day. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] preload: Specifies whether to preload. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if include_sub_domains is not None:
            pulumi.set(__self__, "include_sub_domains", include_sub_domains)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if preload is not None:
            pulumi.set(__self__, "preload", preload)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="includeSubDomains")
    def include_sub_domains(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to include subdomain names. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "include_sub_domains")

    @include_sub_domains.setter
    def include_sub_domains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_sub_domains", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        """
        MaxAge value in seconds, should be no more than 1 day. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter
    def preload(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to preload. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "preload")

    @preload.setter
    def preload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preload", value)


@pulumi.input_type
class ZoneSettingIpv6Args:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        """
        :param pulumi.Input[str] switch: Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingMaxAgeArgs:
    def __init__(__self__, *,
                 follow_origin: Optional[pulumi.Input[str]] = None,
                 max_age_time: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] follow_origin: Specifies whether to follow the max cache age of the origin server.- `on`: Enable.- `off`: Disable.If it&#39;s on, MaxAgeTime is ignored. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[int] max_age_time: Specifies the max age of the cache (in seconds). The maximum value is 365 days. Note: the value 0 means not to cache. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)
        if max_age_time is not None:
            pulumi.set(__self__, "max_age_time", max_age_time)

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to follow the max cache age of the origin server.- `on`: Enable.- `off`: Disable.If it&#39;s on, MaxAgeTime is ignored. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "follow_origin")

    @follow_origin.setter
    def follow_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "follow_origin", value)

    @property
    @pulumi.getter(name="maxAgeTime")
    def max_age_time(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the max age of the cache (in seconds). The maximum value is 365 days. Note: the value 0 means not to cache. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "max_age_time")

    @max_age_time.setter
    def max_age_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age_time", value)


@pulumi.input_type
class ZoneSettingOfflineCacheArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        """
        :param pulumi.Input[str] switch: Whether to enable offline cache.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable offline cache.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingOriginArgs:
    def __init__(__self__, *,
                 backup_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cos_private_access: Optional[pulumi.Input[str]] = None,
                 origin_pull_protocol: Optional[pulumi.Input[str]] = None,
                 origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_origins: Backup origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] cos_private_access: Whether access private cos bucket is allowed when `OriginType` is cos. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] origin_pull_protocol: Origin-pull protocol.- `http`: Switch HTTPS requests to HTTP.- `follow`: Follow the protocol of the request.- `https`: Switch HTTP requests to HTTPS. This only supports port 443 on the origin server. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] origins: Origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if backup_origins is not None:
            pulumi.set(__self__, "backup_origins", backup_origins)
        if cos_private_access is not None:
            pulumi.set(__self__, "cos_private_access", cos_private_access)
        if origin_pull_protocol is not None:
            pulumi.set(__self__, "origin_pull_protocol", origin_pull_protocol)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)

    @property
    @pulumi.getter(name="backupOrigins")
    def backup_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Backup origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "backup_origins")

    @backup_origins.setter
    def backup_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_origins", value)

    @property
    @pulumi.getter(name="cosPrivateAccess")
    def cos_private_access(self) -> Optional[pulumi.Input[str]]:
        """
        Whether access private cos bucket is allowed when `OriginType` is cos. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_private_access")

    @cos_private_access.setter
    def cos_private_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_private_access", value)

    @property
    @pulumi.getter(name="originPullProtocol")
    def origin_pull_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Origin-pull protocol.- `http`: Switch HTTPS requests to HTTP.- `follow`: Follow the protocol of the request.- `https`: Switch HTTP requests to HTTPS. This only supports port 443 on the origin server. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "origin_pull_protocol")

    @origin_pull_protocol.setter
    def origin_pull_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_pull_protocol", value)

    @property
    @pulumi.getter
    def origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "origins", value)


@pulumi.input_type
class ZoneSettingPostMaxSizeArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 max_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] switch: Specifies whether to enable custom setting of the maximum file size.- `on`: Enable. You can set a custom max size.- `off`: Disable. In this case, the max size defaults to 32 MB.
        :param pulumi.Input[int] max_size: Maximum size. Value range: 1-500 MB. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Specifies whether to enable custom setting of the maximum file size.- `on`: Enable. You can set a custom max size.- `off`: Disable. In this case, the max size defaults to 32 MB.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size. Value range: 1-500 MB. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)


@pulumi.input_type
class ZoneSettingQuicArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        """
        :param pulumi.Input[str] switch: Whether to enable QUIC.- `on`: Enable.- `off`: Disable.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable QUIC.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingSmartRoutingArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        """
        :param pulumi.Input[str] switch: Whether to enable HTTP2 origin-pull.- `on`: Enable.- `off`: Disable.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable HTTP2 origin-pull.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingUpstreamHttp2Args:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        """
        :param pulumi.Input[str] switch: Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingWebSocketArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] switch: Whether to enable custom WebSocket timeout setting. When it&#39;s off: it means to keep the default WebSocket connection timeout period, which is 15 seconds. To change the timeout period, please set it to on.
        :param pulumi.Input[int] timeout: Sets timeout period in seconds. Maximum value: 120.
        """
        pulumi.set(__self__, "switch", switch)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable custom WebSocket timeout setting. When it&#39;s off: it means to keep the default WebSocket connection timeout period, which is 15 seconds. To change the timeout period, please set it to on.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Sets timeout period in seconds. Maximum value: 120.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ZoneVanityNameServersArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] switch: Whether to enable the custom name server.- `on`: Enable.- `off`: Disable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] servers: List of custom name servers.
        """
        pulumi.set(__self__, "switch", switch)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable the custom name server.- `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of custom name servers.
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "servers", value)


@pulumi.input_type
class ZoneVanityNameServersIpArgs:
    def __init__(__self__, *,
                 ipv4: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ipv4: IPv4 address of the custom name server.
        :param pulumi.Input[str] name: Name of the custom name server.
        """
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the custom name server.
        """
        return pulumi.get(self, "ipv4")

    @ipv4.setter
    def ipv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the custom name server.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


