# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FileFileInfo',
    'JobDataset',
    'JobDomainNameConfig',
    'JobDomainNameConfigDnsConfig',
    'JobDomainNameConfigHostAlias',
    'JobLoad',
    'JobLoadGeoRegionsLoadDistribution',
    'JobLoadLoadSpec',
    'JobLoadLoadSpecConcurrency',
    'JobLoadLoadSpecConcurrencyStage',
    'JobLoadLoadSpecRequestsPerSecond',
    'JobLoadLoadSpecScriptOrigin',
    'JobLoadVpcLoadDistribution',
    'JobPlugin',
    'JobProtocol',
    'JobRequestFile',
    'JobTestScript',
    'ProjectTag',
    'ScenarioDataset',
    'ScenarioDomainNameConfig',
    'ScenarioDomainNameConfigDnsConfig',
    'ScenarioDomainNameConfigHostAlias',
    'ScenarioLoad',
    'ScenarioLoadGeoRegionsLoadDistribution',
    'ScenarioLoadLoadSpec',
    'ScenarioLoadLoadSpecConcurrency',
    'ScenarioLoadLoadSpecConcurrencyStage',
    'ScenarioLoadLoadSpecRequestsPerSecond',
    'ScenarioLoadLoadSpecScriptOrigin',
    'ScenarioLoadVpcLoadDistribution',
    'ScenarioPlugin',
    'ScenarioProtocol',
    'ScenarioRequestFile',
    'ScenarioSlaPolicy',
    'ScenarioSlaPolicyAlertChannel',
    'ScenarioSlaPolicySlaRule',
    'ScenarioSlaPolicySlaRuleLabelFilter',
    'ScenarioTestScript',
]

@pulumi.output_type
class FileFileInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileId":
            suggest = "file_id"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileFileInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileFileInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileFileInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_id: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[int] = None,
                 type: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str file_id: File id.
        :param str name: File name.
        :param int size: File size.
        :param str type: File type.
        :param str updated_at: Update time.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[str]:
        """
        File id.
        """
        return pulumi.get(self, "file_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        File name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        File size.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        File type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class JobDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerInFile":
            suggest = "header_in_file"
        elif key == "fileId":
            suggest = "file_id"
        elif key == "headLines":
            suggest = "head_lines"
        elif key == "headerColumns":
            suggest = "header_columns"
        elif key == "lineCount":
            suggest = "line_count"
        elif key == "tailLines":
            suggest = "tail_lines"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_in_file: bool,
                 name: str,
                 split: bool,
                 file_id: Optional[str] = None,
                 head_lines: Optional[Sequence[str]] = None,
                 header_columns: Optional[Sequence[str]] = None,
                 line_count: Optional[int] = None,
                 size: Optional[int] = None,
                 tail_lines: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str type: Scene Type.
        """
        pulumi.set(__self__, "header_in_file", header_in_file)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "split", split)
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if head_lines is not None:
            pulumi.set(__self__, "head_lines", head_lines)
        if header_columns is not None:
            pulumi.set(__self__, "header_columns", header_columns)
        if line_count is not None:
            pulumi.set(__self__, "line_count", line_count)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tail_lines is not None:
            pulumi.set(__self__, "tail_lines", tail_lines)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="headerInFile")
    def header_in_file(self) -> bool:
        return pulumi.get(self, "header_in_file")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def split(self) -> bool:
        return pulumi.get(self, "split")

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[str]:
        return pulumi.get(self, "file_id")

    @property
    @pulumi.getter(name="headLines")
    def head_lines(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "head_lines")

    @property
    @pulumi.getter(name="headerColumns")
    def header_columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "header_columns")

    @property
    @pulumi.getter(name="lineCount")
    def line_count(self) -> Optional[int]:
        return pulumi.get(self, "line_count")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="tailLines")
    def tail_lines(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tail_lines")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Scene Type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class JobDomainNameConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsConfig":
            suggest = "dns_config"
        elif key == "hostAliases":
            suggest = "host_aliases"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobDomainNameConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobDomainNameConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobDomainNameConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_config: Optional['outputs.JobDomainNameConfigDnsConfig'] = None,
                 host_aliases: Optional[Sequence['outputs.JobDomainNameConfigHostAlias']] = None):
        if dns_config is not None:
            pulumi.set(__self__, "dns_config", dns_config)
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)

    @property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional['outputs.JobDomainNameConfigDnsConfig']:
        return pulumi.get(self, "dns_config")

    @property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[Sequence['outputs.JobDomainNameConfigHostAlias']]:
        return pulumi.get(self, "host_aliases")


@pulumi.output_type
class JobDomainNameConfigDnsConfig(dict):
    def __init__(__self__, *,
                 nameservers: Optional[Sequence[str]] = None):
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nameservers")


@pulumi.output_type
class JobDomainNameConfigHostAlias(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostNames":
            suggest = "host_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobDomainNameConfigHostAlias. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobDomainNameConfigHostAlias.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobDomainNameConfigHostAlias.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_names: Optional[Sequence[str]] = None,
                 ip: Optional[str] = None):
        if host_names is not None:
            pulumi.set(__self__, "host_names", host_names)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="hostNames")
    def host_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "host_names")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class JobLoad(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "geoRegionsLoadDistributions":
            suggest = "geo_regions_load_distributions"
        elif key == "loadSpec":
            suggest = "load_spec"
        elif key == "vpcLoadDistribution":
            suggest = "vpc_load_distribution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobLoad. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobLoad.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobLoad.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 geo_regions_load_distributions: Optional[Sequence['outputs.JobLoadGeoRegionsLoadDistribution']] = None,
                 load_spec: Optional['outputs.JobLoadLoadSpec'] = None,
                 vpc_load_distribution: Optional['outputs.JobLoadVpcLoadDistribution'] = None):
        if geo_regions_load_distributions is not None:
            pulumi.set(__self__, "geo_regions_load_distributions", geo_regions_load_distributions)
        if load_spec is not None:
            pulumi.set(__self__, "load_spec", load_spec)
        if vpc_load_distribution is not None:
            pulumi.set(__self__, "vpc_load_distribution", vpc_load_distribution)

    @property
    @pulumi.getter(name="geoRegionsLoadDistributions")
    def geo_regions_load_distributions(self) -> Optional[Sequence['outputs.JobLoadGeoRegionsLoadDistribution']]:
        return pulumi.get(self, "geo_regions_load_distributions")

    @property
    @pulumi.getter(name="loadSpec")
    def load_spec(self) -> Optional['outputs.JobLoadLoadSpec']:
        return pulumi.get(self, "load_spec")

    @property
    @pulumi.getter(name="vpcLoadDistribution")
    def vpc_load_distribution(self) -> Optional['outputs.JobLoadVpcLoadDistribution']:
        return pulumi.get(self, "vpc_load_distribution")


@pulumi.output_type
class JobLoadGeoRegionsLoadDistribution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "regionId":
            suggest = "region_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobLoadGeoRegionsLoadDistribution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobLoadGeoRegionsLoadDistribution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobLoadGeoRegionsLoadDistribution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region_id: int,
                 percentage: Optional[int] = None,
                 region: Optional[str] = None):
        pulumi.set(__self__, "region_id", region_id)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class JobLoadLoadSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestsPerSecond":
            suggest = "requests_per_second"
        elif key == "scriptOrigin":
            suggest = "script_origin"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobLoadLoadSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobLoadLoadSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobLoadLoadSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 concurrency: Optional['outputs.JobLoadLoadSpecConcurrency'] = None,
                 requests_per_second: Optional['outputs.JobLoadLoadSpecRequestsPerSecond'] = None,
                 script_origin: Optional['outputs.JobLoadLoadSpecScriptOrigin'] = None):
        """
        :param 'JobLoadLoadSpecRequestsPerSecondArgs' requests_per_second: Average number of requests per second.
        """
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if requests_per_second is not None:
            pulumi.set(__self__, "requests_per_second", requests_per_second)
        if script_origin is not None:
            pulumi.set(__self__, "script_origin", script_origin)

    @property
    @pulumi.getter
    def concurrency(self) -> Optional['outputs.JobLoadLoadSpecConcurrency']:
        return pulumi.get(self, "concurrency")

    @property
    @pulumi.getter(name="requestsPerSecond")
    def requests_per_second(self) -> Optional['outputs.JobLoadLoadSpecRequestsPerSecond']:
        """
        Average number of requests per second.
        """
        return pulumi.get(self, "requests_per_second")

    @property
    @pulumi.getter(name="scriptOrigin")
    def script_origin(self) -> Optional['outputs.JobLoadLoadSpecScriptOrigin']:
        return pulumi.get(self, "script_origin")


@pulumi.output_type
class JobLoadLoadSpecConcurrency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gracefulStopSeconds":
            suggest = "graceful_stop_seconds"
        elif key == "iterationCount":
            suggest = "iteration_count"
        elif key == "maxRequestsPerSecond":
            suggest = "max_requests_per_second"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobLoadLoadSpecConcurrency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobLoadLoadSpecConcurrency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobLoadLoadSpecConcurrency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 graceful_stop_seconds: Optional[int] = None,
                 iteration_count: Optional[int] = None,
                 max_requests_per_second: Optional[int] = None,
                 stages: Optional[Sequence['outputs.JobLoadLoadSpecConcurrencyStage']] = None):
        """
        :param int max_requests_per_second: Maximum requests per second.
        """
        if graceful_stop_seconds is not None:
            pulumi.set(__self__, "graceful_stop_seconds", graceful_stop_seconds)
        if iteration_count is not None:
            pulumi.set(__self__, "iteration_count", iteration_count)
        if max_requests_per_second is not None:
            pulumi.set(__self__, "max_requests_per_second", max_requests_per_second)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)

    @property
    @pulumi.getter(name="gracefulStopSeconds")
    def graceful_stop_seconds(self) -> Optional[int]:
        return pulumi.get(self, "graceful_stop_seconds")

    @property
    @pulumi.getter(name="iterationCount")
    def iteration_count(self) -> Optional[int]:
        return pulumi.get(self, "iteration_count")

    @property
    @pulumi.getter(name="maxRequestsPerSecond")
    def max_requests_per_second(self) -> Optional[int]:
        """
        Maximum requests per second.
        """
        return pulumi.get(self, "max_requests_per_second")

    @property
    @pulumi.getter
    def stages(self) -> Optional[Sequence['outputs.JobLoadLoadSpecConcurrencyStage']]:
        return pulumi.get(self, "stages")


@pulumi.output_type
class JobLoadLoadSpecConcurrencyStage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationSeconds":
            suggest = "duration_seconds"
        elif key == "targetVirtualUsers":
            suggest = "target_virtual_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobLoadLoadSpecConcurrencyStage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobLoadLoadSpecConcurrencyStage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobLoadLoadSpecConcurrencyStage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_seconds: Optional[int] = None,
                 target_virtual_users: Optional[int] = None):
        if duration_seconds is not None:
            pulumi.set(__self__, "duration_seconds", duration_seconds)
        if target_virtual_users is not None:
            pulumi.set(__self__, "target_virtual_users", target_virtual_users)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "duration_seconds")

    @property
    @pulumi.getter(name="targetVirtualUsers")
    def target_virtual_users(self) -> Optional[int]:
        return pulumi.get(self, "target_virtual_users")


@pulumi.output_type
class JobLoadLoadSpecRequestsPerSecond(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationSeconds":
            suggest = "duration_seconds"
        elif key == "gracefulStopSeconds":
            suggest = "graceful_stop_seconds"
        elif key == "maxRequestsPerSecond":
            suggest = "max_requests_per_second"
        elif key == "startRequestsPerSecond":
            suggest = "start_requests_per_second"
        elif key == "targetRequestsPerSecond":
            suggest = "target_requests_per_second"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobLoadLoadSpecRequestsPerSecond. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobLoadLoadSpecRequestsPerSecond.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobLoadLoadSpecRequestsPerSecond.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_seconds: Optional[int] = None,
                 graceful_stop_seconds: Optional[int] = None,
                 max_requests_per_second: Optional[int] = None,
                 resources: Optional[int] = None,
                 start_requests_per_second: Optional[int] = None,
                 target_requests_per_second: Optional[int] = None):
        """
        :param int max_requests_per_second: Maximum requests per second.
        """
        if duration_seconds is not None:
            pulumi.set(__self__, "duration_seconds", duration_seconds)
        if graceful_stop_seconds is not None:
            pulumi.set(__self__, "graceful_stop_seconds", graceful_stop_seconds)
        if max_requests_per_second is not None:
            pulumi.set(__self__, "max_requests_per_second", max_requests_per_second)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if start_requests_per_second is not None:
            pulumi.set(__self__, "start_requests_per_second", start_requests_per_second)
        if target_requests_per_second is not None:
            pulumi.set(__self__, "target_requests_per_second", target_requests_per_second)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> Optional[int]:
        return pulumi.get(self, "duration_seconds")

    @property
    @pulumi.getter(name="gracefulStopSeconds")
    def graceful_stop_seconds(self) -> Optional[int]:
        return pulumi.get(self, "graceful_stop_seconds")

    @property
    @pulumi.getter(name="maxRequestsPerSecond")
    def max_requests_per_second(self) -> Optional[int]:
        """
        Maximum requests per second.
        """
        return pulumi.get(self, "max_requests_per_second")

    @property
    @pulumi.getter
    def resources(self) -> Optional[int]:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="startRequestsPerSecond")
    def start_requests_per_second(self) -> Optional[int]:
        return pulumi.get(self, "start_requests_per_second")

    @property
    @pulumi.getter(name="targetRequestsPerSecond")
    def target_requests_per_second(self) -> Optional[int]:
        return pulumi.get(self, "target_requests_per_second")


@pulumi.output_type
class JobLoadLoadSpecScriptOrigin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationSeconds":
            suggest = "duration_seconds"
        elif key == "machineNumber":
            suggest = "machine_number"
        elif key == "machineSpecification":
            suggest = "machine_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobLoadLoadSpecScriptOrigin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobLoadLoadSpecScriptOrigin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobLoadLoadSpecScriptOrigin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_seconds: int,
                 machine_number: int,
                 machine_specification: str):
        pulumi.set(__self__, "duration_seconds", duration_seconds)
        pulumi.set(__self__, "machine_number", machine_number)
        pulumi.set(__self__, "machine_specification", machine_specification)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> int:
        return pulumi.get(self, "duration_seconds")

    @property
    @pulumi.getter(name="machineNumber")
    def machine_number(self) -> int:
        return pulumi.get(self, "machine_number")

    @property
    @pulumi.getter(name="machineSpecification")
    def machine_specification(self) -> str:
        return pulumi.get(self, "machine_specification")


@pulumi.output_type
class JobLoadVpcLoadDistribution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "regionId":
            suggest = "region_id"
        elif key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobLoadVpcLoadDistribution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobLoadVpcLoadDistribution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobLoadVpcLoadDistribution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region_id: int,
                 region: Optional[str] = None,
                 subnet_ids: Optional[Sequence[str]] = None,
                 vpc_id: Optional[str] = None):
        pulumi.set(__self__, "region_id", region_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class JobPlugin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileId":
            suggest = "file_id"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobPlugin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobPlugin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobPlugin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_id: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[int] = None,
                 type: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str type: Scene Type.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[str]:
        return pulumi.get(self, "file_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Scene Type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class JobProtocol(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileId":
            suggest = "file_id"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobProtocol. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobProtocol.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobProtocol.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_id: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[int] = None,
                 type: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str type: Scene Type.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[str]:
        return pulumi.get(self, "file_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Scene Type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class JobRequestFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileId":
            suggest = "file_id"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRequestFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRequestFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRequestFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_id: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[int] = None,
                 type: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str type: Scene Type.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[str]:
        return pulumi.get(self, "file_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Scene Type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class JobTestScript(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encodedContent":
            suggest = "encoded_content"
        elif key == "encodedHttpArchive":
            suggest = "encoded_http_archive"
        elif key == "loadWeight":
            suggest = "load_weight"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTestScript. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTestScript.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTestScript.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encoded_content: Optional[str] = None,
                 encoded_http_archive: Optional[str] = None,
                 load_weight: Optional[int] = None,
                 name: Optional[str] = None,
                 size: Optional[int] = None,
                 type: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str type: Scene Type.
        """
        if encoded_content is not None:
            pulumi.set(__self__, "encoded_content", encoded_content)
        if encoded_http_archive is not None:
            pulumi.set(__self__, "encoded_http_archive", encoded_http_archive)
        if load_weight is not None:
            pulumi.set(__self__, "load_weight", load_weight)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="encodedContent")
    def encoded_content(self) -> Optional[str]:
        return pulumi.get(self, "encoded_content")

    @property
    @pulumi.getter(name="encodedHttpArchive")
    def encoded_http_archive(self) -> Optional[str]:
        return pulumi.get(self, "encoded_http_archive")

    @property
    @pulumi.getter(name="loadWeight")
    def load_weight(self) -> Optional[int]:
        return pulumi.get(self, "load_weight")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Scene Type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ProjectTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_key: Optional[str] = None,
                 tag_value: Optional[str] = None):
        """
        :param str tag_key: tag key.
        :param str tag_value: tag value.
        """
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[str]:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[str]:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class ScenarioDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerInFile":
            suggest = "header_in_file"
        elif key == "fileId":
            suggest = "file_id"
        elif key == "headLines":
            suggest = "head_lines"
        elif key == "headerColumns":
            suggest = "header_columns"
        elif key == "lineCount":
            suggest = "line_count"
        elif key == "tailLines":
            suggest = "tail_lines"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_in_file: bool,
                 name: str,
                 split: bool,
                 file_id: Optional[str] = None,
                 head_lines: Optional[Sequence[str]] = None,
                 header_columns: Optional[Sequence[str]] = None,
                 line_count: Optional[int] = None,
                 size: Optional[int] = None,
                 tail_lines: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param bool header_in_file: Whether the first line is the parameter name.
        :param str name: The file name where the test dataset is located.
        :param bool split: Test whether the dataset is fragmented.
        :param str file_id: File ID.
        :param Sequence[str] head_lines: Header data row.
        :param Sequence[str] header_columns: Parameter name array.
        :param int line_count: Number of file lines.
        :param int size: Number of file bytes.
        :param Sequence[str] tail_lines: Trailing data row.
        :param str type: File type.
        :param str updated_at: Update time.
        """
        pulumi.set(__self__, "header_in_file", header_in_file)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "split", split)
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if head_lines is not None:
            pulumi.set(__self__, "head_lines", head_lines)
        if header_columns is not None:
            pulumi.set(__self__, "header_columns", header_columns)
        if line_count is not None:
            pulumi.set(__self__, "line_count", line_count)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tail_lines is not None:
            pulumi.set(__self__, "tail_lines", tail_lines)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="headerInFile")
    def header_in_file(self) -> bool:
        """
        Whether the first line is the parameter name.
        """
        return pulumi.get(self, "header_in_file")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The file name where the test dataset is located.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def split(self) -> bool:
        """
        Test whether the dataset is fragmented.
        """
        return pulumi.get(self, "split")

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[str]:
        """
        File ID.
        """
        return pulumi.get(self, "file_id")

    @property
    @pulumi.getter(name="headLines")
    def head_lines(self) -> Optional[Sequence[str]]:
        """
        Header data row.
        """
        return pulumi.get(self, "head_lines")

    @property
    @pulumi.getter(name="headerColumns")
    def header_columns(self) -> Optional[Sequence[str]]:
        """
        Parameter name array.
        """
        return pulumi.get(self, "header_columns")

    @property
    @pulumi.getter(name="lineCount")
    def line_count(self) -> Optional[int]:
        """
        Number of file lines.
        """
        return pulumi.get(self, "line_count")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        Number of file bytes.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="tailLines")
    def tail_lines(self) -> Optional[Sequence[str]]:
        """
        Trailing data row.
        """
        return pulumi.get(self, "tail_lines")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        File type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ScenarioDomainNameConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsConfig":
            suggest = "dns_config"
        elif key == "hostAliases":
            suggest = "host_aliases"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioDomainNameConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioDomainNameConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioDomainNameConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_config: Optional['outputs.ScenarioDomainNameConfigDnsConfig'] = None,
                 host_aliases: Optional[Sequence['outputs.ScenarioDomainNameConfigHostAlias']] = None):
        """
        :param 'ScenarioDomainNameConfigDnsConfigArgs' dns_config: DNS configuration.
        :param Sequence['ScenarioDomainNameConfigHostAliasArgs'] host_aliases: Domain name binding configuration.
        """
        if dns_config is not None:
            pulumi.set(__self__, "dns_config", dns_config)
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)

    @property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional['outputs.ScenarioDomainNameConfigDnsConfig']:
        """
        DNS configuration.
        """
        return pulumi.get(self, "dns_config")

    @property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[Sequence['outputs.ScenarioDomainNameConfigHostAlias']]:
        """
        Domain name binding configuration.
        """
        return pulumi.get(self, "host_aliases")


@pulumi.output_type
class ScenarioDomainNameConfigDnsConfig(dict):
    def __init__(__self__, *,
                 nameservers: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] nameservers: DNS IP List.
        """
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[Sequence[str]]:
        """
        DNS IP List.
        """
        return pulumi.get(self, "nameservers")


@pulumi.output_type
class ScenarioDomainNameConfigHostAlias(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostNames":
            suggest = "host_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioDomainNameConfigHostAlias. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioDomainNameConfigHostAlias.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioDomainNameConfigHostAlias.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_names: Optional[Sequence[str]] = None,
                 ip: Optional[str] = None):
        """
        :param Sequence[str] host_names: List of domain names to be bound.
        :param str ip: The IP address to be bound.
        """
        if host_names is not None:
            pulumi.set(__self__, "host_names", host_names)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="hostNames")
    def host_names(self) -> Optional[Sequence[str]]:
        """
        List of domain names to be bound.
        """
        return pulumi.get(self, "host_names")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        The IP address to be bound.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class ScenarioLoad(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "geoRegionsLoadDistributions":
            suggest = "geo_regions_load_distributions"
        elif key == "loadSpec":
            suggest = "load_spec"
        elif key == "vpcLoadDistribution":
            suggest = "vpc_load_distribution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioLoad. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioLoad.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioLoad.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 geo_regions_load_distributions: Optional[Sequence['outputs.ScenarioLoadGeoRegionsLoadDistribution']] = None,
                 load_spec: Optional['outputs.ScenarioLoadLoadSpec'] = None,
                 vpc_load_distribution: Optional['outputs.ScenarioLoadVpcLoadDistribution'] = None):
        """
        :param Sequence['ScenarioLoadGeoRegionsLoadDistributionArgs'] geo_regions_load_distributions: Pressure distribution.
        :param 'ScenarioLoadLoadSpecArgs' load_spec: Pressure allocation.
        :param 'ScenarioLoadVpcLoadDistributionArgs' vpc_load_distribution: Source of stress.
        """
        if geo_regions_load_distributions is not None:
            pulumi.set(__self__, "geo_regions_load_distributions", geo_regions_load_distributions)
        if load_spec is not None:
            pulumi.set(__self__, "load_spec", load_spec)
        if vpc_load_distribution is not None:
            pulumi.set(__self__, "vpc_load_distribution", vpc_load_distribution)

    @property
    @pulumi.getter(name="geoRegionsLoadDistributions")
    def geo_regions_load_distributions(self) -> Optional[Sequence['outputs.ScenarioLoadGeoRegionsLoadDistribution']]:
        """
        Pressure distribution.
        """
        return pulumi.get(self, "geo_regions_load_distributions")

    @property
    @pulumi.getter(name="loadSpec")
    def load_spec(self) -> Optional['outputs.ScenarioLoadLoadSpec']:
        """
        Pressure allocation.
        """
        return pulumi.get(self, "load_spec")

    @property
    @pulumi.getter(name="vpcLoadDistribution")
    def vpc_load_distribution(self) -> Optional['outputs.ScenarioLoadVpcLoadDistribution']:
        """
        Source of stress.
        """
        return pulumi.get(self, "vpc_load_distribution")


@pulumi.output_type
class ScenarioLoadGeoRegionsLoadDistribution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "regionId":
            suggest = "region_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioLoadGeoRegionsLoadDistribution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioLoadGeoRegionsLoadDistribution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioLoadGeoRegionsLoadDistribution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region_id: int,
                 percentage: Optional[int] = None,
                 region: Optional[str] = None):
        """
        :param int region_id: Regional ID.
        :param int percentage: Percentage.
        :param str region: Region.
        """
        pulumi.set(__self__, "region_id", region_id)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        Regional ID.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        """
        Percentage.
        """
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScenarioLoadLoadSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestsPerSecond":
            suggest = "requests_per_second"
        elif key == "scriptOrigin":
            suggest = "script_origin"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioLoadLoadSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioLoadLoadSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioLoadLoadSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 concurrency: Optional['outputs.ScenarioLoadLoadSpecConcurrency'] = None,
                 requests_per_second: Optional['outputs.ScenarioLoadLoadSpecRequestsPerSecond'] = None,
                 script_origin: Optional['outputs.ScenarioLoadLoadSpecScriptOrigin'] = None):
        """
        :param 'ScenarioLoadLoadSpecConcurrencyArgs' concurrency: Configuration of concurrent pressure mode.
        :param 'ScenarioLoadLoadSpecRequestsPerSecondArgs' requests_per_second: Configuration of RPS pressure mode.
        :param 'ScenarioLoadLoadSpecScriptOriginArgs' script_origin: Built-in stress mode in script.
        """
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if requests_per_second is not None:
            pulumi.set(__self__, "requests_per_second", requests_per_second)
        if script_origin is not None:
            pulumi.set(__self__, "script_origin", script_origin)

    @property
    @pulumi.getter
    def concurrency(self) -> Optional['outputs.ScenarioLoadLoadSpecConcurrency']:
        """
        Configuration of concurrent pressure mode.
        """
        return pulumi.get(self, "concurrency")

    @property
    @pulumi.getter(name="requestsPerSecond")
    def requests_per_second(self) -> Optional['outputs.ScenarioLoadLoadSpecRequestsPerSecond']:
        """
        Configuration of RPS pressure mode.
        """
        return pulumi.get(self, "requests_per_second")

    @property
    @pulumi.getter(name="scriptOrigin")
    def script_origin(self) -> Optional['outputs.ScenarioLoadLoadSpecScriptOrigin']:
        """
        Built-in stress mode in script.
        """
        return pulumi.get(self, "script_origin")


@pulumi.output_type
class ScenarioLoadLoadSpecConcurrency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gracefulStopSeconds":
            suggest = "graceful_stop_seconds"
        elif key == "iterationCount":
            suggest = "iteration_count"
        elif key == "maxRequestsPerSecond":
            suggest = "max_requests_per_second"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioLoadLoadSpecConcurrency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioLoadLoadSpecConcurrency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioLoadLoadSpecConcurrency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 graceful_stop_seconds: Optional[int] = None,
                 iteration_count: Optional[int] = None,
                 max_requests_per_second: Optional[int] = None,
                 stages: Optional[Sequence['outputs.ScenarioLoadLoadSpecConcurrencyStage']] = None):
        """
        :param int graceful_stop_seconds: Wait time for graceful termination of the task.
        :param int iteration_count: Number of runs.
        :param int max_requests_per_second: Maximum RPS.
        :param Sequence['ScenarioLoadLoadSpecConcurrencyStageArgs'] stages: Multi-phase configuration array.
        """
        if graceful_stop_seconds is not None:
            pulumi.set(__self__, "graceful_stop_seconds", graceful_stop_seconds)
        if iteration_count is not None:
            pulumi.set(__self__, "iteration_count", iteration_count)
        if max_requests_per_second is not None:
            pulumi.set(__self__, "max_requests_per_second", max_requests_per_second)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)

    @property
    @pulumi.getter(name="gracefulStopSeconds")
    def graceful_stop_seconds(self) -> Optional[int]:
        """
        Wait time for graceful termination of the task.
        """
        return pulumi.get(self, "graceful_stop_seconds")

    @property
    @pulumi.getter(name="iterationCount")
    def iteration_count(self) -> Optional[int]:
        """
        Number of runs.
        """
        return pulumi.get(self, "iteration_count")

    @property
    @pulumi.getter(name="maxRequestsPerSecond")
    def max_requests_per_second(self) -> Optional[int]:
        """
        Maximum RPS.
        """
        return pulumi.get(self, "max_requests_per_second")

    @property
    @pulumi.getter
    def stages(self) -> Optional[Sequence['outputs.ScenarioLoadLoadSpecConcurrencyStage']]:
        """
        Multi-phase configuration array.
        """
        return pulumi.get(self, "stages")


@pulumi.output_type
class ScenarioLoadLoadSpecConcurrencyStage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationSeconds":
            suggest = "duration_seconds"
        elif key == "targetVirtualUsers":
            suggest = "target_virtual_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioLoadLoadSpecConcurrencyStage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioLoadLoadSpecConcurrencyStage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioLoadLoadSpecConcurrencyStage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_seconds: Optional[int] = None,
                 target_virtual_users: Optional[int] = None):
        """
        :param int duration_seconds: Pressure time.
        :param int target_virtual_users: Number of virtual users.
        """
        if duration_seconds is not None:
            pulumi.set(__self__, "duration_seconds", duration_seconds)
        if target_virtual_users is not None:
            pulumi.set(__self__, "target_virtual_users", target_virtual_users)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> Optional[int]:
        """
        Pressure time.
        """
        return pulumi.get(self, "duration_seconds")

    @property
    @pulumi.getter(name="targetVirtualUsers")
    def target_virtual_users(self) -> Optional[int]:
        """
        Number of virtual users.
        """
        return pulumi.get(self, "target_virtual_users")


@pulumi.output_type
class ScenarioLoadLoadSpecRequestsPerSecond(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationSeconds":
            suggest = "duration_seconds"
        elif key == "gracefulStopSeconds":
            suggest = "graceful_stop_seconds"
        elif key == "maxRequestsPerSecond":
            suggest = "max_requests_per_second"
        elif key == "startRequestsPerSecond":
            suggest = "start_requests_per_second"
        elif key == "targetRequestsPerSecond":
            suggest = "target_requests_per_second"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioLoadLoadSpecRequestsPerSecond. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioLoadLoadSpecRequestsPerSecond.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioLoadLoadSpecRequestsPerSecond.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_seconds: Optional[int] = None,
                 graceful_stop_seconds: Optional[int] = None,
                 max_requests_per_second: Optional[int] = None,
                 resources: Optional[int] = None,
                 start_requests_per_second: Optional[int] = None,
                 target_requests_per_second: Optional[int] = None):
        """
        :param int duration_seconds: Pressure time.
        :param int graceful_stop_seconds: Elegant shutdown waiting time.
        :param int max_requests_per_second: Maximum RPS.
        :param int resources: Number of resources.
        :param int start_requests_per_second: Initial RPS.
        :param int target_requests_per_second: Target RPS, invalid input parameter.
        """
        if duration_seconds is not None:
            pulumi.set(__self__, "duration_seconds", duration_seconds)
        if graceful_stop_seconds is not None:
            pulumi.set(__self__, "graceful_stop_seconds", graceful_stop_seconds)
        if max_requests_per_second is not None:
            pulumi.set(__self__, "max_requests_per_second", max_requests_per_second)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if start_requests_per_second is not None:
            pulumi.set(__self__, "start_requests_per_second", start_requests_per_second)
        if target_requests_per_second is not None:
            pulumi.set(__self__, "target_requests_per_second", target_requests_per_second)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> Optional[int]:
        """
        Pressure time.
        """
        return pulumi.get(self, "duration_seconds")

    @property
    @pulumi.getter(name="gracefulStopSeconds")
    def graceful_stop_seconds(self) -> Optional[int]:
        """
        Elegant shutdown waiting time.
        """
        return pulumi.get(self, "graceful_stop_seconds")

    @property
    @pulumi.getter(name="maxRequestsPerSecond")
    def max_requests_per_second(self) -> Optional[int]:
        """
        Maximum RPS.
        """
        return pulumi.get(self, "max_requests_per_second")

    @property
    @pulumi.getter
    def resources(self) -> Optional[int]:
        """
        Number of resources.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="startRequestsPerSecond")
    def start_requests_per_second(self) -> Optional[int]:
        """
        Initial RPS.
        """
        return pulumi.get(self, "start_requests_per_second")

    @property
    @pulumi.getter(name="targetRequestsPerSecond")
    def target_requests_per_second(self) -> Optional[int]:
        """
        Target RPS, invalid input parameter.
        """
        return pulumi.get(self, "target_requests_per_second")


@pulumi.output_type
class ScenarioLoadLoadSpecScriptOrigin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationSeconds":
            suggest = "duration_seconds"
        elif key == "machineNumber":
            suggest = "machine_number"
        elif key == "machineSpecification":
            suggest = "machine_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioLoadLoadSpecScriptOrigin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioLoadLoadSpecScriptOrigin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioLoadLoadSpecScriptOrigin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_seconds: int,
                 machine_number: int,
                 machine_specification: str):
        """
        :param int duration_seconds: Pressure testing time.
        :param int machine_number: Number of machines.
        :param str machine_specification: Machine specification.
        """
        pulumi.set(__self__, "duration_seconds", duration_seconds)
        pulumi.set(__self__, "machine_number", machine_number)
        pulumi.set(__self__, "machine_specification", machine_specification)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> int:
        """
        Pressure testing time.
        """
        return pulumi.get(self, "duration_seconds")

    @property
    @pulumi.getter(name="machineNumber")
    def machine_number(self) -> int:
        """
        Number of machines.
        """
        return pulumi.get(self, "machine_number")

    @property
    @pulumi.getter(name="machineSpecification")
    def machine_specification(self) -> str:
        """
        Machine specification.
        """
        return pulumi.get(self, "machine_specification")


@pulumi.output_type
class ScenarioLoadVpcLoadDistribution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "regionId":
            suggest = "region_id"
        elif key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioLoadVpcLoadDistribution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioLoadVpcLoadDistribution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioLoadVpcLoadDistribution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region_id: int,
                 region: Optional[str] = None,
                 subnet_ids: Optional[Sequence[str]] = None,
                 vpc_id: Optional[str] = None):
        """
        :param int region_id: Regional ID.
        :param str region: Region.
        :param Sequence[str] subnet_ids: Subnet ID list.
        :param str vpc_id: VPC ID.
        """
        pulumi.set(__self__, "region_id", region_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        Regional ID.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence[str]]:
        """
        Subnet ID list.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class ScenarioPlugin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileId":
            suggest = "file_id"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioPlugin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioPlugin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioPlugin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_id: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[int] = None,
                 type: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str file_id: File id.
        :param str name: File name.
        :param int size: File size.
        :param str type: File type.
        :param str updated_at: Update time.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[str]:
        """
        File id.
        """
        return pulumi.get(self, "file_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        File name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        File size.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        File type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ScenarioProtocol(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileId":
            suggest = "file_id"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioProtocol. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioProtocol.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioProtocol.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_id: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[int] = None,
                 type: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str file_id: File ID.
        :param str name: Protocol name.
        :param int size: File name.
        :param str type: File type.
        :param str updated_at: Update time.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[str]:
        """
        File ID.
        """
        return pulumi.get(self, "file_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Protocol name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        File name.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        File type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ScenarioRequestFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileId":
            suggest = "file_id"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioRequestFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioRequestFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioRequestFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_id: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[int] = None,
                 type: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str file_id: File id.
        :param str name: File name.
        :param int size: File size.
        :param str type: File type.
        :param str updated_at: Update time.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[str]:
        """
        File id.
        """
        return pulumi.get(self, "file_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        File name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        File size.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        File type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ScenarioSlaPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertChannel":
            suggest = "alert_channel"
        elif key == "slaRules":
            suggest = "sla_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioSlaPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioSlaPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioSlaPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_channel: Optional['outputs.ScenarioSlaPolicyAlertChannel'] = None,
                 sla_rules: Optional[Sequence['outputs.ScenarioSlaPolicySlaRule']] = None):
        """
        :param 'ScenarioSlaPolicyAlertChannelArgs' alert_channel: Alarm notification channel.
        :param Sequence['ScenarioSlaPolicySlaRuleArgs'] sla_rules: SLA rules.
        """
        if alert_channel is not None:
            pulumi.set(__self__, "alert_channel", alert_channel)
        if sla_rules is not None:
            pulumi.set(__self__, "sla_rules", sla_rules)

    @property
    @pulumi.getter(name="alertChannel")
    def alert_channel(self) -> Optional['outputs.ScenarioSlaPolicyAlertChannel']:
        """
        Alarm notification channel.
        """
        return pulumi.get(self, "alert_channel")

    @property
    @pulumi.getter(name="slaRules")
    def sla_rules(self) -> Optional[Sequence['outputs.ScenarioSlaPolicySlaRule']]:
        """
        SLA rules.
        """
        return pulumi.get(self, "sla_rules")


@pulumi.output_type
class ScenarioSlaPolicyAlertChannel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ampConsumerId":
            suggest = "amp_consumer_id"
        elif key == "noticeId":
            suggest = "notice_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioSlaPolicyAlertChannel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioSlaPolicyAlertChannel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioSlaPolicyAlertChannel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 amp_consumer_id: Optional[str] = None,
                 notice_id: Optional[str] = None):
        """
        :param str amp_consumer_id: AMP consumer ID.
        :param str notice_id: Notification template ID.
        """
        if amp_consumer_id is not None:
            pulumi.set(__self__, "amp_consumer_id", amp_consumer_id)
        if notice_id is not None:
            pulumi.set(__self__, "notice_id", notice_id)

    @property
    @pulumi.getter(name="ampConsumerId")
    def amp_consumer_id(self) -> Optional[str]:
        """
        AMP consumer ID.
        """
        return pulumi.get(self, "amp_consumer_id")

    @property
    @pulumi.getter(name="noticeId")
    def notice_id(self) -> Optional[str]:
        """
        Notification template ID.
        """
        return pulumi.get(self, "notice_id")


@pulumi.output_type
class ScenarioSlaPolicySlaRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "abortFlag":
            suggest = "abort_flag"
        elif key == "for":
            suggest = "for_"
        elif key == "labelFilters":
            suggest = "label_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioSlaPolicySlaRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioSlaPolicySlaRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioSlaPolicySlaRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 abort_flag: Optional[bool] = None,
                 aggregation: Optional[str] = None,
                 condition: Optional[str] = None,
                 for_: Optional[str] = None,
                 label_filters: Optional[Sequence['outputs.ScenarioSlaPolicySlaRuleLabelFilter']] = None,
                 metric: Optional[str] = None,
                 value: Optional[float] = None):
        """
        :param bool abort_flag: Whether to stop the stress test task.
        :param str aggregation: Aggregation method of pressure test index.
        :param str condition: Pressure test index condition judgment symbol.
        :param str for_: duraion.
        :param Sequence['ScenarioSlaPolicySlaRuleLabelFilterArgs'] label_filters: tag.
        :param str metric: Pressure test index.
        :param float value: Threshold value.
        """
        if abort_flag is not None:
            pulumi.set(__self__, "abort_flag", abort_flag)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if for_ is not None:
            pulumi.set(__self__, "for_", for_)
        if label_filters is not None:
            pulumi.set(__self__, "label_filters", label_filters)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="abortFlag")
    def abort_flag(self) -> Optional[bool]:
        """
        Whether to stop the stress test task.
        """
        return pulumi.get(self, "abort_flag")

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[str]:
        """
        Aggregation method of pressure test index.
        """
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        Pressure test index condition judgment symbol.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="for")
    def for_(self) -> Optional[str]:
        """
        duraion.
        """
        return pulumi.get(self, "for_")

    @property
    @pulumi.getter(name="labelFilters")
    def label_filters(self) -> Optional[Sequence['outputs.ScenarioSlaPolicySlaRuleLabelFilter']]:
        """
        tag.
        """
        return pulumi.get(self, "label_filters")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        """
        Pressure test index.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def value(self) -> Optional[float]:
        """
        Threshold value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ScenarioSlaPolicySlaRuleLabelFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelName":
            suggest = "label_name"
        elif key == "labelValue":
            suggest = "label_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioSlaPolicySlaRuleLabelFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioSlaPolicySlaRuleLabelFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioSlaPolicySlaRuleLabelFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label_name: Optional[str] = None,
                 label_value: Optional[str] = None):
        """
        :param str label_name: Label name.
        :param str label_value: Label value.
        """
        if label_name is not None:
            pulumi.set(__self__, "label_name", label_name)
        if label_value is not None:
            pulumi.set(__self__, "label_value", label_value)

    @property
    @pulumi.getter(name="labelName")
    def label_name(self) -> Optional[str]:
        """
        Label name.
        """
        return pulumi.get(self, "label_name")

    @property
    @pulumi.getter(name="labelValue")
    def label_value(self) -> Optional[str]:
        """
        Label value.
        """
        return pulumi.get(self, "label_value")


@pulumi.output_type
class ScenarioTestScript(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encodedContent":
            suggest = "encoded_content"
        elif key == "encodedHttpArchive":
            suggest = "encoded_http_archive"
        elif key == "loadWeight":
            suggest = "load_weight"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScenarioTestScript. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScenarioTestScript.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScenarioTestScript.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encoded_content: Optional[str] = None,
                 encoded_http_archive: Optional[str] = None,
                 load_weight: Optional[int] = None,
                 name: Optional[str] = None,
                 size: Optional[int] = None,
                 type: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str encoded_content: Base64 encoded file content.
        :param str encoded_http_archive: Base64 encoded har structure.
        :param int load_weight: Script weight, range 1-100.
        :param str name: File name.
        :param int size: File size.
        :param str type: File type.
        :param str updated_at: Update time.
        """
        if encoded_content is not None:
            pulumi.set(__self__, "encoded_content", encoded_content)
        if encoded_http_archive is not None:
            pulumi.set(__self__, "encoded_http_archive", encoded_http_archive)
        if load_weight is not None:
            pulumi.set(__self__, "load_weight", load_weight)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="encodedContent")
    def encoded_content(self) -> Optional[str]:
        """
        Base64 encoded file content.
        """
        return pulumi.get(self, "encoded_content")

    @property
    @pulumi.getter(name="encodedHttpArchive")
    def encoded_http_archive(self) -> Optional[str]:
        """
        Base64 encoded har structure.
        """
        return pulumi.get(self, "encoded_http_archive")

    @property
    @pulumi.getter(name="loadWeight")
    def load_weight(self) -> Optional[int]:
        """
        Script weight, range 1-100.
        """
        return pulumi.get(self, "load_weight")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        File name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        File size.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        File type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")


