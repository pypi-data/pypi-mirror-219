# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetRecordsRecordCountInfoResult',
    'GetRecordsResultResult',
]

@pulumi.output_type
class GetRecordsRecordCountInfoResult(dict):
    def __init__(__self__, *,
                 list_count: int,
                 subdomain_count: int,
                 total_count: int):
        """
        :param int list_count: The count of records returned in the list.
        :param int subdomain_count: The subdomain count.
        :param int total_count: The total record count.
        """
        pulumi.set(__self__, "list_count", list_count)
        pulumi.set(__self__, "subdomain_count", subdomain_count)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="listCount")
    def list_count(self) -> int:
        """
        The count of records returned in the list.
        """
        return pulumi.get(self, "list_count")

    @property
    @pulumi.getter(name="subdomainCount")
    def subdomain_count(self) -> int:
        """
        The subdomain count.
        """
        return pulumi.get(self, "subdomain_count")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total record count.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetRecordsResultResult(dict):
    def __init__(__self__, *,
                 line: str,
                 line_id: str,
                 monitor_status: str,
                 mx: int,
                 name: str,
                 record_id: int,
                 remark: str,
                 status: str,
                 ttl: int,
                 type: str,
                 updated_on: str,
                 value: str,
                 weight: int):
        """
        :param str line: The record split zone.
        :param str line_id: The split zone ID.
        :param str monitor_status: The monitoring status of the record. Valid values: OK (normal), WARN (warning), and DOWN (downtime). It is empty if no monitoring is set or the monitoring is suspended.
        :param int mx: The MX value, applicable to the MX record only.
               Note: This field may return null, indicating that no valid values can be obtained.
        :param str name: The host name.
        :param int record_id: Record ID.
        :param str remark: The record remarks.
        :param str status: The record status. Valid values: ENABLE (enabled), DISABLE (disabled).
        :param int ttl: The record cache time.
        :param str type: The record type.
        :param str updated_on: The update time.
        :param str value: The record value.
        :param int weight: The record weight, which is required for round-robin DNS records.
        """
        pulumi.set(__self__, "line", line)
        pulumi.set(__self__, "line_id", line_id)
        pulumi.set(__self__, "monitor_status", monitor_status)
        pulumi.set(__self__, "mx", mx)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "record_id", record_id)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_on", updated_on)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def line(self) -> str:
        """
        The record split zone.
        """
        return pulumi.get(self, "line")

    @property
    @pulumi.getter(name="lineId")
    def line_id(self) -> str:
        """
        The split zone ID.
        """
        return pulumi.get(self, "line_id")

    @property
    @pulumi.getter(name="monitorStatus")
    def monitor_status(self) -> str:
        """
        The monitoring status of the record. Valid values: OK (normal), WARN (warning), and DOWN (downtime). It is empty if no monitoring is set or the monitoring is suspended.
        """
        return pulumi.get(self, "monitor_status")

    @property
    @pulumi.getter
    def mx(self) -> int:
        """
        The MX value, applicable to the MX record only.
        Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "mx")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The host name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> int:
        """
        Record ID.
        """
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        The record remarks.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The record status. Valid values: ENABLE (enabled), DISABLE (disabled).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        The record cache time.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The record type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_on")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The record value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        The record weight, which is required for round-robin DNS records.
        """
        return pulumi.get(self, "weight")


