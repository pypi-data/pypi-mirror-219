# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSecretsResult',
    'AwaitableGetSecretsResult',
    'get_secrets',
    'get_secrets_output',
]

@pulumi.output_type
class GetSecretsResult:
    """
    A collection of values returned by getSecrets.
    """
    def __init__(__self__, id=None, order_type=None, result_output_file=None, secret_lists=None, secret_name=None, state=None, tags=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if order_type and not isinstance(order_type, int):
            raise TypeError("Expected argument 'order_type' to be a int")
        pulumi.set(__self__, "order_type", order_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if secret_lists and not isinstance(secret_lists, list):
            raise TypeError("Expected argument 'secret_lists' to be a list")
        pulumi.set(__self__, "secret_lists", secret_lists)
        if secret_name and not isinstance(secret_name, str):
            raise TypeError("Expected argument 'secret_name' to be a str")
        pulumi.set(__self__, "secret_name", secret_name)
        if state and not isinstance(state, int):
            raise TypeError("Expected argument 'state' to be a int")
        pulumi.set(__self__, "state", state)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="orderType")
    def order_type(self) -> Optional[int]:
        return pulumi.get(self, "order_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="secretLists")
    def secret_lists(self) -> Sequence['outputs.GetSecretsSecretListResult']:
        """
        A list of SSM secrets.
        """
        return pulumi.get(self, "secret_lists")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        Name of secret.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[int]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tags")


class AwaitableGetSecretsResult(GetSecretsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecretsResult(
            id=self.id,
            order_type=self.order_type,
            result_output_file=self.result_output_file,
            secret_lists=self.secret_lists,
            secret_name=self.secret_name,
            state=self.state,
            tags=self.tags)


def get_secrets(order_type: Optional[int] = None,
                result_output_file: Optional[str] = None,
                secret_name: Optional[str] = None,
                state: Optional[int] = None,
                tags: Optional[Mapping[str, Any]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecretsResult:
    """
    Use this data source to query detailed information of SSM secret

    ## Example Usage

    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Ssm.get_secrets(order_type=1,
        secret_name="test",
        state=1)
    ```


    :param int order_type: The order to sort the create time of secret. `0` - desc, `1` - asc. Default value is `0`.
    :param str result_output_file: Used to save results.
    :param str secret_name: Secret name used to filter result.
    :param int state: Filter by state of secret. `0` - all secrets are queried, `1` - only Enabled secrets are queried, `2` - only Disabled secrets are queried, `3` - only PendingDelete secrets are queried.
    :param Mapping[str, Any] tags: Tags to filter secret.
    """
    __args__ = dict()
    __args__['orderType'] = order_type
    __args__['resultOutputFile'] = result_output_file
    __args__['secretName'] = secret_name
    __args__['state'] = state
    __args__['tags'] = tags
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Ssm/getSecrets:getSecrets', __args__, opts=opts, typ=GetSecretsResult).value

    return AwaitableGetSecretsResult(
        id=__ret__.id,
        order_type=__ret__.order_type,
        result_output_file=__ret__.result_output_file,
        secret_lists=__ret__.secret_lists,
        secret_name=__ret__.secret_name,
        state=__ret__.state,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_secrets)
def get_secrets_output(order_type: Optional[pulumi.Input[Optional[int]]] = None,
                       result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                       secret_name: Optional[pulumi.Input[Optional[str]]] = None,
                       state: Optional[pulumi.Input[Optional[int]]] = None,
                       tags: Optional[pulumi.Input[Optional[Mapping[str, Any]]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSecretsResult]:
    """
    Use this data source to query detailed information of SSM secret

    ## Example Usage

    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Ssm.get_secrets(order_type=1,
        secret_name="test",
        state=1)
    ```


    :param int order_type: The order to sort the create time of secret. `0` - desc, `1` - asc. Default value is `0`.
    :param str result_output_file: Used to save results.
    :param str secret_name: Secret name used to filter result.
    :param int state: Filter by state of secret. `0` - all secrets are queried, `1` - only Enabled secrets are queried, `2` - only Disabled secrets are queried, `3` - only PendingDelete secrets are queried.
    :param Mapping[str, Any] tags: Tags to filter secret.
    """
    ...
