# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ApiRequestParameterArgs',
    'ApiResponseErrorCodeArgs',
    'ServiceApiListArgs',
    'ServiceUsagePlanListArgs',
    'UsagePlanAttachListArgs',
]

@pulumi.input_type
class ApiRequestParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 position: pulumi.Input[str],
                 type: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 desc: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Parameter name.
        :param pulumi.Input[str] position: Parameter location.
        :param pulumi.Input[str] type: Parameter type.
        :param pulumi.Input[str] default_value: Parameter default value.
        :param pulumi.Input[str] desc: Parameter description.
        :param pulumi.Input[bool] required: If this parameter required. Default value: `false`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "type", type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if desc is not None:
            pulumi.set(__self__, "desc", desc)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> pulumi.Input[str]:
        """
        Parameter location.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: pulumi.Input[str]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Parameter type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter default value.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def desc(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter description.
        """
        return pulumi.get(self, "desc")

    @desc.setter
    def desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desc", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        If this parameter required. Default value: `false`.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class ApiResponseErrorCodeArgs:
    def __init__(__self__, *,
                 code: pulumi.Input[int],
                 msg: pulumi.Input[str],
                 converted_code: Optional[pulumi.Input[int]] = None,
                 desc: Optional[pulumi.Input[str]] = None,
                 need_convert: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] code: Custom response configuration error code.
        :param pulumi.Input[str] msg: Custom response configuration error message.
        :param pulumi.Input[int] converted_code: Custom error code conversion.
        :param pulumi.Input[str] desc: Parameter description.
        :param pulumi.Input[bool] need_convert: Whether to enable error code conversion. Default value: `false`.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "msg", msg)
        if converted_code is not None:
            pulumi.set(__self__, "converted_code", converted_code)
        if desc is not None:
            pulumi.set(__self__, "desc", desc)
        if need_convert is not None:
            pulumi.set(__self__, "need_convert", need_convert)

    @property
    @pulumi.getter
    def code(self) -> pulumi.Input[int]:
        """
        Custom response configuration error code.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: pulumi.Input[int]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def msg(self) -> pulumi.Input[str]:
        """
        Custom response configuration error message.
        """
        return pulumi.get(self, "msg")

    @msg.setter
    def msg(self, value: pulumi.Input[str]):
        pulumi.set(self, "msg", value)

    @property
    @pulumi.getter(name="convertedCode")
    def converted_code(self) -> Optional[pulumi.Input[int]]:
        """
        Custom error code conversion.
        """
        return pulumi.get(self, "converted_code")

    @converted_code.setter
    def converted_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "converted_code", value)

    @property
    @pulumi.getter
    def desc(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter description.
        """
        return pulumi.get(self, "desc")

    @desc.setter
    def desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desc", value)

    @property
    @pulumi.getter(name="needConvert")
    def need_convert(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable error code conversion. Default value: `false`.
        """
        return pulumi.get(self, "need_convert")

    @need_convert.setter
    def need_convert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "need_convert", value)


@pulumi.input_type
class ServiceApiListArgs:
    def __init__(__self__, *,
                 api_desc: Optional[pulumi.Input[str]] = None,
                 api_id: Optional[pulumi.Input[str]] = None,
                 api_name: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_desc: Description of the API.
        :param pulumi.Input[str] api_id: ID of the API.
        :param pulumi.Input[str] api_name: Name of the API.
        :param pulumi.Input[str] method: Method of the API.
        :param pulumi.Input[str] path: Path of the API.
        """
        if api_desc is not None:
            pulumi.set(__self__, "api_desc", api_desc)
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if api_name is not None:
            pulumi.set(__self__, "api_name", api_name)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="apiDesc")
    def api_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the API.
        """
        return pulumi.get(self, "api_desc")

    @api_desc.setter
    def api_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_desc", value)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the API.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_id", value)

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the API.
        """
        return pulumi.get(self, "api_name")

    @api_name.setter
    def api_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_name", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        Method of the API.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the API.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class ServiceUsagePlanListArgs:
    def __init__(__self__, *,
                 api_id: Optional[pulumi.Input[str]] = None,
                 bind_type: Optional[pulumi.Input[str]] = None,
                 usage_plan_id: Optional[pulumi.Input[str]] = None,
                 usage_plan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_id: ID of the API.
        :param pulumi.Input[str] bind_type: Binding type.
        :param pulumi.Input[str] usage_plan_id: ID of the usage plan.
        :param pulumi.Input[str] usage_plan_name: Name of the usage plan.
        """
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if bind_type is not None:
            pulumi.set(__self__, "bind_type", bind_type)
        if usage_plan_id is not None:
            pulumi.set(__self__, "usage_plan_id", usage_plan_id)
        if usage_plan_name is not None:
            pulumi.set(__self__, "usage_plan_name", usage_plan_name)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the API.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_id", value)

    @property
    @pulumi.getter(name="bindType")
    def bind_type(self) -> Optional[pulumi.Input[str]]:
        """
        Binding type.
        """
        return pulumi.get(self, "bind_type")

    @bind_type.setter
    def bind_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_type", value)

    @property
    @pulumi.getter(name="usagePlanId")
    def usage_plan_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the usage plan.
        """
        return pulumi.get(self, "usage_plan_id")

    @usage_plan_id.setter
    def usage_plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage_plan_id", value)

    @property
    @pulumi.getter(name="usagePlanName")
    def usage_plan_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the usage plan.
        """
        return pulumi.get(self, "usage_plan_name")

    @usage_plan_name.setter
    def usage_plan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage_plan_name", value)


@pulumi.input_type
class UsagePlanAttachListArgs:
    def __init__(__self__, *,
                 api_id: Optional[pulumi.Input[str]] = None,
                 api_name: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 modify_time: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_id: The API ID, this value is empty if attach service.
        :param pulumi.Input[str] api_name: The API name, this value is empty if attach service.
        :param pulumi.Input[str] create_time: Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[str] environment: The environment name.
        :param pulumi.Input[str] method: The API method, this value is empty if attach service.
        :param pulumi.Input[str] modify_time: Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[str] path: The API path, this value is empty if attach service.
        :param pulumi.Input[str] service_id: The service ID.
        :param pulumi.Input[str] service_name: The service name.
        """
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if api_name is not None:
            pulumi.set(__self__, "api_name", api_name)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if modify_time is not None:
            pulumi.set(__self__, "modify_time", modify_time)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[str]]:
        """
        The API ID, this value is empty if attach service.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_id", value)

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> Optional[pulumi.Input[str]]:
        """
        The API name, this value is empty if attach service.
        """
        return pulumi.get(self, "api_name")

    @api_name.setter
    def api_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_name", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        The environment name.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        The API method, this value is empty if attach service.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "modify_time")

    @modify_time.setter
    def modify_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modify_time", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The API path, this value is empty if attach service.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The service ID.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        The service name.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)


