# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApiArgs', 'Api']

@pulumi.input_type
class ApiArgs:
    def __init__(__self__, *,
                 api_name: pulumi.Input[str],
                 request_config_path: pulumi.Input[str],
                 service_id: pulumi.Input[str],
                 api_desc: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 enable_cors: Optional[pulumi.Input[bool]] = None,
                 pre_limit: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 release_limit: Optional[pulumi.Input[int]] = None,
                 request_config_method: Optional[pulumi.Input[str]] = None,
                 request_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApiRequestParameterArgs']]]] = None,
                 response_error_codes: Optional[pulumi.Input[Sequence[pulumi.Input['ApiResponseErrorCodeArgs']]]] = None,
                 response_fail_example: Optional[pulumi.Input[str]] = None,
                 response_success_example: Optional[pulumi.Input[str]] = None,
                 response_type: Optional[pulumi.Input[str]] = None,
                 service_config_method: Optional[pulumi.Input[str]] = None,
                 service_config_mock_return_message: Optional[pulumi.Input[str]] = None,
                 service_config_path: Optional[pulumi.Input[str]] = None,
                 service_config_product: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_name: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_namespace: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_qualifier: Optional[pulumi.Input[str]] = None,
                 service_config_timeout: Optional[pulumi.Input[int]] = None,
                 service_config_type: Optional[pulumi.Input[str]] = None,
                 service_config_url: Optional[pulumi.Input[str]] = None,
                 service_config_vpc_id: Optional[pulumi.Input[str]] = None,
                 test_limit: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Api resource.
        :param pulumi.Input[str] api_name: Custom API name.
        :param pulumi.Input[str] request_config_path: Request frontend path configuration. Like `/user/getinfo`.
        :param pulumi.Input[str] service_id: Which service this API belongs. Refer to resource `ApiGateway.Service`.
        :param pulumi.Input[str] api_desc: Custom API description.
        :param pulumi.Input[str] auth_type: API authentication type. Valid values: `SECRET` (key pair authentication),`NONE` (no authentication). Default value: `NONE`.
        :param pulumi.Input[bool] enable_cors: Whether to enable CORS. Default value: `true`.
        :param pulumi.Input[int] pre_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] protocol: API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
        :param pulumi.Input[int] release_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] request_config_method: Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
        :param pulumi.Input[Sequence[pulumi.Input['ApiRequestParameterArgs']]] request_parameters: Frontend request parameters.
        :param pulumi.Input[Sequence[pulumi.Input['ApiResponseErrorCodeArgs']]] response_error_codes: Custom error code configuration. Must keep at least one after set.
        :param pulumi.Input[str] response_fail_example: Response failure sample of custom response configuration.
        :param pulumi.Input[str] response_success_example: Successful response sample of custom response configuration.
        :param pulumi.Input[str] response_type: Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
        :param pulumi.Input[str] service_config_method: API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_method` and backend method `service_config_method` can be different.
        :param pulumi.Input[str] service_config_mock_return_message: Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
        :param pulumi.Input[str] service_config_path: API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_path` and backend path `service_config_path` can be different.
        :param pulumi.Input[str] service_config_product: Backend type. This parameter takes effect when VPC is enabled. Currently, only `clb` is supported.
        :param pulumi.Input[str] service_config_scf_function_name: SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_namespace: SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_qualifier: SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[int] service_config_timeout: API backend service timeout period in seconds. Default value: `5`.
        :param pulumi.Input[str] service_config_type: API backend service type. Valid values: `WEBSOCKET`, `HTTP`, `SCF`, `MOCK`. Default value: `HTTP`.
        :param pulumi.Input[str] service_config_url: API backend service url. This parameter is required when `service_config_type` is `HTTP`.
        :param pulumi.Input[str] service_config_vpc_id: Unique VPC ID.
        :param pulumi.Input[int] test_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        pulumi.set(__self__, "api_name", api_name)
        pulumi.set(__self__, "request_config_path", request_config_path)
        pulumi.set(__self__, "service_id", service_id)
        if api_desc is not None:
            pulumi.set(__self__, "api_desc", api_desc)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if enable_cors is not None:
            pulumi.set(__self__, "enable_cors", enable_cors)
        if pre_limit is not None:
            pulumi.set(__self__, "pre_limit", pre_limit)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if release_limit is not None:
            pulumi.set(__self__, "release_limit", release_limit)
        if request_config_method is not None:
            pulumi.set(__self__, "request_config_method", request_config_method)
        if request_parameters is not None:
            pulumi.set(__self__, "request_parameters", request_parameters)
        if response_error_codes is not None:
            pulumi.set(__self__, "response_error_codes", response_error_codes)
        if response_fail_example is not None:
            pulumi.set(__self__, "response_fail_example", response_fail_example)
        if response_success_example is not None:
            pulumi.set(__self__, "response_success_example", response_success_example)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if service_config_method is not None:
            pulumi.set(__self__, "service_config_method", service_config_method)
        if service_config_mock_return_message is not None:
            pulumi.set(__self__, "service_config_mock_return_message", service_config_mock_return_message)
        if service_config_path is not None:
            pulumi.set(__self__, "service_config_path", service_config_path)
        if service_config_product is not None:
            pulumi.set(__self__, "service_config_product", service_config_product)
        if service_config_scf_function_name is not None:
            pulumi.set(__self__, "service_config_scf_function_name", service_config_scf_function_name)
        if service_config_scf_function_namespace is not None:
            pulumi.set(__self__, "service_config_scf_function_namespace", service_config_scf_function_namespace)
        if service_config_scf_function_qualifier is not None:
            pulumi.set(__self__, "service_config_scf_function_qualifier", service_config_scf_function_qualifier)
        if service_config_timeout is not None:
            pulumi.set(__self__, "service_config_timeout", service_config_timeout)
        if service_config_type is not None:
            pulumi.set(__self__, "service_config_type", service_config_type)
        if service_config_url is not None:
            pulumi.set(__self__, "service_config_url", service_config_url)
        if service_config_vpc_id is not None:
            pulumi.set(__self__, "service_config_vpc_id", service_config_vpc_id)
        if test_limit is not None:
            pulumi.set(__self__, "test_limit", test_limit)

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> pulumi.Input[str]:
        """
        Custom API name.
        """
        return pulumi.get(self, "api_name")

    @api_name.setter
    def api_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_name", value)

    @property
    @pulumi.getter(name="requestConfigPath")
    def request_config_path(self) -> pulumi.Input[str]:
        """
        Request frontend path configuration. Like `/user/getinfo`.
        """
        return pulumi.get(self, "request_config_path")

    @request_config_path.setter
    def request_config_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "request_config_path", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        Which service this API belongs. Refer to resource `ApiGateway.Service`.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="apiDesc")
    def api_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Custom API description.
        """
        return pulumi.get(self, "api_desc")

    @api_desc.setter
    def api_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_desc", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        API authentication type. Valid values: `SECRET` (key pair authentication),`NONE` (no authentication). Default value: `NONE`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="enableCors")
    def enable_cors(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable CORS. Default value: `true`.
        """
        return pulumi.get(self, "enable_cors")

    @enable_cors.setter
    def enable_cors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cors", value)

    @property
    @pulumi.getter(name="preLimit")
    def pre_limit(self) -> Optional[pulumi.Input[int]]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "pre_limit")

    @pre_limit.setter
    def pre_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pre_limit", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="releaseLimit")
    def release_limit(self) -> Optional[pulumi.Input[int]]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "release_limit")

    @release_limit.setter
    def release_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "release_limit", value)

    @property
    @pulumi.getter(name="requestConfigMethod")
    def request_config_method(self) -> Optional[pulumi.Input[str]]:
        """
        Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
        """
        return pulumi.get(self, "request_config_method")

    @request_config_method.setter
    def request_config_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_config_method", value)

    @property
    @pulumi.getter(name="requestParameters")
    def request_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiRequestParameterArgs']]]]:
        """
        Frontend request parameters.
        """
        return pulumi.get(self, "request_parameters")

    @request_parameters.setter
    def request_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiRequestParameterArgs']]]]):
        pulumi.set(self, "request_parameters", value)

    @property
    @pulumi.getter(name="responseErrorCodes")
    def response_error_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiResponseErrorCodeArgs']]]]:
        """
        Custom error code configuration. Must keep at least one after set.
        """
        return pulumi.get(self, "response_error_codes")

    @response_error_codes.setter
    def response_error_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiResponseErrorCodeArgs']]]]):
        pulumi.set(self, "response_error_codes", value)

    @property
    @pulumi.getter(name="responseFailExample")
    def response_fail_example(self) -> Optional[pulumi.Input[str]]:
        """
        Response failure sample of custom response configuration.
        """
        return pulumi.get(self, "response_fail_example")

    @response_fail_example.setter
    def response_fail_example(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_fail_example", value)

    @property
    @pulumi.getter(name="responseSuccessExample")
    def response_success_example(self) -> Optional[pulumi.Input[str]]:
        """
        Successful response sample of custom response configuration.
        """
        return pulumi.get(self, "response_success_example")

    @response_success_example.setter
    def response_success_example(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_success_example", value)

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[pulumi.Input[str]]:
        """
        Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
        """
        return pulumi.get(self, "response_type")

    @response_type.setter
    def response_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_type", value)

    @property
    @pulumi.getter(name="serviceConfigMethod")
    def service_config_method(self) -> Optional[pulumi.Input[str]]:
        """
        API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_method` and backend method `service_config_method` can be different.
        """
        return pulumi.get(self, "service_config_method")

    @service_config_method.setter
    def service_config_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_method", value)

    @property
    @pulumi.getter(name="serviceConfigMockReturnMessage")
    def service_config_mock_return_message(self) -> Optional[pulumi.Input[str]]:
        """
        Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
        """
        return pulumi.get(self, "service_config_mock_return_message")

    @service_config_mock_return_message.setter
    def service_config_mock_return_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_mock_return_message", value)

    @property
    @pulumi.getter(name="serviceConfigPath")
    def service_config_path(self) -> Optional[pulumi.Input[str]]:
        """
        API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_path` and backend path `service_config_path` can be different.
        """
        return pulumi.get(self, "service_config_path")

    @service_config_path.setter
    def service_config_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_path", value)

    @property
    @pulumi.getter(name="serviceConfigProduct")
    def service_config_product(self) -> Optional[pulumi.Input[str]]:
        """
        Backend type. This parameter takes effect when VPC is enabled. Currently, only `clb` is supported.
        """
        return pulumi.get(self, "service_config_product")

    @service_config_product.setter
    def service_config_product(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_product", value)

    @property
    @pulumi.getter(name="serviceConfigScfFunctionName")
    def service_config_scf_function_name(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_name")

    @service_config_scf_function_name.setter
    def service_config_scf_function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_scf_function_name", value)

    @property
    @pulumi.getter(name="serviceConfigScfFunctionNamespace")
    def service_config_scf_function_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_namespace")

    @service_config_scf_function_namespace.setter
    def service_config_scf_function_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_scf_function_namespace", value)

    @property
    @pulumi.getter(name="serviceConfigScfFunctionQualifier")
    def service_config_scf_function_qualifier(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_qualifier")

    @service_config_scf_function_qualifier.setter
    def service_config_scf_function_qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_scf_function_qualifier", value)

    @property
    @pulumi.getter(name="serviceConfigTimeout")
    def service_config_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        API backend service timeout period in seconds. Default value: `5`.
        """
        return pulumi.get(self, "service_config_timeout")

    @service_config_timeout.setter
    def service_config_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_config_timeout", value)

    @property
    @pulumi.getter(name="serviceConfigType")
    def service_config_type(self) -> Optional[pulumi.Input[str]]:
        """
        API backend service type. Valid values: `WEBSOCKET`, `HTTP`, `SCF`, `MOCK`. Default value: `HTTP`.
        """
        return pulumi.get(self, "service_config_type")

    @service_config_type.setter
    def service_config_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_type", value)

    @property
    @pulumi.getter(name="serviceConfigUrl")
    def service_config_url(self) -> Optional[pulumi.Input[str]]:
        """
        API backend service url. This parameter is required when `service_config_type` is `HTTP`.
        """
        return pulumi.get(self, "service_config_url")

    @service_config_url.setter
    def service_config_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_url", value)

    @property
    @pulumi.getter(name="serviceConfigVpcId")
    def service_config_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique VPC ID.
        """
        return pulumi.get(self, "service_config_vpc_id")

    @service_config_vpc_id.setter
    def service_config_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_vpc_id", value)

    @property
    @pulumi.getter(name="testLimit")
    def test_limit(self) -> Optional[pulumi.Input[int]]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "test_limit")

    @test_limit.setter
    def test_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "test_limit", value)


@pulumi.input_type
class _ApiState:
    def __init__(__self__, *,
                 api_desc: Optional[pulumi.Input[str]] = None,
                 api_name: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 enable_cors: Optional[pulumi.Input[bool]] = None,
                 pre_limit: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 release_limit: Optional[pulumi.Input[int]] = None,
                 request_config_method: Optional[pulumi.Input[str]] = None,
                 request_config_path: Optional[pulumi.Input[str]] = None,
                 request_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApiRequestParameterArgs']]]] = None,
                 response_error_codes: Optional[pulumi.Input[Sequence[pulumi.Input['ApiResponseErrorCodeArgs']]]] = None,
                 response_fail_example: Optional[pulumi.Input[str]] = None,
                 response_success_example: Optional[pulumi.Input[str]] = None,
                 response_type: Optional[pulumi.Input[str]] = None,
                 service_config_method: Optional[pulumi.Input[str]] = None,
                 service_config_mock_return_message: Optional[pulumi.Input[str]] = None,
                 service_config_path: Optional[pulumi.Input[str]] = None,
                 service_config_product: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_name: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_namespace: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_qualifier: Optional[pulumi.Input[str]] = None,
                 service_config_timeout: Optional[pulumi.Input[int]] = None,
                 service_config_type: Optional[pulumi.Input[str]] = None,
                 service_config_url: Optional[pulumi.Input[str]] = None,
                 service_config_vpc_id: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 test_limit: Optional[pulumi.Input[int]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Api resources.
        :param pulumi.Input[str] api_desc: Custom API description.
        :param pulumi.Input[str] api_name: Custom API name.
        :param pulumi.Input[str] auth_type: API authentication type. Valid values: `SECRET` (key pair authentication),`NONE` (no authentication). Default value: `NONE`.
        :param pulumi.Input[str] create_time: Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[bool] enable_cors: Whether to enable CORS. Default value: `true`.
        :param pulumi.Input[int] pre_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] protocol: API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
        :param pulumi.Input[int] release_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] request_config_method: Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
        :param pulumi.Input[str] request_config_path: Request frontend path configuration. Like `/user/getinfo`.
        :param pulumi.Input[Sequence[pulumi.Input['ApiRequestParameterArgs']]] request_parameters: Frontend request parameters.
        :param pulumi.Input[Sequence[pulumi.Input['ApiResponseErrorCodeArgs']]] response_error_codes: Custom error code configuration. Must keep at least one after set.
        :param pulumi.Input[str] response_fail_example: Response failure sample of custom response configuration.
        :param pulumi.Input[str] response_success_example: Successful response sample of custom response configuration.
        :param pulumi.Input[str] response_type: Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
        :param pulumi.Input[str] service_config_method: API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_method` and backend method `service_config_method` can be different.
        :param pulumi.Input[str] service_config_mock_return_message: Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
        :param pulumi.Input[str] service_config_path: API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_path` and backend path `service_config_path` can be different.
        :param pulumi.Input[str] service_config_product: Backend type. This parameter takes effect when VPC is enabled. Currently, only `clb` is supported.
        :param pulumi.Input[str] service_config_scf_function_name: SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_namespace: SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_qualifier: SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[int] service_config_timeout: API backend service timeout period in seconds. Default value: `5`.
        :param pulumi.Input[str] service_config_type: API backend service type. Valid values: `WEBSOCKET`, `HTTP`, `SCF`, `MOCK`. Default value: `HTTP`.
        :param pulumi.Input[str] service_config_url: API backend service url. This parameter is required when `service_config_type` is `HTTP`.
        :param pulumi.Input[str] service_config_vpc_id: Unique VPC ID.
        :param pulumi.Input[str] service_id: Which service this API belongs. Refer to resource `ApiGateway.Service`.
        :param pulumi.Input[int] test_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] update_time: Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        if api_desc is not None:
            pulumi.set(__self__, "api_desc", api_desc)
        if api_name is not None:
            pulumi.set(__self__, "api_name", api_name)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable_cors is not None:
            pulumi.set(__self__, "enable_cors", enable_cors)
        if pre_limit is not None:
            pulumi.set(__self__, "pre_limit", pre_limit)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if release_limit is not None:
            pulumi.set(__self__, "release_limit", release_limit)
        if request_config_method is not None:
            pulumi.set(__self__, "request_config_method", request_config_method)
        if request_config_path is not None:
            pulumi.set(__self__, "request_config_path", request_config_path)
        if request_parameters is not None:
            pulumi.set(__self__, "request_parameters", request_parameters)
        if response_error_codes is not None:
            pulumi.set(__self__, "response_error_codes", response_error_codes)
        if response_fail_example is not None:
            pulumi.set(__self__, "response_fail_example", response_fail_example)
        if response_success_example is not None:
            pulumi.set(__self__, "response_success_example", response_success_example)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if service_config_method is not None:
            pulumi.set(__self__, "service_config_method", service_config_method)
        if service_config_mock_return_message is not None:
            pulumi.set(__self__, "service_config_mock_return_message", service_config_mock_return_message)
        if service_config_path is not None:
            pulumi.set(__self__, "service_config_path", service_config_path)
        if service_config_product is not None:
            pulumi.set(__self__, "service_config_product", service_config_product)
        if service_config_scf_function_name is not None:
            pulumi.set(__self__, "service_config_scf_function_name", service_config_scf_function_name)
        if service_config_scf_function_namespace is not None:
            pulumi.set(__self__, "service_config_scf_function_namespace", service_config_scf_function_namespace)
        if service_config_scf_function_qualifier is not None:
            pulumi.set(__self__, "service_config_scf_function_qualifier", service_config_scf_function_qualifier)
        if service_config_timeout is not None:
            pulumi.set(__self__, "service_config_timeout", service_config_timeout)
        if service_config_type is not None:
            pulumi.set(__self__, "service_config_type", service_config_type)
        if service_config_url is not None:
            pulumi.set(__self__, "service_config_url", service_config_url)
        if service_config_vpc_id is not None:
            pulumi.set(__self__, "service_config_vpc_id", service_config_vpc_id)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if test_limit is not None:
            pulumi.set(__self__, "test_limit", test_limit)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="apiDesc")
    def api_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Custom API description.
        """
        return pulumi.get(self, "api_desc")

    @api_desc.setter
    def api_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_desc", value)

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom API name.
        """
        return pulumi.get(self, "api_name")

    @api_name.setter
    def api_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_name", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        API authentication type. Valid values: `SECRET` (key pair authentication),`NONE` (no authentication). Default value: `NONE`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="enableCors")
    def enable_cors(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable CORS. Default value: `true`.
        """
        return pulumi.get(self, "enable_cors")

    @enable_cors.setter
    def enable_cors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cors", value)

    @property
    @pulumi.getter(name="preLimit")
    def pre_limit(self) -> Optional[pulumi.Input[int]]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "pre_limit")

    @pre_limit.setter
    def pre_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pre_limit", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="releaseLimit")
    def release_limit(self) -> Optional[pulumi.Input[int]]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "release_limit")

    @release_limit.setter
    def release_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "release_limit", value)

    @property
    @pulumi.getter(name="requestConfigMethod")
    def request_config_method(self) -> Optional[pulumi.Input[str]]:
        """
        Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
        """
        return pulumi.get(self, "request_config_method")

    @request_config_method.setter
    def request_config_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_config_method", value)

    @property
    @pulumi.getter(name="requestConfigPath")
    def request_config_path(self) -> Optional[pulumi.Input[str]]:
        """
        Request frontend path configuration. Like `/user/getinfo`.
        """
        return pulumi.get(self, "request_config_path")

    @request_config_path.setter
    def request_config_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_config_path", value)

    @property
    @pulumi.getter(name="requestParameters")
    def request_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiRequestParameterArgs']]]]:
        """
        Frontend request parameters.
        """
        return pulumi.get(self, "request_parameters")

    @request_parameters.setter
    def request_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiRequestParameterArgs']]]]):
        pulumi.set(self, "request_parameters", value)

    @property
    @pulumi.getter(name="responseErrorCodes")
    def response_error_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiResponseErrorCodeArgs']]]]:
        """
        Custom error code configuration. Must keep at least one after set.
        """
        return pulumi.get(self, "response_error_codes")

    @response_error_codes.setter
    def response_error_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiResponseErrorCodeArgs']]]]):
        pulumi.set(self, "response_error_codes", value)

    @property
    @pulumi.getter(name="responseFailExample")
    def response_fail_example(self) -> Optional[pulumi.Input[str]]:
        """
        Response failure sample of custom response configuration.
        """
        return pulumi.get(self, "response_fail_example")

    @response_fail_example.setter
    def response_fail_example(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_fail_example", value)

    @property
    @pulumi.getter(name="responseSuccessExample")
    def response_success_example(self) -> Optional[pulumi.Input[str]]:
        """
        Successful response sample of custom response configuration.
        """
        return pulumi.get(self, "response_success_example")

    @response_success_example.setter
    def response_success_example(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_success_example", value)

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[pulumi.Input[str]]:
        """
        Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
        """
        return pulumi.get(self, "response_type")

    @response_type.setter
    def response_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_type", value)

    @property
    @pulumi.getter(name="serviceConfigMethod")
    def service_config_method(self) -> Optional[pulumi.Input[str]]:
        """
        API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_method` and backend method `service_config_method` can be different.
        """
        return pulumi.get(self, "service_config_method")

    @service_config_method.setter
    def service_config_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_method", value)

    @property
    @pulumi.getter(name="serviceConfigMockReturnMessage")
    def service_config_mock_return_message(self) -> Optional[pulumi.Input[str]]:
        """
        Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
        """
        return pulumi.get(self, "service_config_mock_return_message")

    @service_config_mock_return_message.setter
    def service_config_mock_return_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_mock_return_message", value)

    @property
    @pulumi.getter(name="serviceConfigPath")
    def service_config_path(self) -> Optional[pulumi.Input[str]]:
        """
        API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_path` and backend path `service_config_path` can be different.
        """
        return pulumi.get(self, "service_config_path")

    @service_config_path.setter
    def service_config_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_path", value)

    @property
    @pulumi.getter(name="serviceConfigProduct")
    def service_config_product(self) -> Optional[pulumi.Input[str]]:
        """
        Backend type. This parameter takes effect when VPC is enabled. Currently, only `clb` is supported.
        """
        return pulumi.get(self, "service_config_product")

    @service_config_product.setter
    def service_config_product(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_product", value)

    @property
    @pulumi.getter(name="serviceConfigScfFunctionName")
    def service_config_scf_function_name(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_name")

    @service_config_scf_function_name.setter
    def service_config_scf_function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_scf_function_name", value)

    @property
    @pulumi.getter(name="serviceConfigScfFunctionNamespace")
    def service_config_scf_function_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_namespace")

    @service_config_scf_function_namespace.setter
    def service_config_scf_function_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_scf_function_namespace", value)

    @property
    @pulumi.getter(name="serviceConfigScfFunctionQualifier")
    def service_config_scf_function_qualifier(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_qualifier")

    @service_config_scf_function_qualifier.setter
    def service_config_scf_function_qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_scf_function_qualifier", value)

    @property
    @pulumi.getter(name="serviceConfigTimeout")
    def service_config_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        API backend service timeout period in seconds. Default value: `5`.
        """
        return pulumi.get(self, "service_config_timeout")

    @service_config_timeout.setter
    def service_config_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_config_timeout", value)

    @property
    @pulumi.getter(name="serviceConfigType")
    def service_config_type(self) -> Optional[pulumi.Input[str]]:
        """
        API backend service type. Valid values: `WEBSOCKET`, `HTTP`, `SCF`, `MOCK`. Default value: `HTTP`.
        """
        return pulumi.get(self, "service_config_type")

    @service_config_type.setter
    def service_config_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_type", value)

    @property
    @pulumi.getter(name="serviceConfigUrl")
    def service_config_url(self) -> Optional[pulumi.Input[str]]:
        """
        API backend service url. This parameter is required when `service_config_type` is `HTTP`.
        """
        return pulumi.get(self, "service_config_url")

    @service_config_url.setter
    def service_config_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_url", value)

    @property
    @pulumi.getter(name="serviceConfigVpcId")
    def service_config_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique VPC ID.
        """
        return pulumi.get(self, "service_config_vpc_id")

    @service_config_vpc_id.setter
    def service_config_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_vpc_id", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        Which service this API belongs. Refer to resource `ApiGateway.Service`.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="testLimit")
    def test_limit(self) -> Optional[pulumi.Input[int]]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "test_limit")

    @test_limit.setter
    def test_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "test_limit", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class Api(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_desc: Optional[pulumi.Input[str]] = None,
                 api_name: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 enable_cors: Optional[pulumi.Input[bool]] = None,
                 pre_limit: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 release_limit: Optional[pulumi.Input[int]] = None,
                 request_config_method: Optional[pulumi.Input[str]] = None,
                 request_config_path: Optional[pulumi.Input[str]] = None,
                 request_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApiRequestParameterArgs']]]]] = None,
                 response_error_codes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApiResponseErrorCodeArgs']]]]] = None,
                 response_fail_example: Optional[pulumi.Input[str]] = None,
                 response_success_example: Optional[pulumi.Input[str]] = None,
                 response_type: Optional[pulumi.Input[str]] = None,
                 service_config_method: Optional[pulumi.Input[str]] = None,
                 service_config_mock_return_message: Optional[pulumi.Input[str]] = None,
                 service_config_path: Optional[pulumi.Input[str]] = None,
                 service_config_product: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_name: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_namespace: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_qualifier: Optional[pulumi.Input[str]] = None,
                 service_config_timeout: Optional[pulumi.Input[int]] = None,
                 service_config_type: Optional[pulumi.Input[str]] = None,
                 service_config_url: Optional[pulumi.Input[str]] = None,
                 service_config_vpc_id: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 test_limit: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Use this resource to create API of API gateway.

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        service = tencentcloud.api_gateway.Service("service",
            service_name="ck",
            protocol="http&https",
            service_desc="your nice service",
            net_types=[
                "INNER",
                "OUTER",
            ],
            ip_version="IPv4")
        api = tencentcloud.api_gateway.Api("api",
            service_id=service.id,
            api_name="hello",
            api_desc="my hello api",
            auth_type="NONE",
            protocol="HTTP",
            enable_cors=True,
            request_config_path="/user/info",
            request_config_method="GET",
            request_parameters=[tencentcloud.api.gateway.ApiRequestParameterArgs(
                name="name",
                position="QUERY",
                type="string",
                desc="who are you?",
                default_value="tom",
                required=True,
            )],
            service_config_type="HTTP",
            service_config_timeout=15,
            service_config_url="http://www.qq.com",
            service_config_path="/user",
            service_config_method="GET",
            response_type="HTML",
            response_success_example="success",
            response_fail_example="fail",
            response_error_codes=[tencentcloud.api.gateway.ApiResponseErrorCodeArgs(
                code=100,
                msg="system error",
                desc="system error code",
                converted_code=-100,
                need_convert=True,
            )])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_desc: Custom API description.
        :param pulumi.Input[str] api_name: Custom API name.
        :param pulumi.Input[str] auth_type: API authentication type. Valid values: `SECRET` (key pair authentication),`NONE` (no authentication). Default value: `NONE`.
        :param pulumi.Input[bool] enable_cors: Whether to enable CORS. Default value: `true`.
        :param pulumi.Input[int] pre_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] protocol: API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
        :param pulumi.Input[int] release_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] request_config_method: Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
        :param pulumi.Input[str] request_config_path: Request frontend path configuration. Like `/user/getinfo`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApiRequestParameterArgs']]]] request_parameters: Frontend request parameters.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApiResponseErrorCodeArgs']]]] response_error_codes: Custom error code configuration. Must keep at least one after set.
        :param pulumi.Input[str] response_fail_example: Response failure sample of custom response configuration.
        :param pulumi.Input[str] response_success_example: Successful response sample of custom response configuration.
        :param pulumi.Input[str] response_type: Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
        :param pulumi.Input[str] service_config_method: API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_method` and backend method `service_config_method` can be different.
        :param pulumi.Input[str] service_config_mock_return_message: Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
        :param pulumi.Input[str] service_config_path: API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_path` and backend path `service_config_path` can be different.
        :param pulumi.Input[str] service_config_product: Backend type. This parameter takes effect when VPC is enabled. Currently, only `clb` is supported.
        :param pulumi.Input[str] service_config_scf_function_name: SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_namespace: SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_qualifier: SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[int] service_config_timeout: API backend service timeout period in seconds. Default value: `5`.
        :param pulumi.Input[str] service_config_type: API backend service type. Valid values: `WEBSOCKET`, `HTTP`, `SCF`, `MOCK`. Default value: `HTTP`.
        :param pulumi.Input[str] service_config_url: API backend service url. This parameter is required when `service_config_type` is `HTTP`.
        :param pulumi.Input[str] service_config_vpc_id: Unique VPC ID.
        :param pulumi.Input[str] service_id: Which service this API belongs. Refer to resource `ApiGateway.Service`.
        :param pulumi.Input[int] test_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApiArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create API of API gateway.

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        service = tencentcloud.api_gateway.Service("service",
            service_name="ck",
            protocol="http&https",
            service_desc="your nice service",
            net_types=[
                "INNER",
                "OUTER",
            ],
            ip_version="IPv4")
        api = tencentcloud.api_gateway.Api("api",
            service_id=service.id,
            api_name="hello",
            api_desc="my hello api",
            auth_type="NONE",
            protocol="HTTP",
            enable_cors=True,
            request_config_path="/user/info",
            request_config_method="GET",
            request_parameters=[tencentcloud.api.gateway.ApiRequestParameterArgs(
                name="name",
                position="QUERY",
                type="string",
                desc="who are you?",
                default_value="tom",
                required=True,
            )],
            service_config_type="HTTP",
            service_config_timeout=15,
            service_config_url="http://www.qq.com",
            service_config_path="/user",
            service_config_method="GET",
            response_type="HTML",
            response_success_example="success",
            response_fail_example="fail",
            response_error_codes=[tencentcloud.api.gateway.ApiResponseErrorCodeArgs(
                code=100,
                msg="system error",
                desc="system error code",
                converted_code=-100,
                need_convert=True,
            )])
        ```

        :param str resource_name: The name of the resource.
        :param ApiArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApiArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_desc: Optional[pulumi.Input[str]] = None,
                 api_name: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 enable_cors: Optional[pulumi.Input[bool]] = None,
                 pre_limit: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 release_limit: Optional[pulumi.Input[int]] = None,
                 request_config_method: Optional[pulumi.Input[str]] = None,
                 request_config_path: Optional[pulumi.Input[str]] = None,
                 request_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApiRequestParameterArgs']]]]] = None,
                 response_error_codes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApiResponseErrorCodeArgs']]]]] = None,
                 response_fail_example: Optional[pulumi.Input[str]] = None,
                 response_success_example: Optional[pulumi.Input[str]] = None,
                 response_type: Optional[pulumi.Input[str]] = None,
                 service_config_method: Optional[pulumi.Input[str]] = None,
                 service_config_mock_return_message: Optional[pulumi.Input[str]] = None,
                 service_config_path: Optional[pulumi.Input[str]] = None,
                 service_config_product: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_name: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_namespace: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_qualifier: Optional[pulumi.Input[str]] = None,
                 service_config_timeout: Optional[pulumi.Input[int]] = None,
                 service_config_type: Optional[pulumi.Input[str]] = None,
                 service_config_url: Optional[pulumi.Input[str]] = None,
                 service_config_vpc_id: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 test_limit: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApiArgs.__new__(ApiArgs)

            __props__.__dict__["api_desc"] = api_desc
            if api_name is None and not opts.urn:
                raise TypeError("Missing required property 'api_name'")
            __props__.__dict__["api_name"] = api_name
            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["enable_cors"] = enable_cors
            __props__.__dict__["pre_limit"] = pre_limit
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["release_limit"] = release_limit
            __props__.__dict__["request_config_method"] = request_config_method
            if request_config_path is None and not opts.urn:
                raise TypeError("Missing required property 'request_config_path'")
            __props__.__dict__["request_config_path"] = request_config_path
            __props__.__dict__["request_parameters"] = request_parameters
            __props__.__dict__["response_error_codes"] = response_error_codes
            __props__.__dict__["response_fail_example"] = response_fail_example
            __props__.__dict__["response_success_example"] = response_success_example
            __props__.__dict__["response_type"] = response_type
            __props__.__dict__["service_config_method"] = service_config_method
            __props__.__dict__["service_config_mock_return_message"] = service_config_mock_return_message
            __props__.__dict__["service_config_path"] = service_config_path
            __props__.__dict__["service_config_product"] = service_config_product
            __props__.__dict__["service_config_scf_function_name"] = service_config_scf_function_name
            __props__.__dict__["service_config_scf_function_namespace"] = service_config_scf_function_namespace
            __props__.__dict__["service_config_scf_function_qualifier"] = service_config_scf_function_qualifier
            __props__.__dict__["service_config_timeout"] = service_config_timeout
            __props__.__dict__["service_config_type"] = service_config_type
            __props__.__dict__["service_config_url"] = service_config_url
            __props__.__dict__["service_config_vpc_id"] = service_config_vpc_id
            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
            __props__.__dict__["test_limit"] = test_limit
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        super(Api, __self__).__init__(
            'tencentcloud:ApiGateway/api:Api',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_desc: Optional[pulumi.Input[str]] = None,
            api_name: Optional[pulumi.Input[str]] = None,
            auth_type: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            enable_cors: Optional[pulumi.Input[bool]] = None,
            pre_limit: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            release_limit: Optional[pulumi.Input[int]] = None,
            request_config_method: Optional[pulumi.Input[str]] = None,
            request_config_path: Optional[pulumi.Input[str]] = None,
            request_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApiRequestParameterArgs']]]]] = None,
            response_error_codes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApiResponseErrorCodeArgs']]]]] = None,
            response_fail_example: Optional[pulumi.Input[str]] = None,
            response_success_example: Optional[pulumi.Input[str]] = None,
            response_type: Optional[pulumi.Input[str]] = None,
            service_config_method: Optional[pulumi.Input[str]] = None,
            service_config_mock_return_message: Optional[pulumi.Input[str]] = None,
            service_config_path: Optional[pulumi.Input[str]] = None,
            service_config_product: Optional[pulumi.Input[str]] = None,
            service_config_scf_function_name: Optional[pulumi.Input[str]] = None,
            service_config_scf_function_namespace: Optional[pulumi.Input[str]] = None,
            service_config_scf_function_qualifier: Optional[pulumi.Input[str]] = None,
            service_config_timeout: Optional[pulumi.Input[int]] = None,
            service_config_type: Optional[pulumi.Input[str]] = None,
            service_config_url: Optional[pulumi.Input[str]] = None,
            service_config_vpc_id: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            test_limit: Optional[pulumi.Input[int]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'Api':
        """
        Get an existing Api resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_desc: Custom API description.
        :param pulumi.Input[str] api_name: Custom API name.
        :param pulumi.Input[str] auth_type: API authentication type. Valid values: `SECRET` (key pair authentication),`NONE` (no authentication). Default value: `NONE`.
        :param pulumi.Input[str] create_time: Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[bool] enable_cors: Whether to enable CORS. Default value: `true`.
        :param pulumi.Input[int] pre_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] protocol: API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
        :param pulumi.Input[int] release_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] request_config_method: Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
        :param pulumi.Input[str] request_config_path: Request frontend path configuration. Like `/user/getinfo`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApiRequestParameterArgs']]]] request_parameters: Frontend request parameters.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApiResponseErrorCodeArgs']]]] response_error_codes: Custom error code configuration. Must keep at least one after set.
        :param pulumi.Input[str] response_fail_example: Response failure sample of custom response configuration.
        :param pulumi.Input[str] response_success_example: Successful response sample of custom response configuration.
        :param pulumi.Input[str] response_type: Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
        :param pulumi.Input[str] service_config_method: API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_method` and backend method `service_config_method` can be different.
        :param pulumi.Input[str] service_config_mock_return_message: Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
        :param pulumi.Input[str] service_config_path: API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_path` and backend path `service_config_path` can be different.
        :param pulumi.Input[str] service_config_product: Backend type. This parameter takes effect when VPC is enabled. Currently, only `clb` is supported.
        :param pulumi.Input[str] service_config_scf_function_name: SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_namespace: SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_qualifier: SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[int] service_config_timeout: API backend service timeout period in seconds. Default value: `5`.
        :param pulumi.Input[str] service_config_type: API backend service type. Valid values: `WEBSOCKET`, `HTTP`, `SCF`, `MOCK`. Default value: `HTTP`.
        :param pulumi.Input[str] service_config_url: API backend service url. This parameter is required when `service_config_type` is `HTTP`.
        :param pulumi.Input[str] service_config_vpc_id: Unique VPC ID.
        :param pulumi.Input[str] service_id: Which service this API belongs. Refer to resource `ApiGateway.Service`.
        :param pulumi.Input[int] test_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] update_time: Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApiState.__new__(_ApiState)

        __props__.__dict__["api_desc"] = api_desc
        __props__.__dict__["api_name"] = api_name
        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["enable_cors"] = enable_cors
        __props__.__dict__["pre_limit"] = pre_limit
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["release_limit"] = release_limit
        __props__.__dict__["request_config_method"] = request_config_method
        __props__.__dict__["request_config_path"] = request_config_path
        __props__.__dict__["request_parameters"] = request_parameters
        __props__.__dict__["response_error_codes"] = response_error_codes
        __props__.__dict__["response_fail_example"] = response_fail_example
        __props__.__dict__["response_success_example"] = response_success_example
        __props__.__dict__["response_type"] = response_type
        __props__.__dict__["service_config_method"] = service_config_method
        __props__.__dict__["service_config_mock_return_message"] = service_config_mock_return_message
        __props__.__dict__["service_config_path"] = service_config_path
        __props__.__dict__["service_config_product"] = service_config_product
        __props__.__dict__["service_config_scf_function_name"] = service_config_scf_function_name
        __props__.__dict__["service_config_scf_function_namespace"] = service_config_scf_function_namespace
        __props__.__dict__["service_config_scf_function_qualifier"] = service_config_scf_function_qualifier
        __props__.__dict__["service_config_timeout"] = service_config_timeout
        __props__.__dict__["service_config_type"] = service_config_type
        __props__.__dict__["service_config_url"] = service_config_url
        __props__.__dict__["service_config_vpc_id"] = service_config_vpc_id
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["test_limit"] = test_limit
        __props__.__dict__["update_time"] = update_time
        return Api(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiDesc")
    def api_desc(self) -> pulumi.Output[Optional[str]]:
        """
        Custom API description.
        """
        return pulumi.get(self, "api_desc")

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> pulumi.Output[str]:
        """
        Custom API name.
        """
        return pulumi.get(self, "api_name")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[Optional[str]]:
        """
        API authentication type. Valid values: `SECRET` (key pair authentication),`NONE` (no authentication). Default value: `NONE`.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="enableCors")
    def enable_cors(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable CORS. Default value: `true`.
        """
        return pulumi.get(self, "enable_cors")

    @property
    @pulumi.getter(name="preLimit")
    def pre_limit(self) -> pulumi.Output[int]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "pre_limit")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[str]]:
        """
        API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="releaseLimit")
    def release_limit(self) -> pulumi.Output[int]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "release_limit")

    @property
    @pulumi.getter(name="requestConfigMethod")
    def request_config_method(self) -> pulumi.Output[Optional[str]]:
        """
        Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
        """
        return pulumi.get(self, "request_config_method")

    @property
    @pulumi.getter(name="requestConfigPath")
    def request_config_path(self) -> pulumi.Output[str]:
        """
        Request frontend path configuration. Like `/user/getinfo`.
        """
        return pulumi.get(self, "request_config_path")

    @property
    @pulumi.getter(name="requestParameters")
    def request_parameters(self) -> pulumi.Output[Optional[Sequence['outputs.ApiRequestParameter']]]:
        """
        Frontend request parameters.
        """
        return pulumi.get(self, "request_parameters")

    @property
    @pulumi.getter(name="responseErrorCodes")
    def response_error_codes(self) -> pulumi.Output[Optional[Sequence['outputs.ApiResponseErrorCode']]]:
        """
        Custom error code configuration. Must keep at least one after set.
        """
        return pulumi.get(self, "response_error_codes")

    @property
    @pulumi.getter(name="responseFailExample")
    def response_fail_example(self) -> pulumi.Output[Optional[str]]:
        """
        Response failure sample of custom response configuration.
        """
        return pulumi.get(self, "response_fail_example")

    @property
    @pulumi.getter(name="responseSuccessExample")
    def response_success_example(self) -> pulumi.Output[Optional[str]]:
        """
        Successful response sample of custom response configuration.
        """
        return pulumi.get(self, "response_success_example")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> pulumi.Output[str]:
        """
        Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
        """
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter(name="serviceConfigMethod")
    def service_config_method(self) -> pulumi.Output[Optional[str]]:
        """
        API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_method` and backend method `service_config_method` can be different.
        """
        return pulumi.get(self, "service_config_method")

    @property
    @pulumi.getter(name="serviceConfigMockReturnMessage")
    def service_config_mock_return_message(self) -> pulumi.Output[Optional[str]]:
        """
        Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
        """
        return pulumi.get(self, "service_config_mock_return_message")

    @property
    @pulumi.getter(name="serviceConfigPath")
    def service_config_path(self) -> pulumi.Output[Optional[str]]:
        """
        API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_path` and backend path `service_config_path` can be different.
        """
        return pulumi.get(self, "service_config_path")

    @property
    @pulumi.getter(name="serviceConfigProduct")
    def service_config_product(self) -> pulumi.Output[Optional[str]]:
        """
        Backend type. This parameter takes effect when VPC is enabled. Currently, only `clb` is supported.
        """
        return pulumi.get(self, "service_config_product")

    @property
    @pulumi.getter(name="serviceConfigScfFunctionName")
    def service_config_scf_function_name(self) -> pulumi.Output[Optional[str]]:
        """
        SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_name")

    @property
    @pulumi.getter(name="serviceConfigScfFunctionNamespace")
    def service_config_scf_function_namespace(self) -> pulumi.Output[Optional[str]]:
        """
        SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_namespace")

    @property
    @pulumi.getter(name="serviceConfigScfFunctionQualifier")
    def service_config_scf_function_qualifier(self) -> pulumi.Output[Optional[str]]:
        """
        SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_qualifier")

    @property
    @pulumi.getter(name="serviceConfigTimeout")
    def service_config_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        API backend service timeout period in seconds. Default value: `5`.
        """
        return pulumi.get(self, "service_config_timeout")

    @property
    @pulumi.getter(name="serviceConfigType")
    def service_config_type(self) -> pulumi.Output[Optional[str]]:
        """
        API backend service type. Valid values: `WEBSOCKET`, `HTTP`, `SCF`, `MOCK`. Default value: `HTTP`.
        """
        return pulumi.get(self, "service_config_type")

    @property
    @pulumi.getter(name="serviceConfigUrl")
    def service_config_url(self) -> pulumi.Output[Optional[str]]:
        """
        API backend service url. This parameter is required when `service_config_type` is `HTTP`.
        """
        return pulumi.get(self, "service_config_url")

    @property
    @pulumi.getter(name="serviceConfigVpcId")
    def service_config_vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        Unique VPC ID.
        """
        return pulumi.get(self, "service_config_vpc_id")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        Which service this API belongs. Refer to resource `ApiGateway.Service`.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="testLimit")
    def test_limit(self) -> pulumi.Output[int]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "test_limit")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "update_time")

