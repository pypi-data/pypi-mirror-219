# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceEsAcl',
    'InstanceMultiZoneInfo',
    'InstanceNodeInfoList',
    'InstanceWebNodeTypeInfo',
    'GetInstancesInstanceListResult',
    'GetInstancesInstanceListMultiZoneInfoResult',
    'GetInstancesInstanceListNodeInfoListResult',
]

@pulumi.output_type
class InstanceEsAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blackLists":
            suggest = "black_lists"
        elif key == "whiteLists":
            suggest = "white_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceEsAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceEsAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceEsAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 black_lists: Optional[Sequence[str]] = None,
                 white_lists: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] black_lists: Blacklist of kibana access.
        :param Sequence[str] white_lists: Whitelist of kibana access.
        """
        if black_lists is not None:
            pulumi.set(__self__, "black_lists", black_lists)
        if white_lists is not None:
            pulumi.set(__self__, "white_lists", white_lists)

    @property
    @pulumi.getter(name="blackLists")
    def black_lists(self) -> Optional[Sequence[str]]:
        """
        Blacklist of kibana access.
        """
        return pulumi.get(self, "black_lists")

    @property
    @pulumi.getter(name="whiteLists")
    def white_lists(self) -> Optional[Sequence[str]]:
        """
        Whitelist of kibana access.
        """
        return pulumi.get(self, "white_lists")


@pulumi.output_type
class InstanceMultiZoneInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceMultiZoneInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceMultiZoneInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceMultiZoneInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: str,
                 subnet_id: str):
        """
        :param str availability_zone: Availability zone.
        :param str subnet_id: The ID of a VPC subnetwork.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        Availability zone.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of a VPC subnetwork.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class InstanceNodeInfoList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeNum":
            suggest = "node_num"
        elif key == "nodeType":
            suggest = "node_type"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceNodeInfoList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceNodeInfoList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceNodeInfoList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_num: int,
                 node_type: str,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 encrypt: Optional[bool] = None,
                 type: Optional[str] = None):
        """
        :param int node_num: Number of nodes.
        :param str node_type: Node specification, and valid values refer to [document of tencentcloud](https://intl.cloud.tencent.com/document/product/845/18376).
        :param int disk_size: Node disk size. Unit is GB, and default value is `100`.
        :param str disk_type: Node disk type. Valid values are `CLOUD_SSD` and `CLOUD_PREMIUM`, `CLOUD_HSSD`. The default value is `CLOUD_SSD`.
        :param bool encrypt: Decides to encrypt this disk or not.
        :param str type: Node type. Valid values are `hotData`, `warmData` and `dedicatedMaster`. The default value is 'hotData`.
        """
        pulumi.set(__self__, "node_num", node_num)
        pulumi.set(__self__, "node_type", node_type)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> int:
        """
        Number of nodes.
        """
        return pulumi.get(self, "node_num")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        Node specification, and valid values refer to [document of tencentcloud](https://intl.cloud.tencent.com/document/product/845/18376).
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Node disk size. Unit is GB, and default value is `100`.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Node disk type. Valid values are `CLOUD_SSD` and `CLOUD_PREMIUM`, `CLOUD_HSSD`. The default value is `CLOUD_SSD`.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[bool]:
        """
        Decides to encrypt this disk or not.
        """
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Node type. Valid values are `hotData`, `warmData` and `dedicatedMaster`. The default value is 'hotData`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InstanceWebNodeTypeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeNum":
            suggest = "node_num"
        elif key == "nodeType":
            suggest = "node_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceWebNodeTypeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceWebNodeTypeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceWebNodeTypeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_num: int,
                 node_type: str):
        """
        :param int node_num: Visual node number.
        :param str node_type: Visual node specifications.
        """
        pulumi.set(__self__, "node_num", node_num)
        pulumi.set(__self__, "node_type", node_type)

    @property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> int:
        """
        Visual node number.
        """
        return pulumi.get(self, "node_num")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        Visual node specifications.
        """
        return pulumi.get(self, "node_type")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 basic_security_type: int,
                 charge_type: str,
                 create_time: str,
                 deploy_mode: int,
                 elasticsearch_domain: str,
                 elasticsearch_port: int,
                 elasticsearch_vip: str,
                 instance_id: str,
                 instance_name: str,
                 kibana_url: str,
                 license_type: str,
                 multi_zone_infos: Sequence['outputs.GetInstancesInstanceListMultiZoneInfoResult'],
                 node_info_lists: Sequence['outputs.GetInstancesInstanceListNodeInfoListResult'],
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 version: str,
                 vpc_id: str):
        """
        :param str availability_zone: Availability zone.
        :param int basic_security_type: Whether to enable X-Pack security authentication in Basic Edition 6.8 and above.
        :param str charge_type: The charge type of instance.
        :param str create_time: Instance creation time.
        :param int deploy_mode: Cluster deployment mode.
        :param str elasticsearch_domain: Elasticsearch domain name.
        :param int elasticsearch_port: Elasticsearch port.
        :param str elasticsearch_vip: Elasticsearch VIP.
        :param str instance_id: ID of the instance to be queried.
        :param str instance_name: Name of the instance to be queried.
        :param str kibana_url: Kibana access URL.
        :param str license_type: License type.
        :param Sequence['GetInstancesInstanceListMultiZoneInfoArgs'] multi_zone_infos: Details of AZs in multi-AZ deployment mode.
        :param Sequence['GetInstancesInstanceListNodeInfoListArgs'] node_info_lists: Node information list, which describe the specification information of various types of nodes in the cluster.
        :param str subnet_id: The ID of a VPC subnet.
        :param Mapping[str, Any] tags: Tag of the instance to be queried.
        :param str version: Version of the instance.
        :param str vpc_id: The ID of a VPC network.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "basic_security_type", basic_security_type)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "deploy_mode", deploy_mode)
        pulumi.set(__self__, "elasticsearch_domain", elasticsearch_domain)
        pulumi.set(__self__, "elasticsearch_port", elasticsearch_port)
        pulumi.set(__self__, "elasticsearch_vip", elasticsearch_vip)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "kibana_url", kibana_url)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "multi_zone_infos", multi_zone_infos)
        pulumi.set(__self__, "node_info_lists", node_info_lists)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        Availability zone.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="basicSecurityType")
    def basic_security_type(self) -> int:
        """
        Whether to enable X-Pack security authentication in Basic Edition 6.8 and above.
        """
        return pulumi.get(self, "basic_security_type")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        The charge type of instance.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Instance creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> int:
        """
        Cluster deployment mode.
        """
        return pulumi.get(self, "deploy_mode")

    @property
    @pulumi.getter(name="elasticsearchDomain")
    def elasticsearch_domain(self) -> str:
        """
        Elasticsearch domain name.
        """
        return pulumi.get(self, "elasticsearch_domain")

    @property
    @pulumi.getter(name="elasticsearchPort")
    def elasticsearch_port(self) -> int:
        """
        Elasticsearch port.
        """
        return pulumi.get(self, "elasticsearch_port")

    @property
    @pulumi.getter(name="elasticsearchVip")
    def elasticsearch_vip(self) -> str:
        """
        Elasticsearch VIP.
        """
        return pulumi.get(self, "elasticsearch_vip")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        ID of the instance to be queried.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Name of the instance to be queried.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="kibanaUrl")
    def kibana_url(self) -> str:
        """
        Kibana access URL.
        """
        return pulumi.get(self, "kibana_url")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        License type.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="multiZoneInfos")
    def multi_zone_infos(self) -> Sequence['outputs.GetInstancesInstanceListMultiZoneInfoResult']:
        """
        Details of AZs in multi-AZ deployment mode.
        """
        return pulumi.get(self, "multi_zone_infos")

    @property
    @pulumi.getter(name="nodeInfoLists")
    def node_info_lists(self) -> Sequence['outputs.GetInstancesInstanceListNodeInfoListResult']:
        """
        Node information list, which describe the specification information of various types of nodes in the cluster.
        """
        return pulumi.get(self, "node_info_lists")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of a VPC subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tag of the instance to be queried.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the instance.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of a VPC network.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInstancesInstanceListMultiZoneInfoResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 subnet_id: str):
        """
        :param str availability_zone: Availability zone.
        :param str subnet_id: The ID of a VPC subnet.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        Availability zone.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of a VPC subnet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstancesInstanceListNodeInfoListResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type: str,
                 encrypt: bool,
                 node_num: int,
                 node_type: str,
                 type: str):
        """
        :param int disk_size: Node disk size.
        :param str disk_type: Node disk type.
        :param bool encrypt: Decides this disk encrypted or not.
        :param int node_num: Number of nodes.
        :param str node_type: Node specification.
        :param str type: Node type.
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "encrypt", encrypt)
        pulumi.set(__self__, "node_num", node_num)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Node disk size.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        Node disk type.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encrypt(self) -> bool:
        """
        Decides this disk encrypted or not.
        """
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> int:
        """
        Number of nodes.
        """
        return pulumi.get(self, "node_num")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        Node specification.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Node type.
        """
        return pulumi.get(self, "type")


