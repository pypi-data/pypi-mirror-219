# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BackupPolicyArgs', 'BackupPolicy']

@pulumi.input_type
class BackupPolicyArgs:
    def __init__(__self__, *,
                 mysql_id: pulumi.Input[str],
                 backup_model: Optional[pulumi.Input[str]] = None,
                 backup_time: Optional[pulumi.Input[str]] = None,
                 retention_period: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a BackupPolicy resource.
        :param pulumi.Input[str] mysql_id: Instance ID to which policies will be applied.
        :param pulumi.Input[str] backup_model: Backup method. Supported values include: `physical` - physical backup.
        :param pulumi.Input[str] backup_time: Instance backup time, in the format of 'HH:mm-HH:mm'. Time setting interval is four hours. Default to `02:00-06:00`. The following value can be supported: `02:00-06:00`, `06:00-10:00`, `10:00-14:00`, `14:00-18:00`, `18:00-22:00`, and `22:00-02:00`.
        :param pulumi.Input[int] retention_period: Instance backup retention days. Valid value ranges: [7~730]. And default value is `7`.
        """
        pulumi.set(__self__, "mysql_id", mysql_id)
        if backup_model is not None:
            pulumi.set(__self__, "backup_model", backup_model)
        if backup_time is not None:
            pulumi.set(__self__, "backup_time", backup_time)
        if retention_period is not None:
            pulumi.set(__self__, "retention_period", retention_period)

    @property
    @pulumi.getter(name="mysqlId")
    def mysql_id(self) -> pulumi.Input[str]:
        """
        Instance ID to which policies will be applied.
        """
        return pulumi.get(self, "mysql_id")

    @mysql_id.setter
    def mysql_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "mysql_id", value)

    @property
    @pulumi.getter(name="backupModel")
    def backup_model(self) -> Optional[pulumi.Input[str]]:
        """
        Backup method. Supported values include: `physical` - physical backup.
        """
        return pulumi.get(self, "backup_model")

    @backup_model.setter
    def backup_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_model", value)

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Instance backup time, in the format of 'HH:mm-HH:mm'. Time setting interval is four hours. Default to `02:00-06:00`. The following value can be supported: `02:00-06:00`, `06:00-10:00`, `10:00-14:00`, `14:00-18:00`, `18:00-22:00`, and `22:00-02:00`.
        """
        return pulumi.get(self, "backup_time")

    @backup_time.setter
    def backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_time", value)

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Instance backup retention days. Valid value ranges: [7~730]. And default value is `7`.
        """
        return pulumi.get(self, "retention_period")

    @retention_period.setter
    def retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_period", value)


@pulumi.input_type
class _BackupPolicyState:
    def __init__(__self__, *,
                 backup_model: Optional[pulumi.Input[str]] = None,
                 backup_time: Optional[pulumi.Input[str]] = None,
                 binlog_period: Optional[pulumi.Input[int]] = None,
                 mysql_id: Optional[pulumi.Input[str]] = None,
                 retention_period: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering BackupPolicy resources.
        :param pulumi.Input[str] backup_model: Backup method. Supported values include: `physical` - physical backup.
        :param pulumi.Input[str] backup_time: Instance backup time, in the format of 'HH:mm-HH:mm'. Time setting interval is four hours. Default to `02:00-06:00`. The following value can be supported: `02:00-06:00`, `06:00-10:00`, `10:00-14:00`, `14:00-18:00`, `18:00-22:00`, and `22:00-02:00`.
        :param pulumi.Input[int] binlog_period: Retention period for binlog in days.
        :param pulumi.Input[str] mysql_id: Instance ID to which policies will be applied.
        :param pulumi.Input[int] retention_period: Instance backup retention days. Valid value ranges: [7~730]. And default value is `7`.
        """
        if backup_model is not None:
            pulumi.set(__self__, "backup_model", backup_model)
        if backup_time is not None:
            pulumi.set(__self__, "backup_time", backup_time)
        if binlog_period is not None:
            pulumi.set(__self__, "binlog_period", binlog_period)
        if mysql_id is not None:
            pulumi.set(__self__, "mysql_id", mysql_id)
        if retention_period is not None:
            pulumi.set(__self__, "retention_period", retention_period)

    @property
    @pulumi.getter(name="backupModel")
    def backup_model(self) -> Optional[pulumi.Input[str]]:
        """
        Backup method. Supported values include: `physical` - physical backup.
        """
        return pulumi.get(self, "backup_model")

    @backup_model.setter
    def backup_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_model", value)

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Instance backup time, in the format of 'HH:mm-HH:mm'. Time setting interval is four hours. Default to `02:00-06:00`. The following value can be supported: `02:00-06:00`, `06:00-10:00`, `10:00-14:00`, `14:00-18:00`, `18:00-22:00`, and `22:00-02:00`.
        """
        return pulumi.get(self, "backup_time")

    @backup_time.setter
    def backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_time", value)

    @property
    @pulumi.getter(name="binlogPeriod")
    def binlog_period(self) -> Optional[pulumi.Input[int]]:
        """
        Retention period for binlog in days.
        """
        return pulumi.get(self, "binlog_period")

    @binlog_period.setter
    def binlog_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "binlog_period", value)

    @property
    @pulumi.getter(name="mysqlId")
    def mysql_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID to which policies will be applied.
        """
        return pulumi.get(self, "mysql_id")

    @mysql_id.setter
    def mysql_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql_id", value)

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Instance backup retention days. Valid value ranges: [7~730]. And default value is `7`.
        """
        return pulumi.get(self, "retention_period")

    @retention_period.setter
    def retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_period", value)


class BackupPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_model: Optional[pulumi.Input[str]] = None,
                 backup_time: Optional[pulumi.Input[str]] = None,
                 mysql_id: Optional[pulumi.Input[str]] = None,
                 retention_period: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        default = tencentcloud.mysql.BackupPolicy("default",
            backup_model="physical",
            backup_time="02:00-06:00",
            mysql_id="cdb-dnqksd9f",
            retention_period=7)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_model: Backup method. Supported values include: `physical` - physical backup.
        :param pulumi.Input[str] backup_time: Instance backup time, in the format of 'HH:mm-HH:mm'. Time setting interval is four hours. Default to `02:00-06:00`. The following value can be supported: `02:00-06:00`, `06:00-10:00`, `10:00-14:00`, `14:00-18:00`, `18:00-22:00`, and `22:00-02:00`.
        :param pulumi.Input[str] mysql_id: Instance ID to which policies will be applied.
        :param pulumi.Input[int] retention_period: Instance backup retention days. Valid value ranges: [7~730]. And default value is `7`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        default = tencentcloud.mysql.BackupPolicy("default",
            backup_model="physical",
            backup_time="02:00-06:00",
            mysql_id="cdb-dnqksd9f",
            retention_period=7)
        ```

        :param str resource_name: The name of the resource.
        :param BackupPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_model: Optional[pulumi.Input[str]] = None,
                 backup_time: Optional[pulumi.Input[str]] = None,
                 mysql_id: Optional[pulumi.Input[str]] = None,
                 retention_period: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupPolicyArgs.__new__(BackupPolicyArgs)

            __props__.__dict__["backup_model"] = backup_model
            __props__.__dict__["backup_time"] = backup_time
            if mysql_id is None and not opts.urn:
                raise TypeError("Missing required property 'mysql_id'")
            __props__.__dict__["mysql_id"] = mysql_id
            __props__.__dict__["retention_period"] = retention_period
            __props__.__dict__["binlog_period"] = None
        super(BackupPolicy, __self__).__init__(
            'tencentcloud:Mysql/backupPolicy:BackupPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_model: Optional[pulumi.Input[str]] = None,
            backup_time: Optional[pulumi.Input[str]] = None,
            binlog_period: Optional[pulumi.Input[int]] = None,
            mysql_id: Optional[pulumi.Input[str]] = None,
            retention_period: Optional[pulumi.Input[int]] = None) -> 'BackupPolicy':
        """
        Get an existing BackupPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_model: Backup method. Supported values include: `physical` - physical backup.
        :param pulumi.Input[str] backup_time: Instance backup time, in the format of 'HH:mm-HH:mm'. Time setting interval is four hours. Default to `02:00-06:00`. The following value can be supported: `02:00-06:00`, `06:00-10:00`, `10:00-14:00`, `14:00-18:00`, `18:00-22:00`, and `22:00-02:00`.
        :param pulumi.Input[int] binlog_period: Retention period for binlog in days.
        :param pulumi.Input[str] mysql_id: Instance ID to which policies will be applied.
        :param pulumi.Input[int] retention_period: Instance backup retention days. Valid value ranges: [7~730]. And default value is `7`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupPolicyState.__new__(_BackupPolicyState)

        __props__.__dict__["backup_model"] = backup_model
        __props__.__dict__["backup_time"] = backup_time
        __props__.__dict__["binlog_period"] = binlog_period
        __props__.__dict__["mysql_id"] = mysql_id
        __props__.__dict__["retention_period"] = retention_period
        return BackupPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backupModel")
    def backup_model(self) -> pulumi.Output[Optional[str]]:
        """
        Backup method. Supported values include: `physical` - physical backup.
        """
        return pulumi.get(self, "backup_model")

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> pulumi.Output[Optional[str]]:
        """
        Instance backup time, in the format of 'HH:mm-HH:mm'. Time setting interval is four hours. Default to `02:00-06:00`. The following value can be supported: `02:00-06:00`, `06:00-10:00`, `10:00-14:00`, `14:00-18:00`, `18:00-22:00`, and `22:00-02:00`.
        """
        return pulumi.get(self, "backup_time")

    @property
    @pulumi.getter(name="binlogPeriod")
    def binlog_period(self) -> pulumi.Output[int]:
        """
        Retention period for binlog in days.
        """
        return pulumi.get(self, "binlog_period")

    @property
    @pulumi.getter(name="mysqlId")
    def mysql_id(self) -> pulumi.Output[str]:
        """
        Instance ID to which policies will be applied.
        """
        return pulumi.get(self, "mysql_id")

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> pulumi.Output[Optional[int]]:
        """
        Instance backup retention days. Valid value ranges: [7~730]. And default value is `7`.
        """
        return pulumi.get(self, "retention_period")

