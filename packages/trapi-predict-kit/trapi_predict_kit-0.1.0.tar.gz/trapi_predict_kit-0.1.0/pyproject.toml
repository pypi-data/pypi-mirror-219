[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
requires-python = ">=3.7"
name = "trapi-predict-kit"
description = "A package to help create and deploy Translator Reasoner APIs (TRAPI) from any prediction model exposed as a regular python function."
readme = "README.md"
license = { file = "LICENSE.txt" }
authors = [
    { name = "Vincent Emonet", email = "vincent.emonet@gmail.com" },
]
maintainers = [
    { name = "Vincent Emonet", email = "vincent.emonet@gmail.com" },
]
keywords = [
    "Python",
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dynamic = ["version"]

dependencies = [
    "requests >=2.23.0",
    "pydantic >=1.9",
    "fastapi >=0.68.1",
    "rdflib >=6.1.1",
    "SPARQLWrapper >=2.0.0,<3.0.0",
    "reasoner-pydantic >=3.0.1",
    # "fairworkflows",
    # "fairworkflows@git+https://github.com/vemonet/fairworkflows.git",
    # "yatiml >=0.10.0",
]




[project.optional-dependencies]
web = [
    "uvicorn >=0.15.0",
    "gunicorn >=20.0.4",
]
train = [
    # "mlem >=0.4.0",
    "mlem"
]
test = [
    "pytest >=7.1.3",
    "pytest-cov >=3.0.0",
    "ruff >=0.0.219",
    "mypy >=0.991",
    "black >= 22.8.0",
]


[project.urls]
Homepage = "https://github.com/MaastrichtU-IDS/trapi-predict-kit"
Documentation = "https://github.com/MaastrichtU-IDS/trapi-predict-kit"
History = "https://github.com/MaastrichtU-IDS/trapi-predict-kit/releases"
Tracker = "https://github.com/MaastrichtU-IDS/trapi-predict-kit/issues"
Source = "https://github.com/MaastrichtU-IDS/trapi-predict-kit"


# ENVIRONMENTS AND SCRIPTS
[tool.hatch.envs.default]
features = [
    "test",
    "web",
    "train",
]
post-install-commands = [
]

[tool.hatch.envs.default.scripts]
test = "pytest {args}"
cov = "test --cov src {args}"
dev = "python tests/dev.py {args}"
api = "uvicorn tests.dev:app --reload {args}"
fmt = [
    "black src tests",
    "ruff src tests --fix",
]
check = [
    "ruff src tests",
    "black src tests --check",
    # "mypy src",
]
all = [
    "fmt",
    "check",
    "cov",
]

# TOOLS
[tool.hatch.version]
path = "src/trapi_predict_kit/__init__.py"


[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
omit = ["tests/*"]


[tool.mypy]
strict = true
implicit_reexport = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = true
warn_unused_ignores = true
warn_redundant_casts = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_any_generics = true


[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning:httpx.*:"
]


[tool.black]
color = true
line-length = 120
target-version = ['py37']
skip-string-normalization = false


# https://github.com/charliermarsh/ruff#supported-rules
[tool.ruff]
src = ["src", "tests"]
target-version = "py37"
line-length = 120
select = [
    "A",
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "E",   # pycodestyle errors
    "F",   # pyflakes
    # "FBT", # flake8-boolean-trap
    "I",   # isort
    "ICN",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "SIM",
    "T",
    "TID",
    "UP",
    "W",  # pycodestyle warnings
    "YTT",
]
ignore = [
    "E501", # line too long
    "B008", # do not perform function calls in argument defaults
    "B006", # do not use mutable data structures for argument defaults
    "C901", # too complex
    "S101", # Use of `assert` detected
    "T201", "T203", # remove print and pprint
    "S105", # Potential password
    "PLR0913", "PLR0912", "PLR0915", # Too many branches/statements/arguments to function call
    "A002", "A003", # Argument/Class attribute `type` is shadowing a Python builtin
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["I", "F401"] # module imported but unused
