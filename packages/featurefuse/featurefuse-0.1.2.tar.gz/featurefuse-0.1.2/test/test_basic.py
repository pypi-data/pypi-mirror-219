import pandas as pd
import pytest
import yaml
from pandas.testing import assert_frame_equal

from featurefuse.base import Feature
from featurefuse.generator import run


class TmpFeature1(Feature):
    def create_feature(self, tmp_df: pd.DataFrame, shift_b_to: int, **kwargs) -> pd.DataFrame:
        fe = tmp_df[["col1", "col2"]].copy(deep=True)
        self.create_description(
            "feature col names generated by TmpFeature1",
            "description of each cols of TmpFeature1",
        )
        for i in range(1, shift_b_to + 1):
            fe[f"col2_b{i}"] = fe["col2"].shift(i)
        return fe


class TmpFeature2(Feature):
    def create_feature(self, tmp_df: pd.DataFrame, const: int, **kwargs) -> pd.DataFrame:
        fe = tmp_df[["col1", "col2"]].copy(deep=True)
        self.create_description(
            "feature col names generated by TmpFeature2",
            "description of each cols of TmpFeature2",
        )
        fe[f"col2_add_{const}"] = fe["col2"] + const
        return fe


@pytest.fixture(scope="module")
def df():
    yield pd.DataFrame(
        [["aaa", 123], ["bbb", 456], ["ccc", 789], ["ddd", 101]],
        columns=["col1", "col2"],
    )


@pytest.fixture(scope="module")
def config():
    yield yaml.safe_load(
        """
    use_feature:
      - .test.test_basic.TmpFeature1
      - .test.test_basic.TmpFeature2
    feature_params:
      TmpFeature1:
        shift_b_to: 3
      TmpFeature2:
        const: 1000
    """
    )


@pytest.mark.xfail(
    reason="missing join key to join made feature DataFrames",
    raises=KeyError,
    strict=True,
)
def test_missing_join_key(df, config):
    _, _ = run(config, join_key="missing_col", tmp_df=df)


def test_output_feature(df, config):
    feature, _ = run(config, join_key="col1", tmp_df=df)
    expect_feature = pd.DataFrame(
        [
            ["aaa", 123, None, None, None, 1123],
            ["bbb", 456, 123, None, None, 1456],
            ["ccc", 789, 456, 123, None, 1789],
            ["ddd", 101, 789, 456, 123, 1101],
        ],
        columns=["col1", "col2", "col2_b1", "col2_b2", "col2_b3", "col2_add_1000"],
    )
    assert_frame_equal(expect_feature, feature)


def test_output_description(df, config):
    _, description = run(config, join_key="col1", tmp_df=df)
    expect_description = pd.DataFrame(
        [
            [
                "TmpFeature1",
                "feature col names generated by TmpFeature1",
                "description of each cols of TmpFeature1",
            ],
            [
                "TmpFeature2",
                "feature col names generated by TmpFeature2",
                "description of each cols of TmpFeature2",
            ],
        ],
        columns=["feature_class_name", "feature_column_name", "description"],
    )
    assert_frame_equal(expect_description, description)
