# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ActionApprovalEmailNotificationArgs',
    'ActionApprovalWebhookNotificationArgs',
    'ActionAzureMethodArgs',
    'ActionGithubMethodArgs',
    'ActionKafkaMethodArgs',
    'ActionUserPropertiesArgs',
    'ActionUserPropertiesArrayPropsArgs',
    'ActionUserPropertiesArrayPropsBooleanItemsArgs',
    'ActionUserPropertiesArrayPropsNumberItemsArgs',
    'ActionUserPropertiesArrayPropsObjectItemsArgs',
    'ActionUserPropertiesArrayPropsStringItemsArgs',
    'ActionUserPropertiesBooleanPropsArgs',
    'ActionUserPropertiesNumberPropsArgs',
    'ActionUserPropertiesObjectPropsArgs',
    'ActionUserPropertiesStringPropsArgs',
    'ActionWebhookMethodArgs',
    'BlueprintCalculationPropertiesArgs',
    'BlueprintKafkaChangelogDestinationArgs',
    'BlueprintMirrorPropertiesArgs',
    'BlueprintPropertiesArgs',
    'BlueprintPropertiesArrayPropsArgs',
    'BlueprintPropertiesArrayPropsBooleanItemsArgs',
    'BlueprintPropertiesArrayPropsNumberItemsArgs',
    'BlueprintPropertiesArrayPropsObjectItemsArgs',
    'BlueprintPropertiesArrayPropsStringItemsArgs',
    'BlueprintPropertiesBooleanPropsArgs',
    'BlueprintPropertiesNumberPropsArgs',
    'BlueprintPropertiesObjectPropsArgs',
    'BlueprintPropertiesStringPropsArgs',
    'BlueprintPropertiesStringPropsSpecAuthenticationArgs',
    'BlueprintRelationsArgs',
    'BlueprintTeamInheritanceArgs',
    'BlueprintWebhookChangelogDestinationArgs',
    'EntityPropertiesArgs',
    'EntityPropertiesArrayPropsArgs',
    'EntityRelationsArgs',
]

@pulumi.input_type
class ActionApprovalEmailNotificationArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ActionApprovalWebhookNotificationArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ActionAzureMethodArgs:
    def __init__(__self__, *,
                 org: pulumi.Input[str],
                 webhook: pulumi.Input[str]):
        pulumi.set(__self__, "org", org)
        pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter
    def org(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: pulumi.Input[str]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def webhook(self) -> pulumi.Input[str]:
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(self, value: pulumi.Input[str]):
        pulumi.set(self, "webhook", value)


@pulumi.input_type
class ActionGithubMethodArgs:
    def __init__(__self__, *,
                 org: pulumi.Input[str],
                 repo: pulumi.Input[str],
                 workflow: pulumi.Input[str],
                 omit_payload: Optional[pulumi.Input[bool]] = None,
                 omit_user_inputs: Optional[pulumi.Input[bool]] = None,
                 report_workflow_status: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "org", org)
        pulumi.set(__self__, "repo", repo)
        pulumi.set(__self__, "workflow", workflow)
        if omit_payload is not None:
            pulumi.set(__self__, "omit_payload", omit_payload)
        if omit_user_inputs is not None:
            pulumi.set(__self__, "omit_user_inputs", omit_user_inputs)
        if report_workflow_status is not None:
            pulumi.set(__self__, "report_workflow_status", report_workflow_status)

    @property
    @pulumi.getter
    def org(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: pulumi.Input[str]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter
    def workflow(self) -> pulumi.Input[str]:
        return pulumi.get(self, "workflow")

    @workflow.setter
    def workflow(self, value: pulumi.Input[str]):
        pulumi.set(self, "workflow", value)

    @property
    @pulumi.getter(name="omitPayload")
    def omit_payload(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "omit_payload")

    @omit_payload.setter
    def omit_payload(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "omit_payload", value)

    @property
    @pulumi.getter(name="omitUserInputs")
    def omit_user_inputs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "omit_user_inputs")

    @omit_user_inputs.setter
    def omit_user_inputs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "omit_user_inputs", value)

    @property
    @pulumi.getter(name="reportWorkflowStatus")
    def report_workflow_status(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "report_workflow_status")

    @report_workflow_status.setter
    def report_workflow_status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "report_workflow_status", value)


@pulumi.input_type
class ActionKafkaMethodArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ActionUserPropertiesArgs:
    def __init__(__self__, *,
                 array_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesArrayPropsArgs']]]] = None,
                 boolean_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesBooleanPropsArgs']]]] = None,
                 number_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesNumberPropsArgs']]]] = None,
                 object_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesObjectPropsArgs']]]] = None,
                 string_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesStringPropsArgs']]]] = None):
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesArrayPropsArgs']]]]:
        return pulumi.get(self, "array_props")

    @array_props.setter
    def array_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesArrayPropsArgs']]]]):
        pulumi.set(self, "array_props", value)

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesBooleanPropsArgs']]]]:
        return pulumi.get(self, "boolean_props")

    @boolean_props.setter
    def boolean_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesBooleanPropsArgs']]]]):
        pulumi.set(self, "boolean_props", value)

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesNumberPropsArgs']]]]:
        return pulumi.get(self, "number_props")

    @number_props.setter
    def number_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesNumberPropsArgs']]]]):
        pulumi.set(self, "number_props", value)

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesObjectPropsArgs']]]]:
        return pulumi.get(self, "object_props")

    @object_props.setter
    def object_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesObjectPropsArgs']]]]):
        pulumi.set(self, "object_props", value)

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesStringPropsArgs']]]]:
        return pulumi.get(self, "string_props")

    @string_props.setter
    def string_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesStringPropsArgs']]]]):
        pulumi.set(self, "string_props", value)


@pulumi.input_type
class ActionUserPropertiesArrayPropsArgs:
    def __init__(__self__, *,
                 boolean_items: Optional[pulumi.Input['ActionUserPropertiesArrayPropsBooleanItemsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_items: Optional[pulumi.Input[int]] = None,
                 min_items: Optional[pulumi.Input[int]] = None,
                 number_items: Optional[pulumi.Input['ActionUserPropertiesArrayPropsNumberItemsArgs']] = None,
                 object_items: Optional[pulumi.Input['ActionUserPropertiesArrayPropsObjectItemsArgs']] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 string_items: Optional[pulumi.Input['ActionUserPropertiesArrayPropsStringItemsArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_items is not None:
            pulumi.set(__self__, "max_items", max_items)
        if min_items is not None:
            pulumi.set(__self__, "min_items", min_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional[pulumi.Input['ActionUserPropertiesArrayPropsBooleanItemsArgs']]:
        return pulumi.get(self, "boolean_items")

    @boolean_items.setter
    def boolean_items(self, value: Optional[pulumi.Input['ActionUserPropertiesArrayPropsBooleanItemsArgs']]):
        pulumi.set(self, "boolean_items", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_items")

    @max_items.setter
    def max_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_items", value)

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_items")

    @min_items.setter
    def min_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_items", value)

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional[pulumi.Input['ActionUserPropertiesArrayPropsNumberItemsArgs']]:
        return pulumi.get(self, "number_items")

    @number_items.setter
    def number_items(self, value: Optional[pulumi.Input['ActionUserPropertiesArrayPropsNumberItemsArgs']]):
        pulumi.set(self, "number_items", value)

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[pulumi.Input['ActionUserPropertiesArrayPropsObjectItemsArgs']]:
        return pulumi.get(self, "object_items")

    @object_items.setter
    def object_items(self, value: Optional[pulumi.Input['ActionUserPropertiesArrayPropsObjectItemsArgs']]):
        pulumi.set(self, "object_items", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional[pulumi.Input['ActionUserPropertiesArrayPropsStringItemsArgs']]:
        return pulumi.get(self, "string_items")

    @string_items.setter
    def string_items(self, value: Optional[pulumi.Input['ActionUserPropertiesArrayPropsStringItemsArgs']]):
        pulumi.set(self, "string_items", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ActionUserPropertiesArrayPropsBooleanItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "defaults", value)


@pulumi.input_type
class ActionUserPropertiesArrayPropsNumberItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "defaults", value)


@pulumi.input_type
class ActionUserPropertiesArrayPropsObjectItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "defaults", value)


@pulumi.input_type
class ActionUserPropertiesArrayPropsStringItemsArgs:
    def __init__(__self__, *,
                 blueprint: Optional[pulumi.Input[str]] = None,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None):
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defaults", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class ActionUserPropertiesBooleanPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ActionUserPropertiesNumberPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[float]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 maximum: Optional[pulumi.Input[float]] = None,
                 minimum: Optional[pulumi.Input[float]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ActionUserPropertiesObjectPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ActionUserPropertiesStringPropsArgs:
    def __init__(__self__, *,
                 blueprint: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_length: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ActionWebhookMethodArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 agent: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "url", url)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def agent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "agent", value)


@pulumi.input_type
class BlueprintCalculationPropertiesArgs:
    def __init__(__self__, *,
                 calculation: pulumi.Input[str],
                 type: pulumi.Input[str],
                 colorized: Optional[pulumi.Input[bool]] = None,
                 colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "calculation", calculation)
        pulumi.set(__self__, "type", type)
        if colorized is not None:
            pulumi.set(__self__, "colorized", colorized)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def calculation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "calculation")

    @calculation.setter
    def calculation(self, value: pulumi.Input[str]):
        pulumi.set(self, "calculation", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def colorized(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "colorized")

    @colorized.setter
    def colorized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "colorized", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintKafkaChangelogDestinationArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class BlueprintMirrorPropertiesArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "path", path)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintPropertiesArgs:
    def __init__(__self__, *,
                 array_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesArrayPropsArgs']]]] = None,
                 boolean_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesBooleanPropsArgs']]]] = None,
                 number_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesNumberPropsArgs']]]] = None,
                 object_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesObjectPropsArgs']]]] = None,
                 string_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesStringPropsArgs']]]] = None):
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesArrayPropsArgs']]]]:
        return pulumi.get(self, "array_props")

    @array_props.setter
    def array_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesArrayPropsArgs']]]]):
        pulumi.set(self, "array_props", value)

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesBooleanPropsArgs']]]]:
        return pulumi.get(self, "boolean_props")

    @boolean_props.setter
    def boolean_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesBooleanPropsArgs']]]]):
        pulumi.set(self, "boolean_props", value)

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesNumberPropsArgs']]]]:
        return pulumi.get(self, "number_props")

    @number_props.setter
    def number_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesNumberPropsArgs']]]]):
        pulumi.set(self, "number_props", value)

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesObjectPropsArgs']]]]:
        return pulumi.get(self, "object_props")

    @object_props.setter
    def object_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesObjectPropsArgs']]]]):
        pulumi.set(self, "object_props", value)

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesStringPropsArgs']]]]:
        return pulumi.get(self, "string_props")

    @string_props.setter
    def string_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesStringPropsArgs']]]]):
        pulumi.set(self, "string_props", value)


@pulumi.input_type
class BlueprintPropertiesArrayPropsArgs:
    def __init__(__self__, *,
                 boolean_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsBooleanItemsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_items: Optional[pulumi.Input[int]] = None,
                 min_items: Optional[pulumi.Input[int]] = None,
                 number_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsNumberItemsArgs']] = None,
                 object_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsObjectItemsArgs']] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 string_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsStringItemsArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_items is not None:
            pulumi.set(__self__, "max_items", max_items)
        if min_items is not None:
            pulumi.set(__self__, "min_items", min_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional[pulumi.Input['BlueprintPropertiesArrayPropsBooleanItemsArgs']]:
        return pulumi.get(self, "boolean_items")

    @boolean_items.setter
    def boolean_items(self, value: Optional[pulumi.Input['BlueprintPropertiesArrayPropsBooleanItemsArgs']]):
        pulumi.set(self, "boolean_items", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_items")

    @max_items.setter
    def max_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_items", value)

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_items")

    @min_items.setter
    def min_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_items", value)

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional[pulumi.Input['BlueprintPropertiesArrayPropsNumberItemsArgs']]:
        return pulumi.get(self, "number_items")

    @number_items.setter
    def number_items(self, value: Optional[pulumi.Input['BlueprintPropertiesArrayPropsNumberItemsArgs']]):
        pulumi.set(self, "number_items", value)

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[pulumi.Input['BlueprintPropertiesArrayPropsObjectItemsArgs']]:
        return pulumi.get(self, "object_items")

    @object_items.setter
    def object_items(self, value: Optional[pulumi.Input['BlueprintPropertiesArrayPropsObjectItemsArgs']]):
        pulumi.set(self, "object_items", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional[pulumi.Input['BlueprintPropertiesArrayPropsStringItemsArgs']]:
        return pulumi.get(self, "string_items")

    @string_items.setter
    def string_items(self, value: Optional[pulumi.Input['BlueprintPropertiesArrayPropsStringItemsArgs']]):
        pulumi.set(self, "string_items", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintPropertiesArrayPropsBooleanItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "defaults", value)


@pulumi.input_type
class BlueprintPropertiesArrayPropsNumberItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "defaults", value)


@pulumi.input_type
class BlueprintPropertiesArrayPropsObjectItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defaults", value)


@pulumi.input_type
class BlueprintPropertiesArrayPropsStringItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defaults", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class BlueprintPropertiesBooleanPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintPropertiesNumberPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[float]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enum_colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 maximum: Optional[pulumi.Input[float]] = None,
                 minimum: Optional[pulumi.Input[float]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_colors is not None:
            pulumi.set(__self__, "enum_colors", enum_colors)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "enum_colors")

    @enum_colors.setter
    def enum_colors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "enum_colors", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintPropertiesObjectPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintPropertiesStringPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enum_colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_length: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 spec_authentication: Optional[pulumi.Input['BlueprintPropertiesStringPropsSpecAuthenticationArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_colors is not None:
            pulumi.set(__self__, "enum_colors", enum_colors)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if spec_authentication is not None:
            pulumi.set(__self__, "spec_authentication", spec_authentication)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "enum_colors")

    @enum_colors.setter
    def enum_colors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "enum_colors", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="specAuthentication")
    def spec_authentication(self) -> Optional[pulumi.Input['BlueprintPropertiesStringPropsSpecAuthenticationArgs']]:
        return pulumi.get(self, "spec_authentication")

    @spec_authentication.setter
    def spec_authentication(self, value: Optional[pulumi.Input['BlueprintPropertiesStringPropsSpecAuthenticationArgs']]):
        pulumi.set(self, "spec_authentication", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintPropertiesStringPropsSpecAuthenticationArgs:
    def __init__(__self__, *,
                 authorization_url: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 token_url: pulumi.Input[str]):
        pulumi.set(__self__, "authorization_url", authorization_url)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="authorizationUrl")
    def authorization_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authorization_url")

    @authorization_url.setter
    def authorization_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorization_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class BlueprintRelationsArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 many: Optional[pulumi.Input[bool]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "target", target)
        if many is not None:
            pulumi.set(__self__, "many", many)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def many(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "many")

    @many.setter
    def many(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "many", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintTeamInheritanceArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str]):
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class BlueprintWebhookChangelogDestinationArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 agent: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "url", url)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def agent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "agent", value)


@pulumi.input_type
class EntityPropertiesArgs:
    def __init__(__self__, *,
                 array_props: Optional[pulumi.Input['EntityPropertiesArrayPropsArgs']] = None,
                 boolean_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 number_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 object_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 string_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[pulumi.Input['EntityPropertiesArrayPropsArgs']]:
        return pulumi.get(self, "array_props")

    @array_props.setter
    def array_props(self, value: Optional[pulumi.Input['EntityPropertiesArrayPropsArgs']]):
        pulumi.set(self, "array_props", value)

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]:
        return pulumi.get(self, "boolean_props")

    @boolean_props.setter
    def boolean_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]):
        pulumi.set(self, "boolean_props", value)

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]:
        return pulumi.get(self, "number_props")

    @number_props.setter
    def number_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]):
        pulumi.set(self, "number_props", value)

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "object_props")

    @object_props.setter
    def object_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "object_props", value)

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "string_props")

    @string_props.setter
    def string_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "string_props", value)


@pulumi.input_type
class EntityPropertiesArrayPropsArgs:
    def __init__(__self__, *,
                 boolean_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[bool]]]]]] = None,
                 number_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[float]]]]]] = None,
                 object_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 string_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None):
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[bool]]]]]]:
        return pulumi.get(self, "boolean_items")

    @boolean_items.setter
    def boolean_items(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[bool]]]]]]):
        pulumi.set(self, "boolean_items", value)

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[float]]]]]]:
        return pulumi.get(self, "number_items")

    @number_items.setter
    def number_items(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[float]]]]]]):
        pulumi.set(self, "number_items", value)

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        return pulumi.get(self, "object_items")

    @object_items.setter
    def object_items(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "object_items", value)

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        return pulumi.get(self, "string_items")

    @string_items.setter
    def string_items(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "string_items", value)


@pulumi.input_type
class EntityRelationsArgs:
    def __init__(__self__, *,
                 many_relations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 single_relations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if many_relations is not None:
            pulumi.set(__self__, "many_relations", many_relations)
        if single_relations is not None:
            pulumi.set(__self__, "single_relations", single_relations)

    @property
    @pulumi.getter(name="manyRelations")
    def many_relations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        return pulumi.get(self, "many_relations")

    @many_relations.setter
    def many_relations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "many_relations", value)

    @property
    @pulumi.getter(name="singleRelations")
    def single_relations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "single_relations")

    @single_relations.setter
    def single_relations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "single_relations", value)


