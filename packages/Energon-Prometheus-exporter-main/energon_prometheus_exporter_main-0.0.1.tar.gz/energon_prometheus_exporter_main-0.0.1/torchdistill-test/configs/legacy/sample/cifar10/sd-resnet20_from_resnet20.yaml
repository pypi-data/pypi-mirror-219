datasets:
  ilsvrc2012:
    name: &dataset_name 'cifar10'
    type: 'CIFAR10'
    root: &root_dir !join ['./resource/dataset/', *dataset_name]
    splits:
      train:
        dataset_id: &cifar10_train !join [*dataset_name, '/train']
        params:
          root: *root_dir
          train: True
          download: True
          transform_params:
            - type: 'RandomCrop'
              params:
                size: 32
                padding: 4
            - type: 'RandomHorizontalFlip'
              params:
                p: 0.5
            - type: 'ToTensor'
              params:
            - &normalize
              type: 'Normalize'
              params:
                mean: [ 0.49139968, 0.48215841, 0.44653091 ]
                std: [ 0.24703223, 0.24348513, 0.26158784 ]
      val:
        dataset_id: &cifar10_val !join [ *dataset_name, '/val' ]
        params:
          root: *root_dir
          train: False
          download: True
          transform_params: &val_transform
            - type: 'ToTensor'
              params:
            - *normalize
#      dummy:
#        dataset_id: 'dummy'
#        params:
#          root: *root_dir
#          train: True
#          download: True
#        random_split:
#          lengths: [0.9, 0.1]
#          generator_seed: 42
#          sub_splits:
#            - dataset_id: &cifar10_train !join [*dataset_name, '/train']
#              transform_params:
#                - type: 'RandomCrop'
#                  params:
#                    size: 32
#                    padding: 4
#                - type: 'RandomHorizontalFlip'
#                  params:
#                    p: 0.5
#                - type: 'ToTensor'
#                  params:
#                - &normalize
#                  type: 'Normalize'
#                  params:
#                    mean: [0.49139968, 0.48215841, 0.44653091]
#                    std: [0.24703223, 0.24348513, 0.26158784]
#            - dataset_id: &cifar10_val !join [*dataset_name, '/val']
#              transform_params: &val_transform
#                - type: 'ToTensor'
#                  params:
#                - *normalize
      test:
        dataset_id: &cifar10_test !join [*dataset_name, '/test']
        params:
          root: *root_dir
          train: False
          download: True
          transform_params: *val_transform

models:
  teacher_model:
    name: &teacher_model_name 'resnet20'
    params:
      num_classes: 10
      pretrained: True
    experiment: &teacher_experiment !join [*dataset_name, '-', *teacher_model_name]
    ckpt: !join ['./resource/ckpt/', *dataset_name, '/teacher/', *teacher_experiment, '.pt']
  student_model:
    name: &student_model_name 'resnet20'
    params:
      num_classes: 10
      pretrained: False
    experiment: &student_experiment !join [*dataset_name, '-', *student_model_name, '_from_', *teacher_model_name]
    ckpt: !join ['./resource/ckpt/', *dataset_name, '/mssd/', *student_experiment, '.pt']

train:
  log_freq: 100
  stage1:
    num_epochs: 30
    train_data_loader:
      dataset_id: *cifar10_train
      random_sample: True
      batch_size: 256
      num_workers: 16
      cache_output:
    val_data_loader:
      dataset_id: *cifar10_val
      random_sample: False
      batch_size: 256
      num_workers: 16
    teacher:
      sequential: ['conv1', 'bn1', 'relu', 'layer1']
      wrapper: 'DistributedDataParallel'
      requires_grad: False
      frozen_modules: []
      forward_hook:
        input: []
        output: ['layer1']
    student:
      adaptations:
      sequential: ['conv1', 'bn1', 'relu', 'layer1']
      wrapper: 'DistributedDataParallel'
      requires_grad: True
      frozen_modules: []
      forward_hook:
        input: [ ]
        output: ['layer1']
    optimizer: &adam
      type: 'Adam'
      params:
        lr: 0.1
    scheduler: &multi_step_lr
      type: 'MultiStepLR'
      params:
        milestones: [10, 20]
        gamma: 0.1
    criterion:
      type: 'GeneralizedCustomLoss'
      org_term:
        factor: 0.0
      sub_terms:
        layer1: &layer1_loss
          criterion:
            type: 'MSELoss'
            params:
              reduction: 'sum'
          params:
            input:
              is_from_teacher: False
              module_path: 'layer1'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'layer1'
              io: 'output'
          factor: 1.0
  stage2:
    num_epochs: 30
    teacher:
      sequential: ['conv1', 'bn1', 'relu', 'layer1', 'layer2']
      wrapper: 'DistributedDataParallel'
      requires_grad: False
      frozen_modules: []
      forward_hook:
        input: []
        output: ['layer1', 'layer2']
    student:
      adaptations:
      sequential: ['conv1', 'bn1', 'relu', 'layer1', 'layer2']
      wrapper: 'DistributedDataParallel'
      requires_grad: True
#      frozen_modules: ['conv1', 'bn1', 'relu', 'layer1']
      forward_hook:
        input: []
        output: ['layer1', 'layer2']
    optimizer: *adam
    scheduler: *multi_step_lr
    criterion:
      type: 'GeneralizedCustomLoss'
      org_term:
        factor: 0.0
      sub_terms:
        layer1: *layer1_loss
        layer2: &layer2_loss
          criterion:
            type: 'MSELoss'
            params:
              reduction: 'sum'
          params:
            input:
              is_from_teacher: False
              module_path: 'layer2'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'layer2'
              io: 'output'
          factor: 1.0
  stage3:
    num_epochs: 30
    teacher:
      sequential: ['conv1', 'bn1', 'relu', 'layer1', 'layer2', 'layer3']
      wrapper: 'DistributedDataParallel'
      requires_grad: False
      frozen_modules: []
      forward_hook:
        input: []
        output: ['layer1', 'layer2', 'layer3']
    student:
      adaptations:
      sequential: ['conv1', 'bn1', 'relu', 'layer1', 'layer2', 'layer3']
      wrapper: 'DistributedDataParallel'
      requires_grad: True
#      frozen_modules: ['conv1', 'bn1', 'relu', 'layer1', 'layer2']
      forward_hook:
        input: []
        output: ['layer1', 'layer2', 'layer3', 'layer4', 'avgpool']
    optimizer: *adam
    scheduler: *multi_step_lr
    criterion:
      type: 'GeneralizedCustomLoss'
      org_term:
        factor: 0.0
      sub_terms:
        layer1: *layer1_loss
        layer2: *layer2_loss
        layer3:
          criterion:
            type: 'MSELoss'
            params:
              reduction: 'sum'
          params:
            input:
              is_from_teacher: False
              module_path: 'layer3'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'layer3'
              io: 'output'
          factor: 1.0
  stage4:
    num_epochs: 92
    train_data_loader:
      dataset_id: *cifar10_train
      random_sample: True
      batch_size: 128
      num_workers: 16
      cache_output:
    val_data_loader:
      dataset_id: *cifar10_val
      random_sample: False
      batch_size: 128
      num_workers: 16
    teacher:
      sequential: []
      wrapper: 'DistributedDataParallel'
      requires_grad: False
      frozen_modules: []
    student:
      adaptations:
      sequential: []
      wrapper: 'DistributedDataParallel'
      requires_grad: True
      frozen_modules: []
    optimizer:
      type: 'SGD'
      params:
        lr: 0.1
        momentum: 0.9
        weight_decay: 0.0001
    scheduler:
      type: 'MultiStepLR'
      params:
        milestones: [30, 60]
        gamma: 0.1
    criterion:
      type: 'GeneralizedCustomLoss'
      org_term:
        criterion:
          type: 'KDLoss'
          params:
            temperature: 4.0
            alpha: 0.5
            reduction: 'batchmean'
        factor: 1.0
      sub_terms:

test:
  test_data_loader:
    dataset_id: *cifar10_test
    random_sample: False
    batch_size: 1
    num_workers: 16
