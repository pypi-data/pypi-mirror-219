#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def add_node(self, db_name, node_type, node_props_list):
        """
        Parameters:
         - db_name
         - node_type
         - node_props_list

        """
        pass

    def add_or_update_node(self, db_name, node_type, node_props_list):
        """
        Parameters:
         - db_name
         - node_type
         - node_props_list

        """
        pass

    def remove_node(self, db_name, id):
        """
        Parameters:
         - db_name
         - id

        """
        pass

    def remove_nodes(self, db_name, node_index_list, model):
        """
        Parameters:
         - db_name
         - node_index_list
         - model

        """
        pass

    def update_node(self, db_name, node_index, node_props):
        """
        Parameters:
         - db_name
         - node_index
         - node_props

        """
        pass

    def update_node_with_id(self, db_name, id, node_props):
        """
        Parameters:
         - db_name
         - id
         - node_props

        """
        pass

    def update_nodes(self, db_name, node_index_list, node_props_list):
        """
        Parameters:
         - db_name
         - node_index_list
         - node_props_list

        """
        pass

    def update_nodes_with_ids(self, db_name, ids, node_props_list):
        """
        Parameters:
         - db_name
         - ids
         - node_props_list

        """
        pass

    def get_node(self, db_name, node_index):
        """
        Parameters:
         - db_name
         - node_index

        """
        pass

    def get_node_with_id(self, db_name, id):
        """
        Parameters:
         - db_name
         - id

        """
        pass

    def get_black_node_id(self, db_name, is_sorted):
        """
        Parameters:
         - db_name
         - is_sorted

        """
        pass

    def get_nodes_with_ids(self, db_name, ids):
        """
        Parameters:
         - db_name
         - ids

        """
        pass

    def get_nodes_with_type(self, db_name, type):
        """
        Parameters:
         - db_name
         - type

        """
        pass

    def get_nodes_with_prop_range(self, db_name, type, prop_name, min_data, min_inclusive, max_data, max_inclusive):
        """
        Parameters:
         - db_name
         - type
         - prop_name
         - min_data
         - min_inclusive
         - max_data
         - max_inclusive

        """
        pass

    def get_nodes_with_type_and_page(self, db_name, type, page_num, page_size):
        """
        Parameters:
         - db_name
         - type
         - page_num
         - page_size

        """
        pass

    def get_nodes_with_props(self, db_name, type, props):
        """
        Parameters:
         - db_name
         - type
         - props

        """
        pass

    def get_nodes_with_degree(self, db_name, type_list, min_degree, max_degree, search_direction):
        """
        Parameters:
         - db_name
         - type_list
         - min_degree
         - max_degree
         - search_direction

        """
        pass

    def get_node_index_by_id(self, db_name, ids):
        """
        Parameters:
         - db_name
         - ids

        """
        pass

    def get_graph_all_node_size(self, db_name):
        """
        Parameters:
         - db_name

        """
        pass

    def get_graph_node_size(self, db_name, node_type):
        """
        Parameters:
         - db_name
         - node_type

        """
        pass

    def add_node_property(self, db_name, node_type, name, type, default_value, cache_level):
        """
        Parameters:
         - db_name
         - node_type
         - name
         - type
         - default_value
         - cache_level

        """
        pass

    def remove_node_property(self, db_name, node_type, name):
        """
        Parameters:
         - db_name
         - node_type
         - name

        """
        pass

    def add_edge(self, db_name, edge_type, src_node_index_list, dest_node_index_list, edge_props_list, model):
        """
        Parameters:
         - db_name
         - edge_type
         - src_node_index_list
         - dest_node_index_list
         - edge_props_list
         - model

        """
        pass

    def add_edge_by_id(self, db_name, edge_type, src_node_id_list, dest_node_id_list, edge_props_list):
        """
        Parameters:
         - db_name
         - edge_type
         - src_node_id_list
         - dest_node_id_list
         - edge_props_list

        """
        pass

    def add_or_update_edge(self, db_name, edge_type, src_node_index_list, dest_node_index_list, edge_props_list, model):
        """
        Parameters:
         - db_name
         - edge_type
         - src_node_index_list
         - dest_node_index_list
         - edge_props_list
         - model

        """
        pass

    def add_or_update_edge_with_id(self, db_name, edge_type, src_node_id_list, dest_node_id_list, edge_props_list):
        """
        Parameters:
         - db_name
         - edge_type
         - src_node_id_list
         - dest_node_id_list
         - edge_props_list

        """
        pass

    def remove_edge(self, db_name, edge_id):
        """
        Parameters:
         - db_name
         - edge_id

        """
        pass

    def remove_all_edge(self, db_name, src_node_id, dest_node_id, type):
        """
        Parameters:
         - db_name
         - src_node_id
         - dest_node_id
         - type

        """
        pass

    def remove_all_edge_with_node_index(self, db_name, src_node_index_list, dest_node_index_list, type_list, model):
        """
        Parameters:
         - db_name
         - src_node_index_list
         - dest_node_index_list
         - type_list
         - model

        """
        pass

    def update_edge(self, db_name, edge_index, edge_props):
        """
        Parameters:
         - db_name
         - edge_index
         - edge_props

        """
        pass

    def update_edge_with_id(self, db_name, edge_id, edge_props):
        """
        Parameters:
         - db_name
         - edge_id
         - edge_props

        """
        pass

    def update_edges(self, db_name, edge_index_list, edge_props_list):
        """
        Parameters:
         - db_name
         - edge_index_list
         - edge_props_list

        """
        pass

    def update_edges_with_ids(self, db_name, edge_id_list, edge_props_list):
        """
        Parameters:
         - db_name
         - edge_id_list
         - edge_props_list

        """
        pass

    def get_edge(self, db_name, edge_index):
        """
        Parameters:
         - db_name
         - edge_index

        """
        pass

    def get_edge_with_basic_id(self, db_name, edge_basic_id):
        """
        Parameters:
         - db_name
         - edge_basic_id

        """
        pass

    def get_edges_with_basic_ids(self, db_name, edge_basic_ids):
        """
        Parameters:
         - db_name
         - edge_basic_ids

        """
        pass

    def get_edges_with_props(self, db_name, type, props):
        """
        Parameters:
         - db_name
         - type
         - props

        """
        pass

    def get_all_edge(self, db_name, src_node_id, dest_node_id):
        """
        Parameters:
         - db_name
         - src_node_id
         - dest_node_id

        """
        pass

    def get_graph_all_edge_size(self, db_name):
        """
        Parameters:
         - db_name

        """
        pass

    def get_graph_edge_size(self, db_name, edge_type):
        """
        Parameters:
         - db_name
         - edge_type

        """
        pass

    def add_edge_property(self, db_name, edge_type, name, type, default_value, cache_level):
        """
        Parameters:
         - db_name
         - edge_type
         - name
         - type
         - default_value
         - cache_level

        """
        pass

    def remove_edge_property(self, db_name, edge_type, name):
        """
        Parameters:
         - db_name
         - edge_type
         - name

        """
        pass

    def get_node_s_batch(self, db_name, src_id, count):
        """
        Parameters:
         - db_name
         - src_id
         - count

        """
        pass

    def get_basic_graph(self, db_name, src_id, count, src_ids, if_order):
        """
        Parameters:
         - db_name
         - src_id
         - count
         - src_ids
         - if_order

        """
        pass

    def get_rel_graph(self, db_name, src_id, count, src_ids, if_order):
        """
        Parameters:
         - db_name
         - src_id
         - count
         - src_ids
         - if_order

        """
        pass

    def create_node_type(self, db_name, node_type, indexes, props):
        """
        Parameters:
         - db_name
         - node_type
         - indexes
         - props

        """
        pass

    def create_edge_type(self, db_name, edge_type, indexes, props):
        """
        Parameters:
         - db_name
         - edge_type
         - indexes
         - props

        """
        pass

    def create_single_edge_type(self, db_name, edge_type, indexes, props, single_mode):
        """
        Parameters:
         - db_name
         - edge_type
         - indexes
         - props
         - single_mode

        """
        pass

    def drop_node_type(self, db_name, node_type):
        """
        Parameters:
         - db_name
         - node_type

        """
        pass

    def drop_edge_type(self, db_name, edge_type):
        """
        Parameters:
         - db_name
         - edge_type

        """
        pass

    def create_node_index(self, db_name, node_type, index):
        """
        Parameters:
         - db_name
         - node_type
         - index

        """
        pass

    def create_edge_index(self, db_name, edge_type, index):
        """
        Parameters:
         - db_name
         - edge_type
         - index

        """
        pass

    def drop_node_index(self, db_name, node_type, index_name):
        """
        Parameters:
         - db_name
         - node_type
         - index_name

        """
        pass

    def drop_edge_index(self, db_name, edge_type, index_name):
        """
        Parameters:
         - db_name
         - edge_type
         - index_name

        """
        pass

    def update_node_index(self, db_name, node_type, index):
        """
        Parameters:
         - db_name
         - node_type
         - index

        """
        pass

    def update_edge_index(self, db_name, edge_type, index):
        """
        Parameters:
         - db_name
         - edge_type
         - index

        """
        pass

    def import_node_from_data(self, db_name, config, table, safe_mode):
        """
        Parameters:
         - db_name
         - config
         - table
         - safe_mode

        """
        pass

    def import_edge_from_data(self, db_name, config, table, safe_mode):
        """
        Parameters:
         - db_name
         - config
         - table
         - safe_mode

        """
        pass

    def update_graph_schema(self, db_name, parameters):
        """
        Parameters:
         - db_name
         - parameters

        """
        pass

    def rebuild_adj_table(self, db_name):
        """
        Parameters:
         - db_name

        """
        pass

    def start_transaction(self, db_name, level, timeout_seconds):
        """
        Parameters:
         - db_name
         - level
         - timeout_seconds

        """
        pass

    def commit_transaction(self, db_name, transaction_id):
        """
        Parameters:
         - db_name
         - transaction_id

        """
        pass

    def rollback_transaction(self, db_name, transaction_id):
        """
        Parameters:
         - db_name
         - transaction_id

        """
        pass

    def stat_inout_degree(self, db_name, search_direction, top_k, is_desc):
        """
        Parameters:
         - db_name
         - search_direction
         - top_k
         - is_desc

        """
        pass

    def stat_graph_global_view(self, db_name):
        """
        Parameters:
         - db_name

        """
        pass

    def refresh_connected_component_cache(self, db_name):
        """
        Parameters:
         - db_name

        """
        pass

    def drop_connected_component_cache(self, db_name):
        """
        Parameters:
         - db_name

        """
        pass

    def set_node_tag(self, db_name, tag, ids):
        """
        Parameters:
         - db_name
         - tag
         - ids

        """
        pass

    def remove_node_tag(self, db_name, tags):
        """
        Parameters:
         - db_name
         - tags

        """
        pass

    def remove_node_tag_with_specific(self, db_name, id2tags):
        """
        Parameters:
         - db_name
         - id2tags

        """
        pass

    def view_node_tag(self, db_name):
        """
        Parameters:
         - db_name

        """
        pass

    def get_node_tag_with_ids(self, db_name, ids):
        """
        Parameters:
         - db_name
         - ids

        """
        pass

    def get_node_tag_with_tags(self, db_name, tags, absolutely_equal):
        """
        Parameters:
         - db_name
         - tags
         - absolutely_equal

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def add_node(self, db_name, node_type, node_props_list):
        """
        Parameters:
         - db_name
         - node_type
         - node_props_list

        """
        self.send_add_node(db_name, node_type, node_props_list)
        return self.recv_add_node()

    def send_add_node(self, db_name, node_type, node_props_list):
        self._oprot.writeMessageBegin('add_node', TMessageType.CALL, self._seqid)
        args = add_node_args()
        args.db_name = db_name
        args.node_type = node_type
        args.node_props_list = node_props_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_node(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_node_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_node failed: unknown result")

    def add_or_update_node(self, db_name, node_type, node_props_list):
        """
        Parameters:
         - db_name
         - node_type
         - node_props_list

        """
        self.send_add_or_update_node(db_name, node_type, node_props_list)
        return self.recv_add_or_update_node()

    def send_add_or_update_node(self, db_name, node_type, node_props_list):
        self._oprot.writeMessageBegin('add_or_update_node', TMessageType.CALL, self._seqid)
        args = add_or_update_node_args()
        args.db_name = db_name
        args.node_type = node_type
        args.node_props_list = node_props_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_or_update_node(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_or_update_node_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_or_update_node failed: unknown result")

    def remove_node(self, db_name, id):
        """
        Parameters:
         - db_name
         - id

        """
        self.send_remove_node(db_name, id)
        return self.recv_remove_node()

    def send_remove_node(self, db_name, id):
        self._oprot.writeMessageBegin('remove_node', TMessageType.CALL, self._seqid)
        args = remove_node_args()
        args.db_name = db_name
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove_node(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_node_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_node failed: unknown result")

    def remove_nodes(self, db_name, node_index_list, model):
        """
        Parameters:
         - db_name
         - node_index_list
         - model

        """
        self.send_remove_nodes(db_name, node_index_list, model)
        return self.recv_remove_nodes()

    def send_remove_nodes(self, db_name, node_index_list, model):
        self._oprot.writeMessageBegin('remove_nodes', TMessageType.CALL, self._seqid)
        args = remove_nodes_args()
        args.db_name = db_name
        args.node_index_list = node_index_list
        args.model = model
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove_nodes(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_nodes_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_nodes failed: unknown result")

    def update_node(self, db_name, node_index, node_props):
        """
        Parameters:
         - db_name
         - node_index
         - node_props

        """
        self.send_update_node(db_name, node_index, node_props)
        return self.recv_update_node()

    def send_update_node(self, db_name, node_index, node_props):
        self._oprot.writeMessageBegin('update_node', TMessageType.CALL, self._seqid)
        args = update_node_args()
        args.db_name = db_name
        args.node_index = node_index
        args.node_props = node_props
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_node(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_node_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_node failed: unknown result")

    def update_node_with_id(self, db_name, id, node_props):
        """
        Parameters:
         - db_name
         - id
         - node_props

        """
        self.send_update_node_with_id(db_name, id, node_props)
        return self.recv_update_node_with_id()

    def send_update_node_with_id(self, db_name, id, node_props):
        self._oprot.writeMessageBegin('update_node_with_id', TMessageType.CALL, self._seqid)
        args = update_node_with_id_args()
        args.db_name = db_name
        args.id = id
        args.node_props = node_props
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_node_with_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_node_with_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_node_with_id failed: unknown result")

    def update_nodes(self, db_name, node_index_list, node_props_list):
        """
        Parameters:
         - db_name
         - node_index_list
         - node_props_list

        """
        self.send_update_nodes(db_name, node_index_list, node_props_list)
        return self.recv_update_nodes()

    def send_update_nodes(self, db_name, node_index_list, node_props_list):
        self._oprot.writeMessageBegin('update_nodes', TMessageType.CALL, self._seqid)
        args = update_nodes_args()
        args.db_name = db_name
        args.node_index_list = node_index_list
        args.node_props_list = node_props_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_nodes(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_nodes_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_nodes failed: unknown result")

    def update_nodes_with_ids(self, db_name, ids, node_props_list):
        """
        Parameters:
         - db_name
         - ids
         - node_props_list

        """
        self.send_update_nodes_with_ids(db_name, ids, node_props_list)
        return self.recv_update_nodes_with_ids()

    def send_update_nodes_with_ids(self, db_name, ids, node_props_list):
        self._oprot.writeMessageBegin('update_nodes_with_ids', TMessageType.CALL, self._seqid)
        args = update_nodes_with_ids_args()
        args.db_name = db_name
        args.ids = ids
        args.node_props_list = node_props_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_nodes_with_ids(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_nodes_with_ids_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_nodes_with_ids failed: unknown result")

    def get_node(self, db_name, node_index):
        """
        Parameters:
         - db_name
         - node_index

        """
        self.send_get_node(db_name, node_index)
        return self.recv_get_node()

    def send_get_node(self, db_name, node_index):
        self._oprot.writeMessageBegin('get_node', TMessageType.CALL, self._seqid)
        args = get_node_args()
        args.db_name = db_name
        args.node_index = node_index
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_node(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_node_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_node failed: unknown result")

    def get_node_with_id(self, db_name, id):
        """
        Parameters:
         - db_name
         - id

        """
        self.send_get_node_with_id(db_name, id)
        return self.recv_get_node_with_id()

    def send_get_node_with_id(self, db_name, id):
        self._oprot.writeMessageBegin('get_node_with_id', TMessageType.CALL, self._seqid)
        args = get_node_with_id_args()
        args.db_name = db_name
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_node_with_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_node_with_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_node_with_id failed: unknown result")

    def get_black_node_id(self, db_name, is_sorted):
        """
        Parameters:
         - db_name
         - is_sorted

        """
        self.send_get_black_node_id(db_name, is_sorted)
        return self.recv_get_black_node_id()

    def send_get_black_node_id(self, db_name, is_sorted):
        self._oprot.writeMessageBegin('get_black_node_id', TMessageType.CALL, self._seqid)
        args = get_black_node_id_args()
        args.db_name = db_name
        args.is_sorted = is_sorted
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_black_node_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_black_node_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_black_node_id failed: unknown result")

    def get_nodes_with_ids(self, db_name, ids):
        """
        Parameters:
         - db_name
         - ids

        """
        self.send_get_nodes_with_ids(db_name, ids)
        return self.recv_get_nodes_with_ids()

    def send_get_nodes_with_ids(self, db_name, ids):
        self._oprot.writeMessageBegin('get_nodes_with_ids', TMessageType.CALL, self._seqid)
        args = get_nodes_with_ids_args()
        args.db_name = db_name
        args.ids = ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_nodes_with_ids(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_nodes_with_ids_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_nodes_with_ids failed: unknown result")

    def get_nodes_with_type(self, db_name, type):
        """
        Parameters:
         - db_name
         - type

        """
        self.send_get_nodes_with_type(db_name, type)
        return self.recv_get_nodes_with_type()

    def send_get_nodes_with_type(self, db_name, type):
        self._oprot.writeMessageBegin('get_nodes_with_type', TMessageType.CALL, self._seqid)
        args = get_nodes_with_type_args()
        args.db_name = db_name
        args.type = type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_nodes_with_type(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_nodes_with_type_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_nodes_with_type failed: unknown result")

    def get_nodes_with_prop_range(self, db_name, type, prop_name, min_data, min_inclusive, max_data, max_inclusive):
        """
        Parameters:
         - db_name
         - type
         - prop_name
         - min_data
         - min_inclusive
         - max_data
         - max_inclusive

        """
        self.send_get_nodes_with_prop_range(db_name, type, prop_name, min_data, min_inclusive, max_data, max_inclusive)
        return self.recv_get_nodes_with_prop_range()

    def send_get_nodes_with_prop_range(self, db_name, type, prop_name, min_data, min_inclusive, max_data, max_inclusive):
        self._oprot.writeMessageBegin('get_nodes_with_prop_range', TMessageType.CALL, self._seqid)
        args = get_nodes_with_prop_range_args()
        args.db_name = db_name
        args.type = type
        args.prop_name = prop_name
        args.min_data = min_data
        args.min_inclusive = min_inclusive
        args.max_data = max_data
        args.max_inclusive = max_inclusive
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_nodes_with_prop_range(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_nodes_with_prop_range_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_nodes_with_prop_range failed: unknown result")

    def get_nodes_with_type_and_page(self, db_name, type, page_num, page_size):
        """
        Parameters:
         - db_name
         - type
         - page_num
         - page_size

        """
        self.send_get_nodes_with_type_and_page(db_name, type, page_num, page_size)
        return self.recv_get_nodes_with_type_and_page()

    def send_get_nodes_with_type_and_page(self, db_name, type, page_num, page_size):
        self._oprot.writeMessageBegin('get_nodes_with_type_and_page', TMessageType.CALL, self._seqid)
        args = get_nodes_with_type_and_page_args()
        args.db_name = db_name
        args.type = type
        args.page_num = page_num
        args.page_size = page_size
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_nodes_with_type_and_page(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_nodes_with_type_and_page_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_nodes_with_type_and_page failed: unknown result")

    def get_nodes_with_props(self, db_name, type, props):
        """
        Parameters:
         - db_name
         - type
         - props

        """
        self.send_get_nodes_with_props(db_name, type, props)
        return self.recv_get_nodes_with_props()

    def send_get_nodes_with_props(self, db_name, type, props):
        self._oprot.writeMessageBegin('get_nodes_with_props', TMessageType.CALL, self._seqid)
        args = get_nodes_with_props_args()
        args.db_name = db_name
        args.type = type
        args.props = props
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_nodes_with_props(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_nodes_with_props_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_nodes_with_props failed: unknown result")

    def get_nodes_with_degree(self, db_name, type_list, min_degree, max_degree, search_direction):
        """
        Parameters:
         - db_name
         - type_list
         - min_degree
         - max_degree
         - search_direction

        """
        self.send_get_nodes_with_degree(db_name, type_list, min_degree, max_degree, search_direction)
        return self.recv_get_nodes_with_degree()

    def send_get_nodes_with_degree(self, db_name, type_list, min_degree, max_degree, search_direction):
        self._oprot.writeMessageBegin('get_nodes_with_degree', TMessageType.CALL, self._seqid)
        args = get_nodes_with_degree_args()
        args.db_name = db_name
        args.type_list = type_list
        args.min_degree = min_degree
        args.max_degree = max_degree
        args.search_direction = search_direction
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_nodes_with_degree(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_nodes_with_degree_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_nodes_with_degree failed: unknown result")

    def get_node_index_by_id(self, db_name, ids):
        """
        Parameters:
         - db_name
         - ids

        """
        self.send_get_node_index_by_id(db_name, ids)
        return self.recv_get_node_index_by_id()

    def send_get_node_index_by_id(self, db_name, ids):
        self._oprot.writeMessageBegin('get_node_index_by_id', TMessageType.CALL, self._seqid)
        args = get_node_index_by_id_args()
        args.db_name = db_name
        args.ids = ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_node_index_by_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_node_index_by_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_node_index_by_id failed: unknown result")

    def get_graph_all_node_size(self, db_name):
        """
        Parameters:
         - db_name

        """
        self.send_get_graph_all_node_size(db_name)
        return self.recv_get_graph_all_node_size()

    def send_get_graph_all_node_size(self, db_name):
        self._oprot.writeMessageBegin('get_graph_all_node_size', TMessageType.CALL, self._seqid)
        args = get_graph_all_node_size_args()
        args.db_name = db_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_graph_all_node_size(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_graph_all_node_size_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_graph_all_node_size failed: unknown result")

    def get_graph_node_size(self, db_name, node_type):
        """
        Parameters:
         - db_name
         - node_type

        """
        self.send_get_graph_node_size(db_name, node_type)
        return self.recv_get_graph_node_size()

    def send_get_graph_node_size(self, db_name, node_type):
        self._oprot.writeMessageBegin('get_graph_node_size', TMessageType.CALL, self._seqid)
        args = get_graph_node_size_args()
        args.db_name = db_name
        args.node_type = node_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_graph_node_size(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_graph_node_size_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_graph_node_size failed: unknown result")

    def add_node_property(self, db_name, node_type, name, type, default_value, cache_level):
        """
        Parameters:
         - db_name
         - node_type
         - name
         - type
         - default_value
         - cache_level

        """
        self.send_add_node_property(db_name, node_type, name, type, default_value, cache_level)
        return self.recv_add_node_property()

    def send_add_node_property(self, db_name, node_type, name, type, default_value, cache_level):
        self._oprot.writeMessageBegin('add_node_property', TMessageType.CALL, self._seqid)
        args = add_node_property_args()
        args.db_name = db_name
        args.node_type = node_type
        args.name = name
        args.type = type
        args.default_value = default_value
        args.cache_level = cache_level
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_node_property(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_node_property_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_node_property failed: unknown result")

    def remove_node_property(self, db_name, node_type, name):
        """
        Parameters:
         - db_name
         - node_type
         - name

        """
        self.send_remove_node_property(db_name, node_type, name)
        return self.recv_remove_node_property()

    def send_remove_node_property(self, db_name, node_type, name):
        self._oprot.writeMessageBegin('remove_node_property', TMessageType.CALL, self._seqid)
        args = remove_node_property_args()
        args.db_name = db_name
        args.node_type = node_type
        args.name = name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove_node_property(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_node_property_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_node_property failed: unknown result")

    def add_edge(self, db_name, edge_type, src_node_index_list, dest_node_index_list, edge_props_list, model):
        """
        Parameters:
         - db_name
         - edge_type
         - src_node_index_list
         - dest_node_index_list
         - edge_props_list
         - model

        """
        self.send_add_edge(db_name, edge_type, src_node_index_list, dest_node_index_list, edge_props_list, model)
        return self.recv_add_edge()

    def send_add_edge(self, db_name, edge_type, src_node_index_list, dest_node_index_list, edge_props_list, model):
        self._oprot.writeMessageBegin('add_edge', TMessageType.CALL, self._seqid)
        args = add_edge_args()
        args.db_name = db_name
        args.edge_type = edge_type
        args.src_node_index_list = src_node_index_list
        args.dest_node_index_list = dest_node_index_list
        args.edge_props_list = edge_props_list
        args.model = model
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_edge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_edge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_edge failed: unknown result")

    def add_edge_by_id(self, db_name, edge_type, src_node_id_list, dest_node_id_list, edge_props_list):
        """
        Parameters:
         - db_name
         - edge_type
         - src_node_id_list
         - dest_node_id_list
         - edge_props_list

        """
        self.send_add_edge_by_id(db_name, edge_type, src_node_id_list, dest_node_id_list, edge_props_list)
        return self.recv_add_edge_by_id()

    def send_add_edge_by_id(self, db_name, edge_type, src_node_id_list, dest_node_id_list, edge_props_list):
        self._oprot.writeMessageBegin('add_edge_by_id', TMessageType.CALL, self._seqid)
        args = add_edge_by_id_args()
        args.db_name = db_name
        args.edge_type = edge_type
        args.src_node_id_list = src_node_id_list
        args.dest_node_id_list = dest_node_id_list
        args.edge_props_list = edge_props_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_edge_by_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_edge_by_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_edge_by_id failed: unknown result")

    def add_or_update_edge(self, db_name, edge_type, src_node_index_list, dest_node_index_list, edge_props_list, model):
        """
        Parameters:
         - db_name
         - edge_type
         - src_node_index_list
         - dest_node_index_list
         - edge_props_list
         - model

        """
        self.send_add_or_update_edge(db_name, edge_type, src_node_index_list, dest_node_index_list, edge_props_list, model)
        return self.recv_add_or_update_edge()

    def send_add_or_update_edge(self, db_name, edge_type, src_node_index_list, dest_node_index_list, edge_props_list, model):
        self._oprot.writeMessageBegin('add_or_update_edge', TMessageType.CALL, self._seqid)
        args = add_or_update_edge_args()
        args.db_name = db_name
        args.edge_type = edge_type
        args.src_node_index_list = src_node_index_list
        args.dest_node_index_list = dest_node_index_list
        args.edge_props_list = edge_props_list
        args.model = model
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_or_update_edge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_or_update_edge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_or_update_edge failed: unknown result")

    def add_or_update_edge_with_id(self, db_name, edge_type, src_node_id_list, dest_node_id_list, edge_props_list):
        """
        Parameters:
         - db_name
         - edge_type
         - src_node_id_list
         - dest_node_id_list
         - edge_props_list

        """
        self.send_add_or_update_edge_with_id(db_name, edge_type, src_node_id_list, dest_node_id_list, edge_props_list)
        return self.recv_add_or_update_edge_with_id()

    def send_add_or_update_edge_with_id(self, db_name, edge_type, src_node_id_list, dest_node_id_list, edge_props_list):
        self._oprot.writeMessageBegin('add_or_update_edge_with_id', TMessageType.CALL, self._seqid)
        args = add_or_update_edge_with_id_args()
        args.db_name = db_name
        args.edge_type = edge_type
        args.src_node_id_list = src_node_id_list
        args.dest_node_id_list = dest_node_id_list
        args.edge_props_list = edge_props_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_or_update_edge_with_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_or_update_edge_with_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_or_update_edge_with_id failed: unknown result")

    def remove_edge(self, db_name, edge_id):
        """
        Parameters:
         - db_name
         - edge_id

        """
        self.send_remove_edge(db_name, edge_id)
        return self.recv_remove_edge()

    def send_remove_edge(self, db_name, edge_id):
        self._oprot.writeMessageBegin('remove_edge', TMessageType.CALL, self._seqid)
        args = remove_edge_args()
        args.db_name = db_name
        args.edge_id = edge_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove_edge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_edge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_edge failed: unknown result")

    def remove_all_edge(self, db_name, src_node_id, dest_node_id, type):
        """
        Parameters:
         - db_name
         - src_node_id
         - dest_node_id
         - type

        """
        self.send_remove_all_edge(db_name, src_node_id, dest_node_id, type)
        return self.recv_remove_all_edge()

    def send_remove_all_edge(self, db_name, src_node_id, dest_node_id, type):
        self._oprot.writeMessageBegin('remove_all_edge', TMessageType.CALL, self._seqid)
        args = remove_all_edge_args()
        args.db_name = db_name
        args.src_node_id = src_node_id
        args.dest_node_id = dest_node_id
        args.type = type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove_all_edge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_all_edge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_all_edge failed: unknown result")

    def remove_all_edge_with_node_index(self, db_name, src_node_index_list, dest_node_index_list, type_list, model):
        """
        Parameters:
         - db_name
         - src_node_index_list
         - dest_node_index_list
         - type_list
         - model

        """
        self.send_remove_all_edge_with_node_index(db_name, src_node_index_list, dest_node_index_list, type_list, model)
        return self.recv_remove_all_edge_with_node_index()

    def send_remove_all_edge_with_node_index(self, db_name, src_node_index_list, dest_node_index_list, type_list, model):
        self._oprot.writeMessageBegin('remove_all_edge_with_node_index', TMessageType.CALL, self._seqid)
        args = remove_all_edge_with_node_index_args()
        args.db_name = db_name
        args.src_node_index_list = src_node_index_list
        args.dest_node_index_list = dest_node_index_list
        args.type_list = type_list
        args.model = model
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove_all_edge_with_node_index(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_all_edge_with_node_index_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_all_edge_with_node_index failed: unknown result")

    def update_edge(self, db_name, edge_index, edge_props):
        """
        Parameters:
         - db_name
         - edge_index
         - edge_props

        """
        self.send_update_edge(db_name, edge_index, edge_props)
        return self.recv_update_edge()

    def send_update_edge(self, db_name, edge_index, edge_props):
        self._oprot.writeMessageBegin('update_edge', TMessageType.CALL, self._seqid)
        args = update_edge_args()
        args.db_name = db_name
        args.edge_index = edge_index
        args.edge_props = edge_props
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_edge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_edge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_edge failed: unknown result")

    def update_edge_with_id(self, db_name, edge_id, edge_props):
        """
        Parameters:
         - db_name
         - edge_id
         - edge_props

        """
        self.send_update_edge_with_id(db_name, edge_id, edge_props)
        return self.recv_update_edge_with_id()

    def send_update_edge_with_id(self, db_name, edge_id, edge_props):
        self._oprot.writeMessageBegin('update_edge_with_id', TMessageType.CALL, self._seqid)
        args = update_edge_with_id_args()
        args.db_name = db_name
        args.edge_id = edge_id
        args.edge_props = edge_props
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_edge_with_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_edge_with_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_edge_with_id failed: unknown result")

    def update_edges(self, db_name, edge_index_list, edge_props_list):
        """
        Parameters:
         - db_name
         - edge_index_list
         - edge_props_list

        """
        self.send_update_edges(db_name, edge_index_list, edge_props_list)
        return self.recv_update_edges()

    def send_update_edges(self, db_name, edge_index_list, edge_props_list):
        self._oprot.writeMessageBegin('update_edges', TMessageType.CALL, self._seqid)
        args = update_edges_args()
        args.db_name = db_name
        args.edge_index_list = edge_index_list
        args.edge_props_list = edge_props_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_edges(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_edges_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_edges failed: unknown result")

    def update_edges_with_ids(self, db_name, edge_id_list, edge_props_list):
        """
        Parameters:
         - db_name
         - edge_id_list
         - edge_props_list

        """
        self.send_update_edges_with_ids(db_name, edge_id_list, edge_props_list)
        return self.recv_update_edges_with_ids()

    def send_update_edges_with_ids(self, db_name, edge_id_list, edge_props_list):
        self._oprot.writeMessageBegin('update_edges_with_ids', TMessageType.CALL, self._seqid)
        args = update_edges_with_ids_args()
        args.db_name = db_name
        args.edge_id_list = edge_id_list
        args.edge_props_list = edge_props_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_edges_with_ids(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_edges_with_ids_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_edges_with_ids failed: unknown result")

    def get_edge(self, db_name, edge_index):
        """
        Parameters:
         - db_name
         - edge_index

        """
        self.send_get_edge(db_name, edge_index)
        return self.recv_get_edge()

    def send_get_edge(self, db_name, edge_index):
        self._oprot.writeMessageBegin('get_edge', TMessageType.CALL, self._seqid)
        args = get_edge_args()
        args.db_name = db_name
        args.edge_index = edge_index
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_edge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_edge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_edge failed: unknown result")

    def get_edge_with_basic_id(self, db_name, edge_basic_id):
        """
        Parameters:
         - db_name
         - edge_basic_id

        """
        self.send_get_edge_with_basic_id(db_name, edge_basic_id)
        return self.recv_get_edge_with_basic_id()

    def send_get_edge_with_basic_id(self, db_name, edge_basic_id):
        self._oprot.writeMessageBegin('get_edge_with_basic_id', TMessageType.CALL, self._seqid)
        args = get_edge_with_basic_id_args()
        args.db_name = db_name
        args.edge_basic_id = edge_basic_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_edge_with_basic_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_edge_with_basic_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_edge_with_basic_id failed: unknown result")

    def get_edges_with_basic_ids(self, db_name, edge_basic_ids):
        """
        Parameters:
         - db_name
         - edge_basic_ids

        """
        self.send_get_edges_with_basic_ids(db_name, edge_basic_ids)
        return self.recv_get_edges_with_basic_ids()

    def send_get_edges_with_basic_ids(self, db_name, edge_basic_ids):
        self._oprot.writeMessageBegin('get_edges_with_basic_ids', TMessageType.CALL, self._seqid)
        args = get_edges_with_basic_ids_args()
        args.db_name = db_name
        args.edge_basic_ids = edge_basic_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_edges_with_basic_ids(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_edges_with_basic_ids_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_edges_with_basic_ids failed: unknown result")

    def get_edges_with_props(self, db_name, type, props):
        """
        Parameters:
         - db_name
         - type
         - props

        """
        self.send_get_edges_with_props(db_name, type, props)
        return self.recv_get_edges_with_props()

    def send_get_edges_with_props(self, db_name, type, props):
        self._oprot.writeMessageBegin('get_edges_with_props', TMessageType.CALL, self._seqid)
        args = get_edges_with_props_args()
        args.db_name = db_name
        args.type = type
        args.props = props
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_edges_with_props(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_edges_with_props_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_edges_with_props failed: unknown result")

    def get_all_edge(self, db_name, src_node_id, dest_node_id):
        """
        Parameters:
         - db_name
         - src_node_id
         - dest_node_id

        """
        self.send_get_all_edge(db_name, src_node_id, dest_node_id)
        return self.recv_get_all_edge()

    def send_get_all_edge(self, db_name, src_node_id, dest_node_id):
        self._oprot.writeMessageBegin('get_all_edge', TMessageType.CALL, self._seqid)
        args = get_all_edge_args()
        args.db_name = db_name
        args.src_node_id = src_node_id
        args.dest_node_id = dest_node_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_all_edge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_all_edge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_all_edge failed: unknown result")

    def get_graph_all_edge_size(self, db_name):
        """
        Parameters:
         - db_name

        """
        self.send_get_graph_all_edge_size(db_name)
        return self.recv_get_graph_all_edge_size()

    def send_get_graph_all_edge_size(self, db_name):
        self._oprot.writeMessageBegin('get_graph_all_edge_size', TMessageType.CALL, self._seqid)
        args = get_graph_all_edge_size_args()
        args.db_name = db_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_graph_all_edge_size(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_graph_all_edge_size_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_graph_all_edge_size failed: unknown result")

    def get_graph_edge_size(self, db_name, edge_type):
        """
        Parameters:
         - db_name
         - edge_type

        """
        self.send_get_graph_edge_size(db_name, edge_type)
        return self.recv_get_graph_edge_size()

    def send_get_graph_edge_size(self, db_name, edge_type):
        self._oprot.writeMessageBegin('get_graph_edge_size', TMessageType.CALL, self._seqid)
        args = get_graph_edge_size_args()
        args.db_name = db_name
        args.edge_type = edge_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_graph_edge_size(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_graph_edge_size_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_graph_edge_size failed: unknown result")

    def add_edge_property(self, db_name, edge_type, name, type, default_value, cache_level):
        """
        Parameters:
         - db_name
         - edge_type
         - name
         - type
         - default_value
         - cache_level

        """
        self.send_add_edge_property(db_name, edge_type, name, type, default_value, cache_level)
        return self.recv_add_edge_property()

    def send_add_edge_property(self, db_name, edge_type, name, type, default_value, cache_level):
        self._oprot.writeMessageBegin('add_edge_property', TMessageType.CALL, self._seqid)
        args = add_edge_property_args()
        args.db_name = db_name
        args.edge_type = edge_type
        args.name = name
        args.type = type
        args.default_value = default_value
        args.cache_level = cache_level
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_edge_property(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_edge_property_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_edge_property failed: unknown result")

    def remove_edge_property(self, db_name, edge_type, name):
        """
        Parameters:
         - db_name
         - edge_type
         - name

        """
        self.send_remove_edge_property(db_name, edge_type, name)
        return self.recv_remove_edge_property()

    def send_remove_edge_property(self, db_name, edge_type, name):
        self._oprot.writeMessageBegin('remove_edge_property', TMessageType.CALL, self._seqid)
        args = remove_edge_property_args()
        args.db_name = db_name
        args.edge_type = edge_type
        args.name = name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove_edge_property(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_edge_property_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_edge_property failed: unknown result")

    def get_node_s_batch(self, db_name, src_id, count):
        """
        Parameters:
         - db_name
         - src_id
         - count

        """
        self.send_get_node_s_batch(db_name, src_id, count)
        return self.recv_get_node_s_batch()

    def send_get_node_s_batch(self, db_name, src_id, count):
        self._oprot.writeMessageBegin('get_node_s_batch', TMessageType.CALL, self._seqid)
        args = get_node_s_batch_args()
        args.db_name = db_name
        args.src_id = src_id
        args.count = count
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_node_s_batch(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_node_s_batch_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_node_s_batch failed: unknown result")

    def get_basic_graph(self, db_name, src_id, count, src_ids, if_order):
        """
        Parameters:
         - db_name
         - src_id
         - count
         - src_ids
         - if_order

        """
        self.send_get_basic_graph(db_name, src_id, count, src_ids, if_order)
        return self.recv_get_basic_graph()

    def send_get_basic_graph(self, db_name, src_id, count, src_ids, if_order):
        self._oprot.writeMessageBegin('get_basic_graph', TMessageType.CALL, self._seqid)
        args = get_basic_graph_args()
        args.db_name = db_name
        args.src_id = src_id
        args.count = count
        args.src_ids = src_ids
        args.if_order = if_order
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_basic_graph(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_basic_graph_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_basic_graph failed: unknown result")

    def get_rel_graph(self, db_name, src_id, count, src_ids, if_order):
        """
        Parameters:
         - db_name
         - src_id
         - count
         - src_ids
         - if_order

        """
        self.send_get_rel_graph(db_name, src_id, count, src_ids, if_order)
        return self.recv_get_rel_graph()

    def send_get_rel_graph(self, db_name, src_id, count, src_ids, if_order):
        self._oprot.writeMessageBegin('get_rel_graph', TMessageType.CALL, self._seqid)
        args = get_rel_graph_args()
        args.db_name = db_name
        args.src_id = src_id
        args.count = count
        args.src_ids = src_ids
        args.if_order = if_order
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_rel_graph(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_rel_graph_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_rel_graph failed: unknown result")

    def create_node_type(self, db_name, node_type, indexes, props):
        """
        Parameters:
         - db_name
         - node_type
         - indexes
         - props

        """
        self.send_create_node_type(db_name, node_type, indexes, props)
        return self.recv_create_node_type()

    def send_create_node_type(self, db_name, node_type, indexes, props):
        self._oprot.writeMessageBegin('create_node_type', TMessageType.CALL, self._seqid)
        args = create_node_type_args()
        args.db_name = db_name
        args.node_type = node_type
        args.indexes = indexes
        args.props = props
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_node_type(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_node_type_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_node_type failed: unknown result")

    def create_edge_type(self, db_name, edge_type, indexes, props):
        """
        Parameters:
         - db_name
         - edge_type
         - indexes
         - props

        """
        self.send_create_edge_type(db_name, edge_type, indexes, props)
        return self.recv_create_edge_type()

    def send_create_edge_type(self, db_name, edge_type, indexes, props):
        self._oprot.writeMessageBegin('create_edge_type', TMessageType.CALL, self._seqid)
        args = create_edge_type_args()
        args.db_name = db_name
        args.edge_type = edge_type
        args.indexes = indexes
        args.props = props
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_edge_type(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_edge_type_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_edge_type failed: unknown result")

    def create_single_edge_type(self, db_name, edge_type, indexes, props, single_mode):
        """
        Parameters:
         - db_name
         - edge_type
         - indexes
         - props
         - single_mode

        """
        self.send_create_single_edge_type(db_name, edge_type, indexes, props, single_mode)
        return self.recv_create_single_edge_type()

    def send_create_single_edge_type(self, db_name, edge_type, indexes, props, single_mode):
        self._oprot.writeMessageBegin('create_single_edge_type', TMessageType.CALL, self._seqid)
        args = create_single_edge_type_args()
        args.db_name = db_name
        args.edge_type = edge_type
        args.indexes = indexes
        args.props = props
        args.single_mode = single_mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_single_edge_type(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_single_edge_type_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_single_edge_type failed: unknown result")

    def drop_node_type(self, db_name, node_type):
        """
        Parameters:
         - db_name
         - node_type

        """
        self.send_drop_node_type(db_name, node_type)
        return self.recv_drop_node_type()

    def send_drop_node_type(self, db_name, node_type):
        self._oprot.writeMessageBegin('drop_node_type', TMessageType.CALL, self._seqid)
        args = drop_node_type_args()
        args.db_name = db_name
        args.node_type = node_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_drop_node_type(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = drop_node_type_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "drop_node_type failed: unknown result")

    def drop_edge_type(self, db_name, edge_type):
        """
        Parameters:
         - db_name
         - edge_type

        """
        self.send_drop_edge_type(db_name, edge_type)
        return self.recv_drop_edge_type()

    def send_drop_edge_type(self, db_name, edge_type):
        self._oprot.writeMessageBegin('drop_edge_type', TMessageType.CALL, self._seqid)
        args = drop_edge_type_args()
        args.db_name = db_name
        args.edge_type = edge_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_drop_edge_type(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = drop_edge_type_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "drop_edge_type failed: unknown result")

    def create_node_index(self, db_name, node_type, index):
        """
        Parameters:
         - db_name
         - node_type
         - index

        """
        self.send_create_node_index(db_name, node_type, index)
        return self.recv_create_node_index()

    def send_create_node_index(self, db_name, node_type, index):
        self._oprot.writeMessageBegin('create_node_index', TMessageType.CALL, self._seqid)
        args = create_node_index_args()
        args.db_name = db_name
        args.node_type = node_type
        args.index = index
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_node_index(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_node_index_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_node_index failed: unknown result")

    def create_edge_index(self, db_name, edge_type, index):
        """
        Parameters:
         - db_name
         - edge_type
         - index

        """
        self.send_create_edge_index(db_name, edge_type, index)
        return self.recv_create_edge_index()

    def send_create_edge_index(self, db_name, edge_type, index):
        self._oprot.writeMessageBegin('create_edge_index', TMessageType.CALL, self._seqid)
        args = create_edge_index_args()
        args.db_name = db_name
        args.edge_type = edge_type
        args.index = index
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_edge_index(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_edge_index_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_edge_index failed: unknown result")

    def drop_node_index(self, db_name, node_type, index_name):
        """
        Parameters:
         - db_name
         - node_type
         - index_name

        """
        self.send_drop_node_index(db_name, node_type, index_name)
        return self.recv_drop_node_index()

    def send_drop_node_index(self, db_name, node_type, index_name):
        self._oprot.writeMessageBegin('drop_node_index', TMessageType.CALL, self._seqid)
        args = drop_node_index_args()
        args.db_name = db_name
        args.node_type = node_type
        args.index_name = index_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_drop_node_index(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = drop_node_index_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "drop_node_index failed: unknown result")

    def drop_edge_index(self, db_name, edge_type, index_name):
        """
        Parameters:
         - db_name
         - edge_type
         - index_name

        """
        self.send_drop_edge_index(db_name, edge_type, index_name)
        return self.recv_drop_edge_index()

    def send_drop_edge_index(self, db_name, edge_type, index_name):
        self._oprot.writeMessageBegin('drop_edge_index', TMessageType.CALL, self._seqid)
        args = drop_edge_index_args()
        args.db_name = db_name
        args.edge_type = edge_type
        args.index_name = index_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_drop_edge_index(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = drop_edge_index_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "drop_edge_index failed: unknown result")

    def update_node_index(self, db_name, node_type, index):
        """
        Parameters:
         - db_name
         - node_type
         - index

        """
        self.send_update_node_index(db_name, node_type, index)
        return self.recv_update_node_index()

    def send_update_node_index(self, db_name, node_type, index):
        self._oprot.writeMessageBegin('update_node_index', TMessageType.CALL, self._seqid)
        args = update_node_index_args()
        args.db_name = db_name
        args.node_type = node_type
        args.index = index
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_node_index(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_node_index_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_node_index failed: unknown result")

    def update_edge_index(self, db_name, edge_type, index):
        """
        Parameters:
         - db_name
         - edge_type
         - index

        """
        self.send_update_edge_index(db_name, edge_type, index)
        return self.recv_update_edge_index()

    def send_update_edge_index(self, db_name, edge_type, index):
        self._oprot.writeMessageBegin('update_edge_index', TMessageType.CALL, self._seqid)
        args = update_edge_index_args()
        args.db_name = db_name
        args.edge_type = edge_type
        args.index = index
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_edge_index(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_edge_index_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_edge_index failed: unknown result")

    def import_node_from_data(self, db_name, config, table, safe_mode):
        """
        Parameters:
         - db_name
         - config
         - table
         - safe_mode

        """
        self.send_import_node_from_data(db_name, config, table, safe_mode)
        return self.recv_import_node_from_data()

    def send_import_node_from_data(self, db_name, config, table, safe_mode):
        self._oprot.writeMessageBegin('import_node_from_data', TMessageType.CALL, self._seqid)
        args = import_node_from_data_args()
        args.db_name = db_name
        args.config = config
        args.table = table
        args.safe_mode = safe_mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_import_node_from_data(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = import_node_from_data_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "import_node_from_data failed: unknown result")

    def import_edge_from_data(self, db_name, config, table, safe_mode):
        """
        Parameters:
         - db_name
         - config
         - table
         - safe_mode

        """
        self.send_import_edge_from_data(db_name, config, table, safe_mode)
        return self.recv_import_edge_from_data()

    def send_import_edge_from_data(self, db_name, config, table, safe_mode):
        self._oprot.writeMessageBegin('import_edge_from_data', TMessageType.CALL, self._seqid)
        args = import_edge_from_data_args()
        args.db_name = db_name
        args.config = config
        args.table = table
        args.safe_mode = safe_mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_import_edge_from_data(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = import_edge_from_data_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "import_edge_from_data failed: unknown result")

    def update_graph_schema(self, db_name, parameters):
        """
        Parameters:
         - db_name
         - parameters

        """
        self.send_update_graph_schema(db_name, parameters)
        return self.recv_update_graph_schema()

    def send_update_graph_schema(self, db_name, parameters):
        self._oprot.writeMessageBegin('update_graph_schema', TMessageType.CALL, self._seqid)
        args = update_graph_schema_args()
        args.db_name = db_name
        args.parameters = parameters
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_graph_schema(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_graph_schema_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_graph_schema failed: unknown result")

    def rebuild_adj_table(self, db_name):
        """
        Parameters:
         - db_name

        """
        self.send_rebuild_adj_table(db_name)
        return self.recv_rebuild_adj_table()

    def send_rebuild_adj_table(self, db_name):
        self._oprot.writeMessageBegin('rebuild_adj_table', TMessageType.CALL, self._seqid)
        args = rebuild_adj_table_args()
        args.db_name = db_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_rebuild_adj_table(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = rebuild_adj_table_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "rebuild_adj_table failed: unknown result")

    def start_transaction(self, db_name, level, timeout_seconds):
        """
        Parameters:
         - db_name
         - level
         - timeout_seconds

        """
        self.send_start_transaction(db_name, level, timeout_seconds)
        return self.recv_start_transaction()

    def send_start_transaction(self, db_name, level, timeout_seconds):
        self._oprot.writeMessageBegin('start_transaction', TMessageType.CALL, self._seqid)
        args = start_transaction_args()
        args.db_name = db_name
        args.level = level
        args.timeout_seconds = timeout_seconds
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_start_transaction(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = start_transaction_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "start_transaction failed: unknown result")

    def commit_transaction(self, db_name, transaction_id):
        """
        Parameters:
         - db_name
         - transaction_id

        """
        self.send_commit_transaction(db_name, transaction_id)
        return self.recv_commit_transaction()

    def send_commit_transaction(self, db_name, transaction_id):
        self._oprot.writeMessageBegin('commit_transaction', TMessageType.CALL, self._seqid)
        args = commit_transaction_args()
        args.db_name = db_name
        args.transaction_id = transaction_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_commit_transaction(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = commit_transaction_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "commit_transaction failed: unknown result")

    def rollback_transaction(self, db_name, transaction_id):
        """
        Parameters:
         - db_name
         - transaction_id

        """
        self.send_rollback_transaction(db_name, transaction_id)
        return self.recv_rollback_transaction()

    def send_rollback_transaction(self, db_name, transaction_id):
        self._oprot.writeMessageBegin('rollback_transaction', TMessageType.CALL, self._seqid)
        args = rollback_transaction_args()
        args.db_name = db_name
        args.transaction_id = transaction_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_rollback_transaction(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = rollback_transaction_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "rollback_transaction failed: unknown result")

    def stat_inout_degree(self, db_name, search_direction, top_k, is_desc):
        """
        Parameters:
         - db_name
         - search_direction
         - top_k
         - is_desc

        """
        self.send_stat_inout_degree(db_name, search_direction, top_k, is_desc)
        return self.recv_stat_inout_degree()

    def send_stat_inout_degree(self, db_name, search_direction, top_k, is_desc):
        self._oprot.writeMessageBegin('stat_inout_degree', TMessageType.CALL, self._seqid)
        args = stat_inout_degree_args()
        args.db_name = db_name
        args.search_direction = search_direction
        args.top_k = top_k
        args.is_desc = is_desc
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_stat_inout_degree(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = stat_inout_degree_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "stat_inout_degree failed: unknown result")

    def stat_graph_global_view(self, db_name):
        """
        Parameters:
         - db_name

        """
        self.send_stat_graph_global_view(db_name)
        return self.recv_stat_graph_global_view()

    def send_stat_graph_global_view(self, db_name):
        self._oprot.writeMessageBegin('stat_graph_global_view', TMessageType.CALL, self._seqid)
        args = stat_graph_global_view_args()
        args.db_name = db_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_stat_graph_global_view(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = stat_graph_global_view_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "stat_graph_global_view failed: unknown result")

    def refresh_connected_component_cache(self, db_name):
        """
        Parameters:
         - db_name

        """
        self.send_refresh_connected_component_cache(db_name)
        return self.recv_refresh_connected_component_cache()

    def send_refresh_connected_component_cache(self, db_name):
        self._oprot.writeMessageBegin('refresh_connected_component_cache', TMessageType.CALL, self._seqid)
        args = refresh_connected_component_cache_args()
        args.db_name = db_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_refresh_connected_component_cache(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = refresh_connected_component_cache_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "refresh_connected_component_cache failed: unknown result")

    def drop_connected_component_cache(self, db_name):
        """
        Parameters:
         - db_name

        """
        self.send_drop_connected_component_cache(db_name)
        return self.recv_drop_connected_component_cache()

    def send_drop_connected_component_cache(self, db_name):
        self._oprot.writeMessageBegin('drop_connected_component_cache', TMessageType.CALL, self._seqid)
        args = drop_connected_component_cache_args()
        args.db_name = db_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_drop_connected_component_cache(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = drop_connected_component_cache_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "drop_connected_component_cache failed: unknown result")

    def set_node_tag(self, db_name, tag, ids):
        """
        Parameters:
         - db_name
         - tag
         - ids

        """
        self.send_set_node_tag(db_name, tag, ids)
        return self.recv_set_node_tag()

    def send_set_node_tag(self, db_name, tag, ids):
        self._oprot.writeMessageBegin('set_node_tag', TMessageType.CALL, self._seqid)
        args = set_node_tag_args()
        args.db_name = db_name
        args.tag = tag
        args.ids = ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_node_tag(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_node_tag_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "set_node_tag failed: unknown result")

    def remove_node_tag(self, db_name, tags):
        """
        Parameters:
         - db_name
         - tags

        """
        self.send_remove_node_tag(db_name, tags)
        return self.recv_remove_node_tag()

    def send_remove_node_tag(self, db_name, tags):
        self._oprot.writeMessageBegin('remove_node_tag', TMessageType.CALL, self._seqid)
        args = remove_node_tag_args()
        args.db_name = db_name
        args.tags = tags
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove_node_tag(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_node_tag_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_node_tag failed: unknown result")

    def remove_node_tag_with_specific(self, db_name, id2tags):
        """
        Parameters:
         - db_name
         - id2tags

        """
        self.send_remove_node_tag_with_specific(db_name, id2tags)
        return self.recv_remove_node_tag_with_specific()

    def send_remove_node_tag_with_specific(self, db_name, id2tags):
        self._oprot.writeMessageBegin('remove_node_tag_with_specific', TMessageType.CALL, self._seqid)
        args = remove_node_tag_with_specific_args()
        args.db_name = db_name
        args.id2tags = id2tags
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove_node_tag_with_specific(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_node_tag_with_specific_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_node_tag_with_specific failed: unknown result")

    def view_node_tag(self, db_name):
        """
        Parameters:
         - db_name

        """
        self.send_view_node_tag(db_name)
        return self.recv_view_node_tag()

    def send_view_node_tag(self, db_name):
        self._oprot.writeMessageBegin('view_node_tag', TMessageType.CALL, self._seqid)
        args = view_node_tag_args()
        args.db_name = db_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_view_node_tag(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = view_node_tag_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "view_node_tag failed: unknown result")

    def get_node_tag_with_ids(self, db_name, ids):
        """
        Parameters:
         - db_name
         - ids

        """
        self.send_get_node_tag_with_ids(db_name, ids)
        return self.recv_get_node_tag_with_ids()

    def send_get_node_tag_with_ids(self, db_name, ids):
        self._oprot.writeMessageBegin('get_node_tag_with_ids', TMessageType.CALL, self._seqid)
        args = get_node_tag_with_ids_args()
        args.db_name = db_name
        args.ids = ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_node_tag_with_ids(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_node_tag_with_ids_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_node_tag_with_ids failed: unknown result")

    def get_node_tag_with_tags(self, db_name, tags, absolutely_equal):
        """
        Parameters:
         - db_name
         - tags
         - absolutely_equal

        """
        self.send_get_node_tag_with_tags(db_name, tags, absolutely_equal)
        return self.recv_get_node_tag_with_tags()

    def send_get_node_tag_with_tags(self, db_name, tags, absolutely_equal):
        self._oprot.writeMessageBegin('get_node_tag_with_tags', TMessageType.CALL, self._seqid)
        args = get_node_tag_with_tags_args()
        args.db_name = db_name
        args.tags = tags
        args.absolutely_equal = absolutely_equal
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_node_tag_with_tags(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_node_tag_with_tags_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_node_tag_with_tags failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["add_node"] = Processor.process_add_node
        self._processMap["add_or_update_node"] = Processor.process_add_or_update_node
        self._processMap["remove_node"] = Processor.process_remove_node
        self._processMap["remove_nodes"] = Processor.process_remove_nodes
        self._processMap["update_node"] = Processor.process_update_node
        self._processMap["update_node_with_id"] = Processor.process_update_node_with_id
        self._processMap["update_nodes"] = Processor.process_update_nodes
        self._processMap["update_nodes_with_ids"] = Processor.process_update_nodes_with_ids
        self._processMap["get_node"] = Processor.process_get_node
        self._processMap["get_node_with_id"] = Processor.process_get_node_with_id
        self._processMap["get_black_node_id"] = Processor.process_get_black_node_id
        self._processMap["get_nodes_with_ids"] = Processor.process_get_nodes_with_ids
        self._processMap["get_nodes_with_type"] = Processor.process_get_nodes_with_type
        self._processMap["get_nodes_with_prop_range"] = Processor.process_get_nodes_with_prop_range
        self._processMap["get_nodes_with_type_and_page"] = Processor.process_get_nodes_with_type_and_page
        self._processMap["get_nodes_with_props"] = Processor.process_get_nodes_with_props
        self._processMap["get_nodes_with_degree"] = Processor.process_get_nodes_with_degree
        self._processMap["get_node_index_by_id"] = Processor.process_get_node_index_by_id
        self._processMap["get_graph_all_node_size"] = Processor.process_get_graph_all_node_size
        self._processMap["get_graph_node_size"] = Processor.process_get_graph_node_size
        self._processMap["add_node_property"] = Processor.process_add_node_property
        self._processMap["remove_node_property"] = Processor.process_remove_node_property
        self._processMap["add_edge"] = Processor.process_add_edge
        self._processMap["add_edge_by_id"] = Processor.process_add_edge_by_id
        self._processMap["add_or_update_edge"] = Processor.process_add_or_update_edge
        self._processMap["add_or_update_edge_with_id"] = Processor.process_add_or_update_edge_with_id
        self._processMap["remove_edge"] = Processor.process_remove_edge
        self._processMap["remove_all_edge"] = Processor.process_remove_all_edge
        self._processMap["remove_all_edge_with_node_index"] = Processor.process_remove_all_edge_with_node_index
        self._processMap["update_edge"] = Processor.process_update_edge
        self._processMap["update_edge_with_id"] = Processor.process_update_edge_with_id
        self._processMap["update_edges"] = Processor.process_update_edges
        self._processMap["update_edges_with_ids"] = Processor.process_update_edges_with_ids
        self._processMap["get_edge"] = Processor.process_get_edge
        self._processMap["get_edge_with_basic_id"] = Processor.process_get_edge_with_basic_id
        self._processMap["get_edges_with_basic_ids"] = Processor.process_get_edges_with_basic_ids
        self._processMap["get_edges_with_props"] = Processor.process_get_edges_with_props
        self._processMap["get_all_edge"] = Processor.process_get_all_edge
        self._processMap["get_graph_all_edge_size"] = Processor.process_get_graph_all_edge_size
        self._processMap["get_graph_edge_size"] = Processor.process_get_graph_edge_size
        self._processMap["add_edge_property"] = Processor.process_add_edge_property
        self._processMap["remove_edge_property"] = Processor.process_remove_edge_property
        self._processMap["get_node_s_batch"] = Processor.process_get_node_s_batch
        self._processMap["get_basic_graph"] = Processor.process_get_basic_graph
        self._processMap["get_rel_graph"] = Processor.process_get_rel_graph
        self._processMap["create_node_type"] = Processor.process_create_node_type
        self._processMap["create_edge_type"] = Processor.process_create_edge_type
        self._processMap["create_single_edge_type"] = Processor.process_create_single_edge_type
        self._processMap["drop_node_type"] = Processor.process_drop_node_type
        self._processMap["drop_edge_type"] = Processor.process_drop_edge_type
        self._processMap["create_node_index"] = Processor.process_create_node_index
        self._processMap["create_edge_index"] = Processor.process_create_edge_index
        self._processMap["drop_node_index"] = Processor.process_drop_node_index
        self._processMap["drop_edge_index"] = Processor.process_drop_edge_index
        self._processMap["update_node_index"] = Processor.process_update_node_index
        self._processMap["update_edge_index"] = Processor.process_update_edge_index
        self._processMap["import_node_from_data"] = Processor.process_import_node_from_data
        self._processMap["import_edge_from_data"] = Processor.process_import_edge_from_data
        self._processMap["update_graph_schema"] = Processor.process_update_graph_schema
        self._processMap["rebuild_adj_table"] = Processor.process_rebuild_adj_table
        self._processMap["start_transaction"] = Processor.process_start_transaction
        self._processMap["commit_transaction"] = Processor.process_commit_transaction
        self._processMap["rollback_transaction"] = Processor.process_rollback_transaction
        self._processMap["stat_inout_degree"] = Processor.process_stat_inout_degree
        self._processMap["stat_graph_global_view"] = Processor.process_stat_graph_global_view
        self._processMap["refresh_connected_component_cache"] = Processor.process_refresh_connected_component_cache
        self._processMap["drop_connected_component_cache"] = Processor.process_drop_connected_component_cache
        self._processMap["set_node_tag"] = Processor.process_set_node_tag
        self._processMap["remove_node_tag"] = Processor.process_remove_node_tag
        self._processMap["remove_node_tag_with_specific"] = Processor.process_remove_node_tag_with_specific
        self._processMap["view_node_tag"] = Processor.process_view_node_tag
        self._processMap["get_node_tag_with_ids"] = Processor.process_get_node_tag_with_ids
        self._processMap["get_node_tag_with_tags"] = Processor.process_get_node_tag_with_tags
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_add_node(self, seqid, iprot, oprot):
        args = add_node_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_node_result()
        try:
            result.success = self._handler.add_node(args.db_name, args.node_type, args.node_props_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_node", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_or_update_node(self, seqid, iprot, oprot):
        args = add_or_update_node_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_or_update_node_result()
        try:
            result.success = self._handler.add_or_update_node(args.db_name, args.node_type, args.node_props_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_or_update_node", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove_node(self, seqid, iprot, oprot):
        args = remove_node_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_node_result()
        try:
            result.success = self._handler.remove_node(args.db_name, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove_node", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove_nodes(self, seqid, iprot, oprot):
        args = remove_nodes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_nodes_result()
        try:
            result.success = self._handler.remove_nodes(args.db_name, args.node_index_list, args.model)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove_nodes", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_node(self, seqid, iprot, oprot):
        args = update_node_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_node_result()
        try:
            result.success = self._handler.update_node(args.db_name, args.node_index, args.node_props)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_node", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_node_with_id(self, seqid, iprot, oprot):
        args = update_node_with_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_node_with_id_result()
        try:
            result.success = self._handler.update_node_with_id(args.db_name, args.id, args.node_props)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_node_with_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_nodes(self, seqid, iprot, oprot):
        args = update_nodes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_nodes_result()
        try:
            result.success = self._handler.update_nodes(args.db_name, args.node_index_list, args.node_props_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_nodes", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_nodes_with_ids(self, seqid, iprot, oprot):
        args = update_nodes_with_ids_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_nodes_with_ids_result()
        try:
            result.success = self._handler.update_nodes_with_ids(args.db_name, args.ids, args.node_props_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_nodes_with_ids", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_node(self, seqid, iprot, oprot):
        args = get_node_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_node_result()
        try:
            result.success = self._handler.get_node(args.db_name, args.node_index)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_node", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_node_with_id(self, seqid, iprot, oprot):
        args = get_node_with_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_node_with_id_result()
        try:
            result.success = self._handler.get_node_with_id(args.db_name, args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_node_with_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_black_node_id(self, seqid, iprot, oprot):
        args = get_black_node_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_black_node_id_result()
        try:
            result.success = self._handler.get_black_node_id(args.db_name, args.is_sorted)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_black_node_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_nodes_with_ids(self, seqid, iprot, oprot):
        args = get_nodes_with_ids_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_nodes_with_ids_result()
        try:
            result.success = self._handler.get_nodes_with_ids(args.db_name, args.ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_nodes_with_ids", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_nodes_with_type(self, seqid, iprot, oprot):
        args = get_nodes_with_type_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_nodes_with_type_result()
        try:
            result.success = self._handler.get_nodes_with_type(args.db_name, args.type)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_nodes_with_type", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_nodes_with_prop_range(self, seqid, iprot, oprot):
        args = get_nodes_with_prop_range_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_nodes_with_prop_range_result()
        try:
            result.success = self._handler.get_nodes_with_prop_range(args.db_name, args.type, args.prop_name, args.min_data, args.min_inclusive, args.max_data, args.max_inclusive)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_nodes_with_prop_range", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_nodes_with_type_and_page(self, seqid, iprot, oprot):
        args = get_nodes_with_type_and_page_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_nodes_with_type_and_page_result()
        try:
            result.success = self._handler.get_nodes_with_type_and_page(args.db_name, args.type, args.page_num, args.page_size)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_nodes_with_type_and_page", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_nodes_with_props(self, seqid, iprot, oprot):
        args = get_nodes_with_props_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_nodes_with_props_result()
        try:
            result.success = self._handler.get_nodes_with_props(args.db_name, args.type, args.props)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_nodes_with_props", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_nodes_with_degree(self, seqid, iprot, oprot):
        args = get_nodes_with_degree_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_nodes_with_degree_result()
        try:
            result.success = self._handler.get_nodes_with_degree(args.db_name, args.type_list, args.min_degree, args.max_degree, args.search_direction)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_nodes_with_degree", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_node_index_by_id(self, seqid, iprot, oprot):
        args = get_node_index_by_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_node_index_by_id_result()
        try:
            result.success = self._handler.get_node_index_by_id(args.db_name, args.ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_node_index_by_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_graph_all_node_size(self, seqid, iprot, oprot):
        args = get_graph_all_node_size_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_graph_all_node_size_result()
        try:
            result.success = self._handler.get_graph_all_node_size(args.db_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_graph_all_node_size", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_graph_node_size(self, seqid, iprot, oprot):
        args = get_graph_node_size_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_graph_node_size_result()
        try:
            result.success = self._handler.get_graph_node_size(args.db_name, args.node_type)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_graph_node_size", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_node_property(self, seqid, iprot, oprot):
        args = add_node_property_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_node_property_result()
        try:
            result.success = self._handler.add_node_property(args.db_name, args.node_type, args.name, args.type, args.default_value, args.cache_level)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_node_property", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove_node_property(self, seqid, iprot, oprot):
        args = remove_node_property_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_node_property_result()
        try:
            result.success = self._handler.remove_node_property(args.db_name, args.node_type, args.name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove_node_property", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_edge(self, seqid, iprot, oprot):
        args = add_edge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_edge_result()
        try:
            result.success = self._handler.add_edge(args.db_name, args.edge_type, args.src_node_index_list, args.dest_node_index_list, args.edge_props_list, args.model)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_edge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_edge_by_id(self, seqid, iprot, oprot):
        args = add_edge_by_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_edge_by_id_result()
        try:
            result.success = self._handler.add_edge_by_id(args.db_name, args.edge_type, args.src_node_id_list, args.dest_node_id_list, args.edge_props_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_edge_by_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_or_update_edge(self, seqid, iprot, oprot):
        args = add_or_update_edge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_or_update_edge_result()
        try:
            result.success = self._handler.add_or_update_edge(args.db_name, args.edge_type, args.src_node_index_list, args.dest_node_index_list, args.edge_props_list, args.model)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_or_update_edge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_or_update_edge_with_id(self, seqid, iprot, oprot):
        args = add_or_update_edge_with_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_or_update_edge_with_id_result()
        try:
            result.success = self._handler.add_or_update_edge_with_id(args.db_name, args.edge_type, args.src_node_id_list, args.dest_node_id_list, args.edge_props_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_or_update_edge_with_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove_edge(self, seqid, iprot, oprot):
        args = remove_edge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_edge_result()
        try:
            result.success = self._handler.remove_edge(args.db_name, args.edge_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove_edge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove_all_edge(self, seqid, iprot, oprot):
        args = remove_all_edge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_all_edge_result()
        try:
            result.success = self._handler.remove_all_edge(args.db_name, args.src_node_id, args.dest_node_id, args.type)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove_all_edge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove_all_edge_with_node_index(self, seqid, iprot, oprot):
        args = remove_all_edge_with_node_index_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_all_edge_with_node_index_result()
        try:
            result.success = self._handler.remove_all_edge_with_node_index(args.db_name, args.src_node_index_list, args.dest_node_index_list, args.type_list, args.model)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove_all_edge_with_node_index", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_edge(self, seqid, iprot, oprot):
        args = update_edge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_edge_result()
        try:
            result.success = self._handler.update_edge(args.db_name, args.edge_index, args.edge_props)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_edge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_edge_with_id(self, seqid, iprot, oprot):
        args = update_edge_with_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_edge_with_id_result()
        try:
            result.success = self._handler.update_edge_with_id(args.db_name, args.edge_id, args.edge_props)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_edge_with_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_edges(self, seqid, iprot, oprot):
        args = update_edges_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_edges_result()
        try:
            result.success = self._handler.update_edges(args.db_name, args.edge_index_list, args.edge_props_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_edges", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_edges_with_ids(self, seqid, iprot, oprot):
        args = update_edges_with_ids_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_edges_with_ids_result()
        try:
            result.success = self._handler.update_edges_with_ids(args.db_name, args.edge_id_list, args.edge_props_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_edges_with_ids", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_edge(self, seqid, iprot, oprot):
        args = get_edge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_edge_result()
        try:
            result.success = self._handler.get_edge(args.db_name, args.edge_index)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_edge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_edge_with_basic_id(self, seqid, iprot, oprot):
        args = get_edge_with_basic_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_edge_with_basic_id_result()
        try:
            result.success = self._handler.get_edge_with_basic_id(args.db_name, args.edge_basic_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_edge_with_basic_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_edges_with_basic_ids(self, seqid, iprot, oprot):
        args = get_edges_with_basic_ids_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_edges_with_basic_ids_result()
        try:
            result.success = self._handler.get_edges_with_basic_ids(args.db_name, args.edge_basic_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_edges_with_basic_ids", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_edges_with_props(self, seqid, iprot, oprot):
        args = get_edges_with_props_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_edges_with_props_result()
        try:
            result.success = self._handler.get_edges_with_props(args.db_name, args.type, args.props)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_edges_with_props", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_all_edge(self, seqid, iprot, oprot):
        args = get_all_edge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_all_edge_result()
        try:
            result.success = self._handler.get_all_edge(args.db_name, args.src_node_id, args.dest_node_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_all_edge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_graph_all_edge_size(self, seqid, iprot, oprot):
        args = get_graph_all_edge_size_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_graph_all_edge_size_result()
        try:
            result.success = self._handler.get_graph_all_edge_size(args.db_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_graph_all_edge_size", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_graph_edge_size(self, seqid, iprot, oprot):
        args = get_graph_edge_size_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_graph_edge_size_result()
        try:
            result.success = self._handler.get_graph_edge_size(args.db_name, args.edge_type)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_graph_edge_size", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_edge_property(self, seqid, iprot, oprot):
        args = add_edge_property_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_edge_property_result()
        try:
            result.success = self._handler.add_edge_property(args.db_name, args.edge_type, args.name, args.type, args.default_value, args.cache_level)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_edge_property", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove_edge_property(self, seqid, iprot, oprot):
        args = remove_edge_property_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_edge_property_result()
        try:
            result.success = self._handler.remove_edge_property(args.db_name, args.edge_type, args.name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove_edge_property", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_node_s_batch(self, seqid, iprot, oprot):
        args = get_node_s_batch_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_node_s_batch_result()
        try:
            result.success = self._handler.get_node_s_batch(args.db_name, args.src_id, args.count)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_node_s_batch", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_basic_graph(self, seqid, iprot, oprot):
        args = get_basic_graph_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_basic_graph_result()
        try:
            result.success = self._handler.get_basic_graph(args.db_name, args.src_id, args.count, args.src_ids, args.if_order)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_basic_graph", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_rel_graph(self, seqid, iprot, oprot):
        args = get_rel_graph_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_rel_graph_result()
        try:
            result.success = self._handler.get_rel_graph(args.db_name, args.src_id, args.count, args.src_ids, args.if_order)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_rel_graph", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_node_type(self, seqid, iprot, oprot):
        args = create_node_type_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_node_type_result()
        try:
            result.success = self._handler.create_node_type(args.db_name, args.node_type, args.indexes, args.props)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_node_type", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_edge_type(self, seqid, iprot, oprot):
        args = create_edge_type_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_edge_type_result()
        try:
            result.success = self._handler.create_edge_type(args.db_name, args.edge_type, args.indexes, args.props)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_edge_type", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_single_edge_type(self, seqid, iprot, oprot):
        args = create_single_edge_type_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_single_edge_type_result()
        try:
            result.success = self._handler.create_single_edge_type(args.db_name, args.edge_type, args.indexes, args.props, args.single_mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_single_edge_type", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_drop_node_type(self, seqid, iprot, oprot):
        args = drop_node_type_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = drop_node_type_result()
        try:
            result.success = self._handler.drop_node_type(args.db_name, args.node_type)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("drop_node_type", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_drop_edge_type(self, seqid, iprot, oprot):
        args = drop_edge_type_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = drop_edge_type_result()
        try:
            result.success = self._handler.drop_edge_type(args.db_name, args.edge_type)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("drop_edge_type", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_node_index(self, seqid, iprot, oprot):
        args = create_node_index_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_node_index_result()
        try:
            result.success = self._handler.create_node_index(args.db_name, args.node_type, args.index)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_node_index", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_edge_index(self, seqid, iprot, oprot):
        args = create_edge_index_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_edge_index_result()
        try:
            result.success = self._handler.create_edge_index(args.db_name, args.edge_type, args.index)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_edge_index", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_drop_node_index(self, seqid, iprot, oprot):
        args = drop_node_index_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = drop_node_index_result()
        try:
            result.success = self._handler.drop_node_index(args.db_name, args.node_type, args.index_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("drop_node_index", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_drop_edge_index(self, seqid, iprot, oprot):
        args = drop_edge_index_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = drop_edge_index_result()
        try:
            result.success = self._handler.drop_edge_index(args.db_name, args.edge_type, args.index_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("drop_edge_index", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_node_index(self, seqid, iprot, oprot):
        args = update_node_index_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_node_index_result()
        try:
            result.success = self._handler.update_node_index(args.db_name, args.node_type, args.index)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_node_index", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_edge_index(self, seqid, iprot, oprot):
        args = update_edge_index_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_edge_index_result()
        try:
            result.success = self._handler.update_edge_index(args.db_name, args.edge_type, args.index)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_edge_index", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_import_node_from_data(self, seqid, iprot, oprot):
        args = import_node_from_data_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = import_node_from_data_result()
        try:
            result.success = self._handler.import_node_from_data(args.db_name, args.config, args.table, args.safe_mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("import_node_from_data", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_import_edge_from_data(self, seqid, iprot, oprot):
        args = import_edge_from_data_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = import_edge_from_data_result()
        try:
            result.success = self._handler.import_edge_from_data(args.db_name, args.config, args.table, args.safe_mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("import_edge_from_data", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_graph_schema(self, seqid, iprot, oprot):
        args = update_graph_schema_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_graph_schema_result()
        try:
            result.success = self._handler.update_graph_schema(args.db_name, args.parameters)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_graph_schema", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_rebuild_adj_table(self, seqid, iprot, oprot):
        args = rebuild_adj_table_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = rebuild_adj_table_result()
        try:
            result.success = self._handler.rebuild_adj_table(args.db_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("rebuild_adj_table", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_start_transaction(self, seqid, iprot, oprot):
        args = start_transaction_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = start_transaction_result()
        try:
            result.success = self._handler.start_transaction(args.db_name, args.level, args.timeout_seconds)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("start_transaction", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_commit_transaction(self, seqid, iprot, oprot):
        args = commit_transaction_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = commit_transaction_result()
        try:
            result.success = self._handler.commit_transaction(args.db_name, args.transaction_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("commit_transaction", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_rollback_transaction(self, seqid, iprot, oprot):
        args = rollback_transaction_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = rollback_transaction_result()
        try:
            result.success = self._handler.rollback_transaction(args.db_name, args.transaction_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("rollback_transaction", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_stat_inout_degree(self, seqid, iprot, oprot):
        args = stat_inout_degree_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = stat_inout_degree_result()
        try:
            result.success = self._handler.stat_inout_degree(args.db_name, args.search_direction, args.top_k, args.is_desc)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("stat_inout_degree", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_stat_graph_global_view(self, seqid, iprot, oprot):
        args = stat_graph_global_view_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = stat_graph_global_view_result()
        try:
            result.success = self._handler.stat_graph_global_view(args.db_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("stat_graph_global_view", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_refresh_connected_component_cache(self, seqid, iprot, oprot):
        args = refresh_connected_component_cache_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = refresh_connected_component_cache_result()
        try:
            result.success = self._handler.refresh_connected_component_cache(args.db_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("refresh_connected_component_cache", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_drop_connected_component_cache(self, seqid, iprot, oprot):
        args = drop_connected_component_cache_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = drop_connected_component_cache_result()
        try:
            result.success = self._handler.drop_connected_component_cache(args.db_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("drop_connected_component_cache", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_node_tag(self, seqid, iprot, oprot):
        args = set_node_tag_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_node_tag_result()
        try:
            result.success = self._handler.set_node_tag(args.db_name, args.tag, args.ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_node_tag", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove_node_tag(self, seqid, iprot, oprot):
        args = remove_node_tag_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_node_tag_result()
        try:
            result.success = self._handler.remove_node_tag(args.db_name, args.tags)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove_node_tag", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove_node_tag_with_specific(self, seqid, iprot, oprot):
        args = remove_node_tag_with_specific_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_node_tag_with_specific_result()
        try:
            result.success = self._handler.remove_node_tag_with_specific(args.db_name, args.id2tags)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove_node_tag_with_specific", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_view_node_tag(self, seqid, iprot, oprot):
        args = view_node_tag_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = view_node_tag_result()
        try:
            result.success = self._handler.view_node_tag(args.db_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("view_node_tag", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_node_tag_with_ids(self, seqid, iprot, oprot):
        args = get_node_tag_with_ids_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_node_tag_with_ids_result()
        try:
            result.success = self._handler.get_node_tag_with_ids(args.db_name, args.ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_node_tag_with_ids", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_node_tag_with_tags(self, seqid, iprot, oprot):
        args = get_node_tag_with_tags_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_node_tag_with_tags_result()
        try:
            result.success = self._handler.get_node_tag_with_tags(args.db_name, args.tags, args.absolutely_equal)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ezoocommon.ttypes.ezoo_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_node_tag_with_tags", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class add_node_args(object):
    """
    Attributes:
     - db_name
     - node_type
     - node_props_list

    """


    def __init__(self, db_name=None, node_type=None, node_props_list=None,):
        self.db_name = db_name
        self.node_type = node_type
        self.node_props_list = node_props_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.node_props_list = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = {}
                        (_ktype7, _vtype8, _size6) = iprot.readMapBegin()
                        for _i10 in range(_size6):
                            _key11 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val12 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem5[_key11] = _val12
                        iprot.readMapEnd()
                        self.node_props_list.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_node_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_type is not None:
            oprot.writeFieldBegin('node_type', TType.STRING, 2)
            oprot.writeString(self.node_type.encode('utf-8') if sys.version_info[0] == 2 else self.node_type)
            oprot.writeFieldEnd()
        if self.node_props_list is not None:
            oprot.writeFieldBegin('node_props_list', TType.LIST, 3)
            oprot.writeListBegin(TType.MAP, len(self.node_props_list))
            for iter13 in self.node_props_list:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter13))
                for kiter14, viter15 in iter13.items():
                    oprot.writeString(kiter14.encode('utf-8') if sys.version_info[0] == 2 else kiter14)
                    oprot.writeString(viter15.encode('utf-8') if sys.version_info[0] == 2 else viter15)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_node_args)
add_node_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_type', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'node_props_list', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 3
)


class add_node_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.add_node_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_node_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_node_result)
add_node_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.add_node_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class add_or_update_node_args(object):
    """
    Attributes:
     - db_name
     - node_type
     - node_props_list

    """


    def __init__(self, db_name=None, node_type=None, node_props_list=None,):
        self.db_name = db_name
        self.node_type = node_type
        self.node_props_list = node_props_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.node_props_list = []
                    (_etype19, _size16) = iprot.readListBegin()
                    for _i20 in range(_size16):
                        _elem21 = {}
                        (_ktype23, _vtype24, _size22) = iprot.readMapBegin()
                        for _i26 in range(_size22):
                            _key27 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val28 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem21[_key27] = _val28
                        iprot.readMapEnd()
                        self.node_props_list.append(_elem21)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_or_update_node_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_type is not None:
            oprot.writeFieldBegin('node_type', TType.STRING, 2)
            oprot.writeString(self.node_type.encode('utf-8') if sys.version_info[0] == 2 else self.node_type)
            oprot.writeFieldEnd()
        if self.node_props_list is not None:
            oprot.writeFieldBegin('node_props_list', TType.LIST, 3)
            oprot.writeListBegin(TType.MAP, len(self.node_props_list))
            for iter29 in self.node_props_list:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter29))
                for kiter30, viter31 in iter29.items():
                    oprot.writeString(kiter30.encode('utf-8') if sys.version_info[0] == 2 else kiter30)
                    oprot.writeString(viter31.encode('utf-8') if sys.version_info[0] == 2 else viter31)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_or_update_node_args)
add_or_update_node_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_type', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'node_props_list', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 3
)


class add_or_update_node_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.add_node_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_or_update_node_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_or_update_node_result)
add_or_update_node_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.add_node_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class remove_node_args(object):
    """
    Attributes:
     - db_name
     - id

    """


    def __init__(self, db_name=None, id=None,):
        self.db_name = db_name
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_node_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 2)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_node_args)
remove_node_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'id', None, None, ),  # 2
)


class remove_node_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_node_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_node_result)
remove_node_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class remove_nodes_args(object):
    """
    Attributes:
     - db_name
     - node_index_list
     - model

    """


    def __init__(self, db_name=None, node_index_list=None, model=None,):
        self.db_name = db_name
        self.node_index_list = node_index_list
        self.model = model

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.node_index_list = []
                    (_etype35, _size32) = iprot.readListBegin()
                    for _i36 in range(_size32):
                        _elem37 = ezoocommon.ttypes.node_index()
                        _elem37.read(iprot)
                        self.node_index_list.append(_elem37)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.model = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_nodes_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_index_list is not None:
            oprot.writeFieldBegin('node_index_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.node_index_list))
            for iter38 in self.node_index_list:
                iter38.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.I32, 3)
            oprot.writeI32(self.model)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_nodes_args)
remove_nodes_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'node_index_list', (TType.STRUCT, [ezoocommon.ttypes.node_index, None], False), None, ),  # 2
    (3, TType.I32, 'model', None, None, ),  # 3
)


class remove_nodes_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.remove_node_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_nodes_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_nodes_result)
remove_nodes_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.remove_node_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class update_node_args(object):
    """
    Attributes:
     - db_name
     - node_index
     - node_props

    """


    def __init__(self, db_name=None, node_index=None, node_props=None,):
        self.db_name = db_name
        self.node_index = node_index
        self.node_props = node_props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.node_index = ezoocommon.ttypes.node_index()
                    self.node_index.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.node_props = {}
                    (_ktype40, _vtype41, _size39) = iprot.readMapBegin()
                    for _i43 in range(_size39):
                        _key44 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val45 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.node_props[_key44] = _val45
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_node_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_index is not None:
            oprot.writeFieldBegin('node_index', TType.STRUCT, 2)
            self.node_index.write(oprot)
            oprot.writeFieldEnd()
        if self.node_props is not None:
            oprot.writeFieldBegin('node_props', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.node_props))
            for kiter46, viter47 in self.node_props.items():
                oprot.writeString(kiter46.encode('utf-8') if sys.version_info[0] == 2 else kiter46)
                oprot.writeString(viter47.encode('utf-8') if sys.version_info[0] == 2 else viter47)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_node_args)
update_node_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'node_index', [ezoocommon.ttypes.node_index, None], None, ),  # 2
    (3, TType.MAP, 'node_props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)


class update_node_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.update_node_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_node_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_node_result)
update_node_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.update_node_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class update_node_with_id_args(object):
    """
    Attributes:
     - db_name
     - id
     - node_props

    """


    def __init__(self, db_name=None, id=None, node_props=None,):
        self.db_name = db_name
        self.id = id
        self.node_props = node_props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.node_props = {}
                    (_ktype49, _vtype50, _size48) = iprot.readMapBegin()
                    for _i52 in range(_size48):
                        _key53 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val54 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.node_props[_key53] = _val54
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_node_with_id_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 2)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.node_props is not None:
            oprot.writeFieldBegin('node_props', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.node_props))
            for kiter55, viter56 in self.node_props.items():
                oprot.writeString(kiter55.encode('utf-8') if sys.version_info[0] == 2 else kiter55)
                oprot.writeString(viter56.encode('utf-8') if sys.version_info[0] == 2 else viter56)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_node_with_id_args)
update_node_with_id_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'id', None, None, ),  # 2
    (3, TType.MAP, 'node_props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)


class update_node_with_id_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.update_node_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_node_with_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_node_with_id_result)
update_node_with_id_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.update_node_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class update_nodes_args(object):
    """
    Attributes:
     - db_name
     - node_index_list
     - node_props_list

    """


    def __init__(self, db_name=None, node_index_list=None, node_props_list=None,):
        self.db_name = db_name
        self.node_index_list = node_index_list
        self.node_props_list = node_props_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.node_index_list = []
                    (_etype60, _size57) = iprot.readListBegin()
                    for _i61 in range(_size57):
                        _elem62 = ezoocommon.ttypes.node_index()
                        _elem62.read(iprot)
                        self.node_index_list.append(_elem62)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.node_props_list = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = {}
                        (_ktype70, _vtype71, _size69) = iprot.readMapBegin()
                        for _i73 in range(_size69):
                            _key74 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val75 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem68[_key74] = _val75
                        iprot.readMapEnd()
                        self.node_props_list.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_nodes_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_index_list is not None:
            oprot.writeFieldBegin('node_index_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.node_index_list))
            for iter76 in self.node_index_list:
                iter76.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.node_props_list is not None:
            oprot.writeFieldBegin('node_props_list', TType.LIST, 3)
            oprot.writeListBegin(TType.MAP, len(self.node_props_list))
            for iter77 in self.node_props_list:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter77))
                for kiter78, viter79 in iter77.items():
                    oprot.writeString(kiter78.encode('utf-8') if sys.version_info[0] == 2 else kiter78)
                    oprot.writeString(viter79.encode('utf-8') if sys.version_info[0] == 2 else viter79)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_nodes_args)
update_nodes_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'node_index_list', (TType.STRUCT, [ezoocommon.ttypes.node_index, None], False), None, ),  # 2
    (3, TType.LIST, 'node_props_list', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 3
)


class update_nodes_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.update_nodes_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_nodes_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_nodes_result)
update_nodes_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.update_nodes_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class update_nodes_with_ids_args(object):
    """
    Attributes:
     - db_name
     - ids
     - node_props_list

    """


    def __init__(self, db_name=None, ids=None, node_props_list=None,):
        self.db_name = db_name
        self.ids = ids
        self.node_props_list = node_props_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ids = []
                    (_etype83, _size80) = iprot.readListBegin()
                    for _i84 in range(_size80):
                        _elem85 = iprot.readI32()
                        self.ids.append(_elem85)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.node_props_list = []
                    (_etype89, _size86) = iprot.readListBegin()
                    for _i90 in range(_size86):
                        _elem91 = {}
                        (_ktype93, _vtype94, _size92) = iprot.readMapBegin()
                        for _i96 in range(_size92):
                            _key97 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val98 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem91[_key97] = _val98
                        iprot.readMapEnd()
                        self.node_props_list.append(_elem91)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_nodes_with_ids_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.ids is not None:
            oprot.writeFieldBegin('ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.ids))
            for iter99 in self.ids:
                oprot.writeI32(iter99)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.node_props_list is not None:
            oprot.writeFieldBegin('node_props_list', TType.LIST, 3)
            oprot.writeListBegin(TType.MAP, len(self.node_props_list))
            for iter100 in self.node_props_list:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter100))
                for kiter101, viter102 in iter100.items():
                    oprot.writeString(kiter101.encode('utf-8') if sys.version_info[0] == 2 else kiter101)
                    oprot.writeString(viter102.encode('utf-8') if sys.version_info[0] == 2 else viter102)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_nodes_with_ids_args)
update_nodes_with_ids_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'node_props_list', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 3
)


class update_nodes_with_ids_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.update_nodes_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_nodes_with_ids_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_nodes_with_ids_result)
update_nodes_with_ids_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.update_nodes_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_node_args(object):
    """
    Attributes:
     - db_name
     - node_index

    """


    def __init__(self, db_name=None, node_index=None,):
        self.db_name = db_name
        self.node_index = node_index

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.node_index = ezoocommon.ttypes.node_index()
                    self.node_index.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_node_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_index is not None:
            oprot.writeFieldBegin('node_index', TType.STRUCT, 2)
            self.node_index.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_node_args)
get_node_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'node_index', [ezoocommon.ttypes.node_index, None], None, ),  # 2
)


class get_node_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.node_s()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_node_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_node_result)
get_node_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.node_s, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_node_with_id_args(object):
    """
    Attributes:
     - db_name
     - id

    """


    def __init__(self, db_name=None, id=None,):
        self.db_name = db_name
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_node_with_id_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 2)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_node_with_id_args)
get_node_with_id_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'id', None, None, ),  # 2
)


class get_node_with_id_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.node_s()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_node_with_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_node_with_id_result)
get_node_with_id_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.node_s, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_black_node_id_args(object):
    """
    Attributes:
     - db_name
     - is_sorted

    """


    def __init__(self, db_name=None, is_sorted=None,):
        self.db_name = db_name
        self.is_sorted = is_sorted

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.is_sorted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_black_node_id_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.is_sorted is not None:
            oprot.writeFieldBegin('is_sorted', TType.BOOL, 2)
            oprot.writeBool(self.is_sorted)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_black_node_id_args)
get_black_node_id_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'is_sorted', None, None, ),  # 2
)


class get_black_node_id_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.node_id_list()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_black_node_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_black_node_id_result)
get_black_node_id_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.node_id_list, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_nodes_with_ids_args(object):
    """
    Attributes:
     - db_name
     - ids

    """


    def __init__(self, db_name=None, ids=None,):
        self.db_name = db_name
        self.ids = ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ids = []
                    (_etype106, _size103) = iprot.readListBegin()
                    for _i107 in range(_size103):
                        _elem108 = iprot.readI32()
                        self.ids.append(_elem108)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_nodes_with_ids_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.ids is not None:
            oprot.writeFieldBegin('ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.ids))
            for iter109 in self.ids:
                oprot.writeI32(iter109)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_nodes_with_ids_args)
get_nodes_with_ids_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'ids', (TType.I32, None, False), None, ),  # 2
)


class get_nodes_with_ids_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.nodes_s()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_nodes_with_ids_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_nodes_with_ids_result)
get_nodes_with_ids_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.nodes_s, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_nodes_with_type_args(object):
    """
    Attributes:
     - db_name
     - type

    """


    def __init__(self, db_name=None, type=None,):
        self.db_name = db_name
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_nodes_with_type_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_nodes_with_type_args)
get_nodes_with_type_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
)


class get_nodes_with_type_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.nodes_s()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_nodes_with_type_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_nodes_with_type_result)
get_nodes_with_type_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.nodes_s, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_nodes_with_prop_range_args(object):
    """
    Attributes:
     - db_name
     - type
     - prop_name
     - min_data
     - min_inclusive
     - max_data
     - max_inclusive

    """


    def __init__(self, db_name=None, type=None, prop_name=None, min_data=None, min_inclusive=None, max_data=None, max_inclusive=None,):
        self.db_name = db_name
        self.type = type
        self.prop_name = prop_name
        self.min_data = min_data
        self.min_inclusive = min_inclusive
        self.max_data = max_data
        self.max_inclusive = max_inclusive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.prop_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.min_data = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.min_inclusive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.max_data = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.max_inclusive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_nodes_with_prop_range_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.prop_name is not None:
            oprot.writeFieldBegin('prop_name', TType.STRING, 3)
            oprot.writeString(self.prop_name.encode('utf-8') if sys.version_info[0] == 2 else self.prop_name)
            oprot.writeFieldEnd()
        if self.min_data is not None:
            oprot.writeFieldBegin('min_data', TType.STRING, 4)
            oprot.writeString(self.min_data.encode('utf-8') if sys.version_info[0] == 2 else self.min_data)
            oprot.writeFieldEnd()
        if self.min_inclusive is not None:
            oprot.writeFieldBegin('min_inclusive', TType.BOOL, 5)
            oprot.writeBool(self.min_inclusive)
            oprot.writeFieldEnd()
        if self.max_data is not None:
            oprot.writeFieldBegin('max_data', TType.STRING, 6)
            oprot.writeString(self.max_data.encode('utf-8') if sys.version_info[0] == 2 else self.max_data)
            oprot.writeFieldEnd()
        if self.max_inclusive is not None:
            oprot.writeFieldBegin('max_inclusive', TType.BOOL, 7)
            oprot.writeBool(self.max_inclusive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_nodes_with_prop_range_args)
get_nodes_with_prop_range_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'prop_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'min_data', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'min_inclusive', None, None, ),  # 5
    (6, TType.STRING, 'max_data', 'UTF8', None, ),  # 6
    (7, TType.BOOL, 'max_inclusive', None, None, ),  # 7
)


class get_nodes_with_prop_range_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.nodes_s()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_nodes_with_prop_range_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_nodes_with_prop_range_result)
get_nodes_with_prop_range_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.nodes_s, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_nodes_with_type_and_page_args(object):
    """
    Attributes:
     - db_name
     - type
     - page_num
     - page_size

    """


    def __init__(self, db_name=None, type=None, page_num=None, page_size=None,):
        self.db_name = db_name
        self.type = type
        self.page_num = page_num
        self.page_size = page_size

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.page_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.page_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_nodes_with_type_and_page_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.page_num is not None:
            oprot.writeFieldBegin('page_num', TType.I32, 3)
            oprot.writeI32(self.page_num)
            oprot.writeFieldEnd()
        if self.page_size is not None:
            oprot.writeFieldBegin('page_size', TType.I32, 4)
            oprot.writeI32(self.page_size)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_nodes_with_type_and_page_args)
get_nodes_with_type_and_page_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.I32, 'page_num', None, None, ),  # 3
    (4, TType.I32, 'page_size', None, None, ),  # 4
)


class get_nodes_with_type_and_page_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.nodes_s()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_nodes_with_type_and_page_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_nodes_with_type_and_page_result)
get_nodes_with_type_and_page_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.nodes_s, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_nodes_with_props_args(object):
    """
    Attributes:
     - db_name
     - type
     - props

    """


    def __init__(self, db_name=None, type=None, props=None,):
        self.db_name = db_name
        self.type = type
        self.props = props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.props = []
                    (_etype113, _size110) = iprot.readListBegin()
                    for _i114 in range(_size110):
                        _elem115 = {}
                        (_ktype117, _vtype118, _size116) = iprot.readMapBegin()
                        for _i120 in range(_size116):
                            _key121 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val122 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem115[_key121] = _val122
                        iprot.readMapEnd()
                        self.props.append(_elem115)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_nodes_with_props_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.LIST, 3)
            oprot.writeListBegin(TType.MAP, len(self.props))
            for iter123 in self.props:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter123))
                for kiter124, viter125 in iter123.items():
                    oprot.writeString(kiter124.encode('utf-8') if sys.version_info[0] == 2 else kiter124)
                    oprot.writeString(viter125.encode('utf-8') if sys.version_info[0] == 2 else viter125)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_nodes_with_props_args)
get_nodes_with_props_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'props', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 3
)


class get_nodes_with_props_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.nodes_s()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_nodes_with_props_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_nodes_with_props_result)
get_nodes_with_props_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.nodes_s, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_nodes_with_degree_args(object):
    """
    Attributes:
     - db_name
     - type_list
     - min_degree
     - max_degree
     - search_direction

    """


    def __init__(self, db_name=None, type_list=None, min_degree=None, max_degree=None, search_direction=None,):
        self.db_name = db_name
        self.type_list = type_list
        self.min_degree = min_degree
        self.max_degree = max_degree
        self.search_direction = search_direction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.type_list = []
                    (_etype129, _size126) = iprot.readListBegin()
                    for _i130 in range(_size126):
                        _elem131 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.type_list.append(_elem131)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.min_degree = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.max_degree = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.search_direction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_nodes_with_degree_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.type_list is not None:
            oprot.writeFieldBegin('type_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.type_list))
            for iter132 in self.type_list:
                oprot.writeString(iter132.encode('utf-8') if sys.version_info[0] == 2 else iter132)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.min_degree is not None:
            oprot.writeFieldBegin('min_degree', TType.I32, 3)
            oprot.writeI32(self.min_degree)
            oprot.writeFieldEnd()
        if self.max_degree is not None:
            oprot.writeFieldBegin('max_degree', TType.I32, 4)
            oprot.writeI32(self.max_degree)
            oprot.writeFieldEnd()
        if self.search_direction is not None:
            oprot.writeFieldBegin('search_direction', TType.I32, 5)
            oprot.writeI32(self.search_direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_nodes_with_degree_args)
get_nodes_with_degree_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'type_list', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I32, 'min_degree', None, None, ),  # 3
    (4, TType.I32, 'max_degree', None, None, ),  # 4
    (5, TType.I32, 'search_direction', None, None, ),  # 5
)


class get_nodes_with_degree_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.nodes_s()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_nodes_with_degree_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_nodes_with_degree_result)
get_nodes_with_degree_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.nodes_s, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_node_index_by_id_args(object):
    """
    Attributes:
     - db_name
     - ids

    """


    def __init__(self, db_name=None, ids=None,):
        self.db_name = db_name
        self.ids = ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ids = []
                    (_etype136, _size133) = iprot.readListBegin()
                    for _i137 in range(_size133):
                        _elem138 = iprot.readI32()
                        self.ids.append(_elem138)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_node_index_by_id_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.ids is not None:
            oprot.writeFieldBegin('ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.ids))
            for iter139 in self.ids:
                oprot.writeI32(iter139)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_node_index_by_id_args)
get_node_index_by_id_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'ids', (TType.I32, None, False), None, ),  # 2
)


class get_node_index_by_id_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.node_index_list()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_node_index_by_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_node_index_by_id_result)
get_node_index_by_id_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.node_index_list, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_graph_all_node_size_args(object):
    """
    Attributes:
     - db_name

    """


    def __init__(self, db_name=None,):
        self.db_name = db_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_graph_all_node_size_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_graph_all_node_size_args)
get_graph_all_node_size_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
)


class get_graph_all_node_size_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.graph_node_size()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_graph_all_node_size_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_graph_all_node_size_result)
get_graph_all_node_size_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.graph_node_size, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_graph_node_size_args(object):
    """
    Attributes:
     - db_name
     - node_type

    """


    def __init__(self, db_name=None, node_type=None,):
        self.db_name = db_name
        self.node_type = node_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_graph_node_size_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_type is not None:
            oprot.writeFieldBegin('node_type', TType.STRING, 2)
            oprot.writeString(self.node_type.encode('utf-8') if sys.version_info[0] == 2 else self.node_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_graph_node_size_args)
get_graph_node_size_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_type', 'UTF8', None, ),  # 2
)


class get_graph_node_size_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.graph_node_size()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_graph_node_size_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_graph_node_size_result)
get_graph_node_size_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.graph_node_size, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class add_node_property_args(object):
    """
    Attributes:
     - db_name
     - node_type
     - name
     - type
     - default_value
     - cache_level

    """


    def __init__(self, db_name=None, node_type=None, name=None, type=None, default_value=None, cache_level=None,):
        self.db_name = db_name
        self.node_type = node_type
        self.name = name
        self.type = type
        self.default_value = default_value
        self.cache_level = cache_level

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.default_value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.cache_level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_node_property_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_type is not None:
            oprot.writeFieldBegin('node_type', TType.STRING, 2)
            oprot.writeString(self.node_type.encode('utf-8') if sys.version_info[0] == 2 else self.node_type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 4)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.default_value is not None:
            oprot.writeFieldBegin('default_value', TType.STRING, 5)
            oprot.writeString(self.default_value.encode('utf-8') if sys.version_info[0] == 2 else self.default_value)
            oprot.writeFieldEnd()
        if self.cache_level is not None:
            oprot.writeFieldBegin('cache_level', TType.I32, 6)
            oprot.writeI32(self.cache_level)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_node_property_args)
add_node_property_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'type', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'default_value', 'UTF8', None, ),  # 5
    (6, TType.I32, 'cache_level', None, None, ),  # 6
)


class add_node_property_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_node_property_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_node_property_result)
add_node_property_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class remove_node_property_args(object):
    """
    Attributes:
     - db_name
     - node_type
     - name

    """


    def __init__(self, db_name=None, node_type=None, name=None,):
        self.db_name = db_name
        self.node_type = node_type
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_node_property_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_type is not None:
            oprot.writeFieldBegin('node_type', TType.STRING, 2)
            oprot.writeString(self.node_type.encode('utf-8') if sys.version_info[0] == 2 else self.node_type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_node_property_args)
remove_node_property_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
)


class remove_node_property_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_node_property_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_node_property_result)
remove_node_property_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class add_edge_args(object):
    """
    Attributes:
     - db_name
     - edge_type
     - src_node_index_list
     - dest_node_index_list
     - edge_props_list
     - model

    """


    def __init__(self, db_name=None, edge_type=None, src_node_index_list=None, dest_node_index_list=None, edge_props_list=None, model=None,):
        self.db_name = db_name
        self.edge_type = edge_type
        self.src_node_index_list = src_node_index_list
        self.dest_node_index_list = dest_node_index_list
        self.edge_props_list = edge_props_list
        self.model = model

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.src_node_index_list = []
                    (_etype143, _size140) = iprot.readListBegin()
                    for _i144 in range(_size140):
                        _elem145 = ezoocommon.ttypes.node_index()
                        _elem145.read(iprot)
                        self.src_node_index_list.append(_elem145)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.dest_node_index_list = []
                    (_etype149, _size146) = iprot.readListBegin()
                    for _i150 in range(_size146):
                        _elem151 = ezoocommon.ttypes.node_index()
                        _elem151.read(iprot)
                        self.dest_node_index_list.append(_elem151)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.edge_props_list = []
                    (_etype155, _size152) = iprot.readListBegin()
                    for _i156 in range(_size152):
                        _elem157 = {}
                        (_ktype159, _vtype160, _size158) = iprot.readMapBegin()
                        for _i162 in range(_size158):
                            _key163 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val164 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem157[_key163] = _val164
                        iprot.readMapEnd()
                        self.edge_props_list.append(_elem157)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.model = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_edge_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 2)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        if self.src_node_index_list is not None:
            oprot.writeFieldBegin('src_node_index_list', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.src_node_index_list))
            for iter165 in self.src_node_index_list:
                iter165.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dest_node_index_list is not None:
            oprot.writeFieldBegin('dest_node_index_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.dest_node_index_list))
            for iter166 in self.dest_node_index_list:
                iter166.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_props_list is not None:
            oprot.writeFieldBegin('edge_props_list', TType.LIST, 5)
            oprot.writeListBegin(TType.MAP, len(self.edge_props_list))
            for iter167 in self.edge_props_list:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter167))
                for kiter168, viter169 in iter167.items():
                    oprot.writeString(kiter168.encode('utf-8') if sys.version_info[0] == 2 else kiter168)
                    oprot.writeString(viter169.encode('utf-8') if sys.version_info[0] == 2 else viter169)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.I32, 6)
            oprot.writeI32(self.model)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_edge_args)
add_edge_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edge_type', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'src_node_index_list', (TType.STRUCT, [ezoocommon.ttypes.node_index, None], False), None, ),  # 3
    (4, TType.LIST, 'dest_node_index_list', (TType.STRUCT, [ezoocommon.ttypes.node_index, None], False), None, ),  # 4
    (5, TType.LIST, 'edge_props_list', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 5
    (6, TType.I32, 'model', None, None, ),  # 6
)


class add_edge_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.add_edge_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_edge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_edge_result)
add_edge_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.add_edge_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class add_edge_by_id_args(object):
    """
    Attributes:
     - db_name
     - edge_type
     - src_node_id_list
     - dest_node_id_list
     - edge_props_list

    """


    def __init__(self, db_name=None, edge_type=None, src_node_id_list=None, dest_node_id_list=None, edge_props_list=None,):
        self.db_name = db_name
        self.edge_type = edge_type
        self.src_node_id_list = src_node_id_list
        self.dest_node_id_list = dest_node_id_list
        self.edge_props_list = edge_props_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.src_node_id_list = []
                    (_etype173, _size170) = iprot.readListBegin()
                    for _i174 in range(_size170):
                        _elem175 = iprot.readI32()
                        self.src_node_id_list.append(_elem175)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.dest_node_id_list = []
                    (_etype179, _size176) = iprot.readListBegin()
                    for _i180 in range(_size176):
                        _elem181 = iprot.readI32()
                        self.dest_node_id_list.append(_elem181)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.edge_props_list = []
                    (_etype185, _size182) = iprot.readListBegin()
                    for _i186 in range(_size182):
                        _elem187 = {}
                        (_ktype189, _vtype190, _size188) = iprot.readMapBegin()
                        for _i192 in range(_size188):
                            _key193 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val194 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem187[_key193] = _val194
                        iprot.readMapEnd()
                        self.edge_props_list.append(_elem187)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_edge_by_id_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 2)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        if self.src_node_id_list is not None:
            oprot.writeFieldBegin('src_node_id_list', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.src_node_id_list))
            for iter195 in self.src_node_id_list:
                oprot.writeI32(iter195)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dest_node_id_list is not None:
            oprot.writeFieldBegin('dest_node_id_list', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.dest_node_id_list))
            for iter196 in self.dest_node_id_list:
                oprot.writeI32(iter196)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_props_list is not None:
            oprot.writeFieldBegin('edge_props_list', TType.LIST, 5)
            oprot.writeListBegin(TType.MAP, len(self.edge_props_list))
            for iter197 in self.edge_props_list:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter197))
                for kiter198, viter199 in iter197.items():
                    oprot.writeString(kiter198.encode('utf-8') if sys.version_info[0] == 2 else kiter198)
                    oprot.writeString(viter199.encode('utf-8') if sys.version_info[0] == 2 else viter199)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_edge_by_id_args)
add_edge_by_id_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edge_type', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'src_node_id_list', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'dest_node_id_list', (TType.I32, None, False), None, ),  # 4
    (5, TType.LIST, 'edge_props_list', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 5
)


class add_edge_by_id_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.add_edge_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_edge_by_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_edge_by_id_result)
add_edge_by_id_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.add_edge_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class add_or_update_edge_args(object):
    """
    Attributes:
     - db_name
     - edge_type
     - src_node_index_list
     - dest_node_index_list
     - edge_props_list
     - model

    """


    def __init__(self, db_name=None, edge_type=None, src_node_index_list=None, dest_node_index_list=None, edge_props_list=None, model=None,):
        self.db_name = db_name
        self.edge_type = edge_type
        self.src_node_index_list = src_node_index_list
        self.dest_node_index_list = dest_node_index_list
        self.edge_props_list = edge_props_list
        self.model = model

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.src_node_index_list = []
                    (_etype203, _size200) = iprot.readListBegin()
                    for _i204 in range(_size200):
                        _elem205 = ezoocommon.ttypes.node_index()
                        _elem205.read(iprot)
                        self.src_node_index_list.append(_elem205)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.dest_node_index_list = []
                    (_etype209, _size206) = iprot.readListBegin()
                    for _i210 in range(_size206):
                        _elem211 = ezoocommon.ttypes.node_index()
                        _elem211.read(iprot)
                        self.dest_node_index_list.append(_elem211)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.edge_props_list = []
                    (_etype215, _size212) = iprot.readListBegin()
                    for _i216 in range(_size212):
                        _elem217 = {}
                        (_ktype219, _vtype220, _size218) = iprot.readMapBegin()
                        for _i222 in range(_size218):
                            _key223 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val224 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem217[_key223] = _val224
                        iprot.readMapEnd()
                        self.edge_props_list.append(_elem217)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.model = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_or_update_edge_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 2)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        if self.src_node_index_list is not None:
            oprot.writeFieldBegin('src_node_index_list', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.src_node_index_list))
            for iter225 in self.src_node_index_list:
                iter225.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dest_node_index_list is not None:
            oprot.writeFieldBegin('dest_node_index_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.dest_node_index_list))
            for iter226 in self.dest_node_index_list:
                iter226.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_props_list is not None:
            oprot.writeFieldBegin('edge_props_list', TType.LIST, 5)
            oprot.writeListBegin(TType.MAP, len(self.edge_props_list))
            for iter227 in self.edge_props_list:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter227))
                for kiter228, viter229 in iter227.items():
                    oprot.writeString(kiter228.encode('utf-8') if sys.version_info[0] == 2 else kiter228)
                    oprot.writeString(viter229.encode('utf-8') if sys.version_info[0] == 2 else viter229)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.I32, 6)
            oprot.writeI32(self.model)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_or_update_edge_args)
add_or_update_edge_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edge_type', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'src_node_index_list', (TType.STRUCT, [ezoocommon.ttypes.node_index, None], False), None, ),  # 3
    (4, TType.LIST, 'dest_node_index_list', (TType.STRUCT, [ezoocommon.ttypes.node_index, None], False), None, ),  # 4
    (5, TType.LIST, 'edge_props_list', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 5
    (6, TType.I32, 'model', None, None, ),  # 6
)


class add_or_update_edge_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.add_edge_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_or_update_edge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_or_update_edge_result)
add_or_update_edge_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.add_edge_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class add_or_update_edge_with_id_args(object):
    """
    Attributes:
     - db_name
     - edge_type
     - src_node_id_list
     - dest_node_id_list
     - edge_props_list

    """


    def __init__(self, db_name=None, edge_type=None, src_node_id_list=None, dest_node_id_list=None, edge_props_list=None,):
        self.db_name = db_name
        self.edge_type = edge_type
        self.src_node_id_list = src_node_id_list
        self.dest_node_id_list = dest_node_id_list
        self.edge_props_list = edge_props_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.src_node_id_list = []
                    (_etype233, _size230) = iprot.readListBegin()
                    for _i234 in range(_size230):
                        _elem235 = iprot.readI32()
                        self.src_node_id_list.append(_elem235)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.dest_node_id_list = []
                    (_etype239, _size236) = iprot.readListBegin()
                    for _i240 in range(_size236):
                        _elem241 = iprot.readI32()
                        self.dest_node_id_list.append(_elem241)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.edge_props_list = []
                    (_etype245, _size242) = iprot.readListBegin()
                    for _i246 in range(_size242):
                        _elem247 = {}
                        (_ktype249, _vtype250, _size248) = iprot.readMapBegin()
                        for _i252 in range(_size248):
                            _key253 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val254 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem247[_key253] = _val254
                        iprot.readMapEnd()
                        self.edge_props_list.append(_elem247)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_or_update_edge_with_id_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 2)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        if self.src_node_id_list is not None:
            oprot.writeFieldBegin('src_node_id_list', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.src_node_id_list))
            for iter255 in self.src_node_id_list:
                oprot.writeI32(iter255)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dest_node_id_list is not None:
            oprot.writeFieldBegin('dest_node_id_list', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.dest_node_id_list))
            for iter256 in self.dest_node_id_list:
                oprot.writeI32(iter256)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_props_list is not None:
            oprot.writeFieldBegin('edge_props_list', TType.LIST, 5)
            oprot.writeListBegin(TType.MAP, len(self.edge_props_list))
            for iter257 in self.edge_props_list:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter257))
                for kiter258, viter259 in iter257.items():
                    oprot.writeString(kiter258.encode('utf-8') if sys.version_info[0] == 2 else kiter258)
                    oprot.writeString(viter259.encode('utf-8') if sys.version_info[0] == 2 else viter259)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_or_update_edge_with_id_args)
add_or_update_edge_with_id_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edge_type', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'src_node_id_list', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'dest_node_id_list', (TType.I32, None, False), None, ),  # 4
    (5, TType.LIST, 'edge_props_list', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 5
)


class add_or_update_edge_with_id_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.add_edge_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_or_update_edge_with_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_or_update_edge_with_id_result)
add_or_update_edge_with_id_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.add_edge_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class remove_edge_args(object):
    """
    Attributes:
     - db_name
     - edge_id

    """


    def __init__(self, db_name=None, edge_id=None,):
        self.db_name = db_name
        self.edge_id = edge_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.edge_id = ezoocommon.ttypes.edge_basic_id()
                    self.edge_id.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_edge_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_id is not None:
            oprot.writeFieldBegin('edge_id', TType.STRUCT, 2)
            self.edge_id.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_edge_args)
remove_edge_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'edge_id', [ezoocommon.ttypes.edge_basic_id, None], None, ),  # 2
)


class remove_edge_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_edge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_edge_result)
remove_edge_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class remove_all_edge_args(object):
    """
    Attributes:
     - db_name
     - src_node_id
     - dest_node_id
     - type

    """


    def __init__(self, db_name=None, src_node_id=None, dest_node_id=None, type=None,):
        self.db_name = db_name
        self.src_node_id = src_node_id
        self.dest_node_id = dest_node_id
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.src_node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.dest_node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_all_edge_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.src_node_id is not None:
            oprot.writeFieldBegin('src_node_id', TType.I32, 2)
            oprot.writeI32(self.src_node_id)
            oprot.writeFieldEnd()
        if self.dest_node_id is not None:
            oprot.writeFieldBegin('dest_node_id', TType.I32, 3)
            oprot.writeI32(self.dest_node_id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 4)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_all_edge_args)
remove_all_edge_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'src_node_id', None, None, ),  # 2
    (3, TType.I32, 'dest_node_id', None, None, ),  # 3
    (4, TType.STRING, 'type', 'UTF8', None, ),  # 4
)


class remove_all_edge_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_all_edge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_all_edge_result)
remove_all_edge_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class remove_all_edge_with_node_index_args(object):
    """
    Attributes:
     - db_name
     - src_node_index_list
     - dest_node_index_list
     - type_list
     - model

    """


    def __init__(self, db_name=None, src_node_index_list=None, dest_node_index_list=None, type_list=None, model=None,):
        self.db_name = db_name
        self.src_node_index_list = src_node_index_list
        self.dest_node_index_list = dest_node_index_list
        self.type_list = type_list
        self.model = model

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.src_node_index_list = []
                    (_etype263, _size260) = iprot.readListBegin()
                    for _i264 in range(_size260):
                        _elem265 = ezoocommon.ttypes.node_index()
                        _elem265.read(iprot)
                        self.src_node_index_list.append(_elem265)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.dest_node_index_list = []
                    (_etype269, _size266) = iprot.readListBegin()
                    for _i270 in range(_size266):
                        _elem271 = ezoocommon.ttypes.node_index()
                        _elem271.read(iprot)
                        self.dest_node_index_list.append(_elem271)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.type_list = []
                    (_etype275, _size272) = iprot.readListBegin()
                    for _i276 in range(_size272):
                        _elem277 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.type_list.append(_elem277)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.model = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_all_edge_with_node_index_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.src_node_index_list is not None:
            oprot.writeFieldBegin('src_node_index_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.src_node_index_list))
            for iter278 in self.src_node_index_list:
                iter278.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dest_node_index_list is not None:
            oprot.writeFieldBegin('dest_node_index_list', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.dest_node_index_list))
            for iter279 in self.dest_node_index_list:
                iter279.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.type_list is not None:
            oprot.writeFieldBegin('type_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.type_list))
            for iter280 in self.type_list:
                oprot.writeString(iter280.encode('utf-8') if sys.version_info[0] == 2 else iter280)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.I32, 5)
            oprot.writeI32(self.model)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_all_edge_with_node_index_args)
remove_all_edge_with_node_index_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'src_node_index_list', (TType.STRUCT, [ezoocommon.ttypes.node_index, None], False), None, ),  # 2
    (3, TType.LIST, 'dest_node_index_list', (TType.STRUCT, [ezoocommon.ttypes.node_index, None], False), None, ),  # 3
    (4, TType.LIST, 'type_list', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.I32, 'model', None, None, ),  # 5
)


class remove_all_edge_with_node_index_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.remove_edge_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_all_edge_with_node_index_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_all_edge_with_node_index_result)
remove_all_edge_with_node_index_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.remove_edge_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class update_edge_args(object):
    """
    Attributes:
     - db_name
     - edge_index
     - edge_props

    """


    def __init__(self, db_name=None, edge_index=None, edge_props=None,):
        self.db_name = db_name
        self.edge_index = edge_index
        self.edge_props = edge_props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.edge_index = ezoocommon.ttypes.edge_index()
                    self.edge_index.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.edge_props = {}
                    (_ktype282, _vtype283, _size281) = iprot.readMapBegin()
                    for _i285 in range(_size281):
                        _key286 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val287 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.edge_props[_key286] = _val287
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_edge_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_index is not None:
            oprot.writeFieldBegin('edge_index', TType.STRUCT, 2)
            self.edge_index.write(oprot)
            oprot.writeFieldEnd()
        if self.edge_props is not None:
            oprot.writeFieldBegin('edge_props', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.edge_props))
            for kiter288, viter289 in self.edge_props.items():
                oprot.writeString(kiter288.encode('utf-8') if sys.version_info[0] == 2 else kiter288)
                oprot.writeString(viter289.encode('utf-8') if sys.version_info[0] == 2 else viter289)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_edge_args)
update_edge_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'edge_index', [ezoocommon.ttypes.edge_index, None], None, ),  # 2
    (3, TType.MAP, 'edge_props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)


class update_edge_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.update_edge_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_edge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_edge_result)
update_edge_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.update_edge_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class update_edge_with_id_args(object):
    """
    Attributes:
     - db_name
     - edge_id
     - edge_props

    """


    def __init__(self, db_name=None, edge_id=None, edge_props=None,):
        self.db_name = db_name
        self.edge_id = edge_id
        self.edge_props = edge_props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.edge_id = ezoocommon.ttypes.edge_basic_id()
                    self.edge_id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.edge_props = {}
                    (_ktype291, _vtype292, _size290) = iprot.readMapBegin()
                    for _i294 in range(_size290):
                        _key295 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val296 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.edge_props[_key295] = _val296
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_edge_with_id_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_id is not None:
            oprot.writeFieldBegin('edge_id', TType.STRUCT, 2)
            self.edge_id.write(oprot)
            oprot.writeFieldEnd()
        if self.edge_props is not None:
            oprot.writeFieldBegin('edge_props', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.edge_props))
            for kiter297, viter298 in self.edge_props.items():
                oprot.writeString(kiter297.encode('utf-8') if sys.version_info[0] == 2 else kiter297)
                oprot.writeString(viter298.encode('utf-8') if sys.version_info[0] == 2 else viter298)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_edge_with_id_args)
update_edge_with_id_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'edge_id', [ezoocommon.ttypes.edge_basic_id, None], None, ),  # 2
    (3, TType.MAP, 'edge_props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)


class update_edge_with_id_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.update_edge_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_edge_with_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_edge_with_id_result)
update_edge_with_id_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.update_edge_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class update_edges_args(object):
    """
    Attributes:
     - db_name
     - edge_index_list
     - edge_props_list

    """


    def __init__(self, db_name=None, edge_index_list=None, edge_props_list=None,):
        self.db_name = db_name
        self.edge_index_list = edge_index_list
        self.edge_props_list = edge_props_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.edge_index_list = []
                    (_etype302, _size299) = iprot.readListBegin()
                    for _i303 in range(_size299):
                        _elem304 = ezoocommon.ttypes.edge_index()
                        _elem304.read(iprot)
                        self.edge_index_list.append(_elem304)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.edge_props_list = []
                    (_etype308, _size305) = iprot.readListBegin()
                    for _i309 in range(_size305):
                        _elem310 = {}
                        (_ktype312, _vtype313, _size311) = iprot.readMapBegin()
                        for _i315 in range(_size311):
                            _key316 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val317 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem310[_key316] = _val317
                        iprot.readMapEnd()
                        self.edge_props_list.append(_elem310)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_edges_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_index_list is not None:
            oprot.writeFieldBegin('edge_index_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.edge_index_list))
            for iter318 in self.edge_index_list:
                iter318.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_props_list is not None:
            oprot.writeFieldBegin('edge_props_list', TType.LIST, 3)
            oprot.writeListBegin(TType.MAP, len(self.edge_props_list))
            for iter319 in self.edge_props_list:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter319))
                for kiter320, viter321 in iter319.items():
                    oprot.writeString(kiter320.encode('utf-8') if sys.version_info[0] == 2 else kiter320)
                    oprot.writeString(viter321.encode('utf-8') if sys.version_info[0] == 2 else viter321)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_edges_args)
update_edges_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'edge_index_list', (TType.STRUCT, [ezoocommon.ttypes.edge_index, None], False), None, ),  # 2
    (3, TType.LIST, 'edge_props_list', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 3
)


class update_edges_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.update_edges_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_edges_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_edges_result)
update_edges_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.update_edges_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class update_edges_with_ids_args(object):
    """
    Attributes:
     - db_name
     - edge_id_list
     - edge_props_list

    """


    def __init__(self, db_name=None, edge_id_list=None, edge_props_list=None,):
        self.db_name = db_name
        self.edge_id_list = edge_id_list
        self.edge_props_list = edge_props_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.edge_id_list = []
                    (_etype325, _size322) = iprot.readListBegin()
                    for _i326 in range(_size322):
                        _elem327 = ezoocommon.ttypes.edge_basic_id()
                        _elem327.read(iprot)
                        self.edge_id_list.append(_elem327)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.edge_props_list = []
                    (_etype331, _size328) = iprot.readListBegin()
                    for _i332 in range(_size328):
                        _elem333 = {}
                        (_ktype335, _vtype336, _size334) = iprot.readMapBegin()
                        for _i338 in range(_size334):
                            _key339 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val340 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem333[_key339] = _val340
                        iprot.readMapEnd()
                        self.edge_props_list.append(_elem333)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_edges_with_ids_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_id_list is not None:
            oprot.writeFieldBegin('edge_id_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.edge_id_list))
            for iter341 in self.edge_id_list:
                iter341.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_props_list is not None:
            oprot.writeFieldBegin('edge_props_list', TType.LIST, 3)
            oprot.writeListBegin(TType.MAP, len(self.edge_props_list))
            for iter342 in self.edge_props_list:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter342))
                for kiter343, viter344 in iter342.items():
                    oprot.writeString(kiter343.encode('utf-8') if sys.version_info[0] == 2 else kiter343)
                    oprot.writeString(viter344.encode('utf-8') if sys.version_info[0] == 2 else viter344)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_edges_with_ids_args)
update_edges_with_ids_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'edge_id_list', (TType.STRUCT, [ezoocommon.ttypes.edge_basic_id, None], False), None, ),  # 2
    (3, TType.LIST, 'edge_props_list', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 3
)


class update_edges_with_ids_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.update_edges_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_edges_with_ids_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_edges_with_ids_result)
update_edges_with_ids_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.update_edges_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_edge_args(object):
    """
    Attributes:
     - db_name
     - edge_index

    """


    def __init__(self, db_name=None, edge_index=None,):
        self.db_name = db_name
        self.edge_index = edge_index

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.edge_index = ezoocommon.ttypes.edge_index()
                    self.edge_index.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_edge_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_index is not None:
            oprot.writeFieldBegin('edge_index', TType.STRUCT, 2)
            self.edge_index.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_edge_args)
get_edge_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'edge_index', [ezoocommon.ttypes.edge_index, None], None, ),  # 2
)


class get_edge_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.edge_s()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_edge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_edge_result)
get_edge_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.edge_s, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_edge_with_basic_id_args(object):
    """
    Attributes:
     - db_name
     - edge_basic_id

    """


    def __init__(self, db_name=None, edge_basic_id=None,):
        self.db_name = db_name
        self.edge_basic_id = edge_basic_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.edge_basic_id = ezoocommon.ttypes.edge_basic_id()
                    self.edge_basic_id.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_edge_with_basic_id_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_basic_id is not None:
            oprot.writeFieldBegin('edge_basic_id', TType.STRUCT, 2)
            self.edge_basic_id.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_edge_with_basic_id_args)
get_edge_with_basic_id_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'edge_basic_id', [ezoocommon.ttypes.edge_basic_id, None], None, ),  # 2
)


class get_edge_with_basic_id_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.edge_s()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_edge_with_basic_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_edge_with_basic_id_result)
get_edge_with_basic_id_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.edge_s, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_edges_with_basic_ids_args(object):
    """
    Attributes:
     - db_name
     - edge_basic_ids

    """


    def __init__(self, db_name=None, edge_basic_ids=None,):
        self.db_name = db_name
        self.edge_basic_ids = edge_basic_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.edge_basic_ids = []
                    (_etype348, _size345) = iprot.readListBegin()
                    for _i349 in range(_size345):
                        _elem350 = ezoocommon.ttypes.edge_basic_id()
                        _elem350.read(iprot)
                        self.edge_basic_ids.append(_elem350)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_edges_with_basic_ids_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_basic_ids is not None:
            oprot.writeFieldBegin('edge_basic_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.edge_basic_ids))
            for iter351 in self.edge_basic_ids:
                iter351.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_edges_with_basic_ids_args)
get_edges_with_basic_ids_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'edge_basic_ids', (TType.STRUCT, [ezoocommon.ttypes.edge_basic_id, None], False), None, ),  # 2
)


class get_edges_with_basic_ids_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.edges_s()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_edges_with_basic_ids_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_edges_with_basic_ids_result)
get_edges_with_basic_ids_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.edges_s, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_edges_with_props_args(object):
    """
    Attributes:
     - db_name
     - type
     - props

    """


    def __init__(self, db_name=None, type=None, props=None,):
        self.db_name = db_name
        self.type = type
        self.props = props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.props = []
                    (_etype355, _size352) = iprot.readListBegin()
                    for _i356 in range(_size352):
                        _elem357 = {}
                        (_ktype359, _vtype360, _size358) = iprot.readMapBegin()
                        for _i362 in range(_size358):
                            _key363 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val364 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem357[_key363] = _val364
                        iprot.readMapEnd()
                        self.props.append(_elem357)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_edges_with_props_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.LIST, 3)
            oprot.writeListBegin(TType.MAP, len(self.props))
            for iter365 in self.props:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter365))
                for kiter366, viter367 in iter365.items():
                    oprot.writeString(kiter366.encode('utf-8') if sys.version_info[0] == 2 else kiter366)
                    oprot.writeString(viter367.encode('utf-8') if sys.version_info[0] == 2 else viter367)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_edges_with_props_args)
get_edges_with_props_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'props', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 3
)


class get_edges_with_props_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.edges_s()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_edges_with_props_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_edges_with_props_result)
get_edges_with_props_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.edges_s, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_all_edge_args(object):
    """
    Attributes:
     - db_name
     - src_node_id
     - dest_node_id

    """


    def __init__(self, db_name=None, src_node_id=None, dest_node_id=None,):
        self.db_name = db_name
        self.src_node_id = src_node_id
        self.dest_node_id = dest_node_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.src_node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.dest_node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_all_edge_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.src_node_id is not None:
            oprot.writeFieldBegin('src_node_id', TType.I32, 2)
            oprot.writeI32(self.src_node_id)
            oprot.writeFieldEnd()
        if self.dest_node_id is not None:
            oprot.writeFieldBegin('dest_node_id', TType.I32, 3)
            oprot.writeI32(self.dest_node_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_all_edge_args)
get_all_edge_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'src_node_id', None, None, ),  # 2
    (3, TType.I32, 'dest_node_id', None, None, ),  # 3
)


class get_all_edge_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.all_edge()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_all_edge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_all_edge_result)
get_all_edge_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.all_edge, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_graph_all_edge_size_args(object):
    """
    Attributes:
     - db_name

    """


    def __init__(self, db_name=None,):
        self.db_name = db_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_graph_all_edge_size_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_graph_all_edge_size_args)
get_graph_all_edge_size_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
)


class get_graph_all_edge_size_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.graph_edge_size()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_graph_all_edge_size_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_graph_all_edge_size_result)
get_graph_all_edge_size_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.graph_edge_size, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_graph_edge_size_args(object):
    """
    Attributes:
     - db_name
     - edge_type

    """


    def __init__(self, db_name=None, edge_type=None,):
        self.db_name = db_name
        self.edge_type = edge_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_graph_edge_size_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 2)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_graph_edge_size_args)
get_graph_edge_size_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edge_type', 'UTF8', None, ),  # 2
)


class get_graph_edge_size_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.graph_edge_size()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_graph_edge_size_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_graph_edge_size_result)
get_graph_edge_size_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.graph_edge_size, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class add_edge_property_args(object):
    """
    Attributes:
     - db_name
     - edge_type
     - name
     - type
     - default_value
     - cache_level

    """


    def __init__(self, db_name=None, edge_type=None, name=None, type=None, default_value=None, cache_level=None,):
        self.db_name = db_name
        self.edge_type = edge_type
        self.name = name
        self.type = type
        self.default_value = default_value
        self.cache_level = cache_level

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.default_value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.cache_level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_edge_property_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 2)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 4)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.default_value is not None:
            oprot.writeFieldBegin('default_value', TType.STRING, 5)
            oprot.writeString(self.default_value.encode('utf-8') if sys.version_info[0] == 2 else self.default_value)
            oprot.writeFieldEnd()
        if self.cache_level is not None:
            oprot.writeFieldBegin('cache_level', TType.I32, 6)
            oprot.writeI32(self.cache_level)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_edge_property_args)
add_edge_property_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edge_type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'type', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'default_value', 'UTF8', None, ),  # 5
    (6, TType.I32, 'cache_level', None, None, ),  # 6
)


class add_edge_property_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_edge_property_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_edge_property_result)
add_edge_property_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class remove_edge_property_args(object):
    """
    Attributes:
     - db_name
     - edge_type
     - name

    """


    def __init__(self, db_name=None, edge_type=None, name=None,):
        self.db_name = db_name
        self.edge_type = edge_type
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_edge_property_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 2)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_edge_property_args)
remove_edge_property_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edge_type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
)


class remove_edge_property_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_edge_property_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_edge_property_result)
remove_edge_property_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_node_s_batch_args(object):
    """
    Attributes:
     - db_name
     - src_id
     - count

    """


    def __init__(self, db_name=None, src_id=None, count=None,):
        self.db_name = db_name
        self.src_id = src_id
        self.count = count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.src_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_node_s_batch_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.src_id is not None:
            oprot.writeFieldBegin('src_id', TType.I32, 2)
            oprot.writeI32(self.src_id)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 3)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_node_s_batch_args)
get_node_s_batch_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'src_id', None, None, ),  # 2
    (3, TType.I32, 'count', None, None, ),  # 3
)


class get_node_s_batch_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.node_list()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_node_s_batch_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_node_s_batch_result)
get_node_s_batch_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.node_list, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_basic_graph_args(object):
    """
    Attributes:
     - db_name
     - src_id
     - count
     - src_ids
     - if_order

    """


    def __init__(self, db_name=None, src_id=None, count=None, src_ids=None, if_order=None,):
        self.db_name = db_name
        self.src_id = src_id
        self.count = count
        self.src_ids = src_ids
        self.if_order = if_order

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.src_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.src_ids = []
                    (_etype371, _size368) = iprot.readListBegin()
                    for _i372 in range(_size368):
                        _elem373 = iprot.readI32()
                        self.src_ids.append(_elem373)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.if_order = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_basic_graph_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.src_id is not None:
            oprot.writeFieldBegin('src_id', TType.I32, 2)
            oprot.writeI32(self.src_id)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 3)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.src_ids is not None:
            oprot.writeFieldBegin('src_ids', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.src_ids))
            for iter374 in self.src_ids:
                oprot.writeI32(iter374)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.if_order is not None:
            oprot.writeFieldBegin('if_order', TType.BOOL, 5)
            oprot.writeBool(self.if_order)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_basic_graph_args)
get_basic_graph_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'src_id', None, None, ),  # 2
    (3, TType.I32, 'count', None, None, ),  # 3
    (4, TType.LIST, 'src_ids', (TType.I32, None, False), None, ),  # 4
    (5, TType.BOOL, 'if_order', None, None, ),  # 5
)


class get_basic_graph_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.return_graph()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_basic_graph_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_basic_graph_result)
get_basic_graph_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.return_graph, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_rel_graph_args(object):
    """
    Attributes:
     - db_name
     - src_id
     - count
     - src_ids
     - if_order

    """


    def __init__(self, db_name=None, src_id=None, count=None, src_ids=None, if_order=None,):
        self.db_name = db_name
        self.src_id = src_id
        self.count = count
        self.src_ids = src_ids
        self.if_order = if_order

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.src_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.src_ids = []
                    (_etype378, _size375) = iprot.readListBegin()
                    for _i379 in range(_size375):
                        _elem380 = iprot.readI32()
                        self.src_ids.append(_elem380)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.if_order = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_rel_graph_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.src_id is not None:
            oprot.writeFieldBegin('src_id', TType.I32, 2)
            oprot.writeI32(self.src_id)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 3)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.src_ids is not None:
            oprot.writeFieldBegin('src_ids', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.src_ids))
            for iter381 in self.src_ids:
                oprot.writeI32(iter381)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.if_order is not None:
            oprot.writeFieldBegin('if_order', TType.BOOL, 5)
            oprot.writeBool(self.if_order)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_rel_graph_args)
get_rel_graph_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'src_id', None, None, ),  # 2
    (3, TType.I32, 'count', None, None, ),  # 3
    (4, TType.LIST, 'src_ids', (TType.I32, None, False), None, ),  # 4
    (5, TType.BOOL, 'if_order', None, None, ),  # 5
)


class get_rel_graph_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.return_graph()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_rel_graph_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_rel_graph_result)
get_rel_graph_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.return_graph, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class create_node_type_args(object):
    """
    Attributes:
     - db_name
     - node_type
     - indexes
     - props

    """


    def __init__(self, db_name=None, node_type=None, indexes=None, props=None,):
        self.db_name = db_name
        self.node_type = node_type
        self.indexes = indexes
        self.props = props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.indexes = []
                    (_etype385, _size382) = iprot.readListBegin()
                    for _i386 in range(_size382):
                        _elem387 = ezootypes.ttypes.index()
                        _elem387.read(iprot)
                        self.indexes.append(_elem387)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.props = []
                    (_etype391, _size388) = iprot.readListBegin()
                    for _i392 in range(_size388):
                        _elem393 = {}
                        (_ktype395, _vtype396, _size394) = iprot.readMapBegin()
                        for _i398 in range(_size394):
                            _key399 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val400 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem393[_key399] = _val400
                        iprot.readMapEnd()
                        self.props.append(_elem393)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_node_type_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_type is not None:
            oprot.writeFieldBegin('node_type', TType.STRING, 2)
            oprot.writeString(self.node_type.encode('utf-8') if sys.version_info[0] == 2 else self.node_type)
            oprot.writeFieldEnd()
        if self.indexes is not None:
            oprot.writeFieldBegin('indexes', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.indexes))
            for iter401 in self.indexes:
                iter401.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.LIST, 4)
            oprot.writeListBegin(TType.MAP, len(self.props))
            for iter402 in self.props:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter402))
                for kiter403, viter404 in iter402.items():
                    oprot.writeString(kiter403.encode('utf-8') if sys.version_info[0] == 2 else kiter403)
                    oprot.writeString(viter404.encode('utf-8') if sys.version_info[0] == 2 else viter404)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_node_type_args)
create_node_type_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_type', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'indexes', (TType.STRUCT, [ezootypes.ttypes.index, None], False), None, ),  # 3
    (4, TType.LIST, 'props', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 4
)


class create_node_type_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_node_type_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_node_type_result)
create_node_type_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class create_edge_type_args(object):
    """
    Attributes:
     - db_name
     - edge_type
     - indexes
     - props

    """


    def __init__(self, db_name=None, edge_type=None, indexes=None, props=None,):
        self.db_name = db_name
        self.edge_type = edge_type
        self.indexes = indexes
        self.props = props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.indexes = []
                    (_etype408, _size405) = iprot.readListBegin()
                    for _i409 in range(_size405):
                        _elem410 = ezootypes.ttypes.index()
                        _elem410.read(iprot)
                        self.indexes.append(_elem410)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.props = []
                    (_etype414, _size411) = iprot.readListBegin()
                    for _i415 in range(_size411):
                        _elem416 = {}
                        (_ktype418, _vtype419, _size417) = iprot.readMapBegin()
                        for _i421 in range(_size417):
                            _key422 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val423 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem416[_key422] = _val423
                        iprot.readMapEnd()
                        self.props.append(_elem416)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_edge_type_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 2)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        if self.indexes is not None:
            oprot.writeFieldBegin('indexes', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.indexes))
            for iter424 in self.indexes:
                iter424.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.LIST, 4)
            oprot.writeListBegin(TType.MAP, len(self.props))
            for iter425 in self.props:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter425))
                for kiter426, viter427 in iter425.items():
                    oprot.writeString(kiter426.encode('utf-8') if sys.version_info[0] == 2 else kiter426)
                    oprot.writeString(viter427.encode('utf-8') if sys.version_info[0] == 2 else viter427)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_edge_type_args)
create_edge_type_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edge_type', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'indexes', (TType.STRUCT, [ezootypes.ttypes.index, None], False), None, ),  # 3
    (4, TType.LIST, 'props', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 4
)


class create_edge_type_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_edge_type_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_edge_type_result)
create_edge_type_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class create_single_edge_type_args(object):
    """
    Attributes:
     - db_name
     - edge_type
     - indexes
     - props
     - single_mode

    """


    def __init__(self, db_name=None, edge_type=None, indexes=None, props=None, single_mode=None,):
        self.db_name = db_name
        self.edge_type = edge_type
        self.indexes = indexes
        self.props = props
        self.single_mode = single_mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.indexes = []
                    (_etype431, _size428) = iprot.readListBegin()
                    for _i432 in range(_size428):
                        _elem433 = ezootypes.ttypes.index()
                        _elem433.read(iprot)
                        self.indexes.append(_elem433)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.props = []
                    (_etype437, _size434) = iprot.readListBegin()
                    for _i438 in range(_size434):
                        _elem439 = {}
                        (_ktype441, _vtype442, _size440) = iprot.readMapBegin()
                        for _i444 in range(_size440):
                            _key445 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val446 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem439[_key445] = _val446
                        iprot.readMapEnd()
                        self.props.append(_elem439)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.single_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_single_edge_type_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 2)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        if self.indexes is not None:
            oprot.writeFieldBegin('indexes', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.indexes))
            for iter447 in self.indexes:
                iter447.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.LIST, 4)
            oprot.writeListBegin(TType.MAP, len(self.props))
            for iter448 in self.props:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter448))
                for kiter449, viter450 in iter448.items():
                    oprot.writeString(kiter449.encode('utf-8') if sys.version_info[0] == 2 else kiter449)
                    oprot.writeString(viter450.encode('utf-8') if sys.version_info[0] == 2 else viter450)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.single_mode is not None:
            oprot.writeFieldBegin('single_mode', TType.BOOL, 5)
            oprot.writeBool(self.single_mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_single_edge_type_args)
create_single_edge_type_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edge_type', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'indexes', (TType.STRUCT, [ezootypes.ttypes.index, None], False), None, ),  # 3
    (4, TType.LIST, 'props', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 4
    (5, TType.BOOL, 'single_mode', None, None, ),  # 5
)


class create_single_edge_type_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_single_edge_type_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_single_edge_type_result)
create_single_edge_type_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class drop_node_type_args(object):
    """
    Attributes:
     - db_name
     - node_type

    """


    def __init__(self, db_name=None, node_type=None,):
        self.db_name = db_name
        self.node_type = node_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('drop_node_type_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_type is not None:
            oprot.writeFieldBegin('node_type', TType.STRING, 2)
            oprot.writeString(self.node_type.encode('utf-8') if sys.version_info[0] == 2 else self.node_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(drop_node_type_args)
drop_node_type_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_type', 'UTF8', None, ),  # 2
)


class drop_node_type_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('drop_node_type_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(drop_node_type_result)
drop_node_type_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class drop_edge_type_args(object):
    """
    Attributes:
     - db_name
     - edge_type

    """


    def __init__(self, db_name=None, edge_type=None,):
        self.db_name = db_name
        self.edge_type = edge_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('drop_edge_type_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 2)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(drop_edge_type_args)
drop_edge_type_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edge_type', 'UTF8', None, ),  # 2
)


class drop_edge_type_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('drop_edge_type_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(drop_edge_type_result)
drop_edge_type_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class create_node_index_args(object):
    """
    Attributes:
     - db_name
     - node_type
     - index

    """


    def __init__(self, db_name=None, node_type=None, index=None,):
        self.db_name = db_name
        self.node_type = node_type
        self.index = index

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.index = ezootypes.ttypes.index()
                    self.index.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_node_index_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_type is not None:
            oprot.writeFieldBegin('node_type', TType.STRING, 2)
            oprot.writeString(self.node_type.encode('utf-8') if sys.version_info[0] == 2 else self.node_type)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.STRUCT, 3)
            self.index.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_node_index_args)
create_node_index_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_type', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'index', [ezootypes.ttypes.index, None], None, ),  # 3
)


class create_node_index_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_node_index_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_node_index_result)
create_node_index_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class create_edge_index_args(object):
    """
    Attributes:
     - db_name
     - edge_type
     - index

    """


    def __init__(self, db_name=None, edge_type=None, index=None,):
        self.db_name = db_name
        self.edge_type = edge_type
        self.index = index

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.index = ezootypes.ttypes.index()
                    self.index.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_edge_index_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 2)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.STRUCT, 3)
            self.index.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_edge_index_args)
create_edge_index_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edge_type', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'index', [ezootypes.ttypes.index, None], None, ),  # 3
)


class create_edge_index_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_edge_index_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_edge_index_result)
create_edge_index_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class drop_node_index_args(object):
    """
    Attributes:
     - db_name
     - node_type
     - index_name

    """


    def __init__(self, db_name=None, node_type=None, index_name=None,):
        self.db_name = db_name
        self.node_type = node_type
        self.index_name = index_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.index_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('drop_node_index_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_type is not None:
            oprot.writeFieldBegin('node_type', TType.STRING, 2)
            oprot.writeString(self.node_type.encode('utf-8') if sys.version_info[0] == 2 else self.node_type)
            oprot.writeFieldEnd()
        if self.index_name is not None:
            oprot.writeFieldBegin('index_name', TType.STRING, 3)
            oprot.writeString(self.index_name.encode('utf-8') if sys.version_info[0] == 2 else self.index_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(drop_node_index_args)
drop_node_index_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'index_name', 'UTF8', None, ),  # 3
)


class drop_node_index_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('drop_node_index_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(drop_node_index_result)
drop_node_index_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class drop_edge_index_args(object):
    """
    Attributes:
     - db_name
     - edge_type
     - index_name

    """


    def __init__(self, db_name=None, edge_type=None, index_name=None,):
        self.db_name = db_name
        self.edge_type = edge_type
        self.index_name = index_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.index_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('drop_edge_index_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 2)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        if self.index_name is not None:
            oprot.writeFieldBegin('index_name', TType.STRING, 3)
            oprot.writeString(self.index_name.encode('utf-8') if sys.version_info[0] == 2 else self.index_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(drop_edge_index_args)
drop_edge_index_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edge_type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'index_name', 'UTF8', None, ),  # 3
)


class drop_edge_index_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('drop_edge_index_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(drop_edge_index_result)
drop_edge_index_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class update_node_index_args(object):
    """
    Attributes:
     - db_name
     - node_type
     - index

    """


    def __init__(self, db_name=None, node_type=None, index=None,):
        self.db_name = db_name
        self.node_type = node_type
        self.index = index

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.index = ezootypes.ttypes.index()
                    self.index.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_node_index_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_type is not None:
            oprot.writeFieldBegin('node_type', TType.STRING, 2)
            oprot.writeString(self.node_type.encode('utf-8') if sys.version_info[0] == 2 else self.node_type)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.STRUCT, 3)
            self.index.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_node_index_args)
update_node_index_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_type', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'index', [ezootypes.ttypes.index, None], None, ),  # 3
)


class update_node_index_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_node_index_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_node_index_result)
update_node_index_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class update_edge_index_args(object):
    """
    Attributes:
     - db_name
     - edge_type
     - index

    """


    def __init__(self, db_name=None, edge_type=None, index=None,):
        self.db_name = db_name
        self.edge_type = edge_type
        self.index = index

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.index = ezootypes.ttypes.index()
                    self.index.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_edge_index_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 2)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.STRUCT, 3)
            self.index.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_edge_index_args)
update_edge_index_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edge_type', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'index', [ezootypes.ttypes.index, None], None, ),  # 3
)


class update_edge_index_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_edge_index_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_edge_index_result)
update_edge_index_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class import_node_from_data_args(object):
    """
    Attributes:
     - db_name
     - config
     - table
     - safe_mode

    """


    def __init__(self, db_name=None, config=None, table=None, safe_mode=None,):
        self.db_name = db_name
        self.config = config
        self.table = table
        self.safe_mode = safe_mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.config = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.table = []
                    (_etype454, _size451) = iprot.readListBegin()
                    for _i455 in range(_size451):
                        _elem456 = []
                        (_etype460, _size457) = iprot.readListBegin()
                        for _i461 in range(_size457):
                            _elem462 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem456.append(_elem462)
                        iprot.readListEnd()
                        self.table.append(_elem456)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.safe_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('import_node_from_data_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.config is not None:
            oprot.writeFieldBegin('config', TType.STRING, 2)
            oprot.writeString(self.config.encode('utf-8') if sys.version_info[0] == 2 else self.config)
            oprot.writeFieldEnd()
        if self.table is not None:
            oprot.writeFieldBegin('table', TType.LIST, 3)
            oprot.writeListBegin(TType.LIST, len(self.table))
            for iter463 in self.table:
                oprot.writeListBegin(TType.STRING, len(iter463))
                for iter464 in iter463:
                    oprot.writeString(iter464.encode('utf-8') if sys.version_info[0] == 2 else iter464)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.safe_mode is not None:
            oprot.writeFieldBegin('safe_mode', TType.BOOL, 4)
            oprot.writeBool(self.safe_mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(import_node_from_data_args)
import_node_from_data_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'config', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'table', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 3
    (4, TType.BOOL, 'safe_mode', None, None, ),  # 4
)


class import_node_from_data_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('import_node_from_data_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(import_node_from_data_result)
import_node_from_data_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class import_edge_from_data_args(object):
    """
    Attributes:
     - db_name
     - config
     - table
     - safe_mode

    """


    def __init__(self, db_name=None, config=None, table=None, safe_mode=None,):
        self.db_name = db_name
        self.config = config
        self.table = table
        self.safe_mode = safe_mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.config = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.table = []
                    (_etype468, _size465) = iprot.readListBegin()
                    for _i469 in range(_size465):
                        _elem470 = []
                        (_etype474, _size471) = iprot.readListBegin()
                        for _i475 in range(_size471):
                            _elem476 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem470.append(_elem476)
                        iprot.readListEnd()
                        self.table.append(_elem470)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.safe_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('import_edge_from_data_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.config is not None:
            oprot.writeFieldBegin('config', TType.STRING, 2)
            oprot.writeString(self.config.encode('utf-8') if sys.version_info[0] == 2 else self.config)
            oprot.writeFieldEnd()
        if self.table is not None:
            oprot.writeFieldBegin('table', TType.LIST, 3)
            oprot.writeListBegin(TType.LIST, len(self.table))
            for iter477 in self.table:
                oprot.writeListBegin(TType.STRING, len(iter477))
                for iter478 in iter477:
                    oprot.writeString(iter478.encode('utf-8') if sys.version_info[0] == 2 else iter478)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.safe_mode is not None:
            oprot.writeFieldBegin('safe_mode', TType.BOOL, 4)
            oprot.writeBool(self.safe_mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(import_edge_from_data_args)
import_edge_from_data_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'config', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'table', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 3
    (4, TType.BOOL, 'safe_mode', None, None, ),  # 4
)


class import_edge_from_data_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('import_edge_from_data_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(import_edge_from_data_result)
import_edge_from_data_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class update_graph_schema_args(object):
    """
    Attributes:
     - db_name
     - parameters

    """


    def __init__(self, db_name=None, parameters=None,):
        self.db_name = db_name
        self.parameters = parameters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.parameters = {}
                    (_ktype480, _vtype481, _size479) = iprot.readMapBegin()
                    for _i483 in range(_size479):
                        _key484 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val485 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.parameters[_key484] = _val485
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_graph_schema_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.parameters is not None:
            oprot.writeFieldBegin('parameters', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.parameters))
            for kiter486, viter487 in self.parameters.items():
                oprot.writeString(kiter486.encode('utf-8') if sys.version_info[0] == 2 else kiter486)
                oprot.writeString(viter487.encode('utf-8') if sys.version_info[0] == 2 else viter487)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_graph_schema_args)
update_graph_schema_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'parameters', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)


class update_graph_schema_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_graph_schema_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_graph_schema_result)
update_graph_schema_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class rebuild_adj_table_args(object):
    """
    Attributes:
     - db_name

    """


    def __init__(self, db_name=None,):
        self.db_name = db_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rebuild_adj_table_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(rebuild_adj_table_args)
rebuild_adj_table_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
)


class rebuild_adj_table_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rebuild_adj_table_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(rebuild_adj_table_result)
rebuild_adj_table_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class start_transaction_args(object):
    """
    Attributes:
     - db_name
     - level
     - timeout_seconds

    """


    def __init__(self, db_name=None, level=None, timeout_seconds=None,):
        self.db_name = db_name
        self.level = level
        self.timeout_seconds = timeout_seconds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.timeout_seconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('start_transaction_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 2)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.timeout_seconds is not None:
            oprot.writeFieldBegin('timeout_seconds', TType.I32, 3)
            oprot.writeI32(self.timeout_seconds)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(start_transaction_args)
start_transaction_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'level', None, None, ),  # 2
    (3, TType.I32, 'timeout_seconds', None, None, ),  # 3
)


class start_transaction_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.transaction_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('start_transaction_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(start_transaction_result)
start_transaction_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.transaction_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class commit_transaction_args(object):
    """
    Attributes:
     - db_name
     - transaction_id

    """


    def __init__(self, db_name=None, transaction_id=None,):
        self.db_name = db_name
        self.transaction_id = transaction_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.transaction_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('commit_transaction_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.transaction_id is not None:
            oprot.writeFieldBegin('transaction_id', TType.STRING, 2)
            oprot.writeString(self.transaction_id.encode('utf-8') if sys.version_info[0] == 2 else self.transaction_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(commit_transaction_args)
commit_transaction_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'transaction_id', 'UTF8', None, ),  # 2
)


class commit_transaction_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('commit_transaction_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(commit_transaction_result)
commit_transaction_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class rollback_transaction_args(object):
    """
    Attributes:
     - db_name
     - transaction_id

    """


    def __init__(self, db_name=None, transaction_id=None,):
        self.db_name = db_name
        self.transaction_id = transaction_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.transaction_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rollback_transaction_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.transaction_id is not None:
            oprot.writeFieldBegin('transaction_id', TType.STRING, 2)
            oprot.writeString(self.transaction_id.encode('utf-8') if sys.version_info[0] == 2 else self.transaction_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(rollback_transaction_args)
rollback_transaction_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'transaction_id', 'UTF8', None, ),  # 2
)


class rollback_transaction_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rollback_transaction_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(rollback_transaction_result)
rollback_transaction_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class stat_inout_degree_args(object):
    """
    Attributes:
     - db_name
     - search_direction
     - top_k
     - is_desc

    """


    def __init__(self, db_name=None, search_direction=None, top_k=None, is_desc=None,):
        self.db_name = db_name
        self.search_direction = search_direction
        self.top_k = top_k
        self.is_desc = is_desc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.search_direction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.top_k = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.is_desc = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stat_inout_degree_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.search_direction is not None:
            oprot.writeFieldBegin('search_direction', TType.I32, 2)
            oprot.writeI32(self.search_direction)
            oprot.writeFieldEnd()
        if self.top_k is not None:
            oprot.writeFieldBegin('top_k', TType.I64, 3)
            oprot.writeI64(self.top_k)
            oprot.writeFieldEnd()
        if self.is_desc is not None:
            oprot.writeFieldBegin('is_desc', TType.BOOL, 4)
            oprot.writeBool(self.is_desc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(stat_inout_degree_args)
stat_inout_degree_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'search_direction', None, None, ),  # 2
    (3, TType.I64, 'top_k', None, None, ),  # 3
    (4, TType.BOOL, 'is_desc', None, None, ),  # 4
)


class stat_inout_degree_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.stat_inout_degree()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stat_inout_degree_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(stat_inout_degree_result)
stat_inout_degree_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.stat_inout_degree, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class stat_graph_global_view_args(object):
    """
    Attributes:
     - db_name

    """


    def __init__(self, db_name=None,):
        self.db_name = db_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stat_graph_global_view_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(stat_graph_global_view_args)
stat_graph_global_view_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
)


class stat_graph_global_view_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.graph_global_view()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stat_graph_global_view_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(stat_graph_global_view_result)
stat_graph_global_view_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.graph_global_view, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class refresh_connected_component_cache_args(object):
    """
    Attributes:
     - db_name

    """


    def __init__(self, db_name=None,):
        self.db_name = db_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('refresh_connected_component_cache_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(refresh_connected_component_cache_args)
refresh_connected_component_cache_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
)


class refresh_connected_component_cache_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.double_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('refresh_connected_component_cache_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(refresh_connected_component_cache_result)
refresh_connected_component_cache_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.double_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class drop_connected_component_cache_args(object):
    """
    Attributes:
     - db_name

    """


    def __init__(self, db_name=None,):
        self.db_name = db_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('drop_connected_component_cache_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(drop_connected_component_cache_args)
drop_connected_component_cache_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
)


class drop_connected_component_cache_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('drop_connected_component_cache_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(drop_connected_component_cache_result)
drop_connected_component_cache_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class set_node_tag_args(object):
    """
    Attributes:
     - db_name
     - tag
     - ids

    """


    def __init__(self, db_name=None, tag=None, ids=None,):
        self.db_name = db_name
        self.tag = tag
        self.ids = ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.tag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.ids = []
                    (_etype491, _size488) = iprot.readListBegin()
                    for _i492 in range(_size488):
                        _elem493 = iprot.readI32()
                        self.ids.append(_elem493)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_node_tag_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.I32, 2)
            oprot.writeI32(self.tag)
            oprot.writeFieldEnd()
        if self.ids is not None:
            oprot.writeFieldBegin('ids', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.ids))
            for iter494 in self.ids:
                oprot.writeI32(iter494)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_node_tag_args)
set_node_tag_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'tag', None, None, ),  # 2
    (3, TType.LIST, 'ids', (TType.I32, None, False), None, ),  # 3
)


class set_node_tag_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_node_tag_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_node_tag_result)
set_node_tag_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class remove_node_tag_args(object):
    """
    Attributes:
     - db_name
     - tags

    """


    def __init__(self, db_name=None, tags=None,):
        self.db_name = db_name
        self.tags = tags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.tags = []
                    (_etype498, _size495) = iprot.readListBegin()
                    for _i499 in range(_size495):
                        _elem500 = iprot.readI32()
                        self.tags.append(_elem500)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_node_tag_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.tags is not None:
            oprot.writeFieldBegin('tags', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.tags))
            for iter501 in self.tags:
                oprot.writeI32(iter501)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_node_tag_args)
remove_node_tag_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'tags', (TType.I32, None, False), None, ),  # 2
)


class remove_node_tag_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_node_tag_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_node_tag_result)
remove_node_tag_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class remove_node_tag_with_specific_args(object):
    """
    Attributes:
     - db_name
     - id2tags

    """


    def __init__(self, db_name=None, id2tags=None,):
        self.db_name = db_name
        self.id2tags = id2tags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.id2tags = {}
                    (_ktype503, _vtype504, _size502) = iprot.readMapBegin()
                    for _i506 in range(_size502):
                        _key507 = iprot.readI32()
                        _val508 = []
                        (_etype512, _size509) = iprot.readListBegin()
                        for _i513 in range(_size509):
                            _elem514 = iprot.readI32()
                            _val508.append(_elem514)
                        iprot.readListEnd()
                        self.id2tags[_key507] = _val508
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_node_tag_with_specific_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.id2tags is not None:
            oprot.writeFieldBegin('id2tags', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.id2tags))
            for kiter515, viter516 in self.id2tags.items():
                oprot.writeI32(kiter515)
                oprot.writeListBegin(TType.I32, len(viter516))
                for iter517 in viter516:
                    oprot.writeI32(iter517)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_node_tag_with_specific_args)
remove_node_tag_with_specific_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'id2tags', (TType.I32, None, TType.LIST, (TType.I32, None, False), False), None, ),  # 2
)


class remove_node_tag_with_specific_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_node_tag_with_specific_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_node_tag_with_specific_result)
remove_node_tag_with_specific_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.Response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class view_node_tag_args(object):
    """
    Attributes:
     - db_name

    """


    def __init__(self, db_name=None,):
        self.db_name = db_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('view_node_tag_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(view_node_tag_args)
view_node_tag_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
)


class view_node_tag_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.view_node_tag_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('view_node_tag_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(view_node_tag_result)
view_node_tag_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.view_node_tag_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_node_tag_with_ids_args(object):
    """
    Attributes:
     - db_name
     - ids

    """


    def __init__(self, db_name=None, ids=None,):
        self.db_name = db_name
        self.ids = ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ids = []
                    (_etype521, _size518) = iprot.readListBegin()
                    for _i522 in range(_size518):
                        _elem523 = iprot.readI32()
                        self.ids.append(_elem523)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_node_tag_with_ids_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.ids is not None:
            oprot.writeFieldBegin('ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.ids))
            for iter524 in self.ids:
                oprot.writeI32(iter524)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_node_tag_with_ids_args)
get_node_tag_with_ids_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'ids', (TType.I32, None, False), None, ),  # 2
)


class get_node_tag_with_ids_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.node_tag_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_node_tag_with_ids_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_node_tag_with_ids_result)
get_node_tag_with_ids_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.node_tag_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)


class get_node_tag_with_tags_args(object):
    """
    Attributes:
     - db_name
     - tags
     - absolutely_equal

    """


    def __init__(self, db_name=None, tags=None, absolutely_equal=None,):
        self.db_name = db_name
        self.tags = tags
        self.absolutely_equal = absolutely_equal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.tags = []
                    (_etype528, _size525) = iprot.readListBegin()
                    for _i529 in range(_size525):
                        _elem530 = iprot.readI32()
                        self.tags.append(_elem530)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.absolutely_equal = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_node_tag_with_tags_args')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.tags is not None:
            oprot.writeFieldBegin('tags', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.tags))
            for iter531 in self.tags:
                oprot.writeI32(iter531)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.absolutely_equal is not None:
            oprot.writeFieldBegin('absolutely_equal', TType.BOOL, 3)
            oprot.writeBool(self.absolutely_equal)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_node_tag_with_tags_args)
get_node_tag_with_tags_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'tags', (TType.I32, None, False), None, ),  # 2
    (3, TType.BOOL, 'absolutely_equal', None, None, ),  # 3
)


class get_node_tag_with_tags_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ezootypes.ttypes.node_tag_response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = ezoocommon.ttypes.ezoo_exception.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_node_tag_with_tags_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_node_tag_with_tags_result)
get_node_tag_with_tags_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ezootypes.ttypes.node_tag_response, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [ezoocommon.ttypes.ezoo_exception, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs
