#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class search_direction_type(object):
    search_direction_in = 0
    search_direction_out = 1
    search_direction_in_out = 2

    _VALUES_TO_NAMES = {
        0: "search_direction_in",
        1: "search_direction_out",
        2: "search_direction_in_out",
    }

    _NAMES_TO_VALUES = {
        "search_direction_in": 0,
        "search_direction_out": 1,
        "search_direction_in_out": 2,
    }


class distinct_type(object):
    distinct_none = 0
    distinct_node = 1
    distinct_edge = 2

    _VALUES_TO_NAMES = {
        0: "distinct_none",
        1: "distinct_node",
        2: "distinct_edge",
    }

    _NAMES_TO_VALUES = {
        "distinct_none": 0,
        "distinct_node": 1,
        "distinct_edge": 2,
    }


class batch_operation_model(object):
    batch_operation_default = 0
    batch_operation_only_discard_error = 1
    batch_operation_edge_support_black = 20

    _VALUES_TO_NAMES = {
        0: "batch_operation_default",
        1: "batch_operation_only_discard_error",
        20: "batch_operation_edge_support_black",
    }

    _NAMES_TO_VALUES = {
        "batch_operation_default": 0,
        "batch_operation_only_discard_error": 1,
        "batch_operation_edge_support_black": 20,
    }


class isolation_level(object):
    read_uncommitted = 0
    serializable = 3

    _VALUES_TO_NAMES = {
        0: "read_uncommitted",
        3: "serializable",
    }

    _NAMES_TO_VALUES = {
        "read_uncommitted": 0,
        "serializable": 3,
    }


class edge_basic_id(object):
    """
    Attributes:
     - src_node_id
     - dest_node_id
     - edge_id
     - edge_type

    """


    def __init__(self, src_node_id=None, dest_node_id=None, edge_id=None, edge_type=None,):
        self.src_node_id = src_node_id
        self.dest_node_id = dest_node_id
        self.edge_id = edge_id
        self.edge_type = edge_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.src_node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dest_node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.edge_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.edge_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('edge_basic_id')
        if self.src_node_id is not None:
            oprot.writeFieldBegin('src_node_id', TType.I32, 1)
            oprot.writeI32(self.src_node_id)
            oprot.writeFieldEnd()
        if self.dest_node_id is not None:
            oprot.writeFieldBegin('dest_node_id', TType.I32, 2)
            oprot.writeI32(self.dest_node_id)
            oprot.writeFieldEnd()
        if self.edge_id is not None:
            oprot.writeFieldBegin('edge_id', TType.I32, 3)
            oprot.writeI32(self.edge_id)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.STRING, 4)
            oprot.writeString(self.edge_type.encode('utf-8') if sys.version_info[0] == 2 else self.edge_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.src_node_id is None:
            raise TProtocolException(message='Required field src_node_id is unset!')
        if self.dest_node_id is None:
            raise TProtocolException(message='Required field dest_node_id is unset!')
        if self.edge_id is None:
            raise TProtocolException(message='Required field edge_id is unset!')
        if self.edge_type is None:
            raise TProtocolException(message='Required field edge_type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class edge_basic(object):
    """
    Attributes:
     - src_node_id
     - dest_node_id
     - edge_id
     - edge_type

    """


    def __init__(self, src_node_id=None, dest_node_id=None, edge_id=None, edge_type=None,):
        self.src_node_id = src_node_id
        self.dest_node_id = dest_node_id
        self.edge_id = edge_id
        self.edge_type = edge_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.src_node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dest_node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.edge_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.edge_type = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('edge_basic')
        if self.src_node_id is not None:
            oprot.writeFieldBegin('src_node_id', TType.I32, 1)
            oprot.writeI32(self.src_node_id)
            oprot.writeFieldEnd()
        if self.dest_node_id is not None:
            oprot.writeFieldBegin('dest_node_id', TType.I32, 2)
            oprot.writeI32(self.dest_node_id)
            oprot.writeFieldEnd()
        if self.edge_id is not None:
            oprot.writeFieldBegin('edge_id', TType.I32, 3)
            oprot.writeI32(self.edge_id)
            oprot.writeFieldEnd()
        if self.edge_type is not None:
            oprot.writeFieldBegin('edge_type', TType.I16, 4)
            oprot.writeI16(self.edge_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.src_node_id is None:
            raise TProtocolException(message='Required field src_node_id is unset!')
        if self.dest_node_id is None:
            raise TProtocolException(message='Required field dest_node_id is unset!')
        if self.edge_id is None:
            raise TProtocolException(message='Required field edge_id is unset!')
        if self.edge_type is None:
            raise TProtocolException(message='Required field edge_type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node_basic(object):
    """
    Attributes:
     - node_id
     - node_type

    """


    def __init__(self, node_id=None, node_type=None,):
        self.node_id = node_id
        self.node_type = node_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.node_type = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node_basic')
        if self.node_id is not None:
            oprot.writeFieldBegin('node_id', TType.I32, 1)
            oprot.writeI32(self.node_id)
            oprot.writeFieldEnd()
        if self.node_type is not None:
            oprot.writeFieldBegin('node_type', TType.I16, 2)
            oprot.writeI16(self.node_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.node_id is None:
            raise TProtocolException(message='Required field node_id is unset!')
        if self.node_type is None:
            raise TProtocolException(message='Required field node_type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ezoo_exception(TException):
    """
    Attributes:
     - code
     - msg

    """


    def __init__(self, code=None, msg=None,):
        super(ezoo_exception, self).__setattr__('code', code)
        super(ezoo_exception, self).__setattr__('msg', msg)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.code, self.msg, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        code = None
        msg = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            code=code,
            msg=msg,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ezoo_exception')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 2)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class edge_id(object):
    """
    Attributes:
     - start_id
     - end_id
     - rel_id
     - type

    """


    def __init__(self, start_id=None, end_id=None, rel_id=None, type=None,):
        self.start_id = start_id
        self.end_id = end_id
        self.rel_id = rel_id
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.start_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.end_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.rel_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.type = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('edge_id')
        if self.start_id is not None:
            oprot.writeFieldBegin('start_id', TType.I32, 1)
            oprot.writeI32(self.start_id)
            oprot.writeFieldEnd()
        if self.end_id is not None:
            oprot.writeFieldBegin('end_id', TType.I32, 2)
            oprot.writeI32(self.end_id)
            oprot.writeFieldEnd()
        if self.rel_id is not None:
            oprot.writeFieldBegin('rel_id', TType.I32, 3)
            oprot.writeI32(self.rel_id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I16, 4)
            oprot.writeI16(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.start_id is None:
            raise TProtocolException(message='Required field start_id is unset!')
        if self.end_id is None:
            raise TProtocolException(message='Required field end_id is unset!')
        if self.rel_id is None:
            raise TProtocolException(message='Required field rel_id is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node_index(object):
    """
    Attributes:
     - type
     - index_props

    """


    def __init__(self, type=None, index_props=None,):
        self.type = type
        self.index_props = index_props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.index_props = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.index_props[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node_index')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.index_props is not None:
            oprot.writeFieldBegin('index_props', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.index_props))
            for kiter7, viter8 in self.index_props.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                oprot.writeString(viter8.encode('utf-8') if sys.version_info[0] == 2 else viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.index_props is None:
            raise TProtocolException(message='Required field index_props is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class edge_index(object):
    """
    Attributes:
     - type
     - index_props

    """


    def __init__(self, type=None, index_props=None,):
        self.type = type
        self.index_props = index_props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.index_props = {}
                    (_ktype10, _vtype11, _size9) = iprot.readMapBegin()
                    for _i13 in range(_size9):
                        _key14 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val15 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.index_props[_key14] = _val15
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('edge_index')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.index_props is not None:
            oprot.writeFieldBegin('index_props', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.index_props))
            for kiter16, viter17 in self.index_props.items():
                oprot.writeString(kiter16.encode('utf-8') if sys.version_info[0] == 2 else kiter16)
                oprot.writeString(viter17.encode('utf-8') if sys.version_info[0] == 2 else viter17)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.index_props is None:
            raise TProtocolException(message='Required field index_props is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node(object):
    """
    Attributes:
     - type
     - props

    """


    def __init__(self, type=None, props=None,):
        self.type = type
        self.props = props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.props = {}
                    (_ktype19, _vtype20, _size18) = iprot.readMapBegin()
                    for _i22 in range(_size18):
                        _key23 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val24 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.props[_key23] = _val24
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.props))
            for kiter25, viter26 in self.props.items():
                oprot.writeString(kiter25.encode('utf-8') if sys.version_info[0] == 2 else kiter25)
                oprot.writeString(viter26.encode('utf-8') if sys.version_info[0] == 2 else viter26)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.props is None:
            raise TProtocolException(message='Required field props is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class edge(object):
    """
    Attributes:
     - start_id
     - end_id
     - rel_id
     - type
     - props

    """


    def __init__(self, start_id=None, end_id=None, rel_id=None, type=None, props=None,):
        self.start_id = start_id
        self.end_id = end_id
        self.rel_id = rel_id
        self.type = type
        self.props = props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.start_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.end_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.rel_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.props = {}
                    (_ktype28, _vtype29, _size27) = iprot.readMapBegin()
                    for _i31 in range(_size27):
                        _key32 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val33 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.props[_key32] = _val33
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('edge')
        if self.start_id is not None:
            oprot.writeFieldBegin('start_id', TType.I32, 1)
            oprot.writeI32(self.start_id)
            oprot.writeFieldEnd()
        if self.end_id is not None:
            oprot.writeFieldBegin('end_id', TType.I32, 2)
            oprot.writeI32(self.end_id)
            oprot.writeFieldEnd()
        if self.rel_id is not None:
            oprot.writeFieldBegin('rel_id', TType.I32, 3)
            oprot.writeI32(self.rel_id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 4)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.props))
            for kiter34, viter35 in self.props.items():
                oprot.writeString(kiter34.encode('utf-8') if sys.version_info[0] == 2 else kiter34)
                oprot.writeString(viter35.encode('utf-8') if sys.version_info[0] == 2 else viter35)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.start_id is None:
            raise TProtocolException(message='Required field start_id is unset!')
        if self.end_id is None:
            raise TProtocolException(message='Required field end_id is unset!')
        if self.rel_id is None:
            raise TProtocolException(message='Required field rel_id is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.props is None:
            raise TProtocolException(message='Required field props is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class import_status(object):
    """
    Attributes:
     - start_time
     - end_time
     - is_finished
     - code

    """


    def __init__(self, start_time=None, end_time=None, is_finished=None, code=None,):
        self.start_time = start_time
        self.end_time = end_time
        self.is_finished = is_finished
        self.code = code

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.start_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.end_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.is_finished = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('import_status')
        if self.start_time is not None:
            oprot.writeFieldBegin('start_time', TType.I64, 1)
            oprot.writeI64(self.start_time)
            oprot.writeFieldEnd()
        if self.end_time is not None:
            oprot.writeFieldBegin('end_time', TType.I64, 2)
            oprot.writeI64(self.end_time)
            oprot.writeFieldEnd()
        if self.is_finished is not None:
            oprot.writeFieldBegin('is_finished', TType.BOOL, 3)
            oprot.writeBool(self.is_finished)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 4)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.start_time is None:
            raise TProtocolException(message='Required field start_time is unset!')
        if self.end_time is None:
            raise TProtocolException(message='Required field end_time is unset!')
        if self.is_finished is None:
            raise TProtocolException(message='Required field is_finished is unset!')
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class graph_inner_status(object):
    """
    Attributes:
     - has_non_replayable_logs

    """


    def __init__(self, has_non_replayable_logs=None,):
        self.has_non_replayable_logs = has_non_replayable_logs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.has_non_replayable_logs = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('graph_inner_status')
        if self.has_non_replayable_logs is not None:
            oprot.writeFieldBegin('has_non_replayable_logs', TType.BOOL, 1)
            oprot.writeBool(self.has_non_replayable_logs)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.has_non_replayable_logs is None:
            raise TProtocolException(message='Required field has_non_replayable_logs is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(edge_basic_id)
edge_basic_id.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'src_node_id', None, None, ),  # 1
    (2, TType.I32, 'dest_node_id', None, None, ),  # 2
    (3, TType.I32, 'edge_id', None, None, ),  # 3
    (4, TType.STRING, 'edge_type', 'UTF8', None, ),  # 4
)
all_structs.append(edge_basic)
edge_basic.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'src_node_id', None, None, ),  # 1
    (2, TType.I32, 'dest_node_id', None, None, ),  # 2
    (3, TType.I32, 'edge_id', None, None, ),  # 3
    (4, TType.I16, 'edge_type', None, None, ),  # 4
)
all_structs.append(node_basic)
node_basic.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'node_id', None, None, ),  # 1
    (2, TType.I16, 'node_type', None, None, ),  # 2
)
all_structs.append(ezoo_exception)
ezoo_exception.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'msg', 'UTF8', None, ),  # 2
)
all_structs.append(edge_id)
edge_id.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'start_id', None, None, ),  # 1
    (2, TType.I32, 'end_id', None, None, ),  # 2
    (3, TType.I32, 'rel_id', None, None, ),  # 3
    (4, TType.I16, 'type', None, None, ),  # 4
)
all_structs.append(node_index)
node_index.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'index_props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(edge_index)
edge_index.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'index_props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(node)
node.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(edge)
edge.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'start_id', None, None, ),  # 1
    (2, TType.I32, 'end_id', None, None, ),  # 2
    (3, TType.I32, 'rel_id', None, None, ),  # 3
    (4, TType.STRING, 'type', 'UTF8', None, ),  # 4
    (5, TType.MAP, 'props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
)
all_structs.append(import_status)
import_status.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'start_time', None, None, ),  # 1
    (2, TType.I64, 'end_time', None, None, ),  # 2
    (3, TType.BOOL, 'is_finished', None, None, ),  # 3
    (4, TType.I32, 'code', None, None, ),  # 4
)
all_structs.append(graph_inner_status)
graph_inner_status.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'has_non_replayable_logs', None, None, ),  # 1
)
fix_spec(all_structs)
del all_structs
