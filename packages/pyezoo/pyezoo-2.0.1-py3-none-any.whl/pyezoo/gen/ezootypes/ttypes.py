#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ezoocommon.ttypes

from thrift.transport import TTransport
all_structs = []


class srv_status_enum(object):
    init = 0
    connected = 1
    loss = 2
    leaving = 3
    left = 4

    _VALUES_TO_NAMES = {
        0: "init",
        1: "connected",
        2: "loss",
        3: "leaving",
        4: "left",
    }

    _NAMES_TO_VALUES = {
        "init": 0,
        "connected": 1,
        "loss": 2,
        "leaving": 3,
        "left": 4,
    }


class graph_info(object):
    """
    Attributes:
     - status
     - offset
     - checkpoint

    """


    def __init__(self, status=None, offset=None, checkpoint=None,):
        self.status = status
        self.offset = offset
        self.checkpoint = checkpoint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.offset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.checkpoint = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('graph_info')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I64, 3)
            oprot.writeI64(self.offset)
            oprot.writeFieldEnd()
        if self.checkpoint is not None:
            oprot.writeFieldBegin('checkpoint', TType.I64, 4)
            oprot.writeI64(self.checkpoint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.offset is None:
            raise TProtocolException(message='Required field offset is unset!')
        if self.checkpoint is None:
            raise TProtocolException(message='Required field checkpoint is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class graph_inner_infos(object):
    """
    Attributes:
     - message
     - status
     - last_import_call
     - inner_status

    """


    def __init__(self, message=None, status=None, last_import_call=None, inner_status=None,):
        self.message = message
        self.status = status
        self.last_import_call = last_import_call
        self.inner_status = inner_status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.last_import_call = ezoocommon.ttypes.import_status()
                    self.last_import_call.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.inner_status = ezoocommon.ttypes.graph_inner_status()
                    self.inner_status.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('graph_inner_infos')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.last_import_call is not None:
            oprot.writeFieldBegin('last_import_call', TType.STRUCT, 3)
            self.last_import_call.write(oprot)
            oprot.writeFieldEnd()
        if self.inner_status is not None:
            oprot.writeFieldBegin('inner_status', TType.STRUCT, 4)
            self.inner_status.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.last_import_call is None:
            raise TProtocolException(message='Required field last_import_call is unset!')
        if self.inner_status is None:
            raise TProtocolException(message='Required field inner_status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node_simple(object):
    """
    Attributes:
     - int_id
     - type
     - id

    """


    def __init__(self, int_id=None, type=None, id=None,):
        self.int_id = int_id
        self.type = type
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.int_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node_simple')
        if self.int_id is not None:
            oprot.writeFieldBegin('int_id', TType.I32, 1)
            oprot.writeI32(self.int_id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 3)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.int_id is None:
            raise TProtocolException(message='Required field int_id is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class entity_property_i(object):
    """
    Attributes:
     - name
     - type
     - default_value
     - cache_level
     - is_cached

    """


    def __init__(self, name=None, type=None, default_value=None, cache_level=None, is_cached=None,):
        self.name = name
        self.type = type
        self.default_value = default_value
        self.cache_level = cache_level
        self.is_cached = is_cached

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.default_value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.cache_level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.is_cached = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('entity_property_i')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.default_value is not None:
            oprot.writeFieldBegin('default_value', TType.STRING, 3)
            oprot.writeString(self.default_value.encode('utf-8') if sys.version_info[0] == 2 else self.default_value)
            oprot.writeFieldEnd()
        if self.cache_level is not None:
            oprot.writeFieldBegin('cache_level', TType.I32, 4)
            oprot.writeI32(self.cache_level)
            oprot.writeFieldEnd()
        if self.is_cached is not None:
            oprot.writeFieldBegin('is_cached', TType.BOOL, 5)
            oprot.writeBool(self.is_cached)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.default_value is None:
            raise TProtocolException(message='Required field default_value is unset!')
        if self.cache_level is None:
            raise TProtocolException(message='Required field cache_level is unset!')
        if self.is_cached is None:
            raise TProtocolException(message='Required field is_cached is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class entity_index(object):
    """
    Attributes:
     - type
     - key_name
     - props

    """


    def __init__(self, type=None, key_name=None, props=None,):
        self.type = type
        self.key_name = key_name
        self.props = props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.key_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.props = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = entity_property_i()
                        _elem5.read(iprot)
                        self.props.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('entity_index')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.key_name is not None:
            oprot.writeFieldBegin('key_name', TType.STRING, 2)
            oprot.writeString(self.key_name.encode('utf-8') if sys.version_info[0] == 2 else self.key_name)
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.props))
            for iter6 in self.props:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.key_name is None:
            raise TProtocolException(message='Required field key_name is unset!')
        if self.props is None:
            raise TProtocolException(message='Required field props is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class index(object):
    """
    Attributes:
     - name
     - type
     - props

    """


    def __init__(self, name=None, type=None, props=None,):
        self.name = name
        self.type = type
        self.props = props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.props = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.props.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('index')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.props))
            for iter13 in self.props:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.props is None:
            raise TProtocolException(message='Required field props is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class entity_schema(object):
    """
    Attributes:
     - type
     - type_i
     - indexes
     - props
     - single_mode

    """


    def __init__(self, type=None, type_i=None, indexes=None, props=None, single_mode=None,):
        self.type = type
        self.type_i = type_i
        self.indexes = indexes
        self.props = props
        self.single_mode = single_mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.type_i = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.indexes = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = index()
                        _elem19.read(iprot)
                        self.indexes.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.props = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = entity_property_i()
                        _elem25.read(iprot)
                        self.props.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.single_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('entity_schema')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.type_i is not None:
            oprot.writeFieldBegin('type_i', TType.I16, 2)
            oprot.writeI16(self.type_i)
            oprot.writeFieldEnd()
        if self.indexes is not None:
            oprot.writeFieldBegin('indexes', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.indexes))
            for iter26 in self.indexes:
                iter26.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.props))
            for iter27 in self.props:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.single_mode is not None:
            oprot.writeFieldBegin('single_mode', TType.BOOL, 5)
            oprot.writeBool(self.single_mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.type_i is None:
            raise TProtocolException(message='Required field type_i is unset!')
        if self.indexes is None:
            raise TProtocolException(message='Required field indexes is unset!')
        if self.props is None:
            raise TProtocolException(message='Required field props is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class graph_schema_simple(object):
    """
    Attributes:
     - db_name
     - node_slot_type
     - edge_slot_type
     - node_schema_list
     - edge_schema_list
     - auto_load
     - is_basic
     - status
     - tags

    """


    def __init__(self, db_name=None, node_slot_type=None, edge_slot_type=None, node_schema_list=None, edge_schema_list=None, auto_load=None, is_basic=None, status=None, tags=None,):
        self.db_name = db_name
        self.node_slot_type = node_slot_type
        self.edge_slot_type = edge_slot_type
        self.node_schema_list = node_schema_list
        self.edge_schema_list = edge_schema_list
        self.auto_load = auto_load
        self.is_basic = is_basic
        self.status = status
        self.tags = tags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.node_slot_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.edge_slot_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.node_schema_list = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = entity_schema()
                        _elem33.read(iprot)
                        self.node_schema_list.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.edge_schema_list = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = entity_schema()
                        _elem39.read(iprot)
                        self.edge_schema_list.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.auto_load = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.is_basic = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.tags = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('graph_schema_simple')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_slot_type is not None:
            oprot.writeFieldBegin('node_slot_type', TType.I32, 2)
            oprot.writeI32(self.node_slot_type)
            oprot.writeFieldEnd()
        if self.edge_slot_type is not None:
            oprot.writeFieldBegin('edge_slot_type', TType.I32, 3)
            oprot.writeI32(self.edge_slot_type)
            oprot.writeFieldEnd()
        if self.node_schema_list is not None:
            oprot.writeFieldBegin('node_schema_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.node_schema_list))
            for iter40 in self.node_schema_list:
                iter40.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_schema_list is not None:
            oprot.writeFieldBegin('edge_schema_list', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.edge_schema_list))
            for iter41 in self.edge_schema_list:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.auto_load is not None:
            oprot.writeFieldBegin('auto_load', TType.BOOL, 6)
            oprot.writeBool(self.auto_load)
            oprot.writeFieldEnd()
        if self.is_basic is not None:
            oprot.writeFieldBegin('is_basic', TType.BOOL, 7)
            oprot.writeBool(self.is_basic)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 8)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.tags is not None:
            oprot.writeFieldBegin('tags', TType.STRING, 9)
            oprot.writeString(self.tags.encode('utf-8') if sys.version_info[0] == 2 else self.tags)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.db_name is None:
            raise TProtocolException(message='Required field db_name is unset!')
        if self.node_slot_type is None:
            raise TProtocolException(message='Required field node_slot_type is unset!')
        if self.edge_slot_type is None:
            raise TProtocolException(message='Required field edge_slot_type is unset!')
        if self.node_schema_list is None:
            raise TProtocolException(message='Required field node_schema_list is unset!')
        if self.edge_schema_list is None:
            raise TProtocolException(message='Required field edge_schema_list is unset!')
        if self.auto_load is None:
            raise TProtocolException(message='Required field auto_load is unset!')
        if self.is_basic is None:
            raise TProtocolException(message='Required field is_basic is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.tags is None:
            raise TProtocolException(message='Required field tags is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node_score(object):
    """
    Attributes:
     - node_id
     - score

    """


    def __init__(self, node_id=None, score=None,):
        self.node_id = node_id
        self.score = score

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.score = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node_score')
        if self.node_id is not None:
            oprot.writeFieldBegin('node_id', TType.STRING, 1)
            oprot.writeString(self.node_id.encode('utf-8') if sys.version_info[0] == 2 else self.node_id)
            oprot.writeFieldEnd()
        if self.score is not None:
            oprot.writeFieldBegin('score', TType.DOUBLE, 2)
            oprot.writeDouble(self.score)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.node_id is None:
            raise TProtocolException(message='Required field node_id is unset!')
        if self.score is None:
            raise TProtocolException(message='Required field score is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class prop_column(object):
    """
    Attributes:
     - column
     - name

    """


    def __init__(self, column=None, name=None,):
        self.column = column
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.column = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('prop_column')
        if self.column is not None:
            oprot.writeFieldBegin('column', TType.I32, 1)
            oprot.writeI32(self.column)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.column is None:
            raise TProtocolException(message='Required field column is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class unique_node(object):
    """
    Attributes:
     - type
     - unique

    """


    def __init__(self, type=None, unique=None,):
        self.type = type
        self.unique = unique

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.unique = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = prop_column()
                        _elem47.read(iprot)
                        self.unique.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('unique_node')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.unique is not None:
            oprot.writeFieldBegin('unique', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.unique))
            for iter48 in self.unique:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.unique is None:
            raise TProtocolException(message='Required field unique is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class edge_i(object):
    """
    Attributes:
     - start_id
     - end_id

    """


    def __init__(self, start_id=None, end_id=None,):
        self.start_id = start_id
        self.end_id = end_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.start_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.end_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('edge_i')
        if self.start_id is not None:
            oprot.writeFieldBegin('start_id', TType.I32, 1)
            oprot.writeI32(self.start_id)
            oprot.writeFieldEnd()
        if self.end_id is not None:
            oprot.writeFieldBegin('end_id', TType.I32, 2)
            oprot.writeI32(self.end_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.start_id is None:
            raise TProtocolException(message='Required field start_id is unset!')
        if self.end_id is None:
            raise TProtocolException(message='Required field end_id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node_v2(object):
    """
    Attributes:
     - type
     - props
     - id

    """


    def __init__(self, type=None, props=None, id=None,):
        self.type = type
        self.props = props
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.props = {}
                    (_ktype50, _vtype51, _size49) = iprot.readMapBegin()
                    for _i53 in range(_size49):
                        _key54 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val55 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.props[_key54] = _val55
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node_v2')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.props))
            for kiter56, viter57 in self.props.items():
                oprot.writeString(kiter56.encode('utf-8') if sys.version_info[0] == 2 else kiter56)
                oprot.writeString(viter57.encode('utf-8') if sys.version_info[0] == 2 else viter57)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 3)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.props is None:
            raise TProtocolException(message='Required field props is unset!')
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class edge_v2(object):
    """
    Attributes:
     - type
     - props
     - src_node_id
     - dest_node_id
     - edge_id

    """


    def __init__(self, type=None, props=None, src_node_id=None, dest_node_id=None, edge_id=None,):
        self.type = type
        self.props = props
        self.src_node_id = src_node_id
        self.dest_node_id = dest_node_id
        self.edge_id = edge_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.props = {}
                    (_ktype59, _vtype60, _size58) = iprot.readMapBegin()
                    for _i62 in range(_size58):
                        _key63 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val64 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.props[_key63] = _val64
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.src_node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.dest_node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.edge_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('edge_v2')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.props))
            for kiter65, viter66 in self.props.items():
                oprot.writeString(kiter65.encode('utf-8') if sys.version_info[0] == 2 else kiter65)
                oprot.writeString(viter66.encode('utf-8') if sys.version_info[0] == 2 else viter66)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.src_node_id is not None:
            oprot.writeFieldBegin('src_node_id', TType.I32, 3)
            oprot.writeI32(self.src_node_id)
            oprot.writeFieldEnd()
        if self.dest_node_id is not None:
            oprot.writeFieldBegin('dest_node_id', TType.I32, 4)
            oprot.writeI32(self.dest_node_id)
            oprot.writeFieldEnd()
        if self.edge_id is not None:
            oprot.writeFieldBegin('edge_id', TType.I32, 5)
            oprot.writeI32(self.edge_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.props is None:
            raise TProtocolException(message='Required field props is unset!')
        if self.src_node_id is None:
            raise TProtocolException(message='Required field src_node_id is unset!')
        if self.dest_node_id is None:
            raise TProtocolException(message='Required field dest_node_id is unset!')
        if self.edge_id is None:
            raise TProtocolException(message='Required field edge_id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cypher_result(object):
    """
    Attributes:
     - cost_time
     - is_success
     - header_titles
     - query_result
     - data_types
     - error_msg
     - summary
     - status

    """


    def __init__(self, cost_time=None, is_success=None, header_titles=None, query_result=None, data_types=None, error_msg=None, summary=None, status=None,):
        self.cost_time = cost_time
        self.is_success = is_success
        self.header_titles = header_titles
        self.query_result = query_result
        self.data_types = data_types
        self.error_msg = error_msg
        self.summary = summary
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.is_success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.header_titles = []
                    (_etype70, _size67) = iprot.readListBegin()
                    for _i71 in range(_size67):
                        _elem72 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.header_titles.append(_elem72)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.query_result = []
                    (_etype76, _size73) = iprot.readListBegin()
                    for _i77 in range(_size73):
                        _elem78 = []
                        (_etype82, _size79) = iprot.readListBegin()
                        for _i83 in range(_size79):
                            _elem84 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _elem78.append(_elem84)
                        iprot.readListEnd()
                        self.query_result.append(_elem78)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.data_types = []
                    (_etype88, _size85) = iprot.readListBegin()
                    for _i89 in range(_size85):
                        _elem90 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.data_types.append(_elem90)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.summary = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cypher_result')
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 1)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.is_success is not None:
            oprot.writeFieldBegin('is_success', TType.BOOL, 2)
            oprot.writeBool(self.is_success)
            oprot.writeFieldEnd()
        if self.header_titles is not None:
            oprot.writeFieldBegin('header_titles', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.header_titles))
            for iter91 in self.header_titles:
                oprot.writeString(iter91.encode('utf-8') if sys.version_info[0] == 2 else iter91)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.query_result is not None:
            oprot.writeFieldBegin('query_result', TType.LIST, 4)
            oprot.writeListBegin(TType.LIST, len(self.query_result))
            for iter92 in self.query_result:
                oprot.writeListBegin(TType.STRING, len(iter92))
                for iter93 in iter92:
                    oprot.writeString(iter93.encode('utf-8') if sys.version_info[0] == 2 else iter93)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.data_types is not None:
            oprot.writeFieldBegin('data_types', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.data_types))
            for iter94 in self.data_types:
                oprot.writeString(iter94.encode('utf-8') if sys.version_info[0] == 2 else iter94)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 6)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        if self.summary is not None:
            oprot.writeFieldBegin('summary', TType.STRING, 7)
            oprot.writeString(self.summary.encode('utf-8') if sys.version_info[0] == 2 else self.summary)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 8)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.is_success is None:
            raise TProtocolException(message='Required field is_success is unset!')
        if self.header_titles is None:
            raise TProtocolException(message='Required field header_titles is unset!')
        if self.query_result is None:
            raise TProtocolException(message='Required field query_result is unset!')
        if self.data_types is None:
            raise TProtocolException(message='Required field data_types is unset!')
        if self.error_msg is None:
            raise TProtocolException(message='Required field error_msg is unset!')
        if self.summary is None:
            raise TProtocolException(message='Required field summary is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class unified_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - _return

    """


    def __init__(self, message=None, status=None, cost_time=None, _return=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self._return = _return

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self._return = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('unified_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self._return is not None:
            oprot.writeFieldBegin('_return', TType.STRING, 4)
            oprot.writeString(self._return.encode('utf-8') if sys.version_info[0] == 2 else self._return)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self._return is None:
            raise TProtocolException(message='Required field _return is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node_filter(object):
    """
    Attributes:
     - type
     - props

    """


    def __init__(self, type=None, props=None,):
        self.type = type
        self.props = props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.props = {}
                    (_ktype96, _vtype97, _size95) = iprot.readMapBegin()
                    for _i99 in range(_size95):
                        _key100 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val101 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.props[_key100] = _val101
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node_filter')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.props))
            for kiter102, viter103 in self.props.items():
                oprot.writeString(kiter102.encode('utf-8') if sys.version_info[0] == 2 else kiter102)
                oprot.writeString(viter103.encode('utf-8') if sys.version_info[0] == 2 else viter103)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.props is None:
            raise TProtocolException(message='Required field props is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class edge_filter(object):
    """
    Attributes:
     - type
     - props

    """


    def __init__(self, type=None, props=None,):
        self.type = type
        self.props = props

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.props = {}
                    (_ktype105, _vtype106, _size104) = iprot.readMapBegin()
                    for _i108 in range(_size104):
                        _key109 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val110 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.props[_key109] = _val110
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('edge_filter')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.props))
            for kiter111, viter112 in self.props.items():
                oprot.writeString(kiter111.encode('utf-8') if sys.version_info[0] == 2 else kiter111)
                oprot.writeString(viter112.encode('utf-8') if sys.version_info[0] == 2 else viter112)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.props is None:
            raise TProtocolException(message='Required field props is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class transaction_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - transaction_id

    """


    def __init__(self, message=None, status=None, cost_time=None, transaction_id=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.transaction_id = transaction_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.transaction_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('transaction_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.transaction_id is not None:
            oprot.writeFieldBegin('transaction_id', TType.STRING, 4)
            oprot.writeString(self.transaction_id.encode('utf-8') if sys.version_info[0] == 2 else self.transaction_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.transaction_id is None:
            raise TProtocolException(message='Required field transaction_id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class dump_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - dump_path
     - server_id

    """


    def __init__(self, message=None, status=None, cost_time=None, dump_path=None, server_id=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.dump_path = dump_path
        self.server_id = server_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.dump_path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.server_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('dump_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.dump_path is not None:
            oprot.writeFieldBegin('dump_path', TType.STRING, 4)
            oprot.writeString(self.dump_path.encode('utf-8') if sys.version_info[0] == 2 else self.dump_path)
            oprot.writeFieldEnd()
        if self.server_id is not None:
            oprot.writeFieldBegin('server_id', TType.I32, 5)
            oprot.writeI32(self.server_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.dump_path is None:
            raise TProtocolException(message='Required field dump_path is unset!')
        if self.server_id is None:
            raise TProtocolException(message='Required field server_id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node_l1(object):
    """
    Attributes:
     - identity
     - labels
     - properties

    """


    def __init__(self, identity=None, labels=None, properties=None,):
        self.identity = identity
        self.labels = labels
        self.properties = properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.identity = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.labels = []
                    (_etype116, _size113) = iprot.readListBegin()
                    for _i117 in range(_size113):
                        _elem118 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.labels.append(_elem118)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.properties = {}
                    (_ktype120, _vtype121, _size119) = iprot.readMapBegin()
                    for _i123 in range(_size119):
                        _key124 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val125 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.properties[_key124] = _val125
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node_l1')
        if self.identity is not None:
            oprot.writeFieldBegin('identity', TType.I32, 1)
            oprot.writeI32(self.identity)
            oprot.writeFieldEnd()
        if self.labels is not None:
            oprot.writeFieldBegin('labels', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.labels))
            for iter126 in self.labels:
                oprot.writeString(iter126.encode('utf-8') if sys.version_info[0] == 2 else iter126)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.properties is not None:
            oprot.writeFieldBegin('properties', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.properties))
            for kiter127, viter128 in self.properties.items():
                oprot.writeString(kiter127.encode('utf-8') if sys.version_info[0] == 2 else kiter127)
                oprot.writeString(viter128.encode('utf-8') if sys.version_info[0] == 2 else viter128)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.identity is None:
            raise TProtocolException(message='Required field identity is unset!')
        if self.labels is None:
            raise TProtocolException(message='Required field labels is unset!')
        if self.properties is None:
            raise TProtocolException(message='Required field properties is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class edge_l1(object):
    """
    Attributes:
     - identity
     - labels
     - _start
     - _end
     - properties

    """


    def __init__(self, identity=None, labels=None, _start=None, _end=None, properties=None,):
        self.identity = identity
        self.labels = labels
        self._start = _start
        self._end = _end
        self.properties = properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.identity = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.labels = []
                    (_etype132, _size129) = iprot.readListBegin()
                    for _i133 in range(_size129):
                        _elem134 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.labels.append(_elem134)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self._start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self._end = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.properties = {}
                    (_ktype136, _vtype137, _size135) = iprot.readMapBegin()
                    for _i139 in range(_size135):
                        _key140 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val141 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.properties[_key140] = _val141
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('edge_l1')
        if self.identity is not None:
            oprot.writeFieldBegin('identity', TType.I32, 1)
            oprot.writeI32(self.identity)
            oprot.writeFieldEnd()
        if self.labels is not None:
            oprot.writeFieldBegin('labels', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.labels))
            for iter142 in self.labels:
                oprot.writeString(iter142.encode('utf-8') if sys.version_info[0] == 2 else iter142)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self._start is not None:
            oprot.writeFieldBegin('_start', TType.I32, 3)
            oprot.writeI32(self._start)
            oprot.writeFieldEnd()
        if self._end is not None:
            oprot.writeFieldBegin('_end', TType.I32, 4)
            oprot.writeI32(self._end)
            oprot.writeFieldEnd()
        if self.properties is not None:
            oprot.writeFieldBegin('properties', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.properties))
            for kiter143, viter144 in self.properties.items():
                oprot.writeString(kiter143.encode('utf-8') if sys.version_info[0] == 2 else kiter143)
                oprot.writeString(viter144.encode('utf-8') if sys.version_info[0] == 2 else viter144)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.identity is None:
            raise TProtocolException(message='Required field identity is unset!')
        if self.labels is None:
            raise TProtocolException(message='Required field labels is unset!')
        if self._start is None:
            raise TProtocolException(message='Required field _start is unset!')
        if self._end is None:
            raise TProtocolException(message='Required field _end is unset!')
        if self.properties is None:
            raise TProtocolException(message='Required field properties is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class segment_l1(object):
    """
    Attributes:
     - _start
     - relationship
     - _end

    """


    def __init__(self, _start=None, relationship=None, _end=None,):
        self._start = _start
        self.relationship = relationship
        self._end = _end

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self._start = node_l1()
                    self._start.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.relationship = edge_l1()
                    self.relationship.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self._end = node_l1()
                    self._end.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('segment_l1')
        if self._start is not None:
            oprot.writeFieldBegin('_start', TType.STRUCT, 1)
            self._start.write(oprot)
            oprot.writeFieldEnd()
        if self.relationship is not None:
            oprot.writeFieldBegin('relationship', TType.STRUCT, 2)
            self.relationship.write(oprot)
            oprot.writeFieldEnd()
        if self._end is not None:
            oprot.writeFieldBegin('_end', TType.STRUCT, 3)
            self._end.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self._start is None:
            raise TProtocolException(message='Required field _start is unset!')
        if self.relationship is None:
            raise TProtocolException(message='Required field relationship is unset!')
        if self._end is None:
            raise TProtocolException(message='Required field _end is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class path_l1(object):
    """
    Attributes:
     - _start
     - _end
     - segments

    """


    def __init__(self, _start=None, _end=None, segments=None,):
        self._start = _start
        self._end = _end
        self.segments = segments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self._start = node_l1()
                    self._start.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self._end = node_l1()
                    self._end.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.segments = []
                    (_etype148, _size145) = iprot.readListBegin()
                    for _i149 in range(_size145):
                        _elem150 = segment_l1()
                        _elem150.read(iprot)
                        self.segments.append(_elem150)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('path_l1')
        if self._start is not None:
            oprot.writeFieldBegin('_start', TType.STRUCT, 1)
            self._start.write(oprot)
            oprot.writeFieldEnd()
        if self._end is not None:
            oprot.writeFieldBegin('_end', TType.STRUCT, 2)
            self._end.write(oprot)
            oprot.writeFieldEnd()
        if self.segments is not None:
            oprot.writeFieldBegin('segments', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.segments))
            for iter151 in self.segments:
                iter151.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self._start is None:
            raise TProtocolException(message='Required field _start is unset!')
        if self._end is None:
            raise TProtocolException(message='Required field _end is unset!')
        if self.segments is None:
            raise TProtocolException(message='Required field segments is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class paths_l1(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - paths
     - length

    """


    def __init__(self, status=None, message=None, cost_time=None, paths=None, length=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.paths = paths
        self.length = length

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.paths = []
                    (_etype155, _size152) = iprot.readListBegin()
                    for _i156 in range(_size152):
                        _elem157 = path_l1()
                        _elem157.read(iprot)
                        self.paths.append(_elem157)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.length = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('paths_l1')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.paths is not None:
            oprot.writeFieldBegin('paths', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.paths))
            for iter158 in self.paths:
                iter158.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.I64, 5)
            oprot.writeI64(self.length)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.paths is None:
            raise TProtocolException(message='Required field paths is unset!')
        if self.length is None:
            raise TProtocolException(message='Required field length is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class one_neighbour_l1(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - segments
     - length

    """


    def __init__(self, status=None, message=None, cost_time=None, segments=None, length=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.segments = segments
        self.length = length

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.segments = []
                    (_etype162, _size159) = iprot.readListBegin()
                    for _i163 in range(_size159):
                        _elem164 = segment_l1()
                        _elem164.read(iprot)
                        self.segments.append(_elem164)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.length = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('one_neighbour_l1')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.segments is not None:
            oprot.writeFieldBegin('segments', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.segments))
            for iter165 in self.segments:
                iter165.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.I64, 5)
            oprot.writeI64(self.length)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.segments is None:
            raise TProtocolException(message='Required field segments is unset!')
        if self.length is None:
            raise TProtocolException(message='Required field length is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class count_neighbour_l1(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - prop_value_list
     - count_value_list

    """


    def __init__(self, status=None, message=None, cost_time=None, prop_value_list=None, count_value_list=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.prop_value_list = prop_value_list
        self.count_value_list = count_value_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.prop_value_list = []
                    (_etype169, _size166) = iprot.readListBegin()
                    for _i170 in range(_size166):
                        _elem171 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.prop_value_list.append(_elem171)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.count_value_list = []
                    (_etype175, _size172) = iprot.readListBegin()
                    for _i176 in range(_size172):
                        _elem177 = iprot.readI64()
                        self.count_value_list.append(_elem177)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('count_neighbour_l1')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.prop_value_list is not None:
            oprot.writeFieldBegin('prop_value_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.prop_value_list))
            for iter178 in self.prop_value_list:
                oprot.writeString(iter178.encode('utf-8') if sys.version_info[0] == 2 else iter178)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.count_value_list is not None:
            oprot.writeFieldBegin('count_value_list', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.count_value_list))
            for iter179 in self.count_value_list:
                oprot.writeI64(iter179)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class file_info(object):
    """
    Attributes:
     - path
     - type

    """


    def __init__(self, path=None, type=None,):
        self.path = path
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('file_info')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.path is None:
            raise TProtocolException(message='Required field path is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class resources_response(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - resource_list

    """


    def __init__(self, status=None, message=None, cost_time=None, resource_list=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.resource_list = resource_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.resource_list = []
                    (_etype183, _size180) = iprot.readListBegin()
                    for _i184 in range(_size180):
                        _elem185 = file_info()
                        _elem185.read(iprot)
                        self.resource_list.append(_elem185)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('resources_response')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.resource_list is not None:
            oprot.writeFieldBegin('resource_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.resource_list))
            for iter186 in self.resource_list:
                iter186.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.resource_list is None:
            raise TProtocolException(message='Required field resource_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class gnn_infer_response(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - result

    """


    def __init__(self, status=None, message=None, cost_time=None, result=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.result = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('gnn_infer_response')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRING, 4)
            oprot.writeString(self.result.encode('utf-8') if sys.version_info[0] == 2 else self.result)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.result is None:
            raise TProtocolException(message='Required field result is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class server_detail_response(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - mem_usage
     - clients
     - in_memory
     - persistence
     - zookeeper
     - replication

    """


    def __init__(self, status=None, message=None, cost_time=None, mem_usage=None, clients=None, in_memory=None, persistence=None, zookeeper=None, replication=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.mem_usage = mem_usage
        self.clients = clients
        self.in_memory = in_memory
        self.persistence = persistence
        self.zookeeper = zookeeper
        self.replication = replication

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.mem_usage = {}
                    (_ktype188, _vtype189, _size187) = iprot.readMapBegin()
                    for _i191 in range(_size187):
                        _key192 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val193 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.mem_usage[_key192] = _val193
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.clients = {}
                    (_ktype195, _vtype196, _size194) = iprot.readMapBegin()
                    for _i198 in range(_size194):
                        _key199 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val200 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.clients[_key199] = _val200
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.in_memory = {}
                    (_ktype202, _vtype203, _size201) = iprot.readMapBegin()
                    for _i205 in range(_size201):
                        _key206 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val207 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.in_memory[_key206] = _val207
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.persistence = {}
                    (_ktype209, _vtype210, _size208) = iprot.readMapBegin()
                    for _i212 in range(_size208):
                        _key213 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val214 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.persistence[_key213] = _val214
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.zookeeper = {}
                    (_ktype216, _vtype217, _size215) = iprot.readMapBegin()
                    for _i219 in range(_size215):
                        _key220 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val221 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.zookeeper[_key220] = _val221
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.replication = {}
                    (_ktype223, _vtype224, _size222) = iprot.readMapBegin()
                    for _i226 in range(_size222):
                        _key227 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val228 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.replication[_key227] = _val228
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('server_detail_response')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.mem_usage is not None:
            oprot.writeFieldBegin('mem_usage', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.mem_usage))
            for kiter229, viter230 in self.mem_usage.items():
                oprot.writeString(kiter229.encode('utf-8') if sys.version_info[0] == 2 else kiter229)
                oprot.writeString(viter230.encode('utf-8') if sys.version_info[0] == 2 else viter230)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.clients is not None:
            oprot.writeFieldBegin('clients', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.clients))
            for kiter231, viter232 in self.clients.items():
                oprot.writeString(kiter231.encode('utf-8') if sys.version_info[0] == 2 else kiter231)
                oprot.writeString(viter232.encode('utf-8') if sys.version_info[0] == 2 else viter232)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.in_memory is not None:
            oprot.writeFieldBegin('in_memory', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.in_memory))
            for kiter233, viter234 in self.in_memory.items():
                oprot.writeString(kiter233.encode('utf-8') if sys.version_info[0] == 2 else kiter233)
                oprot.writeString(viter234.encode('utf-8') if sys.version_info[0] == 2 else viter234)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.persistence is not None:
            oprot.writeFieldBegin('persistence', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.persistence))
            for kiter235, viter236 in self.persistence.items():
                oprot.writeString(kiter235.encode('utf-8') if sys.version_info[0] == 2 else kiter235)
                oprot.writeString(viter236.encode('utf-8') if sys.version_info[0] == 2 else viter236)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.zookeeper is not None:
            oprot.writeFieldBegin('zookeeper', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.zookeeper))
            for kiter237, viter238 in self.zookeeper.items():
                oprot.writeString(kiter237.encode('utf-8') if sys.version_info[0] == 2 else kiter237)
                oprot.writeString(viter238.encode('utf-8') if sys.version_info[0] == 2 else viter238)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.replication is not None:
            oprot.writeFieldBegin('replication', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.replication))
            for kiter239, viter240 in self.replication.items():
                oprot.writeString(kiter239.encode('utf-8') if sys.version_info[0] == 2 else kiter239)
                oprot.writeString(viter240.encode('utf-8') if sys.version_info[0] == 2 else viter240)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.mem_usage is None:
            raise TProtocolException(message='Required field mem_usage is unset!')
        if self.clients is None:
            raise TProtocolException(message='Required field clients is unset!')
        if self.in_memory is None:
            raise TProtocolException(message='Required field in_memory is unset!')
        if self.persistence is None:
            raise TProtocolException(message='Required field persistence is unset!')
        if self.zookeeper is None:
            raise TProtocolException(message='Required field zookeeper is unset!')
        if self.replication is None:
            raise TProtocolException(message='Required field replication is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class client_detail(object):
    """
    Attributes:
     - id
     - addr
     - age
     - idle
     - last_cmd
     - params
     - status

    """


    def __init__(self, id=None, addr=None, age=None, idle=None, last_cmd=None, params=None, status=None,):
        self.id = id
        self.addr = addr
        self.age = age
        self.idle = idle
        self.last_cmd = last_cmd
        self.params = params
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.addr = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.age = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.idle = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.last_cmd = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.params = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('client_detail')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRING, 2)
            oprot.writeString(self.addr.encode('utf-8') if sys.version_info[0] == 2 else self.addr)
            oprot.writeFieldEnd()
        if self.age is not None:
            oprot.writeFieldBegin('age', TType.STRING, 3)
            oprot.writeString(self.age.encode('utf-8') if sys.version_info[0] == 2 else self.age)
            oprot.writeFieldEnd()
        if self.idle is not None:
            oprot.writeFieldBegin('idle', TType.STRING, 4)
            oprot.writeString(self.idle.encode('utf-8') if sys.version_info[0] == 2 else self.idle)
            oprot.writeFieldEnd()
        if self.last_cmd is not None:
            oprot.writeFieldBegin('last_cmd', TType.STRING, 5)
            oprot.writeString(self.last_cmd.encode('utf-8') if sys.version_info[0] == 2 else self.last_cmd)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.STRING, 6)
            oprot.writeString(self.params.encode('utf-8') if sys.version_info[0] == 2 else self.params)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 7)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.addr is None:
            raise TProtocolException(message='Required field addr is unset!')
        if self.age is None:
            raise TProtocolException(message='Required field age is unset!')
        if self.idle is None:
            raise TProtocolException(message='Required field idle is unset!')
        if self.last_cmd is None:
            raise TProtocolException(message='Required field last_cmd is unset!')
        if self.params is None:
            raise TProtocolException(message='Required field params is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class client_detail_response(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - infos

    """


    def __init__(self, status=None, message=None, cost_time=None, infos=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.infos = infos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.infos = []
                    (_etype244, _size241) = iprot.readListBegin()
                    for _i245 in range(_size241):
                        _elem246 = client_detail()
                        _elem246.read(iprot)
                        self.infos.append(_elem246)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('client_detail_response')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.infos is not None:
            oprot.writeFieldBegin('infos', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.infos))
            for iter247 in self.infos:
                iter247.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.infos is None:
            raise TProtocolException(message='Required field infos is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class prop_cluster(object):
    """
    Attributes:
     - id
     - type
     - prop_name
     - prop_value
     - id_list

    """


    def __init__(self, id=None, type=None, prop_name=None, prop_value=None, id_list=None,):
        self.id = id
        self.type = type
        self.prop_name = prop_name
        self.prop_value = prop_value
        self.id_list = id_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.prop_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.prop_value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.id_list = []
                    (_etype251, _size248) = iprot.readListBegin()
                    for _i252 in range(_size248):
                        _elem253 = iprot.readI32()
                        self.id_list.append(_elem253)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('prop_cluster')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.prop_name is not None:
            oprot.writeFieldBegin('prop_name', TType.STRING, 3)
            oprot.writeString(self.prop_name.encode('utf-8') if sys.version_info[0] == 2 else self.prop_name)
            oprot.writeFieldEnd()
        if self.prop_value is not None:
            oprot.writeFieldBegin('prop_value', TType.STRING, 4)
            oprot.writeString(self.prop_value.encode('utf-8') if sys.version_info[0] == 2 else self.prop_value)
            oprot.writeFieldEnd()
        if self.id_list is not None:
            oprot.writeFieldBegin('id_list', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.id_list))
            for iter254 in self.id_list:
                oprot.writeI32(iter254)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.prop_name is None:
            raise TProtocolException(message='Required field prop_name is unset!')
        if self.prop_value is None:
            raise TProtocolException(message='Required field prop_value is unset!')
        if self.id_list is None:
            raise TProtocolException(message='Required field id_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Response(object):
    """
    Attributes:
     - message
     - status
     - cost_time

    """


    def __init__(self, message=None, status=None, cost_time=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class double_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - value

    """


    def __init__(self, message=None, status=None, cost_time=None, value=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('double_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.DOUBLE, 4)
            oprot.writeDouble(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class bool_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - value

    """


    def __init__(self, message=None, status=None, cost_time=None, value=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.value = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('bool_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.BOOL, 4)
            oprot.writeBool(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class add_node_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - fail_index_list
     - id_list

    """


    def __init__(self, message=None, status=None, cost_time=None, fail_index_list=None, id_list=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.fail_index_list = fail_index_list
        self.id_list = id_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.fail_index_list = []
                    (_etype258, _size255) = iprot.readListBegin()
                    for _i259 in range(_size255):
                        _elem260 = iprot.readI64()
                        self.fail_index_list.append(_elem260)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.id_list = []
                    (_etype264, _size261) = iprot.readListBegin()
                    for _i265 in range(_size261):
                        _elem266 = iprot.readI32()
                        self.id_list.append(_elem266)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_node_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.fail_index_list is not None:
            oprot.writeFieldBegin('fail_index_list', TType.LIST, 4)
            oprot.writeListBegin(TType.I64, len(self.fail_index_list))
            for iter267 in self.fail_index_list:
                oprot.writeI64(iter267)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.id_list is not None:
            oprot.writeFieldBegin('id_list', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.id_list))
            for iter268 in self.id_list:
                oprot.writeI32(iter268)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.fail_index_list is None:
            raise TProtocolException(message='Required field fail_index_list is unset!')
        if self.id_list is None:
            raise TProtocolException(message='Required field id_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class remove_node_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - fail_index_list

    """


    def __init__(self, message=None, status=None, cost_time=None, fail_index_list=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.fail_index_list = fail_index_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.fail_index_list = []
                    (_etype272, _size269) = iprot.readListBegin()
                    for _i273 in range(_size269):
                        _elem274 = iprot.readI64()
                        self.fail_index_list.append(_elem274)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_node_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.fail_index_list is not None:
            oprot.writeFieldBegin('fail_index_list', TType.LIST, 4)
            oprot.writeListBegin(TType.I64, len(self.fail_index_list))
            for iter275 in self.fail_index_list:
                oprot.writeI64(iter275)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.fail_index_list is None:
            raise TProtocolException(message='Required field fail_index_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class add_edge_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - fail_index_list
     - id_list

    """


    def __init__(self, message=None, status=None, cost_time=None, fail_index_list=None, id_list=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.fail_index_list = fail_index_list
        self.id_list = id_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.fail_index_list = []
                    (_etype279, _size276) = iprot.readListBegin()
                    for _i280 in range(_size276):
                        _elem281 = iprot.readI64()
                        self.fail_index_list.append(_elem281)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.id_list = []
                    (_etype285, _size282) = iprot.readListBegin()
                    for _i286 in range(_size282):
                        _elem287 = ezoocommon.ttypes.edge_id()
                        _elem287.read(iprot)
                        self.id_list.append(_elem287)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_edge_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.fail_index_list is not None:
            oprot.writeFieldBegin('fail_index_list', TType.LIST, 4)
            oprot.writeListBegin(TType.I64, len(self.fail_index_list))
            for iter288 in self.fail_index_list:
                oprot.writeI64(iter288)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.id_list is not None:
            oprot.writeFieldBegin('id_list', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.id_list))
            for iter289 in self.id_list:
                iter289.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.fail_index_list is None:
            raise TProtocolException(message='Required field fail_index_list is unset!')
        if self.id_list is None:
            raise TProtocolException(message='Required field id_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class remove_edge_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - fail_index_list

    """


    def __init__(self, message=None, status=None, cost_time=None, fail_index_list=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.fail_index_list = fail_index_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.fail_index_list = []
                    (_etype293, _size290) = iprot.readListBegin()
                    for _i294 in range(_size290):
                        _elem295 = iprot.readI64()
                        self.fail_index_list.append(_elem295)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_edge_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.fail_index_list is not None:
            oprot.writeFieldBegin('fail_index_list', TType.LIST, 4)
            oprot.writeListBegin(TType.I64, len(self.fail_index_list))
            for iter296 in self.fail_index_list:
                oprot.writeI64(iter296)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.fail_index_list is None:
            raise TProtocolException(message='Required field fail_index_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class update_node_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - id

    """


    def __init__(self, message=None, status=None, cost_time=None, id=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_node_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 4)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class update_edge_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - id

    """


    def __init__(self, message=None, status=None, cost_time=None, id=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.id = ezoocommon.ttypes.edge_basic_id()
                    self.id.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_edge_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRUCT, 4)
            self.id.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class update_nodes_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - fail_index
     - id_list

    """


    def __init__(self, message=None, status=None, cost_time=None, fail_index=None, id_list=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.fail_index = fail_index
        self.id_list = id_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.fail_index = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.id_list = []
                    (_etype300, _size297) = iprot.readListBegin()
                    for _i301 in range(_size297):
                        _elem302 = iprot.readI32()
                        self.id_list.append(_elem302)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_nodes_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.fail_index is not None:
            oprot.writeFieldBegin('fail_index', TType.I64, 4)
            oprot.writeI64(self.fail_index)
            oprot.writeFieldEnd()
        if self.id_list is not None:
            oprot.writeFieldBegin('id_list', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.id_list))
            for iter303 in self.id_list:
                oprot.writeI32(iter303)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.fail_index is None:
            raise TProtocolException(message='Required field fail_index is unset!')
        if self.id_list is None:
            raise TProtocolException(message='Required field id_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class update_edges_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - fail_index
     - id_list

    """


    def __init__(self, message=None, status=None, cost_time=None, fail_index=None, id_list=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.fail_index = fail_index
        self.id_list = id_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.fail_index = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.id_list = []
                    (_etype307, _size304) = iprot.readListBegin()
                    for _i308 in range(_size304):
                        _elem309 = ezoocommon.ttypes.edge_id()
                        _elem309.read(iprot)
                        self.id_list.append(_elem309)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_edges_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.fail_index is not None:
            oprot.writeFieldBegin('fail_index', TType.I64, 4)
            oprot.writeI64(self.fail_index)
            oprot.writeFieldEnd()
        if self.id_list is not None:
            oprot.writeFieldBegin('id_list', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.id_list))
            for iter310 in self.id_list:
                iter310.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.fail_index is None:
            raise TProtocolException(message='Required field fail_index is unset!')
        if self.id_list is None:
            raise TProtocolException(message='Required field id_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node_s(object):
    """
    Attributes:
     - type
     - props
     - node_id
     - status
     - message
     - cost_time

    """


    def __init__(self, type=None, props=None, node_id=None, status=None, message=None, cost_time=None,):
        self.type = type
        self.props = props
        self.node_id = node_id
        self.status = status
        self.message = message
        self.cost_time = cost_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.props = {}
                    (_ktype312, _vtype313, _size311) = iprot.readMapBegin()
                    for _i315 in range(_size311):
                        _key316 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val317 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.props[_key316] = _val317
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node_s')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.props))
            for kiter318, viter319 in self.props.items():
                oprot.writeString(kiter318.encode('utf-8') if sys.version_info[0] == 2 else kiter318)
                oprot.writeString(viter319.encode('utf-8') if sys.version_info[0] == 2 else viter319)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.node_id is not None:
            oprot.writeFieldBegin('node_id', TType.I32, 3)
            oprot.writeI32(self.node_id)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 5)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 6)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.props is None:
            raise TProtocolException(message='Required field props is unset!')
        if self.node_id is None:
            raise TProtocolException(message='Required field node_id is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class nodes_s(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - nodes

    """


    def __init__(self, message=None, status=None, cost_time=None, nodes=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.nodes = nodes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype323, _size320) = iprot.readListBegin()
                    for _i324 in range(_size320):
                        _elem325 = node_v2()
                        _elem325.read(iprot)
                        self.nodes.append(_elem325)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('nodes_s')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.nodes))
            for iter326 in self.nodes:
                iter326.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class edge_s(object):
    """
    Attributes:
     - type
     - props
     - status
     - message
     - cost_time
     - src_node_props
     - dest_node_props
     - src_node_type
     - dest_node_type
     - src_node_id
     - dest_node_id
     - edge_id

    """


    def __init__(self, type=None, props=None, status=None, message=None, cost_time=None, src_node_props=None, dest_node_props=None, src_node_type=None, dest_node_type=None, src_node_id=None, dest_node_id=None, edge_id=None,):
        self.type = type
        self.props = props
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.src_node_props = src_node_props
        self.dest_node_props = dest_node_props
        self.src_node_type = src_node_type
        self.dest_node_type = dest_node_type
        self.src_node_id = src_node_id
        self.dest_node_id = dest_node_id
        self.edge_id = edge_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.props = {}
                    (_ktype328, _vtype329, _size327) = iprot.readMapBegin()
                    for _i331 in range(_size327):
                        _key332 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val333 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.props[_key332] = _val333
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.src_node_props = {}
                    (_ktype335, _vtype336, _size334) = iprot.readMapBegin()
                    for _i338 in range(_size334):
                        _key339 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val340 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.src_node_props[_key339] = _val340
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.dest_node_props = {}
                    (_ktype342, _vtype343, _size341) = iprot.readMapBegin()
                    for _i345 in range(_size341):
                        _key346 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val347 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.dest_node_props[_key346] = _val347
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.src_node_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.dest_node_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.src_node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.dest_node_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.edge_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('edge_s')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.props is not None:
            oprot.writeFieldBegin('props', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.props))
            for kiter348, viter349 in self.props.items():
                oprot.writeString(kiter348.encode('utf-8') if sys.version_info[0] == 2 else kiter348)
                oprot.writeString(viter349.encode('utf-8') if sys.version_info[0] == 2 else viter349)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 4)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 5)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.src_node_props is not None:
            oprot.writeFieldBegin('src_node_props', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.src_node_props))
            for kiter350, viter351 in self.src_node_props.items():
                oprot.writeString(kiter350.encode('utf-8') if sys.version_info[0] == 2 else kiter350)
                oprot.writeString(viter351.encode('utf-8') if sys.version_info[0] == 2 else viter351)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.dest_node_props is not None:
            oprot.writeFieldBegin('dest_node_props', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.dest_node_props))
            for kiter352, viter353 in self.dest_node_props.items():
                oprot.writeString(kiter352.encode('utf-8') if sys.version_info[0] == 2 else kiter352)
                oprot.writeString(viter353.encode('utf-8') if sys.version_info[0] == 2 else viter353)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.src_node_type is not None:
            oprot.writeFieldBegin('src_node_type', TType.STRING, 8)
            oprot.writeString(self.src_node_type.encode('utf-8') if sys.version_info[0] == 2 else self.src_node_type)
            oprot.writeFieldEnd()
        if self.dest_node_type is not None:
            oprot.writeFieldBegin('dest_node_type', TType.STRING, 9)
            oprot.writeString(self.dest_node_type.encode('utf-8') if sys.version_info[0] == 2 else self.dest_node_type)
            oprot.writeFieldEnd()
        if self.src_node_id is not None:
            oprot.writeFieldBegin('src_node_id', TType.I32, 10)
            oprot.writeI32(self.src_node_id)
            oprot.writeFieldEnd()
        if self.dest_node_id is not None:
            oprot.writeFieldBegin('dest_node_id', TType.I32, 11)
            oprot.writeI32(self.dest_node_id)
            oprot.writeFieldEnd()
        if self.edge_id is not None:
            oprot.writeFieldBegin('edge_id', TType.I32, 12)
            oprot.writeI32(self.edge_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.props is None:
            raise TProtocolException(message='Required field props is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.src_node_props is None:
            raise TProtocolException(message='Required field src_node_props is unset!')
        if self.dest_node_props is None:
            raise TProtocolException(message='Required field dest_node_props is unset!')
        if self.src_node_type is None:
            raise TProtocolException(message='Required field src_node_type is unset!')
        if self.dest_node_type is None:
            raise TProtocolException(message='Required field dest_node_type is unset!')
        if self.src_node_id is None:
            raise TProtocolException(message='Required field src_node_id is unset!')
        if self.dest_node_id is None:
            raise TProtocolException(message='Required field dest_node_id is unset!')
        if self.edge_id is None:
            raise TProtocolException(message='Required field edge_id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class edges_s(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - edges

    """


    def __init__(self, message=None, status=None, cost_time=None, edges=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.edges = edges

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.edges = []
                    (_etype357, _size354) = iprot.readListBegin()
                    for _i358 in range(_size354):
                        _elem359 = edge_v2()
                        _elem359.read(iprot)
                        self.edges.append(_elem359)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('edges_s')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.edges is not None:
            oprot.writeFieldBegin('edges', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.edges))
            for iter360 in self.edges:
                iter360.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.edges is None:
            raise TProtocolException(message='Required field edges is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class all_edge(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - edge_id_list
     - edge_type_list

    """


    def __init__(self, message=None, status=None, cost_time=None, edge_id_list=None, edge_type_list=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.edge_id_list = edge_id_list
        self.edge_type_list = edge_type_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.edge_id_list = []
                    (_etype364, _size361) = iprot.readListBegin()
                    for _i365 in range(_size361):
                        _elem366 = iprot.readI32()
                        self.edge_id_list.append(_elem366)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.edge_type_list = []
                    (_etype370, _size367) = iprot.readListBegin()
                    for _i371 in range(_size367):
                        _elem372 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.edge_type_list.append(_elem372)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('all_edge')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.edge_id_list is not None:
            oprot.writeFieldBegin('edge_id_list', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.edge_id_list))
            for iter373 in self.edge_id_list:
                oprot.writeI32(iter373)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_type_list is not None:
            oprot.writeFieldBegin('edge_type_list', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.edge_type_list))
            for iter374 in self.edge_type_list:
                oprot.writeString(iter374.encode('utf-8') if sys.version_info[0] == 2 else iter374)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.edge_id_list is None:
            raise TProtocolException(message='Required field edge_id_list is unset!')
        if self.edge_type_list is None:
            raise TProtocolException(message='Required field edge_type_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class one_neighbour(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - relations

    """


    def __init__(self, message=None, status=None, cost_time=None, relations=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.relations = relations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.relations = {}
                    (_ktype376, _vtype377, _size375) = iprot.readMapBegin()
                    for _i379 in range(_size375):
                        _key380 = iprot.readI32()
                        _val381 = []
                        (_etype385, _size382) = iprot.readListBegin()
                        for _i386 in range(_size382):
                            _elem387 = ezoocommon.ttypes.edge_basic_id()
                            _elem387.read(iprot)
                            _val381.append(_elem387)
                        iprot.readListEnd()
                        self.relations[_key380] = _val381
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('one_neighbour')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.relations is not None:
            oprot.writeFieldBegin('relations', TType.MAP, 4)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.relations))
            for kiter388, viter389 in self.relations.items():
                oprot.writeI32(kiter388)
                oprot.writeListBegin(TType.STRUCT, len(viter389))
                for iter390 in viter389:
                    iter390.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.relations is None:
            raise TProtocolException(message='Required field relations is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class nodes(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - node_list

    """


    def __init__(self, message=None, status=None, cost_time=None, node_list=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.node_list = node_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.node_list = []
                    (_etype394, _size391) = iprot.readListBegin()
                    for _i395 in range(_size391):
                        _elem396 = ezoocommon.ttypes.node()
                        _elem396.read(iprot)
                        self.node_list.append(_elem396)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('nodes')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.node_list is not None:
            oprot.writeFieldBegin('node_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.node_list))
            for iter397 in self.node_list:
                iter397.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.node_list is None:
            raise TProtocolException(message='Required field node_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class paths(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - nodes
     - path_list

    """


    def __init__(self, status=None, message=None, cost_time=None, nodes=None, path_list=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.nodes = nodes
        self.path_list = path_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.nodes = {}
                    (_ktype399, _vtype400, _size398) = iprot.readMapBegin()
                    for _i402 in range(_size398):
                        _key403 = iprot.readI32()
                        _val404 = ezoocommon.ttypes.node()
                        _val404.read(iprot)
                        self.nodes[_key403] = _val404
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.path_list = []
                    (_etype408, _size405) = iprot.readListBegin()
                    for _i409 in range(_size405):
                        _elem410 = []
                        (_etype414, _size411) = iprot.readListBegin()
                        for _i415 in range(_size411):
                            _elem416 = ezoocommon.ttypes.edge()
                            _elem416.read(iprot)
                            _elem410.append(_elem416)
                        iprot.readListEnd()
                        self.path_list.append(_elem410)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('paths')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.MAP, 4)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.nodes))
            for kiter417, viter418 in self.nodes.items():
                oprot.writeI32(kiter417)
                viter418.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.path_list is not None:
            oprot.writeFieldBegin('path_list', TType.LIST, 5)
            oprot.writeListBegin(TType.LIST, len(self.path_list))
            for iter419 in self.path_list:
                oprot.writeListBegin(TType.STRUCT, len(iter419))
                for iter420 in iter419:
                    iter420.write(oprot)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        if self.path_list is None:
            raise TProtocolException(message='Required field path_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class paths_v2(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - paths
     - nodes
     - node_type_mapping
     - edge_type_mapping

    """


    def __init__(self, status=None, message=None, cost_time=None, paths=None, nodes=None, node_type_mapping=None, edge_type_mapping=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.paths = paths
        self.nodes = nodes
        self.node_type_mapping = node_type_mapping
        self.edge_type_mapping = edge_type_mapping

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.paths = []
                    (_etype424, _size421) = iprot.readListBegin()
                    for _i425 in range(_size421):
                        _elem426 = []
                        (_etype430, _size427) = iprot.readListBegin()
                        for _i431 in range(_size427):
                            _elem432 = ezoocommon.ttypes.edge_basic()
                            _elem432.read(iprot)
                            _elem426.append(_elem432)
                        iprot.readListEnd()
                        self.paths.append(_elem426)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype436, _size433) = iprot.readListBegin()
                    for _i437 in range(_size433):
                        _elem438 = ezoocommon.ttypes.node_basic()
                        _elem438.read(iprot)
                        self.nodes.append(_elem438)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.node_type_mapping = []
                    (_etype442, _size439) = iprot.readListBegin()
                    for _i443 in range(_size439):
                        _elem444 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.node_type_mapping.append(_elem444)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.edge_type_mapping = []
                    (_etype448, _size445) = iprot.readListBegin()
                    for _i449 in range(_size445):
                        _elem450 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.edge_type_mapping.append(_elem450)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('paths_v2')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.paths is not None:
            oprot.writeFieldBegin('paths', TType.LIST, 4)
            oprot.writeListBegin(TType.LIST, len(self.paths))
            for iter451 in self.paths:
                oprot.writeListBegin(TType.STRUCT, len(iter451))
                for iter452 in iter451:
                    iter452.write(oprot)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.nodes))
            for iter453 in self.nodes:
                iter453.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.node_type_mapping is not None:
            oprot.writeFieldBegin('node_type_mapping', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.node_type_mapping))
            for iter454 in self.node_type_mapping:
                oprot.writeString(iter454.encode('utf-8') if sys.version_info[0] == 2 else iter454)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_type_mapping is not None:
            oprot.writeFieldBegin('edge_type_mapping', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.edge_type_mapping))
            for iter455 in self.edge_type_mapping:
                oprot.writeString(iter455.encode('utf-8') if sys.version_info[0] == 2 else iter455)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.paths is None:
            raise TProtocolException(message='Required field paths is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        if self.node_type_mapping is None:
            raise TProtocolException(message='Required field node_type_mapping is unset!')
        if self.edge_type_mapping is None:
            raise TProtocolException(message='Required field edge_type_mapping is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class paths_simple_v2(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - paths

    """


    def __init__(self, status=None, message=None, cost_time=None, paths=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.paths = paths

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.paths = []
                    (_etype459, _size456) = iprot.readListBegin()
                    for _i460 in range(_size456):
                        _elem461 = []
                        (_etype465, _size462) = iprot.readListBegin()
                        for _i466 in range(_size462):
                            _elem467 = ezoocommon.ttypes.edge_basic()
                            _elem467.read(iprot)
                            _elem461.append(_elem467)
                        iprot.readListEnd()
                        self.paths.append(_elem461)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('paths_simple_v2')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.paths is not None:
            oprot.writeFieldBegin('paths', TType.LIST, 4)
            oprot.writeListBegin(TType.LIST, len(self.paths))
            for iter468 in self.paths:
                oprot.writeListBegin(TType.STRUCT, len(iter468))
                for iter469 in iter468:
                    iter469.write(oprot)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.paths is None:
            raise TProtocolException(message='Required field paths is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class one_path_v2(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - paths
     - nodes
     - node_type_mapping
     - edge_type_mapping

    """


    def __init__(self, status=None, message=None, cost_time=None, paths=None, nodes=None, node_type_mapping=None, edge_type_mapping=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.paths = paths
        self.nodes = nodes
        self.node_type_mapping = node_type_mapping
        self.edge_type_mapping = edge_type_mapping

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.paths = []
                    (_etype473, _size470) = iprot.readListBegin()
                    for _i474 in range(_size470):
                        _elem475 = ezoocommon.ttypes.edge_basic()
                        _elem475.read(iprot)
                        self.paths.append(_elem475)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype479, _size476) = iprot.readListBegin()
                    for _i480 in range(_size476):
                        _elem481 = ezoocommon.ttypes.node_basic()
                        _elem481.read(iprot)
                        self.nodes.append(_elem481)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.node_type_mapping = []
                    (_etype485, _size482) = iprot.readListBegin()
                    for _i486 in range(_size482):
                        _elem487 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.node_type_mapping.append(_elem487)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.edge_type_mapping = []
                    (_etype491, _size488) = iprot.readListBegin()
                    for _i492 in range(_size488):
                        _elem493 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.edge_type_mapping.append(_elem493)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('one_path_v2')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.paths is not None:
            oprot.writeFieldBegin('paths', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.paths))
            for iter494 in self.paths:
                iter494.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.nodes))
            for iter495 in self.nodes:
                iter495.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.node_type_mapping is not None:
            oprot.writeFieldBegin('node_type_mapping', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.node_type_mapping))
            for iter496 in self.node_type_mapping:
                oprot.writeString(iter496.encode('utf-8') if sys.version_info[0] == 2 else iter496)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_type_mapping is not None:
            oprot.writeFieldBegin('edge_type_mapping', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.edge_type_mapping))
            for iter497 in self.edge_type_mapping:
                oprot.writeString(iter497.encode('utf-8') if sys.version_info[0] == 2 else iter497)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.paths is None:
            raise TProtocolException(message='Required field paths is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        if self.node_type_mapping is None:
            raise TProtocolException(message='Required field node_type_mapping is unset!')
        if self.edge_type_mapping is None:
            raise TProtocolException(message='Required field edge_type_mapping is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class one_path_v3(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - paths
     - nodes
     - node_type_mapping
     - edge_type_mapping

    """


    def __init__(self, status=None, message=None, cost_time=None, paths=None, nodes=None, node_type_mapping=None, edge_type_mapping=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.paths = paths
        self.nodes = nodes
        self.node_type_mapping = node_type_mapping
        self.edge_type_mapping = edge_type_mapping

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.paths = []
                    (_etype501, _size498) = iprot.readListBegin()
                    for _i502 in range(_size498):
                        _elem503 = []
                        (_etype507, _size504) = iprot.readListBegin()
                        for _i508 in range(_size504):
                            _elem509 = ezoocommon.ttypes.edge_basic()
                            _elem509.read(iprot)
                            _elem503.append(_elem509)
                        iprot.readListEnd()
                        self.paths.append(_elem503)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype513, _size510) = iprot.readListBegin()
                    for _i514 in range(_size510):
                        _elem515 = ezoocommon.ttypes.node_basic()
                        _elem515.read(iprot)
                        self.nodes.append(_elem515)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.node_type_mapping = []
                    (_etype519, _size516) = iprot.readListBegin()
                    for _i520 in range(_size516):
                        _elem521 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.node_type_mapping.append(_elem521)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.edge_type_mapping = []
                    (_etype525, _size522) = iprot.readListBegin()
                    for _i526 in range(_size522):
                        _elem527 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.edge_type_mapping.append(_elem527)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('one_path_v3')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.paths is not None:
            oprot.writeFieldBegin('paths', TType.LIST, 4)
            oprot.writeListBegin(TType.LIST, len(self.paths))
            for iter528 in self.paths:
                oprot.writeListBegin(TType.STRUCT, len(iter528))
                for iter529 in iter528:
                    iter529.write(oprot)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.nodes))
            for iter530 in self.nodes:
                iter530.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.node_type_mapping is not None:
            oprot.writeFieldBegin('node_type_mapping', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.node_type_mapping))
            for iter531 in self.node_type_mapping:
                oprot.writeString(iter531.encode('utf-8') if sys.version_info[0] == 2 else iter531)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_type_mapping is not None:
            oprot.writeFieldBegin('edge_type_mapping', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.edge_type_mapping))
            for iter532 in self.edge_type_mapping:
                oprot.writeString(iter532.encode('utf-8') if sys.version_info[0] == 2 else iter532)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.paths is None:
            raise TProtocolException(message='Required field paths is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        if self.node_type_mapping is None:
            raise TProtocolException(message='Required field node_type_mapping is unset!')
        if self.edge_type_mapping is None:
            raise TProtocolException(message='Required field edge_type_mapping is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class dij_l0(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - paths
     - nodes
     - length

    """


    def __init__(self, status=None, message=None, cost_time=None, paths=None, nodes=None, length=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.paths = paths
        self.nodes = nodes
        self.length = length

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.paths = []
                    (_etype536, _size533) = iprot.readListBegin()
                    for _i537 in range(_size533):
                        _elem538 = []
                        (_etype542, _size539) = iprot.readListBegin()
                        for _i543 in range(_size539):
                            _elem544 = ezoocommon.ttypes.edge_basic()
                            _elem544.read(iprot)
                            _elem538.append(_elem544)
                        iprot.readListEnd()
                        self.paths.append(_elem538)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype548, _size545) = iprot.readListBegin()
                    for _i549 in range(_size545):
                        _elem550 = ezoocommon.ttypes.node_basic()
                        _elem550.read(iprot)
                        self.nodes.append(_elem550)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.length = []
                    (_etype554, _size551) = iprot.readListBegin()
                    for _i555 in range(_size551):
                        _elem556 = iprot.readDouble()
                        self.length.append(_elem556)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('dij_l0')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.paths is not None:
            oprot.writeFieldBegin('paths', TType.LIST, 4)
            oprot.writeListBegin(TType.LIST, len(self.paths))
            for iter557 in self.paths:
                oprot.writeListBegin(TType.STRUCT, len(iter557))
                for iter558 in iter557:
                    iter558.write(oprot)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.nodes))
            for iter559 in self.nodes:
                iter559.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.length is not None:
            oprot.writeFieldBegin('length', TType.LIST, 6)
            oprot.writeListBegin(TType.DOUBLE, len(self.length))
            for iter560 in self.length:
                oprot.writeDouble(iter560)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.paths is None:
            raise TProtocolException(message='Required field paths is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        if self.length is None:
            raise TProtocolException(message='Required field length is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class neighbour(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - neighbours
     - nodes
     - breviary_relations
     - other_relations

    """


    def __init__(self, status=None, message=None, cost_time=None, neighbours=None, nodes=None, breviary_relations=None, other_relations=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.neighbours = neighbours
        self.nodes = nodes
        self.breviary_relations = breviary_relations
        self.other_relations = other_relations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.neighbours = []
                    (_etype564, _size561) = iprot.readListBegin()
                    for _i565 in range(_size561):
                        _elem566 = []
                        (_etype570, _size567) = iprot.readListBegin()
                        for _i571 in range(_size567):
                            _elem572 = iprot.readI32()
                            _elem566.append(_elem572)
                        iprot.readListEnd()
                        self.neighbours.append(_elem566)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.nodes = {}
                    (_ktype574, _vtype575, _size573) = iprot.readMapBegin()
                    for _i577 in range(_size573):
                        _key578 = iprot.readI32()
                        _val579 = ezoocommon.ttypes.node()
                        _val579.read(iprot)
                        self.nodes[_key578] = _val579
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.breviary_relations = []
                    (_etype583, _size580) = iprot.readListBegin()
                    for _i584 in range(_size580):
                        _elem585 = ezoocommon.ttypes.edge()
                        _elem585.read(iprot)
                        self.breviary_relations.append(_elem585)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.other_relations = []
                    (_etype589, _size586) = iprot.readListBegin()
                    for _i590 in range(_size586):
                        _elem591 = ezoocommon.ttypes.edge()
                        _elem591.read(iprot)
                        self.other_relations.append(_elem591)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('neighbour')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.neighbours is not None:
            oprot.writeFieldBegin('neighbours', TType.LIST, 4)
            oprot.writeListBegin(TType.LIST, len(self.neighbours))
            for iter592 in self.neighbours:
                oprot.writeListBegin(TType.I32, len(iter592))
                for iter593 in iter592:
                    oprot.writeI32(iter593)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.MAP, 5)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.nodes))
            for kiter594, viter595 in self.nodes.items():
                oprot.writeI32(kiter594)
                viter595.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.breviary_relations is not None:
            oprot.writeFieldBegin('breviary_relations', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.breviary_relations))
            for iter596 in self.breviary_relations:
                iter596.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.other_relations is not None:
            oprot.writeFieldBegin('other_relations', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.other_relations))
            for iter597 in self.other_relations:
                iter597.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.neighbours is None:
            raise TProtocolException(message='Required field neighbours is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        if self.breviary_relations is None:
            raise TProtocolException(message='Required field breviary_relations is unset!')
        if self.other_relations is None:
            raise TProtocolException(message='Required field other_relations is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class neighbour_l1(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - nodes
     - relations

    """


    def __init__(self, status=None, message=None, cost_time=None, nodes=None, relations=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.nodes = nodes
        self.relations = relations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.nodes = {}
                    (_ktype599, _vtype600, _size598) = iprot.readMapBegin()
                    for _i602 in range(_size598):
                        _key603 = iprot.readI32()
                        _val604 = ezoocommon.ttypes.node()
                        _val604.read(iprot)
                        self.nodes[_key603] = _val604
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.relations = []
                    (_etype608, _size605) = iprot.readListBegin()
                    for _i609 in range(_size605):
                        _elem610 = ezoocommon.ttypes.edge()
                        _elem610.read(iprot)
                        self.relations.append(_elem610)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('neighbour_l1')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.MAP, 4)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.nodes))
            for kiter611, viter612 in self.nodes.items():
                oprot.writeI32(kiter611)
                viter612.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.relations is not None:
            oprot.writeFieldBegin('relations', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.relations))
            for iter613 in self.relations:
                iter613.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        if self.relations is None:
            raise TProtocolException(message='Required field relations is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class neighbour_v2(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - nodes
     - neighbour_count
     - node_type_mapping

    """


    def __init__(self, status=None, message=None, cost_time=None, nodes=None, neighbour_count=None, node_type_mapping=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.nodes = nodes
        self.neighbour_count = neighbour_count
        self.node_type_mapping = node_type_mapping

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype617, _size614) = iprot.readListBegin()
                    for _i618 in range(_size614):
                        _elem619 = {}
                        (_ktype621, _vtype622, _size620) = iprot.readMapBegin()
                        for _i624 in range(_size620):
                            _key625 = iprot.readI32()
                            _val626 = []
                            (_etype630, _size627) = iprot.readListBegin()
                            for _i631 in range(_size627):
                                _elem632 = ezoocommon.ttypes.node_basic()
                                _elem632.read(iprot)
                                _val626.append(_elem632)
                            iprot.readListEnd()
                            _elem619[_key625] = _val626
                        iprot.readMapEnd()
                        self.nodes.append(_elem619)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.neighbour_count = []
                    (_etype636, _size633) = iprot.readListBegin()
                    for _i637 in range(_size633):
                        _elem638 = iprot.readI64()
                        self.neighbour_count.append(_elem638)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.node_type_mapping = []
                    (_etype642, _size639) = iprot.readListBegin()
                    for _i643 in range(_size639):
                        _elem644 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.node_type_mapping.append(_elem644)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('neighbour_v2')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 4)
            oprot.writeListBegin(TType.MAP, len(self.nodes))
            for iter645 in self.nodes:
                oprot.writeMapBegin(TType.I32, TType.LIST, len(iter645))
                for kiter646, viter647 in iter645.items():
                    oprot.writeI32(kiter646)
                    oprot.writeListBegin(TType.STRUCT, len(viter647))
                    for iter648 in viter647:
                        iter648.write(oprot)
                    oprot.writeListEnd()
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.neighbour_count is not None:
            oprot.writeFieldBegin('neighbour_count', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.neighbour_count))
            for iter649 in self.neighbour_count:
                oprot.writeI64(iter649)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.node_type_mapping is not None:
            oprot.writeFieldBegin('node_type_mapping', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.node_type_mapping))
            for iter650 in self.node_type_mapping:
                oprot.writeString(iter650.encode('utf-8') if sys.version_info[0] == 2 else iter650)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        if self.neighbour_count is None:
            raise TProtocolException(message='Required field neighbour_count is unset!')
        if self.node_type_mapping is None:
            raise TProtocolException(message='Required field node_type_mapping is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class neighbour_simple_v2(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - nodes

    """


    def __init__(self, status=None, message=None, cost_time=None, nodes=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.nodes = nodes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype654, _size651) = iprot.readListBegin()
                    for _i655 in range(_size651):
                        _elem656 = []
                        (_etype660, _size657) = iprot.readListBegin()
                        for _i661 in range(_size657):
                            _elem662 = iprot.readI32()
                            _elem656.append(_elem662)
                        iprot.readListEnd()
                        self.nodes.append(_elem656)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('neighbour_simple_v2')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 4)
            oprot.writeListBegin(TType.LIST, len(self.nodes))
            for iter663 in self.nodes:
                oprot.writeListBegin(TType.I32, len(iter663))
                for iter664 in iter663:
                    oprot.writeI32(iter664)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class neighbour_path(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - relations
     - edge_type_mapping

    """


    def __init__(self, status=None, message=None, cost_time=None, relations=None, edge_type_mapping=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.relations = relations
        self.edge_type_mapping = edge_type_mapping

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.relations = {}
                    (_ktype666, _vtype667, _size665) = iprot.readMapBegin()
                    for _i669 in range(_size665):
                        _key670 = iprot.readI32()
                        _val671 = []
                        (_etype675, _size672) = iprot.readListBegin()
                        for _i676 in range(_size672):
                            _elem677 = ezoocommon.ttypes.edge_basic()
                            _elem677.read(iprot)
                            _val671.append(_elem677)
                        iprot.readListEnd()
                        self.relations[_key670] = _val671
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.edge_type_mapping = []
                    (_etype681, _size678) = iprot.readListBegin()
                    for _i682 in range(_size678):
                        _elem683 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.edge_type_mapping.append(_elem683)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('neighbour_path')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.relations is not None:
            oprot.writeFieldBegin('relations', TType.MAP, 4)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.relations))
            for kiter684, viter685 in self.relations.items():
                oprot.writeI32(kiter684)
                oprot.writeListBegin(TType.STRUCT, len(viter685))
                for iter686 in viter685:
                    iter686.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.edge_type_mapping is not None:
            oprot.writeFieldBegin('edge_type_mapping', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.edge_type_mapping))
            for iter687 in self.edge_type_mapping:
                oprot.writeString(iter687.encode('utf-8') if sys.version_info[0] == 2 else iter687)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.relations is None:
            raise TProtocolException(message='Required field relations is unset!')
        if self.edge_type_mapping is None:
            raise TProtocolException(message='Required field edge_type_mapping is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class neighbour_count_v2(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - nodes_count

    """


    def __init__(self, status=None, message=None, cost_time=None, nodes_count=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.nodes_count = nodes_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.nodes_count = []
                    (_etype691, _size688) = iprot.readListBegin()
                    for _i692 in range(_size688):
                        _elem693 = iprot.readI64()
                        self.nodes_count.append(_elem693)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('neighbour_count_v2')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.nodes_count is not None:
            oprot.writeFieldBegin('nodes_count', TType.LIST, 4)
            oprot.writeListBegin(TType.I64, len(self.nodes_count))
            for iter694 in self.nodes_count:
                oprot.writeI64(iter694)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.nodes_count is None:
            raise TProtocolException(message='Required field nodes_count is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class common_neighbour(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - nodes
     - relations
     - id_list

    """


    def __init__(self, status=None, message=None, cost_time=None, nodes=None, relations=None, id_list=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.nodes = nodes
        self.relations = relations
        self.id_list = id_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.nodes = {}
                    (_ktype696, _vtype697, _size695) = iprot.readMapBegin()
                    for _i699 in range(_size695):
                        _key700 = iprot.readI32()
                        _val701 = ezoocommon.ttypes.node()
                        _val701.read(iprot)
                        self.nodes[_key700] = _val701
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.relations = []
                    (_etype705, _size702) = iprot.readListBegin()
                    for _i706 in range(_size702):
                        _elem707 = ezoocommon.ttypes.edge()
                        _elem707.read(iprot)
                        self.relations.append(_elem707)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.id_list = []
                    (_etype711, _size708) = iprot.readListBegin()
                    for _i712 in range(_size708):
                        _elem713 = iprot.readI32()
                        self.id_list.append(_elem713)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('common_neighbour')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.MAP, 4)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.nodes))
            for kiter714, viter715 in self.nodes.items():
                oprot.writeI32(kiter714)
                viter715.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.relations is not None:
            oprot.writeFieldBegin('relations', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.relations))
            for iter716 in self.relations:
                iter716.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.id_list is not None:
            oprot.writeFieldBegin('id_list', TType.LIST, 6)
            oprot.writeListBegin(TType.I32, len(self.id_list))
            for iter717 in self.id_list:
                oprot.writeI32(iter717)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        if self.relations is None:
            raise TProtocolException(message='Required field relations is unset!')
        if self.id_list is None:
            raise TProtocolException(message='Required field id_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class common_neighbour_for_studio(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - nodes
     - relations
     - node_type_mapping
     - edge_type_mapping

    """


    def __init__(self, status=None, message=None, cost_time=None, nodes=None, relations=None, node_type_mapping=None, edge_type_mapping=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.nodes = nodes
        self.relations = relations
        self.node_type_mapping = node_type_mapping
        self.edge_type_mapping = edge_type_mapping

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype721, _size718) = iprot.readListBegin()
                    for _i722 in range(_size718):
                        _elem723 = ezoocommon.ttypes.node_basic()
                        _elem723.read(iprot)
                        self.nodes.append(_elem723)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.relations = []
                    (_etype727, _size724) = iprot.readListBegin()
                    for _i728 in range(_size724):
                        _elem729 = ezoocommon.ttypes.edge_basic()
                        _elem729.read(iprot)
                        self.relations.append(_elem729)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.node_type_mapping = []
                    (_etype733, _size730) = iprot.readListBegin()
                    for _i734 in range(_size730):
                        _elem735 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.node_type_mapping.append(_elem735)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.edge_type_mapping = []
                    (_etype739, _size736) = iprot.readListBegin()
                    for _i740 in range(_size736):
                        _elem741 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.edge_type_mapping.append(_elem741)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('common_neighbour_for_studio')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.nodes))
            for iter742 in self.nodes:
                iter742.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.relations is not None:
            oprot.writeFieldBegin('relations', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.relations))
            for iter743 in self.relations:
                iter743.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.node_type_mapping is not None:
            oprot.writeFieldBegin('node_type_mapping', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.node_type_mapping))
            for iter744 in self.node_type_mapping:
                oprot.writeString(iter744.encode('utf-8') if sys.version_info[0] == 2 else iter744)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_type_mapping is not None:
            oprot.writeFieldBegin('edge_type_mapping', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.edge_type_mapping))
            for iter745 in self.edge_type_mapping:
                oprot.writeString(iter745.encode('utf-8') if sys.version_info[0] == 2 else iter745)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        if self.relations is None:
            raise TProtocolException(message='Required field relations is unset!')
        if self.node_type_mapping is None:
            raise TProtocolException(message='Required field node_type_mapping is unset!')
        if self.edge_type_mapping is None:
            raise TProtocolException(message='Required field edge_type_mapping is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class common_simple_neighbour(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - nodes

    """


    def __init__(self, status=None, message=None, cost_time=None, nodes=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.nodes = nodes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype749, _size746) = iprot.readListBegin()
                    for _i750 in range(_size746):
                        _elem751 = iprot.readI32()
                        self.nodes.append(_elem751)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('common_simple_neighbour')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.nodes))
            for iter752 in self.nodes:
                oprot.writeI32(iter752)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class neighbour_count(object):
    """
    Attributes:
     - node_count
     - path_count
     - status
     - cost_time
     - message

    """


    def __init__(self, node_count=None, path_count=None, status=None, cost_time=None, message=None,):
        self.node_count = node_count
        self.path_count = path_count
        self.status = status
        self.cost_time = cost_time
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.node_count = []
                    (_etype756, _size753) = iprot.readListBegin()
                    for _i757 in range(_size753):
                        _elem758 = iprot.readI64()
                        self.node_count.append(_elem758)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.path_count = []
                    (_etype762, _size759) = iprot.readListBegin()
                    for _i763 in range(_size759):
                        _elem764 = iprot.readI64()
                        self.path_count.append(_elem764)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('neighbour_count')
        if self.node_count is not None:
            oprot.writeFieldBegin('node_count', TType.LIST, 1)
            oprot.writeListBegin(TType.I64, len(self.node_count))
            for iter765 in self.node_count:
                oprot.writeI64(iter765)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.path_count is not None:
            oprot.writeFieldBegin('path_count', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.path_count))
            for iter766 in self.path_count:
                oprot.writeI64(iter766)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 4)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 5)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.node_count is None:
            raise TProtocolException(message='Required field node_count is unset!')
        if self.path_count is None:
            raise TProtocolException(message='Required field path_count is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class graph(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - nodes
     - relations

    """


    def __init__(self, status=None, message=None, cost_time=None, nodes=None, relations=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.nodes = nodes
        self.relations = relations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.nodes = {}
                    (_ktype768, _vtype769, _size767) = iprot.readMapBegin()
                    for _i771 in range(_size767):
                        _key772 = iprot.readI32()
                        _val773 = ezoocommon.ttypes.node()
                        _val773.read(iprot)
                        self.nodes[_key772] = _val773
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.relations = []
                    (_etype777, _size774) = iprot.readListBegin()
                    for _i778 in range(_size774):
                        _elem779 = ezoocommon.ttypes.edge()
                        _elem779.read(iprot)
                        self.relations.append(_elem779)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('graph')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.MAP, 4)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.nodes))
            for kiter780, viter781 in self.nodes.items():
                oprot.writeI32(kiter780)
                viter781.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.relations is not None:
            oprot.writeFieldBegin('relations', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.relations))
            for iter782 in self.relations:
                iter782.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        if self.relations is None:
            raise TProtocolException(message='Required field relations is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class graph_v2(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - relations
     - nodes
     - node_type_mapping
     - edge_type_mapping

    """


    def __init__(self, status=None, message=None, cost_time=None, relations=None, nodes=None, node_type_mapping=None, edge_type_mapping=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.relations = relations
        self.nodes = nodes
        self.node_type_mapping = node_type_mapping
        self.edge_type_mapping = edge_type_mapping

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.relations = []
                    (_etype786, _size783) = iprot.readListBegin()
                    for _i787 in range(_size783):
                        _elem788 = ezoocommon.ttypes.edge_basic()
                        _elem788.read(iprot)
                        self.relations.append(_elem788)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype792, _size789) = iprot.readListBegin()
                    for _i793 in range(_size789):
                        _elem794 = ezoocommon.ttypes.node_basic()
                        _elem794.read(iprot)
                        self.nodes.append(_elem794)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.node_type_mapping = []
                    (_etype798, _size795) = iprot.readListBegin()
                    for _i799 in range(_size795):
                        _elem800 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.node_type_mapping.append(_elem800)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.edge_type_mapping = []
                    (_etype804, _size801) = iprot.readListBegin()
                    for _i805 in range(_size801):
                        _elem806 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.edge_type_mapping.append(_elem806)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('graph_v2')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.relations is not None:
            oprot.writeFieldBegin('relations', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.relations))
            for iter807 in self.relations:
                iter807.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.nodes))
            for iter808 in self.nodes:
                iter808.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.node_type_mapping is not None:
            oprot.writeFieldBegin('node_type_mapping', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.node_type_mapping))
            for iter809 in self.node_type_mapping:
                oprot.writeString(iter809.encode('utf-8') if sys.version_info[0] == 2 else iter809)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_type_mapping is not None:
            oprot.writeFieldBegin('edge_type_mapping', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.edge_type_mapping))
            for iter810 in self.edge_type_mapping:
                oprot.writeString(iter810.encode('utf-8') if sys.version_info[0] == 2 else iter810)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.relations is None:
            raise TProtocolException(message='Required field relations is unset!')
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        if self.node_type_mapping is None:
            raise TProtocolException(message='Required field node_type_mapping is unset!')
        if self.edge_type_mapping is None:
            raise TProtocolException(message='Required field edge_type_mapping is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class schema_s(object):
    """
    Attributes:
     - slot_type
     - db_name
     - node_index_table
     - edge_index_table
     - status
     - message
     - cost_time

    """


    def __init__(self, slot_type=None, db_name=None, node_index_table=None, edge_index_table=None, status=None, message=None, cost_time=None,):
        self.slot_type = slot_type
        self.db_name = db_name
        self.node_index_table = node_index_table
        self.edge_index_table = edge_index_table
        self.status = status
        self.message = message
        self.cost_time = cost_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.slot_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.node_index_table = []
                    (_etype814, _size811) = iprot.readListBegin()
                    for _i815 in range(_size811):
                        _elem816 = entity_index()
                        _elem816.read(iprot)
                        self.node_index_table.append(_elem816)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.edge_index_table = []
                    (_etype820, _size817) = iprot.readListBegin()
                    for _i821 in range(_size817):
                        _elem822 = entity_index()
                        _elem822.read(iprot)
                        self.edge_index_table.append(_elem822)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('schema_s')
        if self.slot_type is not None:
            oprot.writeFieldBegin('slot_type', TType.I32, 1)
            oprot.writeI32(self.slot_type)
            oprot.writeFieldEnd()
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 2)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.node_index_table is not None:
            oprot.writeFieldBegin('node_index_table', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.node_index_table))
            for iter823 in self.node_index_table:
                iter823.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_index_table is not None:
            oprot.writeFieldBegin('edge_index_table', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.edge_index_table))
            for iter824 in self.edge_index_table:
                iter824.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 5)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 6)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 7)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.slot_type is None:
            raise TProtocolException(message='Required field slot_type is unset!')
        if self.db_name is None:
            raise TProtocolException(message='Required field db_name is unset!')
        if self.node_index_table is None:
            raise TProtocolException(message='Required field node_index_table is unset!')
        if self.edge_index_table is None:
            raise TProtocolException(message='Required field edge_index_table is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class graph_schema_list(object):
    """
    Attributes:
     - status
     - message
     - cost_time
     - schema_simple_list

    """


    def __init__(self, status=None, message=None, cost_time=None, schema_simple_list=None,):
        self.status = status
        self.message = message
        self.cost_time = cost_time
        self.schema_simple_list = schema_simple_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.schema_simple_list = []
                    (_etype828, _size825) = iprot.readListBegin()
                    for _i829 in range(_size825):
                        _elem830 = graph_schema_simple()
                        _elem830.read(iprot)
                        self.schema_simple_list.append(_elem830)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('graph_schema_list')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.schema_simple_list is not None:
            oprot.writeFieldBegin('schema_simple_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.schema_simple_list))
            for iter831 in self.schema_simple_list:
                iter831.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.schema_simple_list is None:
            raise TProtocolException(message='Required field schema_simple_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class graph_list(object):
    """
    Attributes:
     - message
     - status
     - name_list
     - cost_time

    """


    def __init__(self, message=None, status=None, name_list=None, cost_time=None,):
        self.message = message
        self.status = status
        self.name_list = name_list
        self.cost_time = cost_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.name_list = []
                    (_etype835, _size832) = iprot.readListBegin()
                    for _i836 in range(_size832):
                        _elem837 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.name_list.append(_elem837)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('graph_list')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.name_list is not None:
            oprot.writeFieldBegin('name_list', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.name_list))
            for iter838 in self.name_list:
                oprot.writeString(iter838.encode('utf-8') if sys.version_info[0] == 2 else iter838)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 4)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.name_list is None:
            raise TProtocolException(message='Required field name_list is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node_list(object):
    """
    Attributes:
     - nodes
     - status
     - message
     - cost_time

    """


    def __init__(self, nodes=None, status=None, message=None, cost_time=None,):
        self.nodes = nodes
        self.status = status
        self.message = message
        self.cost_time = cost_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype842, _size839) = iprot.readListBegin()
                    for _i843 in range(_size839):
                        _elem844 = node_simple()
                        _elem844.read(iprot)
                        self.nodes.append(_elem844)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node_list')
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.nodes))
            for iter845 in self.nodes:
                iter845.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 3)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 4)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.nodes is None:
            raise TProtocolException(message='Required field nodes is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node_id_list(object):
    """
    Attributes:
     - id_list
     - status
     - message
     - cost_time

    """


    def __init__(self, id_list=None, status=None, message=None, cost_time=None,):
        self.id_list = id_list
        self.status = status
        self.message = message
        self.cost_time = cost_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.id_list = []
                    (_etype849, _size846) = iprot.readListBegin()
                    for _i850 in range(_size846):
                        _elem851 = iprot.readI32()
                        self.id_list.append(_elem851)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node_id_list')
        if self.id_list is not None:
            oprot.writeFieldBegin('id_list', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.id_list))
            for iter852 in self.id_list:
                oprot.writeI32(iter852)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 3)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 4)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id_list is None:
            raise TProtocolException(message='Required field id_list is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node_index_list(object):
    """
    Attributes:
     - index_list
     - status
     - message
     - cost_time

    """


    def __init__(self, index_list=None, status=None, message=None, cost_time=None,):
        self.index_list = index_list
        self.status = status
        self.message = message
        self.cost_time = cost_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.index_list = []
                    (_etype856, _size853) = iprot.readListBegin()
                    for _i857 in range(_size853):
                        _elem858 = ezoocommon.ttypes.node_index()
                        _elem858.read(iprot)
                        self.index_list.append(_elem858)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node_index_list')
        if self.index_list is not None:
            oprot.writeFieldBegin('index_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.index_list))
            for iter859 in self.index_list:
                iter859.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 3)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 4)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.index_list is None:
            raise TProtocolException(message='Required field index_list is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class graph_node_size(object):
    """
    Attributes:
     - message
     - status
     - size
     - cost_time

    """


    def __init__(self, message=None, status=None, size=None, cost_time=None,):
        self.message = message
        self.status = status
        self.size = size
        self.cost_time = cost_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('graph_node_size')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 3)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 4)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.size is None:
            raise TProtocolException(message='Required field size is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class graph_edge_size(object):
    """
    Attributes:
     - message
     - status
     - size
     - cost_time

    """


    def __init__(self, message=None, status=None, size=None, cost_time=None,):
        self.message = message
        self.status = status
        self.size = size
        self.cost_time = cost_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('graph_edge_size')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 3)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 4)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.size is None:
            raise TProtocolException(message='Required field size is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class replica_server_info(object):
    """
    Attributes:
     - server_id
     - ip
     - service_port
     - election_port
     - rpc_port
     - socket_port
     - role
     - srv_status

    """


    def __init__(self, server_id=None, ip=None, service_port=None, election_port=None, rpc_port=None, socket_port=None, role=None, srv_status=None,):
        self.server_id = server_id
        self.ip = ip
        self.service_port = service_port
        self.election_port = election_port
        self.rpc_port = rpc_port
        self.socket_port = socket_port
        self.role = role
        self.srv_status = srv_status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.server_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.service_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.election_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.rpc_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.socket_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.role = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.srv_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('replica_server_info')
        if self.server_id is not None:
            oprot.writeFieldBegin('server_id', TType.I32, 1)
            oprot.writeI32(self.server_id)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.service_port is not None:
            oprot.writeFieldBegin('service_port', TType.I32, 3)
            oprot.writeI32(self.service_port)
            oprot.writeFieldEnd()
        if self.election_port is not None:
            oprot.writeFieldBegin('election_port', TType.I32, 4)
            oprot.writeI32(self.election_port)
            oprot.writeFieldEnd()
        if self.rpc_port is not None:
            oprot.writeFieldBegin('rpc_port', TType.I32, 5)
            oprot.writeI32(self.rpc_port)
            oprot.writeFieldEnd()
        if self.socket_port is not None:
            oprot.writeFieldBegin('socket_port', TType.I32, 6)
            oprot.writeI32(self.socket_port)
            oprot.writeFieldEnd()
        if self.role is not None:
            oprot.writeFieldBegin('role', TType.I32, 7)
            oprot.writeI32(self.role)
            oprot.writeFieldEnd()
        if self.srv_status is not None:
            oprot.writeFieldBegin('srv_status', TType.I32, 8)
            oprot.writeI32(self.srv_status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.server_id is None:
            raise TProtocolException(message='Required field server_id is unset!')
        if self.ip is None:
            raise TProtocolException(message='Required field ip is unset!')
        if self.service_port is None:
            raise TProtocolException(message='Required field service_port is unset!')
        if self.election_port is None:
            raise TProtocolException(message='Required field election_port is unset!')
        if self.rpc_port is None:
            raise TProtocolException(message='Required field rpc_port is unset!')
        if self.socket_port is None:
            raise TProtocolException(message='Required field socket_port is unset!')
        if self.role is None:
            raise TProtocolException(message='Required field role is unset!')
        if self.srv_status is None:
            raise TProtocolException(message='Required field srv_status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class server_info(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - cluster_infos
     - graph_infos
     - version
     - server_type
     - is_leader
     - graph_groups
     - group_distributed_infos
     - active_groups
     - servers

    """


    def __init__(self, message=None, status=None, cost_time=None, cluster_infos=None, graph_infos=None, version=None, server_type=None, is_leader=None, graph_groups=None, group_distributed_infos=None, active_groups=None, servers=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.cluster_infos = cluster_infos
        self.graph_infos = graph_infos
        self.version = version
        self.server_type = server_type
        self.is_leader = is_leader
        self.graph_groups = graph_groups
        self.group_distributed_infos = group_distributed_infos
        self.active_groups = active_groups
        self.servers = servers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.cluster_infos = {}
                    (_ktype861, _vtype862, _size860) = iprot.readMapBegin()
                    for _i864 in range(_size860):
                        _key865 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val866 = []
                        (_etype870, _size867) = iprot.readListBegin()
                        for _i871 in range(_size867):
                            _elem872 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val866.append(_elem872)
                        iprot.readListEnd()
                        self.cluster_infos[_key865] = _val866
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.graph_infos = {}
                    (_ktype874, _vtype875, _size873) = iprot.readMapBegin()
                    for _i877 in range(_size873):
                        _key878 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val879 = {}
                        (_ktype881, _vtype882, _size880) = iprot.readMapBegin()
                        for _i884 in range(_size880):
                            _key885 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val886 = graph_info()
                            _val886.read(iprot)
                            _val879[_key885] = _val886
                        iprot.readMapEnd()
                        self.graph_infos[_key878] = _val879
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.server_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.is_leader = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.graph_groups = {}
                    (_ktype888, _vtype889, _size887) = iprot.readMapBegin()
                    for _i891 in range(_size887):
                        _key892 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val893 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.graph_groups[_key892] = _val893
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.group_distributed_infos = {}
                    (_ktype895, _vtype896, _size894) = iprot.readMapBegin()
                    for _i898 in range(_size894):
                        _key899 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val900 = []
                        (_etype904, _size901) = iprot.readListBegin()
                        for _i905 in range(_size901):
                            _elem906 = replica_server_info()
                            _elem906.read(iprot)
                            _val900.append(_elem906)
                        iprot.readListEnd()
                        self.group_distributed_infos[_key899] = _val900
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.active_groups = []
                    (_etype910, _size907) = iprot.readListBegin()
                    for _i911 in range(_size907):
                        _elem912 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.active_groups.append(_elem912)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.MAP:
                    self.servers = {}
                    (_ktype914, _vtype915, _size913) = iprot.readMapBegin()
                    for _i917 in range(_size913):
                        _key918 = iprot.readI32()
                        _val919 = replica_server_info()
                        _val919.read(iprot)
                        self.servers[_key918] = _val919
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('server_info')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.cluster_infos is not None:
            oprot.writeFieldBegin('cluster_infos', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.cluster_infos))
            for kiter920, viter921 in self.cluster_infos.items():
                oprot.writeString(kiter920.encode('utf-8') if sys.version_info[0] == 2 else kiter920)
                oprot.writeListBegin(TType.STRING, len(viter921))
                for iter922 in viter921:
                    oprot.writeString(iter922.encode('utf-8') if sys.version_info[0] == 2 else iter922)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.graph_infos is not None:
            oprot.writeFieldBegin('graph_infos', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.graph_infos))
            for kiter923, viter924 in self.graph_infos.items():
                oprot.writeString(kiter923.encode('utf-8') if sys.version_info[0] == 2 else kiter923)
                oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter924))
                for kiter925, viter926 in viter924.items():
                    oprot.writeString(kiter925.encode('utf-8') if sys.version_info[0] == 2 else kiter925)
                    viter926.write(oprot)
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 6)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.server_type is not None:
            oprot.writeFieldBegin('server_type', TType.STRING, 8)
            oprot.writeString(self.server_type.encode('utf-8') if sys.version_info[0] == 2 else self.server_type)
            oprot.writeFieldEnd()
        if self.is_leader is not None:
            oprot.writeFieldBegin('is_leader', TType.BOOL, 9)
            oprot.writeBool(self.is_leader)
            oprot.writeFieldEnd()
        if self.graph_groups is not None:
            oprot.writeFieldBegin('graph_groups', TType.MAP, 10)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.graph_groups))
            for kiter927, viter928 in self.graph_groups.items():
                oprot.writeString(kiter927.encode('utf-8') if sys.version_info[0] == 2 else kiter927)
                oprot.writeString(viter928.encode('utf-8') if sys.version_info[0] == 2 else viter928)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.group_distributed_infos is not None:
            oprot.writeFieldBegin('group_distributed_infos', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.group_distributed_infos))
            for kiter929, viter930 in self.group_distributed_infos.items():
                oprot.writeString(kiter929.encode('utf-8') if sys.version_info[0] == 2 else kiter929)
                oprot.writeListBegin(TType.STRUCT, len(viter930))
                for iter931 in viter930:
                    iter931.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.active_groups is not None:
            oprot.writeFieldBegin('active_groups', TType.LIST, 12)
            oprot.writeListBegin(TType.STRING, len(self.active_groups))
            for iter932 in self.active_groups:
                oprot.writeString(iter932.encode('utf-8') if sys.version_info[0] == 2 else iter932)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.servers is not None:
            oprot.writeFieldBegin('servers', TType.MAP, 13)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.servers))
            for kiter933, viter934 in self.servers.items():
                oprot.writeI32(kiter933)
                viter934.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.cluster_infos is None:
            raise TProtocolException(message='Required field cluster_infos is unset!')
        if self.graph_infos is None:
            raise TProtocolException(message='Required field graph_infos is unset!')
        if self.version is None:
            raise TProtocolException(message='Required field version is unset!')
        if self.server_type is None:
            raise TProtocolException(message='Required field server_type is unset!')
        if self.is_leader is None:
            raise TProtocolException(message='Required field is_leader is unset!')
        if self.graph_groups is None:
            raise TProtocolException(message='Required field graph_groups is unset!')
        if self.group_distributed_infos is None:
            raise TProtocolException(message='Required field group_distributed_infos is unset!')
        if self.active_groups is None:
            raise TProtocolException(message='Required field active_groups is unset!')
        if self.servers is None:
            raise TProtocolException(message='Required field servers is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class score_return(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - score

    """


    def __init__(self, message=None, status=None, cost_time=None, score=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.score = score

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.score = {}
                    (_ktype936, _vtype937, _size935) = iprot.readMapBegin()
                    for _i939 in range(_size935):
                        _key940 = iprot.readI32()
                        _val941 = iprot.readDouble()
                        self.score[_key940] = _val941
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('score_return')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.score is not None:
            oprot.writeFieldBegin('score', TType.MAP, 4)
            oprot.writeMapBegin(TType.I32, TType.DOUBLE, len(self.score))
            for kiter942, viter943 in self.score.items():
                oprot.writeI32(kiter942)
                oprot.writeDouble(viter943)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.score is None:
            raise TProtocolException(message='Required field score is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class basic_graph(object):
    """
    Attributes:
     - edge
     - node

    """


    def __init__(self, edge=None, node=None,):
        self.edge = edge
        self.node = node

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.edge = []
                    (_etype947, _size944) = iprot.readListBegin()
                    for _i948 in range(_size944):
                        _elem949 = edge_i()
                        _elem949.read(iprot)
                        self.edge.append(_elem949)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.node = []
                    (_etype953, _size950) = iprot.readListBegin()
                    for _i954 in range(_size950):
                        _elem955 = ezoocommon.ttypes.node_basic()
                        _elem955.read(iprot)
                        self.node.append(_elem955)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('basic_graph')
        if self.edge is not None:
            oprot.writeFieldBegin('edge', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.edge))
            for iter956 in self.edge:
                iter956.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.node is not None:
            oprot.writeFieldBegin('node', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.node))
            for iter957 in self.node:
                iter957.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.edge is None:
            raise TProtocolException(message='Required field edge is unset!')
        if self.node is None:
            raise TProtocolException(message='Required field node is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class relation_graph(object):
    """
    Attributes:
     - edge
     - node

    """


    def __init__(self, edge=None, node=None,):
        self.edge = edge
        self.node = node

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.edge = []
                    (_etype961, _size958) = iprot.readListBegin()
                    for _i962 in range(_size958):
                        _elem963 = ezoocommon.ttypes.edge_basic()
                        _elem963.read(iprot)
                        self.edge.append(_elem963)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.node = []
                    (_etype967, _size964) = iprot.readListBegin()
                    for _i968 in range(_size964):
                        _elem969 = ezoocommon.ttypes.node_basic()
                        _elem969.read(iprot)
                        self.node.append(_elem969)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('relation_graph')
        if self.edge is not None:
            oprot.writeFieldBegin('edge', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.edge))
            for iter970 in self.edge:
                iter970.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.node is not None:
            oprot.writeFieldBegin('node', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.node))
            for iter971 in self.node:
                iter971.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.edge is None:
            raise TProtocolException(message='Required field edge is unset!')
        if self.node is None:
            raise TProtocolException(message='Required field node is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class return_graph(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - b_graph
     - r_graph
     - node_ids
     - edge_ids

    """


    def __init__(self, message=None, status=None, cost_time=None, b_graph=None, r_graph=None, node_ids=None, edge_ids=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.b_graph = b_graph
        self.r_graph = r_graph
        self.node_ids = node_ids
        self.edge_ids = edge_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.b_graph = basic_graph()
                    self.b_graph.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.r_graph = relation_graph()
                    self.r_graph.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.node_ids = []
                    (_etype975, _size972) = iprot.readListBegin()
                    for _i976 in range(_size972):
                        _elem977 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.node_ids.append(_elem977)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.edge_ids = []
                    (_etype981, _size978) = iprot.readListBegin()
                    for _i982 in range(_size978):
                        _elem983 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.edge_ids.append(_elem983)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('return_graph')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.b_graph is not None:
            oprot.writeFieldBegin('b_graph', TType.STRUCT, 4)
            self.b_graph.write(oprot)
            oprot.writeFieldEnd()
        if self.r_graph is not None:
            oprot.writeFieldBegin('r_graph', TType.STRUCT, 5)
            self.r_graph.write(oprot)
            oprot.writeFieldEnd()
        if self.node_ids is not None:
            oprot.writeFieldBegin('node_ids', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.node_ids))
            for iter984 in self.node_ids:
                oprot.writeString(iter984.encode('utf-8') if sys.version_info[0] == 2 else iter984)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_ids is not None:
            oprot.writeFieldBegin('edge_ids', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.edge_ids))
            for iter985 in self.edge_ids:
                oprot.writeString(iter985.encode('utf-8') if sys.version_info[0] == 2 else iter985)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.b_graph is None:
            raise TProtocolException(message='Required field b_graph is unset!')
        if self.r_graph is None:
            raise TProtocolException(message='Required field r_graph is unset!')
        if self.node_ids is None:
            raise TProtocolException(message='Required field node_ids is unset!')
        if self.edge_ids is None:
            raise TProtocolException(message='Required field edge_ids is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class money_flow_return(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - r_graph
     - node_money

    """


    def __init__(self, message=None, status=None, cost_time=None, r_graph=None, node_money=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.r_graph = r_graph
        self.node_money = node_money

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.cost_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.r_graph = relation_graph()
                    self.r_graph.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.node_money = {}
                    (_ktype987, _vtype988, _size986) = iprot.readMapBegin()
                    for _i990 in range(_size986):
                        _key991 = iprot.readI32()
                        _val992 = iprot.readDouble()
                        self.node_money[_key991] = _val992
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('money_flow_return')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.I64, 3)
            oprot.writeI64(self.cost_time)
            oprot.writeFieldEnd()
        if self.r_graph is not None:
            oprot.writeFieldBegin('r_graph', TType.STRUCT, 4)
            self.r_graph.write(oprot)
            oprot.writeFieldEnd()
        if self.node_money is not None:
            oprot.writeFieldBegin('node_money', TType.MAP, 5)
            oprot.writeMapBegin(TType.I32, TType.DOUBLE, len(self.node_money))
            for kiter993, viter994 in self.node_money.items():
                oprot.writeI32(kiter993)
                oprot.writeDouble(viter994)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.r_graph is None:
            raise TProtocolException(message='Required field r_graph is unset!')
        if self.node_money is None:
            raise TProtocolException(message='Required field node_money is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class count_edge(object):
    """
    Attributes:
     - start_node
     - end_node
     - count

    """


    def __init__(self, start_node=None, end_node=None, count=None,):
        self.start_node = start_node
        self.end_node = end_node
        self.count = count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.start_node = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.end_node = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('count_edge')
        if self.start_node is not None:
            oprot.writeFieldBegin('start_node', TType.I32, 1)
            oprot.writeI32(self.start_node)
            oprot.writeFieldEnd()
        if self.end_node is not None:
            oprot.writeFieldBegin('end_node', TType.I32, 2)
            oprot.writeI32(self.end_node)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 3)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.start_node is None:
            raise TProtocolException(message='Required field start_node is unset!')
        if self.end_node is None:
            raise TProtocolException(message='Required field end_node is unset!')
        if self.count is None:
            raise TProtocolException(message='Required field count is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cluster_for_studio(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - community
     - community_number
     - community_node
     - community_edge

    """


    def __init__(self, message=None, status=None, cost_time=None, community=None, community_number=None, community_node=None, community_edge=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.community = community
        self.community_number = community_number
        self.community_node = community_node
        self.community_edge = community_edge

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.cost_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.community = {}
                    (_ktype996, _vtype997, _size995) = iprot.readMapBegin()
                    for _i999 in range(_size995):
                        _key1000 = iprot.readI32()
                        _val1001 = []
                        (_etype1005, _size1002) = iprot.readListBegin()
                        for _i1006 in range(_size1002):
                            _elem1007 = iprot.readI32()
                            _val1001.append(_elem1007)
                        iprot.readListEnd()
                        self.community[_key1000] = _val1001
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.community_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.community_node = []
                    (_etype1011, _size1008) = iprot.readListBegin()
                    for _i1012 in range(_size1008):
                        _elem1013 = iprot.readI32()
                        self.community_node.append(_elem1013)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.community_edge = []
                    (_etype1017, _size1014) = iprot.readListBegin()
                    for _i1018 in range(_size1014):
                        _elem1019 = count_edge()
                        _elem1019.read(iprot)
                        self.community_edge.append(_elem1019)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cluster_for_studio')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.I64, 3)
            oprot.writeI64(self.cost_time)
            oprot.writeFieldEnd()
        if self.community is not None:
            oprot.writeFieldBegin('community', TType.MAP, 4)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.community))
            for kiter1020, viter1021 in self.community.items():
                oprot.writeI32(kiter1020)
                oprot.writeListBegin(TType.I32, len(viter1021))
                for iter1022 in viter1021:
                    oprot.writeI32(iter1022)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.community_number is not None:
            oprot.writeFieldBegin('community_number', TType.I32, 5)
            oprot.writeI32(self.community_number)
            oprot.writeFieldEnd()
        if self.community_node is not None:
            oprot.writeFieldBegin('community_node', TType.LIST, 6)
            oprot.writeListBegin(TType.I32, len(self.community_node))
            for iter1023 in self.community_node:
                oprot.writeI32(iter1023)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.community_edge is not None:
            oprot.writeFieldBegin('community_edge', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.community_edge))
            for iter1024 in self.community_edge:
                iter1024.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.community is None:
            raise TProtocolException(message='Required field community is unset!')
        if self.community_number is None:
            raise TProtocolException(message='Required field community_number is unset!')
        if self.community_node is None:
            raise TProtocolException(message='Required field community_node is unset!')
        if self.community_edge is None:
            raise TProtocolException(message='Required field community_edge is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class prop_cluster_for_studio(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - cluster_number
     - cluster_id
     - cluster
     - cluster_edge

    """


    def __init__(self, message=None, status=None, cost_time=None, cluster_number=None, cluster_id=None, cluster=None, cluster_edge=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.cluster_number = cluster_number
        self.cluster_id = cluster_id
        self.cluster = cluster
        self.cluster_edge = cluster_edge

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.cost_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.cluster_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.cluster_id = []
                    (_etype1028, _size1025) = iprot.readListBegin()
                    for _i1029 in range(_size1025):
                        _elem1030 = iprot.readI32()
                        self.cluster_id.append(_elem1030)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.cluster = {}
                    (_ktype1032, _vtype1033, _size1031) = iprot.readMapBegin()
                    for _i1035 in range(_size1031):
                        _key1036 = iprot.readI32()
                        _val1037 = prop_cluster()
                        _val1037.read(iprot)
                        self.cluster[_key1036] = _val1037
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.cluster_edge = []
                    (_etype1041, _size1038) = iprot.readListBegin()
                    for _i1042 in range(_size1038):
                        _elem1043 = count_edge()
                        _elem1043.read(iprot)
                        self.cluster_edge.append(_elem1043)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('prop_cluster_for_studio')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.I64, 3)
            oprot.writeI64(self.cost_time)
            oprot.writeFieldEnd()
        if self.cluster_number is not None:
            oprot.writeFieldBegin('cluster_number', TType.I32, 4)
            oprot.writeI32(self.cluster_number)
            oprot.writeFieldEnd()
        if self.cluster_id is not None:
            oprot.writeFieldBegin('cluster_id', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.cluster_id))
            for iter1044 in self.cluster_id:
                oprot.writeI32(iter1044)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cluster is not None:
            oprot.writeFieldBegin('cluster', TType.MAP, 6)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.cluster))
            for kiter1045, viter1046 in self.cluster.items():
                oprot.writeI32(kiter1045)
                viter1046.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.cluster_edge is not None:
            oprot.writeFieldBegin('cluster_edge', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.cluster_edge))
            for iter1047 in self.cluster_edge:
                iter1047.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.cluster_number is None:
            raise TProtocolException(message='Required field cluster_number is unset!')
        if self.cluster_id is None:
            raise TProtocolException(message='Required field cluster_id is unset!')
        if self.cluster is None:
            raise TProtocolException(message='Required field cluster is unset!')
        if self.cluster_edge is None:
            raise TProtocolException(message='Required field cluster_edge is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class community_return(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - community
     - community_number

    """


    def __init__(self, message=None, status=None, cost_time=None, community=None, community_number=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.community = community
        self.community_number = community_number

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.community = {}
                    (_ktype1049, _vtype1050, _size1048) = iprot.readMapBegin()
                    for _i1052 in range(_size1048):
                        _key1053 = iprot.readI32()
                        _val1054 = iprot.readI32()
                        self.community[_key1053] = _val1054
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.community_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('community_return')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.community is not None:
            oprot.writeFieldBegin('community', TType.MAP, 4)
            oprot.writeMapBegin(TType.I32, TType.I32, len(self.community))
            for kiter1055, viter1056 in self.community.items():
                oprot.writeI32(kiter1055)
                oprot.writeI32(viter1056)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.community_number is not None:
            oprot.writeFieldBegin('community_number', TType.I32, 5)
            oprot.writeI32(self.community_number)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.community is None:
            raise TProtocolException(message='Required field community is unset!')
        if self.community_number is None:
            raise TProtocolException(message='Required field community_number is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class user_roles(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - roles

    """


    def __init__(self, message=None, status=None, cost_time=None, roles=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.roles = roles

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.roles = {}
                    (_ktype1058, _vtype1059, _size1057) = iprot.readMapBegin()
                    for _i1061 in range(_size1057):
                        _key1062 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1063 = []
                        (_etype1067, _size1064) = iprot.readListBegin()
                        for _i1068 in range(_size1064):
                            _elem1069 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val1063.append(_elem1069)
                        iprot.readListEnd()
                        self.roles[_key1062] = _val1063
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('user_roles')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.roles is not None:
            oprot.writeFieldBegin('roles', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.roles))
            for kiter1070, viter1071 in self.roles.items():
                oprot.writeString(kiter1070.encode('utf-8') if sys.version_info[0] == 2 else kiter1070)
                oprot.writeListBegin(TType.STRING, len(viter1071))
                for iter1072 in viter1071:
                    oprot.writeString(iter1072.encode('utf-8') if sys.version_info[0] == 2 else iter1072)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.roles is None:
            raise TProtocolException(message='Required field roles is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class user_graph_roles(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - roles

    """


    def __init__(self, message=None, status=None, cost_time=None, roles=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.roles = roles

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.roles = {}
                    (_ktype1074, _vtype1075, _size1073) = iprot.readMapBegin()
                    for _i1077 in range(_size1073):
                        _key1078 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1079 = {}
                        (_ktype1081, _vtype1082, _size1080) = iprot.readMapBegin()
                        for _i1084 in range(_size1080):
                            _key1085 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                            _val1086 = []
                            (_etype1090, _size1087) = iprot.readListBegin()
                            for _i1091 in range(_size1087):
                                _elem1092 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                                _val1086.append(_elem1092)
                            iprot.readListEnd()
                            _val1079[_key1085] = _val1086
                        iprot.readMapEnd()
                        self.roles[_key1078] = _val1079
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('user_graph_roles')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.roles is not None:
            oprot.writeFieldBegin('roles', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.roles))
            for kiter1093, viter1094 in self.roles.items():
                oprot.writeString(kiter1093.encode('utf-8') if sys.version_info[0] == 2 else kiter1093)
                oprot.writeMapBegin(TType.STRING, TType.LIST, len(viter1094))
                for kiter1095, viter1096 in viter1094.items():
                    oprot.writeString(kiter1095.encode('utf-8') if sys.version_info[0] == 2 else kiter1095)
                    oprot.writeListBegin(TType.STRING, len(viter1096))
                    for iter1097 in viter1096:
                        oprot.writeString(iter1097.encode('utf-8') if sys.version_info[0] == 2 else iter1097)
                    oprot.writeListEnd()
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.roles is None:
            raise TProtocolException(message='Required field roles is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class stat_inout_degree(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - id_list
     - degree_list

    """


    def __init__(self, message=None, status=None, cost_time=None, id_list=None, degree_list=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.id_list = id_list
        self.degree_list = degree_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.id_list = []
                    (_etype1101, _size1098) = iprot.readListBegin()
                    for _i1102 in range(_size1098):
                        _elem1103 = iprot.readI32()
                        self.id_list.append(_elem1103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.degree_list = []
                    (_etype1107, _size1104) = iprot.readListBegin()
                    for _i1108 in range(_size1104):
                        _elem1109 = iprot.readI64()
                        self.degree_list.append(_elem1109)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stat_inout_degree')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.id_list is not None:
            oprot.writeFieldBegin('id_list', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.id_list))
            for iter1110 in self.id_list:
                oprot.writeI32(iter1110)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.degree_list is not None:
            oprot.writeFieldBegin('degree_list', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.degree_list))
            for iter1111 in self.degree_list:
                oprot.writeI64(iter1111)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.id_list is None:
            raise TProtocolException(message='Required field id_list is unset!')
        if self.degree_list is None:
            raise TProtocolException(message='Required field degree_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class graph_global_view(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - schema
     - node_stat
     - edge_stat

    """


    def __init__(self, message=None, status=None, cost_time=None, schema=None, node_stat=None, edge_stat=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.schema = schema
        self.node_stat = node_stat
        self.edge_stat = edge_stat

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.schema = graph_schema_simple()
                    self.schema.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.node_stat = []
                    (_etype1115, _size1112) = iprot.readListBegin()
                    for _i1116 in range(_size1112):
                        _elem1117 = iprot.readI32()
                        self.node_stat.append(_elem1117)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.edge_stat = []
                    (_etype1121, _size1118) = iprot.readListBegin()
                    for _i1122 in range(_size1118):
                        _elem1123 = []
                        (_etype1127, _size1124) = iprot.readListBegin()
                        for _i1128 in range(_size1124):
                            _elem1129 = []
                            (_etype1133, _size1130) = iprot.readListBegin()
                            for _i1134 in range(_size1130):
                                _elem1135 = iprot.readI32()
                                _elem1129.append(_elem1135)
                            iprot.readListEnd()
                            _elem1123.append(_elem1129)
                        iprot.readListEnd()
                        self.edge_stat.append(_elem1123)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('graph_global_view')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.schema is not None:
            oprot.writeFieldBegin('schema', TType.STRUCT, 4)
            self.schema.write(oprot)
            oprot.writeFieldEnd()
        if self.node_stat is not None:
            oprot.writeFieldBegin('node_stat', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.node_stat))
            for iter1136 in self.node_stat:
                oprot.writeI32(iter1136)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_stat is not None:
            oprot.writeFieldBegin('edge_stat', TType.LIST, 6)
            oprot.writeListBegin(TType.LIST, len(self.edge_stat))
            for iter1137 in self.edge_stat:
                oprot.writeListBegin(TType.LIST, len(iter1137))
                for iter1138 in iter1137:
                    oprot.writeListBegin(TType.I32, len(iter1138))
                    for iter1139 in iter1138:
                        oprot.writeI32(iter1139)
                    oprot.writeListEnd()
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.schema is None:
            raise TProtocolException(message='Required field schema is unset!')
        if self.node_stat is None:
            raise TProtocolException(message='Required field node_stat is unset!')
        if self.edge_stat is None:
            raise TProtocolException(message='Required field edge_stat is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class single_server_config(object):
    """
    Attributes:
     - ip
     - rpc_port

    """


    def __init__(self, ip=None, rpc_port=None,):
        self.ip = ip
        self.rpc_port = rpc_port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.rpc_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('single_server_config')
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 1)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.rpc_port is not None:
            oprot.writeFieldBegin('rpc_port', TType.I32, 2)
            oprot.writeI32(self.rpc_port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ip is None:
            raise TProtocolException(message='Required field ip is unset!')
        if self.rpc_port is None:
            raise TProtocolException(message='Required field rpc_port is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class graph_schema_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - node_schema_list
     - edge_schema_list
     - auto_load
     - is_basic
     - tags
     - node_slot_type
     - edge_slot_type

    """


    def __init__(self, message=None, status=None, cost_time=None, node_schema_list=None, edge_schema_list=None, auto_load=None, is_basic=None, tags=None, node_slot_type=None, edge_slot_type=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.node_schema_list = node_schema_list
        self.edge_schema_list = edge_schema_list
        self.auto_load = auto_load
        self.is_basic = is_basic
        self.tags = tags
        self.node_slot_type = node_slot_type
        self.edge_slot_type = edge_slot_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.node_schema_list = []
                    (_etype1143, _size1140) = iprot.readListBegin()
                    for _i1144 in range(_size1140):
                        _elem1145 = entity_schema()
                        _elem1145.read(iprot)
                        self.node_schema_list.append(_elem1145)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.edge_schema_list = []
                    (_etype1149, _size1146) = iprot.readListBegin()
                    for _i1150 in range(_size1146):
                        _elem1151 = entity_schema()
                        _elem1151.read(iprot)
                        self.edge_schema_list.append(_elem1151)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.auto_load = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.is_basic = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.tags = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.node_slot_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.edge_slot_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('graph_schema_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.node_schema_list is not None:
            oprot.writeFieldBegin('node_schema_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.node_schema_list))
            for iter1152 in self.node_schema_list:
                iter1152.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edge_schema_list is not None:
            oprot.writeFieldBegin('edge_schema_list', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.edge_schema_list))
            for iter1153 in self.edge_schema_list:
                iter1153.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.auto_load is not None:
            oprot.writeFieldBegin('auto_load', TType.BOOL, 6)
            oprot.writeBool(self.auto_load)
            oprot.writeFieldEnd()
        if self.is_basic is not None:
            oprot.writeFieldBegin('is_basic', TType.BOOL, 7)
            oprot.writeBool(self.is_basic)
            oprot.writeFieldEnd()
        if self.tags is not None:
            oprot.writeFieldBegin('tags', TType.STRING, 8)
            oprot.writeString(self.tags.encode('utf-8') if sys.version_info[0] == 2 else self.tags)
            oprot.writeFieldEnd()
        if self.node_slot_type is not None:
            oprot.writeFieldBegin('node_slot_type', TType.I32, 9)
            oprot.writeI32(self.node_slot_type)
            oprot.writeFieldEnd()
        if self.edge_slot_type is not None:
            oprot.writeFieldBegin('edge_slot_type', TType.I32, 10)
            oprot.writeI32(self.edge_slot_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.node_schema_list is None:
            raise TProtocolException(message='Required field node_schema_list is unset!')
        if self.edge_schema_list is None:
            raise TProtocolException(message='Required field edge_schema_list is unset!')
        if self.auto_load is None:
            raise TProtocolException(message='Required field auto_load is unset!')
        if self.is_basic is None:
            raise TProtocolException(message='Required field is_basic is unset!')
        if self.tags is None:
            raise TProtocolException(message='Required field tags is unset!')
        if self.node_slot_type is None:
            raise TProtocolException(message='Required field node_slot_type is unset!')
        if self.edge_slot_type is None:
            raise TProtocolException(message='Required field edge_slot_type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class view_node_tag_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - tag_count

    """


    def __init__(self, message=None, status=None, cost_time=None, tag_count=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.tag_count = tag_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.tag_count = {}
                    (_ktype1155, _vtype1156, _size1154) = iprot.readMapBegin()
                    for _i1158 in range(_size1154):
                        _key1159 = iprot.readI32()
                        _val1160 = iprot.readI32()
                        self.tag_count[_key1159] = _val1160
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('view_node_tag_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.tag_count is not None:
            oprot.writeFieldBegin('tag_count', TType.MAP, 4)
            oprot.writeMapBegin(TType.I32, TType.I32, len(self.tag_count))
            for kiter1161, viter1162 in self.tag_count.items():
                oprot.writeI32(kiter1161)
                oprot.writeI32(viter1162)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.tag_count is None:
            raise TProtocolException(message='Required field tag_count is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class node_tag_response(object):
    """
    Attributes:
     - message
     - status
     - cost_time
     - node_tag

    """


    def __init__(self, message=None, status=None, cost_time=None, node_tag=None,):
        self.message = message
        self.status = status
        self.cost_time = cost_time
        self.node_tag = node_tag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.cost_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.node_tag = {}
                    (_ktype1164, _vtype1165, _size1163) = iprot.readMapBegin()
                    for _i1167 in range(_size1163):
                        _key1168 = iprot.readI32()
                        _val1169 = []
                        (_etype1173, _size1170) = iprot.readListBegin()
                        for _i1174 in range(_size1170):
                            _elem1175 = iprot.readI32()
                            _val1169.append(_elem1175)
                        iprot.readListEnd()
                        self.node_tag[_key1168] = _val1169
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('node_tag_response')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cost_time is not None:
            oprot.writeFieldBegin('cost_time', TType.DOUBLE, 3)
            oprot.writeDouble(self.cost_time)
            oprot.writeFieldEnd()
        if self.node_tag is not None:
            oprot.writeFieldBegin('node_tag', TType.MAP, 4)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.node_tag))
            for kiter1176, viter1177 in self.node_tag.items():
                oprot.writeI32(kiter1176)
                oprot.writeListBegin(TType.I32, len(viter1177))
                for iter1178 in viter1177:
                    oprot.writeI32(iter1178)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cost_time is None:
            raise TProtocolException(message='Required field cost_time is unset!')
        if self.node_tag is None:
            raise TProtocolException(message='Required field node_tag is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(graph_info)
graph_info.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    None,  # 2
    (3, TType.I64, 'offset', None, None, ),  # 3
    (4, TType.I64, 'checkpoint', None, None, ),  # 4
)
all_structs.append(graph_inner_infos)
graph_inner_infos.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.STRUCT, 'last_import_call', [ezoocommon.ttypes.import_status, None], None, ),  # 3
    (4, TType.STRUCT, 'inner_status', [ezoocommon.ttypes.graph_inner_status, None], None, ),  # 4
)
all_structs.append(node_simple)
node_simple.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'int_id', None, None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'id', 'UTF8', None, ),  # 3
)
all_structs.append(entity_property_i)
entity_property_i.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'default_value', 'UTF8', None, ),  # 3
    (4, TType.I32, 'cache_level', None, None, ),  # 4
    (5, TType.BOOL, 'is_cached', None, None, ),  # 5
)
all_structs.append(entity_index)
entity_index.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'key_name', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'props', (TType.STRUCT, [entity_property_i, None], False), None, ),  # 3
)
all_structs.append(index)
index.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'props', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(entity_schema)
entity_schema.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.I16, 'type_i', None, None, ),  # 2
    (3, TType.LIST, 'indexes', (TType.STRUCT, [index, None], False), None, ),  # 3
    (4, TType.LIST, 'props', (TType.STRUCT, [entity_property_i, None], False), None, ),  # 4
    (5, TType.BOOL, 'single_mode', None, None, ),  # 5
)
all_structs.append(graph_schema_simple)
graph_schema_simple.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'node_slot_type', None, None, ),  # 2
    (3, TType.I32, 'edge_slot_type', None, None, ),  # 3
    (4, TType.LIST, 'node_schema_list', (TType.STRUCT, [entity_schema, None], False), None, ),  # 4
    (5, TType.LIST, 'edge_schema_list', (TType.STRUCT, [entity_schema, None], False), None, ),  # 5
    (6, TType.BOOL, 'auto_load', None, None, ),  # 6
    (7, TType.BOOL, 'is_basic', None, None, ),  # 7
    (8, TType.I32, 'status', None, None, ),  # 8
    (9, TType.STRING, 'tags', 'UTF8', None, ),  # 9
)
all_structs.append(node_score)
node_score.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node_id', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'score', None, None, ),  # 2
)
all_structs.append(prop_column)
prop_column.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'column', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(unique_node)
unique_node.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'unique', (TType.STRUCT, [prop_column, None], False), None, ),  # 2
)
all_structs.append(edge_i)
edge_i.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'start_id', None, None, ),  # 1
    (2, TType.I32, 'end_id', None, None, ),  # 2
)
all_structs.append(node_v2)
node_v2.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I32, 'id', None, None, ),  # 3
)
all_structs.append(edge_v2)
edge_v2.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I32, 'src_node_id', None, None, ),  # 3
    (4, TType.I32, 'dest_node_id', None, None, ),  # 4
    (5, TType.I32, 'edge_id', None, None, ),  # 5
)
all_structs.append(cypher_result)
cypher_result.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'cost_time', None, None, ),  # 1
    (2, TType.BOOL, 'is_success', None, None, ),  # 2
    (3, TType.LIST, 'header_titles', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'query_result', (TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 4
    (5, TType.LIST, 'data_types', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.STRING, 'error_msg', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'summary', 'UTF8', None, ),  # 7
    (8, TType.I32, 'status', None, None, ),  # 8
)
all_structs.append(unified_response)
unified_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.STRING, '_return', 'UTF8', None, ),  # 4
)
all_structs.append(node_filter)
node_filter.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(edge_filter)
edge_filter.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(transaction_response)
transaction_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.STRING, 'transaction_id', 'UTF8', None, ),  # 4
)
all_structs.append(dump_response)
dump_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.STRING, 'dump_path', 'UTF8', None, ),  # 4
    (5, TType.I32, 'server_id', None, None, ),  # 5
)
all_structs.append(node_l1)
node_l1.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'identity', None, None, ),  # 1
    (2, TType.LIST, 'labels', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.MAP, 'properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(edge_l1)
edge_l1.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'identity', None, None, ),  # 1
    (2, TType.LIST, 'labels', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I32, '_start', None, None, ),  # 3
    (4, TType.I32, '_end', None, None, ),  # 4
    (5, TType.MAP, 'properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
)
all_structs.append(segment_l1)
segment_l1.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, '_start', [node_l1, None], None, ),  # 1
    (2, TType.STRUCT, 'relationship', [edge_l1, None], None, ),  # 2
    (3, TType.STRUCT, '_end', [node_l1, None], None, ),  # 3
)
all_structs.append(path_l1)
path_l1.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, '_start', [node_l1, None], None, ),  # 1
    (2, TType.STRUCT, '_end', [node_l1, None], None, ),  # 2
    (3, TType.LIST, 'segments', (TType.STRUCT, [segment_l1, None], False), None, ),  # 3
)
all_structs.append(paths_l1)
paths_l1.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'paths', (TType.STRUCT, [path_l1, None], False), None, ),  # 4
    (5, TType.I64, 'length', None, None, ),  # 5
)
all_structs.append(one_neighbour_l1)
one_neighbour_l1.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'segments', (TType.STRUCT, [segment_l1, None], False), None, ),  # 4
    (5, TType.I64, 'length', None, None, ),  # 5
)
all_structs.append(count_neighbour_l1)
count_neighbour_l1.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'prop_value_list', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.LIST, 'count_value_list', (TType.I64, None, False), None, ),  # 5
)
all_structs.append(file_info)
file_info.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
)
all_structs.append(resources_response)
resources_response.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'resource_list', (TType.STRUCT, [file_info, None], False), None, ),  # 4
)
all_structs.append(gnn_infer_response)
gnn_infer_response.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.STRING, 'result', 'UTF8', None, ),  # 4
)
all_structs.append(server_detail_response)
server_detail_response.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'mem_usage', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.MAP, 'clients', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.MAP, 'in_memory', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.MAP, 'persistence', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.MAP, 'zookeeper', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.MAP, 'replication', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 9
)
all_structs.append(client_detail)
client_detail.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'addr', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'age', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'idle', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'last_cmd', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'params', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'status', 'UTF8', None, ),  # 7
)
all_structs.append(client_detail_response)
client_detail_response.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'infos', (TType.STRUCT, [client_detail, None], False), None, ),  # 4
)
all_structs.append(prop_cluster)
prop_cluster.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id', None, None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'prop_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'prop_value', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'id_list', (TType.I32, None, False), None, ),  # 5
)
all_structs.append(Response)
Response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
)
all_structs.append(double_response)
double_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.DOUBLE, 'value', None, None, ),  # 4
)
all_structs.append(bool_response)
bool_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.BOOL, 'value', None, None, ),  # 4
)
all_structs.append(add_node_response)
add_node_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'fail_index_list', (TType.I64, None, False), None, ),  # 4
    (5, TType.LIST, 'id_list', (TType.I32, None, False), None, ),  # 5
)
all_structs.append(remove_node_response)
remove_node_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'fail_index_list', (TType.I64, None, False), None, ),  # 4
)
all_structs.append(add_edge_response)
add_edge_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'fail_index_list', (TType.I64, None, False), None, ),  # 4
    (5, TType.LIST, 'id_list', (TType.STRUCT, [ezoocommon.ttypes.edge_id, None], False), None, ),  # 5
)
all_structs.append(remove_edge_response)
remove_edge_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'fail_index_list', (TType.I64, None, False), None, ),  # 4
)
all_structs.append(update_node_response)
update_node_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.I32, 'id', None, None, ),  # 4
)
all_structs.append(update_edge_response)
update_edge_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.STRUCT, 'id', [ezoocommon.ttypes.edge_basic_id, None], None, ),  # 4
)
all_structs.append(update_nodes_response)
update_nodes_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.I64, 'fail_index', None, None, ),  # 4
    (5, TType.LIST, 'id_list', (TType.I32, None, False), None, ),  # 5
)
all_structs.append(update_edges_response)
update_edges_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.I64, 'fail_index', None, None, ),  # 4
    (5, TType.LIST, 'id_list', (TType.STRUCT, [ezoocommon.ttypes.edge_id, None], False), None, ),  # 5
)
all_structs.append(node_s)
node_s.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I32, 'node_id', None, None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
    (5, TType.STRING, 'message', 'UTF8', None, ),  # 5
    (6, TType.DOUBLE, 'cost_time', None, None, ),  # 6
)
all_structs.append(nodes_s)
nodes_s.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'nodes', (TType.STRUCT, [node_v2, None], False), None, ),  # 4
)
all_structs.append(edge_s)
edge_s.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
    (4, TType.STRING, 'message', 'UTF8', None, ),  # 4
    (5, TType.DOUBLE, 'cost_time', None, None, ),  # 5
    (6, TType.MAP, 'src_node_props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.MAP, 'dest_node_props', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.STRING, 'src_node_type', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'dest_node_type', 'UTF8', None, ),  # 9
    (10, TType.I32, 'src_node_id', None, None, ),  # 10
    (11, TType.I32, 'dest_node_id', None, None, ),  # 11
    (12, TType.I32, 'edge_id', None, None, ),  # 12
)
all_structs.append(edges_s)
edges_s.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'edges', (TType.STRUCT, [edge_v2, None], False), None, ),  # 4
)
all_structs.append(all_edge)
all_edge.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'edge_id_list', (TType.I32, None, False), None, ),  # 4
    (5, TType.LIST, 'edge_type_list', (TType.STRING, 'UTF8', False), None, ),  # 5
)
all_structs.append(one_neighbour)
one_neighbour.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'relations', (TType.I32, None, TType.LIST, (TType.STRUCT, [ezoocommon.ttypes.edge_basic_id, None], False), False), None, ),  # 4
)
all_structs.append(nodes)
nodes.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'node_list', (TType.STRUCT, [ezoocommon.ttypes.node, None], False), None, ),  # 4
)
all_structs.append(paths)
paths.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'nodes', (TType.I32, None, TType.STRUCT, [ezoocommon.ttypes.node, None], False), None, ),  # 4
    (5, TType.LIST, 'path_list', (TType.LIST, (TType.STRUCT, [ezoocommon.ttypes.edge, None], False), False), None, ),  # 5
)
all_structs.append(paths_v2)
paths_v2.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'paths', (TType.LIST, (TType.STRUCT, [ezoocommon.ttypes.edge_basic, None], False), False), None, ),  # 4
    (5, TType.LIST, 'nodes', (TType.STRUCT, [ezoocommon.ttypes.node_basic, None], False), None, ),  # 5
    (6, TType.LIST, 'node_type_mapping', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'edge_type_mapping', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(paths_simple_v2)
paths_simple_v2.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'paths', (TType.LIST, (TType.STRUCT, [ezoocommon.ttypes.edge_basic, None], False), False), None, ),  # 4
)
all_structs.append(one_path_v2)
one_path_v2.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'paths', (TType.STRUCT, [ezoocommon.ttypes.edge_basic, None], False), None, ),  # 4
    (5, TType.LIST, 'nodes', (TType.STRUCT, [ezoocommon.ttypes.node_basic, None], False), None, ),  # 5
    (6, TType.LIST, 'node_type_mapping', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'edge_type_mapping', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(one_path_v3)
one_path_v3.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'paths', (TType.LIST, (TType.STRUCT, [ezoocommon.ttypes.edge_basic, None], False), False), None, ),  # 4
    (5, TType.LIST, 'nodes', (TType.STRUCT, [ezoocommon.ttypes.node_basic, None], False), None, ),  # 5
    (6, TType.LIST, 'node_type_mapping', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'edge_type_mapping', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(dij_l0)
dij_l0.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'paths', (TType.LIST, (TType.STRUCT, [ezoocommon.ttypes.edge_basic, None], False), False), None, ),  # 4
    (5, TType.LIST, 'nodes', (TType.STRUCT, [ezoocommon.ttypes.node_basic, None], False), None, ),  # 5
    (6, TType.LIST, 'length', (TType.DOUBLE, None, False), None, ),  # 6
)
all_structs.append(neighbour)
neighbour.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'neighbours', (TType.LIST, (TType.I32, None, False), False), None, ),  # 4
    (5, TType.MAP, 'nodes', (TType.I32, None, TType.STRUCT, [ezoocommon.ttypes.node, None], False), None, ),  # 5
    (6, TType.LIST, 'breviary_relations', (TType.STRUCT, [ezoocommon.ttypes.edge, None], False), None, ),  # 6
    (7, TType.LIST, 'other_relations', (TType.STRUCT, [ezoocommon.ttypes.edge, None], False), None, ),  # 7
)
all_structs.append(neighbour_l1)
neighbour_l1.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'nodes', (TType.I32, None, TType.STRUCT, [ezoocommon.ttypes.node, None], False), None, ),  # 4
    (5, TType.LIST, 'relations', (TType.STRUCT, [ezoocommon.ttypes.edge, None], False), None, ),  # 5
)
all_structs.append(neighbour_v2)
neighbour_v2.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'nodes', (TType.MAP, (TType.I32, None, TType.LIST, (TType.STRUCT, [ezoocommon.ttypes.node_basic, None], False), False), False), None, ),  # 4
    (5, TType.LIST, 'neighbour_count', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'node_type_mapping', (TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(neighbour_simple_v2)
neighbour_simple_v2.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'nodes', (TType.LIST, (TType.I32, None, False), False), None, ),  # 4
)
all_structs.append(neighbour_path)
neighbour_path.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'relations', (TType.I32, None, TType.LIST, (TType.STRUCT, [ezoocommon.ttypes.edge_basic, None], False), False), None, ),  # 4
    (5, TType.LIST, 'edge_type_mapping', (TType.STRING, 'UTF8', False), None, ),  # 5
)
all_structs.append(neighbour_count_v2)
neighbour_count_v2.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'nodes_count', (TType.I64, None, False), None, ),  # 4
)
all_structs.append(common_neighbour)
common_neighbour.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'nodes', (TType.I32, None, TType.STRUCT, [ezoocommon.ttypes.node, None], False), None, ),  # 4
    (5, TType.LIST, 'relations', (TType.STRUCT, [ezoocommon.ttypes.edge, None], False), None, ),  # 5
    (6, TType.LIST, 'id_list', (TType.I32, None, False), None, ),  # 6
)
all_structs.append(common_neighbour_for_studio)
common_neighbour_for_studio.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'nodes', (TType.STRUCT, [ezoocommon.ttypes.node_basic, None], False), None, ),  # 4
    (5, TType.LIST, 'relations', (TType.STRUCT, [ezoocommon.ttypes.edge_basic, None], False), None, ),  # 5
    (6, TType.LIST, 'node_type_mapping', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'edge_type_mapping', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(common_simple_neighbour)
common_simple_neighbour.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'nodes', (TType.I32, None, False), None, ),  # 4
)
all_structs.append(neighbour_count)
neighbour_count.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'node_count', (TType.I64, None, False), None, ),  # 1
    (2, TType.LIST, 'path_count', (TType.I64, None, False), None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
    (4, TType.DOUBLE, 'cost_time', None, None, ),  # 4
    (5, TType.STRING, 'message', 'UTF8', None, ),  # 5
)
all_structs.append(graph)
graph.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'nodes', (TType.I32, None, TType.STRUCT, [ezoocommon.ttypes.node, None], False), None, ),  # 4
    (5, TType.LIST, 'relations', (TType.STRUCT, [ezoocommon.ttypes.edge, None], False), None, ),  # 5
)
all_structs.append(graph_v2)
graph_v2.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'relations', (TType.STRUCT, [ezoocommon.ttypes.edge_basic, None], False), None, ),  # 4
    (5, TType.LIST, 'nodes', (TType.STRUCT, [ezoocommon.ttypes.node_basic, None], False), None, ),  # 5
    (6, TType.LIST, 'node_type_mapping', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'edge_type_mapping', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(schema_s)
schema_s.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'slot_type', None, None, ),  # 1
    (2, TType.STRING, 'db_name', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'node_index_table', (TType.STRUCT, [entity_index, None], False), None, ),  # 3
    (4, TType.LIST, 'edge_index_table', (TType.STRUCT, [entity_index, None], False), None, ),  # 4
    (5, TType.I32, 'status', None, None, ),  # 5
    (6, TType.STRING, 'message', 'UTF8', None, ),  # 6
    (7, TType.DOUBLE, 'cost_time', None, None, ),  # 7
)
all_structs.append(graph_schema_list)
graph_schema_list.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'schema_simple_list', (TType.STRUCT, [graph_schema_simple, None], False), None, ),  # 4
)
all_structs.append(graph_list)
graph_list.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.LIST, 'name_list', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.DOUBLE, 'cost_time', None, None, ),  # 4
)
all_structs.append(node_list)
node_list.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'nodes', (TType.STRUCT, [node_simple, None], False), None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.STRING, 'message', 'UTF8', None, ),  # 3
    (4, TType.DOUBLE, 'cost_time', None, None, ),  # 4
)
all_structs.append(node_id_list)
node_id_list.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'id_list', (TType.I32, None, False), None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.STRING, 'message', 'UTF8', None, ),  # 3
    (4, TType.DOUBLE, 'cost_time', None, None, ),  # 4
)
all_structs.append(node_index_list)
node_index_list.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'index_list', (TType.STRUCT, [ezoocommon.ttypes.node_index, None], False), None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.STRING, 'message', 'UTF8', None, ),  # 3
    (4, TType.DOUBLE, 'cost_time', None, None, ),  # 4
)
all_structs.append(graph_node_size)
graph_node_size.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.I64, 'size', None, None, ),  # 3
    (4, TType.DOUBLE, 'cost_time', None, None, ),  # 4
)
all_structs.append(graph_edge_size)
graph_edge_size.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.I64, 'size', None, None, ),  # 3
    (4, TType.DOUBLE, 'cost_time', None, None, ),  # 4
)
all_structs.append(replica_server_info)
replica_server_info.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'server_id', None, None, ),  # 1
    (2, TType.STRING, 'ip', 'UTF8', None, ),  # 2
    (3, TType.I32, 'service_port', None, None, ),  # 3
    (4, TType.I32, 'election_port', None, None, ),  # 4
    (5, TType.I32, 'rpc_port', None, None, ),  # 5
    (6, TType.I32, 'socket_port', None, None, ),  # 6
    (7, TType.I32, 'role', None, None, ),  # 7
    (8, TType.I32, 'srv_status', None, None, ),  # 8
)
all_structs.append(server_info)
server_info.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'cluster_infos', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 4
    (5, TType.MAP, 'graph_infos', (TType.STRING, 'UTF8', TType.MAP, (TType.STRING, 'UTF8', TType.STRUCT, [graph_info, None], False), False), None, ),  # 5
    (6, TType.STRING, 'version', 'UTF8', None, ),  # 6
    None,  # 7
    (8, TType.STRING, 'server_type', 'UTF8', None, ),  # 8
    (9, TType.BOOL, 'is_leader', None, None, ),  # 9
    (10, TType.MAP, 'graph_groups', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 10
    (11, TType.MAP, 'group_distributed_infos', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, [replica_server_info, None], False), False), None, ),  # 11
    (12, TType.LIST, 'active_groups', (TType.STRING, 'UTF8', False), None, ),  # 12
    (13, TType.MAP, 'servers', (TType.I32, None, TType.STRUCT, [replica_server_info, None], False), None, ),  # 13
)
all_structs.append(score_return)
score_return.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'score', (TType.I32, None, TType.DOUBLE, None, False), None, ),  # 4
)
all_structs.append(basic_graph)
basic_graph.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'edge', (TType.STRUCT, [edge_i, None], False), None, ),  # 1
    (2, TType.LIST, 'node', (TType.STRUCT, [ezoocommon.ttypes.node_basic, None], False), None, ),  # 2
)
all_structs.append(relation_graph)
relation_graph.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'edge', (TType.STRUCT, [ezoocommon.ttypes.edge_basic, None], False), None, ),  # 1
    (2, TType.LIST, 'node', (TType.STRUCT, [ezoocommon.ttypes.node_basic, None], False), None, ),  # 2
)
all_structs.append(return_graph)
return_graph.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.STRUCT, 'b_graph', [basic_graph, None], None, ),  # 4
    (5, TType.STRUCT, 'r_graph', [relation_graph, None], None, ),  # 5
    (6, TType.LIST, 'node_ids', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'edge_ids', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(money_flow_return)
money_flow_return.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.I64, 'cost_time', None, None, ),  # 3
    (4, TType.STRUCT, 'r_graph', [relation_graph, None], None, ),  # 4
    (5, TType.MAP, 'node_money', (TType.I32, None, TType.DOUBLE, None, False), None, ),  # 5
)
all_structs.append(count_edge)
count_edge.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'start_node', None, None, ),  # 1
    (2, TType.I32, 'end_node', None, None, ),  # 2
    (3, TType.I32, 'count', None, None, ),  # 3
)
all_structs.append(cluster_for_studio)
cluster_for_studio.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.I64, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'community', (TType.I32, None, TType.LIST, (TType.I32, None, False), False), None, ),  # 4
    (5, TType.I32, 'community_number', None, None, ),  # 5
    (6, TType.LIST, 'community_node', (TType.I32, None, False), None, ),  # 6
    (7, TType.LIST, 'community_edge', (TType.STRUCT, [count_edge, None], False), None, ),  # 7
)
all_structs.append(prop_cluster_for_studio)
prop_cluster_for_studio.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.I64, 'cost_time', None, None, ),  # 3
    (4, TType.I32, 'cluster_number', None, None, ),  # 4
    (5, TType.LIST, 'cluster_id', (TType.I32, None, False), None, ),  # 5
    (6, TType.MAP, 'cluster', (TType.I32, None, TType.STRUCT, [prop_cluster, None], False), None, ),  # 6
    (7, TType.LIST, 'cluster_edge', (TType.STRUCT, [count_edge, None], False), None, ),  # 7
)
all_structs.append(community_return)
community_return.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'community', (TType.I32, None, TType.I32, None, False), None, ),  # 4
    (5, TType.I32, 'community_number', None, None, ),  # 5
)
all_structs.append(user_roles)
user_roles.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'roles', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 4
)
all_structs.append(user_graph_roles)
user_graph_roles.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'roles', (TType.STRING, 'UTF8', TType.MAP, (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), False), None, ),  # 4
)
all_structs.append(stat_inout_degree)
stat_inout_degree.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'id_list', (TType.I32, None, False), None, ),  # 4
    (5, TType.LIST, 'degree_list', (TType.I64, None, False), None, ),  # 5
)
all_structs.append(graph_global_view)
graph_global_view.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.STRUCT, 'schema', [graph_schema_simple, None], None, ),  # 4
    (5, TType.LIST, 'node_stat', (TType.I32, None, False), None, ),  # 5
    (6, TType.LIST, 'edge_stat', (TType.LIST, (TType.LIST, (TType.I32, None, False), False), False), None, ),  # 6
)
all_structs.append(single_server_config)
single_server_config.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ip', 'UTF8', None, ),  # 1
    (2, TType.I32, 'rpc_port', None, None, ),  # 2
)
all_structs.append(graph_schema_response)
graph_schema_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.LIST, 'node_schema_list', (TType.STRUCT, [entity_schema, None], False), None, ),  # 4
    (5, TType.LIST, 'edge_schema_list', (TType.STRUCT, [entity_schema, None], False), None, ),  # 5
    (6, TType.BOOL, 'auto_load', None, None, ),  # 6
    (7, TType.BOOL, 'is_basic', None, None, ),  # 7
    (8, TType.STRING, 'tags', 'UTF8', None, ),  # 8
    (9, TType.I32, 'node_slot_type', None, None, ),  # 9
    (10, TType.I32, 'edge_slot_type', None, None, ),  # 10
)
all_structs.append(view_node_tag_response)
view_node_tag_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'tag_count', (TType.I32, None, TType.I32, None, False), None, ),  # 4
)
all_structs.append(node_tag_response)
node_tag_response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.DOUBLE, 'cost_time', None, None, ),  # 3
    (4, TType.MAP, 'node_tag', (TType.I32, None, TType.LIST, (TType.I32, None, False), False), None, ),  # 4
)
fix_spec(all_structs)
del all_structs
