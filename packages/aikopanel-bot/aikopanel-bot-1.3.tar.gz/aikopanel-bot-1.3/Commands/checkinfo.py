import aikopanel_bot
import time
from handler import MysqlUtils
from telegram import Update
from telegram.ext import ContextTypes

desc = 'Tr·∫£ l·ªùi m·ªôt ng∆∞·ªùi ƒë·ªÉ l·∫•y th√¥ng tin s·ª≠ d·ª•ng'
config = aikopanel_bot.config['bot']
configid = aikopanel_bot.config['aikopanel']['idapple']


def onQuery(sql):
    try:
        db = MysqlUtils()
        result = db.sql_query(sql)
    finally:
        db.close()
        return result


def getContent(user):
    text = 'üìã*Th√¥ng tin c√° nh√¢n*\n'
    User_id = user[0]
    Register_time = time.strftime(
        "%Y-%m-%d %H:%M:%S", time.localtime(user[1]))
    Plan_id = onQuery('SELECT name FROM v2_plan WHERE id = %s' %
                      user[2])[0][0]
    Expire_time = 'Kh√¥ng gi·ªõi h·∫°n'
    if user[3] is not None:
        Expire_time = time.strftime(
            "%Y-%m-%d %H:%M:%S", time.localtime(user[3]))
    Data_Time = time.strftime(
        "%Y-%m-%d %H:%M:%S", time.localtime(user[7]))
    CountgetIDapple = onQuery('Select count_idapple From v2_user Where id = %s' % User_id)[0][0]

    text = f'{text}\nüé≤*IDÔºö* {User_id}'
    text = f'{text}\n‚åöÔ∏è*Th·ªùi gian ƒëƒÉng k√ΩÔºö* {Register_time}'
    if Plan_id != '':
        text = f'{text}\nüìö*T√™n g√≥iÔºö* {Plan_id}'
        text = f'{text}\nüìå*Th·ªùi gian h·∫øt h·∫°nÔºö* {Expire_time}'
        if Plan_id in configid['plan_limit']['plan_unlimit']:
            text = f'{text}\nüçé*S·ªë L·∫ßn l·∫•y IDAppleÔºö* ‚àû'
        else:
            text = f'{text}\nüçé*S·ªë L·∫ßn l·∫•y IDAppleÔºö* {CountgetIDapple} L·∫ßn/Th√°ng'
        text = f'{text}\n'
        text = f'{text}\nüìä*L·∫ßn s·ª≠ d·ª•ng cu·ªëi c√πngÔºö* {Data_Time}'
    else:
        text = f'{text}\nüìö*G√≥i C·ªßa B·∫°nÔºö* Ch∆∞a Mua G√≥i'
    return text


async def autoDelete(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    await context.bot.delete_message(job.chat_id, job.data)


async def exec(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.effective_message
    chat_id = msg.chat_id
    chat_type = msg.chat.type

    if chat_type == 'private' or chat_id == config['group_id']:
        if msg.reply_to_message:
            reply_id = msg.reply_to_message.from_user.id
            user = onQuery(
                'SELECT id,created_at,plan_id,expired_at,u,d,transfer_enable,t FROM v2_user WHERE `telegram_id` = %s' % reply_id)
            if len(user) > 0:
                if user[0][2] is not None:
                    text = getContent(user[0])
                    callback = await msg.reply_markdown(text)
                else:
                    callback = await msg.reply_markdown('‚ùå*L·ªói*\nT√†i kho·∫£n n√†y ch∆∞a mua g√≥i ƒëƒÉng k√Ω!')
            else:
                callback = await msg.reply_markdown('‚ùå*L·ªói*\nNg∆∞·ªùi d√πng n√†y ch∆∞a li√™n k·∫øt t√†i kho·∫£n Telegram')
        else:
            callback = await msg.reply_markdown('‚ùå*L·ªói*\nB·∫°n c·∫ßn tr·∫£ l·ªùi m·ªôt tin nh·∫Øn ƒë·ªÉ l·∫•y th√¥ng tin!')
        if chat_type != 'private':
            context.job_queue.run_once(
                autoDelete, 300, data=msg.id, chat_id=chat_id, name=str(msg.id))
            context.job_queue.run_once(
                autoDelete, 300, data=callback.message_id, chat_id=chat_id, name=str(callback.message_id))

    else:
        await msg.reply_markdown('‚ùå*L·ªói*\nB·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!')
