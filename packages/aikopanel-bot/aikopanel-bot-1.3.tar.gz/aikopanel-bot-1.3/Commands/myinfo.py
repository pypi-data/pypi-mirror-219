import aikopanel_bot
import time
from handler import MysqlUtils
from telegram import Update
from telegram.ext import ContextTypes

desc = 'L·∫•y th√¥ng tin s·ª≠ d·ª•ng c·ªßa t√¥i'
config = aikopanel_bot.config['bot']
configid = aikopanel_bot.config['aikopanel']['idapple']


def onQuery(sql):
    try:
        db = MysqlUtils()
        result = db.sql_query(sql)
    finally:
        db.close()
        return result


def getContent(user,chat_type):
    text = 'üìã*Th√¥ng tin c√° nh√¢n*\n'
    User_id = user[0]
    Register_time = time.strftime(
        "%Y-%m-%d %H:%M:%S", time.localtime(user[1]))
    Plan_id = onQuery('SELECT name FROM v2_plan WHERE id = %s' %
                      user[2])[0][0]
    Expire_time = 'Kh√¥ng gi·ªõi h·∫°n'
    if user[3] is not None:
        Expire_time = time.strftime(
            "%Y-%m-%d %H:%M:%S", time.localtime(user[3]))
    Data_Upload = round(user[4] / 1024 / 1024 / 1024, 2)
    Data_Download = round(user[5] / 1024 / 1024 / 1024, 2)
    Data_Total = round(user[6] / 1024 / 1024 / 1024, 2)
    Data_Last = round(
        (user[6]-user[5]-user[4]) / 1024 / 1024 / 1024, 2)
    Data_Time = time.strftime(
        "%Y-%m-%d %H:%M:%S", time.localtime(user[7]))
    Email = user[8]
    sni = onQuery('Select user_sni From v2_user Where id = %s' % User_id)[0][0]
    CountgetIDapple = onQuery('Select count_idapple From v2_user Where id = %s' % User_id)[0][0]
    balance = onQuery('Select balance,commission_balance From v2_user Where id = %s' % User_id)

    text = f'{text}\nüé≤*UIDÔºö* {User_id}'
    if chat_type == 'private':
        text = f'{text}\nüìß*Email ƒëƒÉng k√ΩÔºö* {Email}'
    text = f'{text}\n‚åöÔ∏è*Th·ªùi gian ƒëƒÉng k√ΩÔºö* {Register_time}'
    text = f'{text}\nüìö*T√™n g√≥iÔºö* {Plan_id}'
    text = f'{text}\nüìå*Th·ªùi gian h·∫øt h·∫°nÔºö* {Expire_time}'
    if Plan_id in configid['plan_limit']['plan_unlimit']:
        text = f'{text}\nüçé*S·ªë L·∫ßn l·∫•y IDAppleÔºö* ‚àû'
    else:
        text = f'{text}\nüçé*S·ªë L·∫ßn l·∫•y IDAppleÔºö* {CountgetIDapple} L·∫ßn/Th√°ng'
    text = f'{text}\n'
    if chat_type == 'private':
        text = f'{text}\nüí≥*S·ªë D∆∞ kh·∫£ d·ª•ng: * {balance[0][0]} VNƒê'
        text = f'{text}\nüí∞*S·ªë D∆∞ hoa h·ªìng: * {balance[0][1]} VNƒê'
        text = f'{text}\n'
        text = f'{text}\nüìå*SNI hi·ªán t·∫°iÔºö* {sni}'
        text = f'{text}\nüì§*L∆∞u l∆∞·ª£ng t·∫£i l√™nÔºö* {Data_Upload} GB'
        text = f'{text}\nüì•*L∆∞u l∆∞·ª£ng t·∫£i xu·ªëngÔºö* {Data_Download} GB'
        text = f'{text}\nüìÉ*L∆∞u l∆∞·ª£ng c√≤n l·∫°iÔºö* {Data_Last} GB'
        text = f'{text}\nüìú*T·ªïng l∆∞u l∆∞·ª£ngÔºö* {Data_Total} GB'
    text = f'{text}\nüìä*L·∫ßn s·ª≠ d·ª•ng cu·ªëi c√πngÔºö* {Data_Time}'
    return text


async def autoDelete(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    await context.bot.delete_message(job.chat_id, job.data)


async def exec(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.effective_message
    user_id = msg.from_user.id
    chat_id = msg.chat_id
    chat_type = msg.chat.type

    user = onQuery(
        'SELECT id,created_at,plan_id,expired_at,u,d,transfer_enable,t,email FROM v2_user WHERE `telegram_id` = %s' % user_id)
    if chat_type == 'private' or chat_id == config['group_id']:
        if len(user) > 0:
            if user[0][2] is not None:
                text = getContent(user[0],chat_type)
                callback = await msg.reply_markdown(text)
            else:
                callback = await msg.reply_markdown('‚ùå*L·ªói*\nT√†i kho·∫£n c·ªßa b·∫°n ch∆∞a mua g√≥i ƒëƒÉng k√Ω!')
        else:
            callback = await msg.reply_markdown('‚ùå*L·ªói*\nB·∫°n ch∆∞a li√™n k·∫øt t√†i kho·∫£n!')
    if chat_type != 'private':
        context.job_queue.run_once(
            autoDelete, 300, data=msg.id, chat_id=chat_id, name=str(msg.id))
        context.job_queue.run_once(
            autoDelete, 300, data=callback.message_id, chat_id=chat_id, name=str(callback.message_id))
