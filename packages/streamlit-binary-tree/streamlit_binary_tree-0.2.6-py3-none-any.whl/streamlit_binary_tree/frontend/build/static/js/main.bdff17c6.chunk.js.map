{"version":3,"sources":["ArgsContext.tsx","NodeContent.tsx","EdgeContent.tsx","Node.tsx","Tree.tsx","index.tsx"],"names":["default_args","ArgsContext","createContext","NodeContent","_ref","id","args","useContext","data","show_node_ids","node_data","find","a","node_id","_jsx","_Fragment","children","_jsxs","className","onClick","e","value","Streamlit","setComponentValue","style","backgroundColor","color","contents","map","content","i","EdgeContent","isLeft","left","condition","Node","_useState","useState","childrenVisible","expanded","_useState2","_slicedToArray","setChildrenVisible","hasChildren","right","childrenVisibleStyle","opacity","maxHeight","maxWidth","overflowX","transform","invertColor","hex","indexOf","slice","length","Error","r","parseInt","toString","g","b","padZero","str","len","Array","join","withStreamlitConnection","props","key","theme","lastFrameHeight","setLastFrameHeight","treeRef","useRef","originalStyle","_objectSpread","base","button_color","button_hover_color","edge_color","edge_hover_color","node_border_color","node_color","node_hover_color","text_color","text_hover_color","Object","entries","forEach","_ref2","concat","replaceAll","document","getElementById","setProperty","setStyle","useEffect","intervalId","setInterval","current","clientHeight","setFrameHeight","clearInterval","treeToPng","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","element","useWidth","canvas","dataURL","wrap","_context","prev","next","querySelector","console","log","scrollWidth","clientWidth","html2canvas","width","windowWidth","scale","sent","toDataURL","downloadjs","stop","apply","arguments","Provider","ref","ReactDOM","render","React","StrictMode","StreamlitProvider","Tree"],"mappings":"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","file":"static/js/main.bdff17c6.chunk.js","sourcesContent":["import { createContext } from \"react\"\r\n\r\nconst default_args: any = {}\r\nexport const ArgsContext = createContext(default_args)\r\n","import { useContext } from \"react\"\r\nimport { Streamlit } from \"streamlit-component-lib\"\r\nimport { ArgsContext } from \"./ArgsContext\"\r\nimport type { NodeObject, NodeId } from \"./Node\"\r\n\r\nconst NodeContent = ({ id }: NodeId) => {\r\n  const args = useContext(ArgsContext)\r\n  const data: NodeObject[] = args.data\r\n  const show_node_ids: boolean = args.show_node_ids\r\n  const node_data = data.find((a) => a.node_id === id)\r\n\r\n  const updateValue = (value: number) => {\r\n    Streamlit.setComponentValue(value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"node\">\r\n        {show_node_ids && (\r\n          <div\r\n            className=\"node-content-left\"\r\n            onClick={(e) => {\r\n              updateValue(id)\r\n            }}\r\n            style={{ backgroundColor: node_data!.color }}\r\n          >\r\n            {node_data!.node_id}\r\n          </div>\r\n        )}\r\n        <div className=\"node-content-right\">\r\n          {node_data!.contents.map(function (content, i) {\r\n            return (\r\n              <div className=\"node-content-right-item\" key={i}>\r\n                {content}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NodeContent\r\n","import { useContext } from \"react\"\r\nimport { ArgsContext } from \"./ArgsContext\"\r\nimport type { NodeObject } from \"./Node\"\r\n\r\ninterface EdgeType {\r\n  id: number\r\n  isLeft: boolean\r\n}\r\n\r\nconst EdgeContent = ({ id, isLeft }: EdgeType) => {\r\n  const args = useContext(ArgsContext)\r\n  const data: NodeObject[] = args.data\r\n  const node_data = data.find((a) => a.node_id === id)\r\n\r\n  return (\r\n    <>\r\n      <div className=\"edge-content\">\r\n        {isLeft ? node_data!.left.condition : node_data!.left.condition}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EdgeContent\r\n","import { useState, useContext } from \"react\"\r\nimport { ArgsContext } from \"./ArgsContext\"\r\n\r\nimport NodeContent from \"./NodeContent\"\r\nimport EdgeContent from \"./EdgeContent\"\r\n\r\nexport interface NodeObject {\r\n  node_id: number\r\n  left: {\r\n    id: number\r\n    condition: string\r\n  }\r\n  right: {\r\n    id: number\r\n    condition: string\r\n  }\r\n  contents: string[]\r\n  color: string\r\n  childrenVisible: boolean\r\n}\r\n\r\nexport interface NodeId {\r\n  id: number\r\n}\r\n\r\nconst Node = ({ id }: NodeId) => {\r\n  const args = useContext(ArgsContext)\r\n  const data: NodeObject[] = args.data\r\n  const node_data = data.find((a) => a.node_id === id)\r\n  const [childrenVisible, setChildrenVisible] = useState(\r\n    node_data!.childrenVisible != null\r\n      ? node_data!.childrenVisible\r\n      : args.expanded\r\n  )\r\n\r\n  node_data!.childrenVisible = childrenVisible\r\n\r\n  const hasChildren = node_data!.left != null && node_data!.right != null\r\n  const childrenVisibleStyle = childrenVisible\r\n    ? {}\r\n    : ({\r\n        opacity: 0,\r\n        maxHeight: 0,\r\n        maxWidth: 0,\r\n        overflowX: \"hidden\",\r\n      } as React.CSSProperties)\r\n\r\n  // console.log(\"id \", id, node_data, hasChildren)\r\n\r\n  function switchChildrenVisible() {\r\n    setChildrenVisible(!childrenVisible)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <NodeContent id={id} />\r\n      {hasChildren && (\r\n        <div\r\n          className=\"child-button\"\r\n          onClick={(e) => switchChildrenVisible()}\r\n          style={childrenVisible ? {} : { transform: \"scaleX(-1)\" }}\r\n        ></div>\r\n      )}\r\n\r\n      {hasChildren && (\r\n        <ul style={childrenVisibleStyle}>\r\n          <li>\r\n            <EdgeContent id={id} isLeft={true} key={id} />\r\n            <Node id={node_data!.left.id} key={node_data!.left.id} />\r\n          </li>\r\n          <li>\r\n            <EdgeContent id={id} isLeft={false} key={id} />\r\n            <Node id={node_data!.right.id} key={node_data!.right.id} />\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Node\r\n","import {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { useEffect, useState, useRef } from \"react\"\n\nimport downloadjs from \"downloadjs\"\nimport html2canvas from \"html2canvas\"\nimport { ArgsContext } from \"./ArgsContext\"\nimport Node from \"./Node\"\nimport \"./Node.scss\"\n\ninterface styleType {\n  button_color: string\n  button_hover_color: string\n  edge_color: string\n  edge_hover_color: string\n  edge_size: string\n  font_family: string\n  font_size: string\n  max_height: string\n  node_border_color: string\n  node_color: string\n  node_hover_color: string\n  node_size: string\n  padding_quantum: string\n  text_color: string\n  text_hover_color: string\n  transition_time: string\n}\n\nconst invertColor = (hex: string) => {\n  if (hex.indexOf(\"#\") === 0) {\n    hex = hex.slice(1)\n  }\n  // convert 3-digit hex to 6-digits.\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2]\n  }\n  if (hex.length !== 6) {\n    throw new Error(\"Invalid HEX color.\")\n  }\n  // invert color components\n  var r = (255 - parseInt(hex.slice(0, 2), 16)).toString(16),\n    g = (255 - parseInt(hex.slice(2, 4), 16)).toString(16),\n    b = (255 - parseInt(hex.slice(4, 6), 16)).toString(16)\n  // pad each with zeros and return\n  return \"#\" + padZero(r, 2) + padZero(g, 2) + padZero(b, 2)\n}\n\nconst padZero = (str: string, len: number) => {\n  len = len || 2\n  var zeros = new Array(len).join(\"0\")\n  return (zeros + str).slice(-len)\n}\n\nconst setStyle = (originalStyle: styleType, theme: any) => {\n  const style = { ...originalStyle }\n  if (theme.base === \"dark\") {\n    style.button_color = invertColor(style.button_color)\n    style.button_hover_color = invertColor(style.button_hover_color)\n    style.edge_color = invertColor(style.edge_color)\n    style.edge_hover_color = invertColor(style.edge_hover_color)\n    style.node_border_color = invertColor(style.node_border_color)\n    style.node_color = invertColor(style.node_color)\n    style.node_hover_color = invertColor(style.node_hover_color)\n    style.text_color = invertColor(style.text_color)\n    style.text_hover_color = invertColor(style.text_hover_color)\n  }\n  Object.entries(style).forEach(([key, value]) => {\n    key = `--${key.replaceAll(\"_\", \"-\")}`\n    document.getElementById(\"root\")!.style.setProperty(key, value)\n  })\n  document\n    .getElementById(\"root\")!\n    .style.setProperty(\"--backgroundColor\", theme.backgroundColor)\n}\n\nconst Tree = (props: ComponentProps) => {\n  const args = props.args\n  const key = args.key\n  const style: styleType = args.style\n  const theme = props.theme\n  const [lastFrameHeight, setLastFrameHeight] = useState(0)\n  const treeRef: any = useRef(null)\n\n  setStyle(style, theme)\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (treeRef.current != null) {\n        setLastFrameHeight(treeRef.current!.clientHeight)\n      }\n    }, 20)\n    Streamlit.setFrameHeight()\n    // console.log(\n    //   lastFrameHeight,\n    //   Streamlit.lastFrameHeight,\n    //   treeRef.current!.clientHeight\n    // )\n    return () => clearInterval(intervalId)\n  }, [lastFrameHeight])\n\n  const treeToPng = async () => {\n    const element = document.querySelector(\".tree\")!\n    console.log(element.scrollWidth, element.clientWidth)\n    const useWidth = element.scrollWidth\n    const canvas = await html2canvas(document.querySelector(\".tree\")!, {\n      width: useWidth,\n      windowWidth: useWidth,\n      scale: 2,\n    })\n    const dataURL = canvas.toDataURL(\"image/jpg\")\n    downloadjs(dataURL, `${key}.jpg`, \"image/jpg\")\n  }\n\n  // const style: React.CSSProperties = {}\n\n  return (\n    <ArgsContext.Provider value={args}>\n      <button className=\"download-button\" onClick={(e) => treeToPng()}>\n        Download as Image\n      </button>\n      <div className=\"tree\" ref={treeRef}>\n        <ul className=\"rootNode\">\n          <li>\n            <Node id={0} />\n          </li>\n        </ul>\n      </div>\n      <br />\n    </ArgsContext.Provider>\n  )\n}\n\nexport default withStreamlitConnection(Tree)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { StreamlitProvider } from \"streamlit-component-lib-react-hooks\"\nimport Tree from \"./Tree\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitProvider>\n      <Tree />\n    </StreamlitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}