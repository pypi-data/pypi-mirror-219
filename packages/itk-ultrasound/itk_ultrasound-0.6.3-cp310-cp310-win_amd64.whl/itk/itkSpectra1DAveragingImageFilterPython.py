# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _UltrasoundPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSpectra1DAveragingImageFilterPython
else:
    import _itkSpectra1DAveragingImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSpectra1DAveragingImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSpectra1DAveragingImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterUltrasoundPython

def itkSpectra1DAveragingImageFilterVIF2VIF2_New():
    return itkSpectra1DAveragingImageFilterVIF2VIF2.New()

class itkSpectra1DAveragingImageFilterVIF2VIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2):
    r"""Proxy of C++ itkSpectra1DAveragingImageFilterVIF2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF2VIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF2VIF2_Clone)
    FloatConvertibleToInputScalarTypeCheck = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF2VIF2_FloatConvertibleToInputScalarTypeCheck
    
    FloatConvertibleToOutputScalarTypeCheck = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF2VIF2_FloatConvertibleToOutputScalarTypeCheck
    
    InputScalarTypeConvertibleToFloatCheck = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF2VIF2_InputScalarTypeConvertibleToFloatCheck
    
    OutputScalarTypeConvertibleToFloatCheck = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF2VIF2_OutputScalarTypeConvertibleToFloatCheck
    
    __swig_destroy__ = _itkSpectra1DAveragingImageFilterPython.delete_itkSpectra1DAveragingImageFilterVIF2VIF2
    cast = _swig_new_static_method(_itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF2VIF2_cast)

    def New(*args, **kargs):
        """New() -> itkSpectra1DAveragingImageFilterVIF2VIF2

        Create a new object of the class itkSpectra1DAveragingImageFilterVIF2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpectra1DAveragingImageFilterVIF2VIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpectra1DAveragingImageFilterVIF2VIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpectra1DAveragingImageFilterVIF2VIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpectra1DAveragingImageFilterVIF2VIF2 in _itkSpectra1DAveragingImageFilterPython:
_itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF2VIF2_swigregister(itkSpectra1DAveragingImageFilterVIF2VIF2)
itkSpectra1DAveragingImageFilterVIF2VIF2___New_orig__ = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF2VIF2___New_orig__
itkSpectra1DAveragingImageFilterVIF2VIF2_cast = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF2VIF2_cast


def itkSpectra1DAveragingImageFilterVIF3VIF2_New():
    return itkSpectra1DAveragingImageFilterVIF3VIF2.New()

class itkSpectra1DAveragingImageFilterVIF3VIF2(itk.itkImageToImageFilterUltrasoundPython.itkImageToImageFilterVIF3VIF2):
    r"""Proxy of C++ itkSpectra1DAveragingImageFilterVIF3VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF3VIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF3VIF2_Clone)
    FloatConvertibleToInputScalarTypeCheck = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF3VIF2_FloatConvertibleToInputScalarTypeCheck
    
    FloatConvertibleToOutputScalarTypeCheck = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF3VIF2_FloatConvertibleToOutputScalarTypeCheck
    
    InputScalarTypeConvertibleToFloatCheck = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF3VIF2_InputScalarTypeConvertibleToFloatCheck
    
    OutputScalarTypeConvertibleToFloatCheck = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF3VIF2_OutputScalarTypeConvertibleToFloatCheck
    
    __swig_destroy__ = _itkSpectra1DAveragingImageFilterPython.delete_itkSpectra1DAveragingImageFilterVIF3VIF2
    cast = _swig_new_static_method(_itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF3VIF2_cast)

    def New(*args, **kargs):
        """New() -> itkSpectra1DAveragingImageFilterVIF3VIF2

        Create a new object of the class itkSpectra1DAveragingImageFilterVIF3VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpectra1DAveragingImageFilterVIF3VIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpectra1DAveragingImageFilterVIF3VIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpectra1DAveragingImageFilterVIF3VIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpectra1DAveragingImageFilterVIF3VIF2 in _itkSpectra1DAveragingImageFilterPython:
_itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF3VIF2_swigregister(itkSpectra1DAveragingImageFilterVIF3VIF2)
itkSpectra1DAveragingImageFilterVIF3VIF2___New_orig__ = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF3VIF2___New_orig__
itkSpectra1DAveragingImageFilterVIF3VIF2_cast = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF3VIF2_cast


def itkSpectra1DAveragingImageFilterVIF4VIF2_New():
    return itkSpectra1DAveragingImageFilterVIF4VIF2.New()

class itkSpectra1DAveragingImageFilterVIF4VIF2(itk.itkImageToImageFilterUltrasoundPython.itkImageToImageFilterVIF4VIF2):
    r"""Proxy of C++ itkSpectra1DAveragingImageFilterVIF4VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF4VIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF4VIF2_Clone)
    FloatConvertibleToInputScalarTypeCheck = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF4VIF2_FloatConvertibleToInputScalarTypeCheck
    
    FloatConvertibleToOutputScalarTypeCheck = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF4VIF2_FloatConvertibleToOutputScalarTypeCheck
    
    InputScalarTypeConvertibleToFloatCheck = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF4VIF2_InputScalarTypeConvertibleToFloatCheck
    
    OutputScalarTypeConvertibleToFloatCheck = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF4VIF2_OutputScalarTypeConvertibleToFloatCheck
    
    __swig_destroy__ = _itkSpectra1DAveragingImageFilterPython.delete_itkSpectra1DAveragingImageFilterVIF4VIF2
    cast = _swig_new_static_method(_itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF4VIF2_cast)

    def New(*args, **kargs):
        """New() -> itkSpectra1DAveragingImageFilterVIF4VIF2

        Create a new object of the class itkSpectra1DAveragingImageFilterVIF4VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpectra1DAveragingImageFilterVIF4VIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpectra1DAveragingImageFilterVIF4VIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpectra1DAveragingImageFilterVIF4VIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpectra1DAveragingImageFilterVIF4VIF2 in _itkSpectra1DAveragingImageFilterPython:
_itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF4VIF2_swigregister(itkSpectra1DAveragingImageFilterVIF4VIF2)
itkSpectra1DAveragingImageFilterVIF4VIF2___New_orig__ = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF4VIF2___New_orig__
itkSpectra1DAveragingImageFilterVIF4VIF2_cast = _itkSpectra1DAveragingImageFilterPython.itkSpectra1DAveragingImageFilterVIF4VIF2_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def spectra1_d_averaging_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for Spectra1DAveragingImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.Spectra1DAveragingImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def spectra1_d_averaging_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.Ultrasound.Spectra1DAveragingImageFilter
    spectra1_d_averaging_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    spectra1_d_averaging_image_filter.__doc__ = filter_object.__doc__




