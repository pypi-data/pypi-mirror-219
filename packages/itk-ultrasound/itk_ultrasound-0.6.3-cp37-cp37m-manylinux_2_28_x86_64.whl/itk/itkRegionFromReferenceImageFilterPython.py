# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _UltrasoundPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRegionFromReferenceImageFilterPython
else:
    import _itkRegionFromReferenceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkRegionFromReferenceImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkRegionFromReferenceImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkExtractImageFilterPython
import itk.itkInPlaceImageFilterBPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
class listIndex2(collections.abc.MutableSequence):
    r"""Proxy of C++ std::list< itk::Index< 2 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2___nonzero__)
    __bool__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2___bool__)
    __len__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2___len__)
    __getslice__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2___getslice__)
    __setslice__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2___setslice__)
    __delslice__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2___delslice__)
    __delitem__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2___delitem__)
    __getitem__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2___setitem__)
    pop = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_pop)
    append = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_append)
    empty = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_empty)
    size = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_size)
    swap = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_swap)
    begin = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_begin)
    end = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_end)
    rbegin = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_rbegin)
    rend = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_rend)
    clear = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_clear)
    get_allocator = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_get_allocator)
    pop_back = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_pop_back)
    erase = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> listIndex2
        __init__(self, other) -> listIndex2

        Parameters
        ----------
        other: std::list< itk::Index< 2 > > const &

        __init__(self, size) -> listIndex2

        Parameters
        ----------
        size: std::list< itk::Index< 2 > >::size_type

        __init__(self, size, value) -> listIndex2

        Parameters
        ----------
        size: std::list< itk::Index< 2 > >::size_type
        value: std::list< itk::Index< 2 > >::value_type const &

        """
        _itkRegionFromReferenceImageFilterPython.listIndex2_swiginit(self, _itkRegionFromReferenceImageFilterPython.new_listIndex2(*args))
    push_back = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_push_back)
    front = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_front)
    back = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_back)
    assign = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_assign)
    resize = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_resize)
    insert = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_insert)
    pop_front = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_pop_front)
    push_front = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_push_front)
    reverse = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex2_reverse)
    __swig_destroy__ = _itkRegionFromReferenceImageFilterPython.delete_listIndex2

# Register listIndex2 in _itkRegionFromReferenceImageFilterPython:
_itkRegionFromReferenceImageFilterPython.listIndex2_swigregister(listIndex2)

class listIndex3(collections.abc.MutableSequence):
    r"""Proxy of C++ std::list< itk::Index< 3 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3___nonzero__)
    __bool__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3___bool__)
    __len__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3___len__)
    __getslice__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3___getslice__)
    __setslice__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3___setslice__)
    __delslice__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3___delslice__)
    __delitem__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3___delitem__)
    __getitem__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3___setitem__)
    pop = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_pop)
    append = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_append)
    empty = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_empty)
    size = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_size)
    swap = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_swap)
    begin = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_begin)
    end = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_end)
    rbegin = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_rbegin)
    rend = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_rend)
    clear = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_clear)
    get_allocator = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_get_allocator)
    pop_back = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_pop_back)
    erase = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> listIndex3
        __init__(self, other) -> listIndex3

        Parameters
        ----------
        other: std::list< itk::Index< 3 > > const &

        __init__(self, size) -> listIndex3

        Parameters
        ----------
        size: std::list< itk::Index< 3 > >::size_type

        __init__(self, size, value) -> listIndex3

        Parameters
        ----------
        size: std::list< itk::Index< 3 > >::size_type
        value: std::list< itk::Index< 3 > >::value_type const &

        """
        _itkRegionFromReferenceImageFilterPython.listIndex3_swiginit(self, _itkRegionFromReferenceImageFilterPython.new_listIndex3(*args))
    push_back = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_push_back)
    front = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_front)
    back = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_back)
    assign = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_assign)
    resize = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_resize)
    insert = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_insert)
    pop_front = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_pop_front)
    push_front = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_push_front)
    reverse = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex3_reverse)
    __swig_destroy__ = _itkRegionFromReferenceImageFilterPython.delete_listIndex3

# Register listIndex3 in _itkRegionFromReferenceImageFilterPython:
_itkRegionFromReferenceImageFilterPython.listIndex3_swigregister(listIndex3)

class listIndex4(collections.abc.MutableSequence):
    r"""Proxy of C++ std::list< itk::Index< 4 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4___nonzero__)
    __bool__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4___bool__)
    __len__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4___len__)
    __getslice__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4___getslice__)
    __setslice__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4___setslice__)
    __delslice__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4___delslice__)
    __delitem__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4___delitem__)
    __getitem__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4___setitem__)
    pop = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_pop)
    append = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_append)
    empty = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_empty)
    size = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_size)
    swap = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_swap)
    begin = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_begin)
    end = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_end)
    rbegin = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_rbegin)
    rend = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_rend)
    clear = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_clear)
    get_allocator = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_get_allocator)
    pop_back = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_pop_back)
    erase = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> listIndex4
        __init__(self, other) -> listIndex4

        Parameters
        ----------
        other: std::list< itk::Index< 4 > > const &

        __init__(self, size) -> listIndex4

        Parameters
        ----------
        size: std::list< itk::Index< 4 > >::size_type

        __init__(self, size, value) -> listIndex4

        Parameters
        ----------
        size: std::list< itk::Index< 4 > >::size_type
        value: std::list< itk::Index< 4 > >::value_type const &

        """
        _itkRegionFromReferenceImageFilterPython.listIndex4_swiginit(self, _itkRegionFromReferenceImageFilterPython.new_listIndex4(*args))
    push_back = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_push_back)
    front = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_front)
    back = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_back)
    assign = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_assign)
    resize = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_resize)
    insert = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_insert)
    pop_front = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_pop_front)
    push_front = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_push_front)
    reverse = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.listIndex4_reverse)
    __swig_destroy__ = _itkRegionFromReferenceImageFilterPython.delete_listIndex4

# Register listIndex4 in _itkRegionFromReferenceImageFilterPython:
_itkRegionFromReferenceImageFilterPython.listIndex4_swigregister(listIndex4)


def itkRegionFromReferenceImageFilterID2ID2_New():
    return itkRegionFromReferenceImageFilterID2ID2.New()

class itkRegionFromReferenceImageFilterID2ID2(itk.itkExtractImageFilterPython.itkExtractImageFilterID2ID2):
    r"""Proxy of C++ itkRegionFromReferenceImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID2ID2_Clone)
    SetReferenceImage = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID2ID2_SetReferenceImage)
    GetReferenceImage = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID2ID2_GetReferenceImage)
    SetInput1 = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID2ID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID2ID2_SetInput2)
    InputConvertibleToOutputCheck = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID2ID2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID2ID2_SameDimensionCheck
    
    __swig_destroy__ = _itkRegionFromReferenceImageFilterPython.delete_itkRegionFromReferenceImageFilterID2ID2
    cast = _swig_new_static_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkRegionFromReferenceImageFilterID2ID2

        Create a new object of the class itkRegionFromReferenceImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionFromReferenceImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionFromReferenceImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionFromReferenceImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionFromReferenceImageFilterID2ID2 in _itkRegionFromReferenceImageFilterPython:
_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID2ID2_swigregister(itkRegionFromReferenceImageFilterID2ID2)
itkRegionFromReferenceImageFilterID2ID2___New_orig__ = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID2ID2___New_orig__
itkRegionFromReferenceImageFilterID2ID2_cast = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID2ID2_cast


def itkRegionFromReferenceImageFilterID3ID3_New():
    return itkRegionFromReferenceImageFilterID3ID3.New()

class itkRegionFromReferenceImageFilterID3ID3(itk.itkExtractImageFilterPython.itkExtractImageFilterID3ID3):
    r"""Proxy of C++ itkRegionFromReferenceImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID3ID3_Clone)
    SetReferenceImage = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID3ID3_SetReferenceImage)
    GetReferenceImage = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID3ID3_GetReferenceImage)
    SetInput1 = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID3ID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID3ID3_SetInput2)
    InputConvertibleToOutputCheck = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID3ID3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID3ID3_SameDimensionCheck
    
    __swig_destroy__ = _itkRegionFromReferenceImageFilterPython.delete_itkRegionFromReferenceImageFilterID3ID3
    cast = _swig_new_static_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkRegionFromReferenceImageFilterID3ID3

        Create a new object of the class itkRegionFromReferenceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionFromReferenceImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionFromReferenceImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionFromReferenceImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionFromReferenceImageFilterID3ID3 in _itkRegionFromReferenceImageFilterPython:
_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID3ID3_swigregister(itkRegionFromReferenceImageFilterID3ID3)
itkRegionFromReferenceImageFilterID3ID3___New_orig__ = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID3ID3___New_orig__
itkRegionFromReferenceImageFilterID3ID3_cast = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID3ID3_cast


def itkRegionFromReferenceImageFilterID4ID4_New():
    return itkRegionFromReferenceImageFilterID4ID4.New()

class itkRegionFromReferenceImageFilterID4ID4(itk.itkExtractImageFilterPython.itkExtractImageFilterID4ID4):
    r"""Proxy of C++ itkRegionFromReferenceImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID4ID4_Clone)
    SetReferenceImage = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID4ID4_SetReferenceImage)
    GetReferenceImage = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID4ID4_GetReferenceImage)
    SetInput1 = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID4ID4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID4ID4_SetInput2)
    InputConvertibleToOutputCheck = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID4ID4_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID4ID4_SameDimensionCheck
    
    __swig_destroy__ = _itkRegionFromReferenceImageFilterPython.delete_itkRegionFromReferenceImageFilterID4ID4
    cast = _swig_new_static_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkRegionFromReferenceImageFilterID4ID4

        Create a new object of the class itkRegionFromReferenceImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionFromReferenceImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionFromReferenceImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionFromReferenceImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionFromReferenceImageFilterID4ID4 in _itkRegionFromReferenceImageFilterPython:
_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID4ID4_swigregister(itkRegionFromReferenceImageFilterID4ID4)
itkRegionFromReferenceImageFilterID4ID4___New_orig__ = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID4ID4___New_orig__
itkRegionFromReferenceImageFilterID4ID4_cast = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterID4ID4_cast


def itkRegionFromReferenceImageFilterIF2IF2_New():
    return itkRegionFromReferenceImageFilterIF2IF2.New()

class itkRegionFromReferenceImageFilterIF2IF2(itk.itkExtractImageFilterPython.itkExtractImageFilterIF2IF2):
    r"""Proxy of C++ itkRegionFromReferenceImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF2IF2_Clone)
    SetReferenceImage = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF2IF2_SetReferenceImage)
    GetReferenceImage = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF2IF2_GetReferenceImage)
    SetInput1 = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF2IF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF2IF2_SetInput2)
    InputConvertibleToOutputCheck = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF2IF2_SameDimensionCheck
    
    __swig_destroy__ = _itkRegionFromReferenceImageFilterPython.delete_itkRegionFromReferenceImageFilterIF2IF2
    cast = _swig_new_static_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkRegionFromReferenceImageFilterIF2IF2

        Create a new object of the class itkRegionFromReferenceImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionFromReferenceImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionFromReferenceImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionFromReferenceImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionFromReferenceImageFilterIF2IF2 in _itkRegionFromReferenceImageFilterPython:
_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF2IF2_swigregister(itkRegionFromReferenceImageFilterIF2IF2)
itkRegionFromReferenceImageFilterIF2IF2___New_orig__ = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF2IF2___New_orig__
itkRegionFromReferenceImageFilterIF2IF2_cast = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF2IF2_cast


def itkRegionFromReferenceImageFilterIF3IF3_New():
    return itkRegionFromReferenceImageFilterIF3IF3.New()

class itkRegionFromReferenceImageFilterIF3IF3(itk.itkExtractImageFilterPython.itkExtractImageFilterIF3IF3):
    r"""Proxy of C++ itkRegionFromReferenceImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF3IF3_Clone)
    SetReferenceImage = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF3IF3_SetReferenceImage)
    GetReferenceImage = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF3IF3_GetReferenceImage)
    SetInput1 = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF3IF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF3IF3_SetInput2)
    InputConvertibleToOutputCheck = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF3IF3_SameDimensionCheck
    
    __swig_destroy__ = _itkRegionFromReferenceImageFilterPython.delete_itkRegionFromReferenceImageFilterIF3IF3
    cast = _swig_new_static_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkRegionFromReferenceImageFilterIF3IF3

        Create a new object of the class itkRegionFromReferenceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionFromReferenceImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionFromReferenceImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionFromReferenceImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionFromReferenceImageFilterIF3IF3 in _itkRegionFromReferenceImageFilterPython:
_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF3IF3_swigregister(itkRegionFromReferenceImageFilterIF3IF3)
itkRegionFromReferenceImageFilterIF3IF3___New_orig__ = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF3IF3___New_orig__
itkRegionFromReferenceImageFilterIF3IF3_cast = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF3IF3_cast


def itkRegionFromReferenceImageFilterIF4IF4_New():
    return itkRegionFromReferenceImageFilterIF4IF4.New()

class itkRegionFromReferenceImageFilterIF4IF4(itk.itkExtractImageFilterPython.itkExtractImageFilterIF4IF4):
    r"""Proxy of C++ itkRegionFromReferenceImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF4IF4_Clone)
    SetReferenceImage = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF4IF4_SetReferenceImage)
    GetReferenceImage = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF4IF4_GetReferenceImage)
    SetInput1 = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF4IF4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF4IF4_SetInput2)
    InputConvertibleToOutputCheck = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF4IF4_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF4IF4_SameDimensionCheck
    
    __swig_destroy__ = _itkRegionFromReferenceImageFilterPython.delete_itkRegionFromReferenceImageFilterIF4IF4
    cast = _swig_new_static_method(_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkRegionFromReferenceImageFilterIF4IF4

        Create a new object of the class itkRegionFromReferenceImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionFromReferenceImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegionFromReferenceImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegionFromReferenceImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegionFromReferenceImageFilterIF4IF4 in _itkRegionFromReferenceImageFilterPython:
_itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF4IF4_swigregister(itkRegionFromReferenceImageFilterIF4IF4)
itkRegionFromReferenceImageFilterIF4IF4___New_orig__ = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF4IF4___New_orig__
itkRegionFromReferenceImageFilterIF4IF4_cast = _itkRegionFromReferenceImageFilterPython.itkRegionFromReferenceImageFilterIF4IF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def region_from_reference_image_filter(*args: itkt.ImageLike,  reference_image: itkt.ImageBase=..., direction_collapse_to_strategy=..., extraction_region: itkt.ImageRegion=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for RegionFromReferenceImageFilter"""
    import itk

    kwarg_typehints = { 'reference_image':reference_image,'direction_collapse_to_strategy':direction_collapse_to_strategy,'extraction_region':extraction_region }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.RegionFromReferenceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def region_from_reference_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.Ultrasound.RegionFromReferenceImageFilter
    region_from_reference_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    region_from_reference_image_filter.__doc__ = filter_object.__doc__




