# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _UltrasoundPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHDF5UltrasoundImageIOPython
else:
    import _itkHDF5UltrasoundImageIOPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHDF5UltrasoundImageIOPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHDF5UltrasoundImageIOPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.ITKIOImageBaseBasePython
class listIndex2(collections.abc.MutableSequence):
    r"""Proxy of C++ std::list< itk::Index< 2 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2___nonzero__)
    __bool__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2___bool__)
    __len__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2___len__)
    __getslice__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2___getslice__)
    __setslice__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2___setslice__)
    __delslice__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2___delslice__)
    __delitem__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2___delitem__)
    __getitem__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2___setitem__)
    pop = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_pop)
    append = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_append)
    empty = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_empty)
    size = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_size)
    swap = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_swap)
    begin = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_begin)
    end = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_end)
    rbegin = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_rbegin)
    rend = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_rend)
    clear = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_clear)
    get_allocator = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_get_allocator)
    pop_back = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_pop_back)
    erase = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> listIndex2
        __init__(self, other) -> listIndex2

        Parameters
        ----------
        other: std::list< itk::Index< 2 > > const &

        __init__(self, size) -> listIndex2

        Parameters
        ----------
        size: std::list< itk::Index< 2 > >::size_type

        __init__(self, size, value) -> listIndex2

        Parameters
        ----------
        size: std::list< itk::Index< 2 > >::size_type
        value: std::list< itk::Index< 2 > >::value_type const &

        """
        _itkHDF5UltrasoundImageIOPython.listIndex2_swiginit(self, _itkHDF5UltrasoundImageIOPython.new_listIndex2(*args))
    push_back = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_push_back)
    front = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_front)
    back = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_back)
    assign = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_assign)
    resize = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_resize)
    insert = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_insert)
    pop_front = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_pop_front)
    push_front = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_push_front)
    reverse = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex2_reverse)
    __swig_destroy__ = _itkHDF5UltrasoundImageIOPython.delete_listIndex2

# Register listIndex2 in _itkHDF5UltrasoundImageIOPython:
_itkHDF5UltrasoundImageIOPython.listIndex2_swigregister(listIndex2)

class listIndex3(collections.abc.MutableSequence):
    r"""Proxy of C++ std::list< itk::Index< 3 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3___nonzero__)
    __bool__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3___bool__)
    __len__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3___len__)
    __getslice__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3___getslice__)
    __setslice__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3___setslice__)
    __delslice__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3___delslice__)
    __delitem__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3___delitem__)
    __getitem__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3___setitem__)
    pop = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_pop)
    append = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_append)
    empty = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_empty)
    size = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_size)
    swap = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_swap)
    begin = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_begin)
    end = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_end)
    rbegin = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_rbegin)
    rend = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_rend)
    clear = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_clear)
    get_allocator = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_get_allocator)
    pop_back = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_pop_back)
    erase = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> listIndex3
        __init__(self, other) -> listIndex3

        Parameters
        ----------
        other: std::list< itk::Index< 3 > > const &

        __init__(self, size) -> listIndex3

        Parameters
        ----------
        size: std::list< itk::Index< 3 > >::size_type

        __init__(self, size, value) -> listIndex3

        Parameters
        ----------
        size: std::list< itk::Index< 3 > >::size_type
        value: std::list< itk::Index< 3 > >::value_type const &

        """
        _itkHDF5UltrasoundImageIOPython.listIndex3_swiginit(self, _itkHDF5UltrasoundImageIOPython.new_listIndex3(*args))
    push_back = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_push_back)
    front = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_front)
    back = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_back)
    assign = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_assign)
    resize = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_resize)
    insert = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_insert)
    pop_front = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_pop_front)
    push_front = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_push_front)
    reverse = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex3_reverse)
    __swig_destroy__ = _itkHDF5UltrasoundImageIOPython.delete_listIndex3

# Register listIndex3 in _itkHDF5UltrasoundImageIOPython:
_itkHDF5UltrasoundImageIOPython.listIndex3_swigregister(listIndex3)

class listIndex4(collections.abc.MutableSequence):
    r"""Proxy of C++ std::list< itk::Index< 4 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4___nonzero__)
    __bool__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4___bool__)
    __len__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4___len__)
    __getslice__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4___getslice__)
    __setslice__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4___setslice__)
    __delslice__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4___delslice__)
    __delitem__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4___delitem__)
    __getitem__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4___setitem__)
    pop = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_pop)
    append = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_append)
    empty = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_empty)
    size = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_size)
    swap = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_swap)
    begin = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_begin)
    end = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_end)
    rbegin = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_rbegin)
    rend = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_rend)
    clear = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_clear)
    get_allocator = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_get_allocator)
    pop_back = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_pop_back)
    erase = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> listIndex4
        __init__(self, other) -> listIndex4

        Parameters
        ----------
        other: std::list< itk::Index< 4 > > const &

        __init__(self, size) -> listIndex4

        Parameters
        ----------
        size: std::list< itk::Index< 4 > >::size_type

        __init__(self, size, value) -> listIndex4

        Parameters
        ----------
        size: std::list< itk::Index< 4 > >::size_type
        value: std::list< itk::Index< 4 > >::value_type const &

        """
        _itkHDF5UltrasoundImageIOPython.listIndex4_swiginit(self, _itkHDF5UltrasoundImageIOPython.new_listIndex4(*args))
    push_back = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_push_back)
    front = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_front)
    back = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_back)
    assign = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_assign)
    resize = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_resize)
    insert = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_insert)
    pop_front = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_pop_front)
    push_front = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_push_front)
    reverse = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.listIndex4_reverse)
    __swig_destroy__ = _itkHDF5UltrasoundImageIOPython.delete_listIndex4

# Register listIndex4 in _itkHDF5UltrasoundImageIOPython:
_itkHDF5UltrasoundImageIOPython.listIndex4_swigregister(listIndex4)


def itkHDF5UltrasoundImageIO_New():
    return itkHDF5UltrasoundImageIO.New()

class itkHDF5UltrasoundImageIO(itk.ITKIOImageBaseBasePython.itkStreamingImageIOBase):
    r"""Proxy of C++ itkHDF5UltrasoundImageIO class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHDF5UltrasoundImageIOPython.itkHDF5UltrasoundImageIO___New_orig__)
    Clone = _swig_new_instance_method(_itkHDF5UltrasoundImageIOPython.itkHDF5UltrasoundImageIO_Clone)
    __swig_destroy__ = _itkHDF5UltrasoundImageIOPython.delete_itkHDF5UltrasoundImageIO
    cast = _swig_new_static_method(_itkHDF5UltrasoundImageIOPython.itkHDF5UltrasoundImageIO_cast)

    def New(*args, **kargs):
        """New() -> itkHDF5UltrasoundImageIO

        Create a new object of the class itkHDF5UltrasoundImageIO and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHDF5UltrasoundImageIO.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHDF5UltrasoundImageIO.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHDF5UltrasoundImageIO.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHDF5UltrasoundImageIO in _itkHDF5UltrasoundImageIOPython:
_itkHDF5UltrasoundImageIOPython.itkHDF5UltrasoundImageIO_swigregister(itkHDF5UltrasoundImageIO)
itkHDF5UltrasoundImageIO___New_orig__ = _itkHDF5UltrasoundImageIOPython.itkHDF5UltrasoundImageIO___New_orig__
itkHDF5UltrasoundImageIO_cast = _itkHDF5UltrasoundImageIOPython.itkHDF5UltrasoundImageIO_cast


def itkHDF5UltrasoundImageIOFactory_New():
    return itkHDF5UltrasoundImageIOFactory.New()

class itkHDF5UltrasoundImageIOFactory(itk.ITKCommonBasePython.itkObjectFactoryBase):
    r"""Proxy of C++ itkHDF5UltrasoundImageIOFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHDF5UltrasoundImageIOPython.itkHDF5UltrasoundImageIOFactory___New_orig__)
    RegisterOneFactory = _swig_new_static_method(_itkHDF5UltrasoundImageIOPython.itkHDF5UltrasoundImageIOFactory_RegisterOneFactory)
    __swig_destroy__ = _itkHDF5UltrasoundImageIOPython.delete_itkHDF5UltrasoundImageIOFactory
    cast = _swig_new_static_method(_itkHDF5UltrasoundImageIOPython.itkHDF5UltrasoundImageIOFactory_cast)

    def New(*args, **kargs):
        """New() -> itkHDF5UltrasoundImageIOFactory

        Create a new object of the class itkHDF5UltrasoundImageIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHDF5UltrasoundImageIOFactory.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHDF5UltrasoundImageIOFactory.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHDF5UltrasoundImageIOFactory.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHDF5UltrasoundImageIOFactory in _itkHDF5UltrasoundImageIOPython:
_itkHDF5UltrasoundImageIOPython.itkHDF5UltrasoundImageIOFactory_swigregister(itkHDF5UltrasoundImageIOFactory)
itkHDF5UltrasoundImageIOFactory___New_orig__ = _itkHDF5UltrasoundImageIOPython.itkHDF5UltrasoundImageIOFactory___New_orig__
itkHDF5UltrasoundImageIOFactory_RegisterOneFactory = _itkHDF5UltrasoundImageIOPython.itkHDF5UltrasoundImageIOFactory_RegisterOneFactory
itkHDF5UltrasoundImageIOFactory_cast = _itkHDF5UltrasoundImageIOPython.itkHDF5UltrasoundImageIOFactory_cast



