# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _UltrasoundPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFrequencyDomain1DImageFilterPython
else:
    import _itkFrequencyDomain1DImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFrequencyDomain1DImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFrequencyDomain1DImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageToImageFilterCommonPython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkFrequencyDomain1DFilterFunctionPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkCurvilinearArraySpecialCoordinatesImagePython
import itk.itkCurvilinearArraySpecialCoordinatesImageFiltersPython
import itk.itkContinuousIndexPython
import itk.ITKIOImageBaseBasePython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkArrayPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkFunctionBasePython
class itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass(itk.itkCurvilinearArraySpecialCoordinatesImageFiltersPython.itkImageSourceCASCICD2):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_swigregister(itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass)
itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass_cast

class itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass(itk.itkCurvilinearArraySpecialCoordinatesImageFiltersPython.itkImageSourceCASCICD3):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_swigregister(itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass)
itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass_cast

class itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass(itk.itkCurvilinearArraySpecialCoordinatesImageFiltersPython.itkImageSourceCASCICD4):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_swigregister(itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass)
itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass_cast

class itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass(itk.itkCurvilinearArraySpecialCoordinatesImageFiltersPython.itkImageSourceCASCICF2):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_swigregister(itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass)
itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass_cast

class itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass(itk.itkCurvilinearArraySpecialCoordinatesImageFiltersPython.itkImageSourceCASCICF3):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_swigregister(itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass)
itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass_cast

class itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass(itk.itkCurvilinearArraySpecialCoordinatesImageFiltersPython.itkImageSourceCASCICF4):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_swigregister(itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass)
itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass_cast

class itkFrequencyDomain1DImageFilterICD2ICD2_Superclass(itk.itkImageSourcePython.itkImageSourceICD2):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICD2ICD2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICD2ICD2_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterICD2ICD2_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_swigregister(itkFrequencyDomain1DImageFilterICD2ICD2_Superclass)
itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Superclass_cast

class itkFrequencyDomain1DImageFilterICD3ICD3_Superclass(itk.itkImageSourcePython.itkImageSourceICD3):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICD3ICD3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICD3ICD3_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterICD3ICD3_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_swigregister(itkFrequencyDomain1DImageFilterICD3ICD3_Superclass)
itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Superclass_cast

class itkFrequencyDomain1DImageFilterICD4ICD4_Superclass(itk.itkImageSourcePython.itkImageSourceICD4):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICD4ICD4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICD4ICD4_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterICD4ICD4_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_swigregister(itkFrequencyDomain1DImageFilterICD4ICD4_Superclass)
itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Superclass_cast

class itkFrequencyDomain1DImageFilterICF2ICF2_Superclass(itk.itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF2ICF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF2ICF2_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterICF2ICF2_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_swigregister(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass)
itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Superclass_cast

class itkFrequencyDomain1DImageFilterICF3ICF3_Superclass(itk.itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF3ICF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF3ICF3_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterICF3ICF3_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_swigregister(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass)
itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Superclass_cast

class itkFrequencyDomain1DImageFilterICF4ICF4_Superclass(itk.itkImageSourcePython.itkImageSourceICF4):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF4ICF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF4ICF4_Superclass
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_cast)

# Register itkFrequencyDomain1DImageFilterICF4ICF4_Superclass in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_swigregister(itkFrequencyDomain1DImageFilterICF4ICF4_Superclass)
itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Superclass_cast


def itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_New():
    return itkFrequencyDomain1DImageFilterCASCICD2CASCICD2.New()

class itkFrequencyDomain1DImageFilterCASCICD2CASCICD2(itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICD2CASCICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICD2CASCICD2
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterCASCICD2CASCICD2

        Create a new object of the class itkFrequencyDomain1DImageFilterCASCICD2CASCICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterCASCICD2CASCICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterCASCICD2CASCICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterCASCICD2CASCICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterCASCICD2CASCICD2 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_swigregister(itkFrequencyDomain1DImageFilterCASCICD2CASCICD2)
itkFrequencyDomain1DImageFilterCASCICD2CASCICD2___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2___New_orig__
itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD2CASCICD2_cast


def itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_New():
    return itkFrequencyDomain1DImageFilterCASCICD3CASCICD3.New()

class itkFrequencyDomain1DImageFilterCASCICD3CASCICD3(itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICD3CASCICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICD3CASCICD3
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterCASCICD3CASCICD3

        Create a new object of the class itkFrequencyDomain1DImageFilterCASCICD3CASCICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterCASCICD3CASCICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterCASCICD3CASCICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterCASCICD3CASCICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterCASCICD3CASCICD3 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_swigregister(itkFrequencyDomain1DImageFilterCASCICD3CASCICD3)
itkFrequencyDomain1DImageFilterCASCICD3CASCICD3___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3___New_orig__
itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD3CASCICD3_cast


def itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_New():
    return itkFrequencyDomain1DImageFilterCASCICD4CASCICD4.New()

class itkFrequencyDomain1DImageFilterCASCICD4CASCICD4(itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICD4CASCICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICD4CASCICD4
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterCASCICD4CASCICD4

        Create a new object of the class itkFrequencyDomain1DImageFilterCASCICD4CASCICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterCASCICD4CASCICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterCASCICD4CASCICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterCASCICD4CASCICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterCASCICD4CASCICD4 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_swigregister(itkFrequencyDomain1DImageFilterCASCICD4CASCICD4)
itkFrequencyDomain1DImageFilterCASCICD4CASCICD4___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4___New_orig__
itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICD4CASCICD4_cast


def itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_New():
    return itkFrequencyDomain1DImageFilterCASCICF2CASCICF2.New()

class itkFrequencyDomain1DImageFilterCASCICF2CASCICF2(itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICF2CASCICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICF2CASCICF2
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterCASCICF2CASCICF2

        Create a new object of the class itkFrequencyDomain1DImageFilterCASCICF2CASCICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterCASCICF2CASCICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterCASCICF2CASCICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterCASCICF2CASCICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterCASCICF2CASCICF2 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_swigregister(itkFrequencyDomain1DImageFilterCASCICF2CASCICF2)
itkFrequencyDomain1DImageFilterCASCICF2CASCICF2___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2___New_orig__
itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF2CASCICF2_cast


def itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_New():
    return itkFrequencyDomain1DImageFilterCASCICF3CASCICF3.New()

class itkFrequencyDomain1DImageFilterCASCICF3CASCICF3(itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICF3CASCICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICF3CASCICF3
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterCASCICF3CASCICF3

        Create a new object of the class itkFrequencyDomain1DImageFilterCASCICF3CASCICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterCASCICF3CASCICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterCASCICF3CASCICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterCASCICF3CASCICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterCASCICF3CASCICF3 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_swigregister(itkFrequencyDomain1DImageFilterCASCICF3CASCICF3)
itkFrequencyDomain1DImageFilterCASCICF3CASCICF3___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3___New_orig__
itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF3CASCICF3_cast


def itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_New():
    return itkFrequencyDomain1DImageFilterCASCICF4CASCICF4.New()

class itkFrequencyDomain1DImageFilterCASCICF4CASCICF4(itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterCASCICF4CASCICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterCASCICF4CASCICF4
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterCASCICF4CASCICF4

        Create a new object of the class itkFrequencyDomain1DImageFilterCASCICF4CASCICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterCASCICF4CASCICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterCASCICF4CASCICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterCASCICF4CASCICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterCASCICF4CASCICF4 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_swigregister(itkFrequencyDomain1DImageFilterCASCICF4CASCICF4)
itkFrequencyDomain1DImageFilterCASCICF4CASCICF4___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4___New_orig__
itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterCASCICF4CASCICF4_cast


def itkFrequencyDomain1DImageFilterICD2ICD2_New():
    return itkFrequencyDomain1DImageFilterICD2ICD2.New()

class itkFrequencyDomain1DImageFilterICD2ICD2(itkFrequencyDomain1DImageFilterICD2ICD2_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICD2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICD2ICD2
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICD2ICD2

        Create a new object of the class itkFrequencyDomain1DImageFilterICD2ICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICD2ICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICD2ICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterICD2ICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterICD2ICD2 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_swigregister(itkFrequencyDomain1DImageFilterICD2ICD2)
itkFrequencyDomain1DImageFilterICD2ICD2___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2___New_orig__
itkFrequencyDomain1DImageFilterICD2ICD2_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD2ICD2_cast


def itkFrequencyDomain1DImageFilterICD3ICD3_New():
    return itkFrequencyDomain1DImageFilterICD3ICD3.New()

class itkFrequencyDomain1DImageFilterICD3ICD3(itkFrequencyDomain1DImageFilterICD3ICD3_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICD3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICD3ICD3
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICD3ICD3

        Create a new object of the class itkFrequencyDomain1DImageFilterICD3ICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICD3ICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICD3ICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterICD3ICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterICD3ICD3 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_swigregister(itkFrequencyDomain1DImageFilterICD3ICD3)
itkFrequencyDomain1DImageFilterICD3ICD3___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3___New_orig__
itkFrequencyDomain1DImageFilterICD3ICD3_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD3ICD3_cast


def itkFrequencyDomain1DImageFilterICD4ICD4_New():
    return itkFrequencyDomain1DImageFilterICD4ICD4.New()

class itkFrequencyDomain1DImageFilterICD4ICD4(itkFrequencyDomain1DImageFilterICD4ICD4_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICD4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICD4ICD4
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICD4ICD4

        Create a new object of the class itkFrequencyDomain1DImageFilterICD4ICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICD4ICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICD4ICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterICD4ICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterICD4ICD4 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_swigregister(itkFrequencyDomain1DImageFilterICD4ICD4)
itkFrequencyDomain1DImageFilterICD4ICD4___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4___New_orig__
itkFrequencyDomain1DImageFilterICD4ICD4_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICD4ICD4_cast


def itkFrequencyDomain1DImageFilterICF2ICF2_New():
    return itkFrequencyDomain1DImageFilterICF2ICF2.New()

class itkFrequencyDomain1DImageFilterICF2ICF2(itkFrequencyDomain1DImageFilterICF2ICF2_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF2ICF2
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICF2ICF2

        Create a new object of the class itkFrequencyDomain1DImageFilterICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterICF2ICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterICF2ICF2 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_swigregister(itkFrequencyDomain1DImageFilterICF2ICF2)
itkFrequencyDomain1DImageFilterICF2ICF2___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2___New_orig__
itkFrequencyDomain1DImageFilterICF2ICF2_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF2ICF2_cast


def itkFrequencyDomain1DImageFilterICF3ICF3_New():
    return itkFrequencyDomain1DImageFilterICF3ICF3.New()

class itkFrequencyDomain1DImageFilterICF3ICF3(itkFrequencyDomain1DImageFilterICF3ICF3_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF3ICF3
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICF3ICF3

        Create a new object of the class itkFrequencyDomain1DImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterICF3ICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterICF3ICF3 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_swigregister(itkFrequencyDomain1DImageFilterICF3ICF3)
itkFrequencyDomain1DImageFilterICF3ICF3___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3___New_orig__
itkFrequencyDomain1DImageFilterICF3ICF3_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF3ICF3_cast


def itkFrequencyDomain1DImageFilterICF4ICF4_New():
    return itkFrequencyDomain1DImageFilterICF4ICF4.New()

class itkFrequencyDomain1DImageFilterICF4ICF4(itkFrequencyDomain1DImageFilterICF4ICF4_Superclass):
    r"""Proxy of C++ itkFrequencyDomain1DImageFilterICF4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_Clone)
    SetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_SetDirection)
    GetDirection = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_GetDirection)
    SetFilterFunction = _swig_new_instance_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_SetFilterFunction)
    __swig_destroy__ = _itkFrequencyDomain1DImageFilterPython.delete_itkFrequencyDomain1DImageFilterICF4ICF4
    cast = _swig_new_static_method(_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyDomain1DImageFilterICF4ICF4

        Create a new object of the class itkFrequencyDomain1DImageFilterICF4ICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyDomain1DImageFilterICF4ICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyDomain1DImageFilterICF4ICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyDomain1DImageFilterICF4ICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyDomain1DImageFilterICF4ICF4 in _itkFrequencyDomain1DImageFilterPython:
_itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_swigregister(itkFrequencyDomain1DImageFilterICF4ICF4)
itkFrequencyDomain1DImageFilterICF4ICF4___New_orig__ = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4___New_orig__
itkFrequencyDomain1DImageFilterICF4ICF4_cast = _itkFrequencyDomain1DImageFilterPython.itkFrequencyDomain1DImageFilterICF4ICF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def frequency_domain1_d_image_filter(*args: itkt.ImageLike,  direction: int=..., filter_function=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FrequencyDomain1DImageFilter"""
    import itk

    kwarg_typehints = { 'direction':direction,'filter_function':filter_function }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.FrequencyDomain1DImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def frequency_domain1_d_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.Ultrasound.FrequencyDomain1DImageFilter
    frequency_domain1_d_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    frequency_domain1_d_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_to_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageToImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.Ultrasound.ImageToImageFilter
    image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__




