"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
protolint:disable MAX_LINE_LENGTH"""
import builtins
import collections.abc
import frequenz.api.common.components_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Dispatch(google.protobuf.message.Message):
    """Message representing one dispatch"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    MICROGRID_ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    SELECTOR_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    IS_ACTIVE_FIELD_NUMBER: builtins.int
    IS_DRY_RUN_FIELD_NUMBER: builtins.int
    PAYLOAD_FIELD_NUMBER: builtins.int
    id: builtins.int
    """The dispatch identifier"""
    microgrid_id: builtins.int
    """The microgrid identifier"""
    type: builtins.str
    """The dispatch type.
    Contains user-defined information about what "type" of dispatch this is.
    Downstream applications that consume the dispatch API are responsible for
    understanding and processing this field.
    """
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The start time"""
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The end time"""
    @property
    def selector(self) -> global___DispatchComponentSelector:
        """The component selector"""
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The creation time"""
    is_active: builtins.bool
    """The "active" status"""
    is_dry_run: builtins.bool
    """The "dry run" status"""
    @property
    def payload(self) -> google.protobuf.struct_pb2.Struct:
        """The dispatch payload"""
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        microgrid_id: builtins.int = ...,
        type: builtins.str = ...,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        selector: global___DispatchComponentSelector | None = ...,
        create_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        is_active: builtins.bool = ...,
        is_dry_run: builtins.bool = ...,
        payload: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time", b"create_time", "end_time", b"end_time", "payload", b"payload", "selector", b"selector", "start_time", b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_time", b"create_time", "end_time", b"end_time", "id", b"id", "is_active", b"is_active", "is_dry_run", b"is_dry_run", "microgrid_id", b"microgrid_id", "payload", b"payload", "selector", b"selector", "start_time", b"start_time", "type", b"type"]) -> None: ...

global___Dispatch = Dispatch

@typing_extensions.final
class TimeIntervalFilter(google.protobuf.message.Message):
    """Filter parameter for specifying multiple time intervals"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    START_FROM_FIELD_NUMBER: builtins.int
    START_TO_FIELD_NUMBER: builtins.int
    END_FROM_FIELD_NUMBER: builtins.int
    END_TO_FIELD_NUMBER: builtins.int
    @property
    def start_from(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Filter by start_time >= this timestamp"""
    @property
    def start_to(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Filter by start_time < this timestamp"""
    @property
    def end_from(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Filter by end_time >= this timestamp"""
    @property
    def end_to(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Filter by end_time < this timestamp"""
    def __init__(
        self,
        *,
        start_from: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        start_to: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_from: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_to: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_from", b"end_from", "end_to", b"end_to", "start_from", b"start_from", "start_to", b"start_to"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_from", b"end_from", "end_to", b"end_to", "start_from", b"start_from", "start_to", b"start_to"]) -> None: ...

global___TimeIntervalFilter = TimeIntervalFilter

@typing_extensions.final
class DispatchComponentSelector(google.protobuf.message.Message):
    """Parameter for controlling which components a dispatch applies to
    Either a set of component IDs, or all components belonging to a category
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DISPATCH_COMPONENT_IDS_FIELD_NUMBER: builtins.int
    DISPATCH_COMPONENT_CATEGORY_FIELD_NUMBER: builtins.int
    @property
    def dispatch_component_ids(self) -> global___DispatchComponentIDs:
        """Set of component IDs"""
    dispatch_component_category: frequenz.api.common.components_pb2.ComponentCategory.ValueType
    """Component category"""
    def __init__(
        self,
        *,
        dispatch_component_ids: global___DispatchComponentIDs | None = ...,
        dispatch_component_category: frequenz.api.common.components_pb2.ComponentCategory.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dispatch_component_category", b"dispatch_component_category", "dispatch_component_ids", b"dispatch_component_ids", "selector", b"selector"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dispatch_component_category", b"dispatch_component_category", "dispatch_component_ids", b"dispatch_component_ids", "selector", b"selector"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["selector", b"selector"]) -> typing_extensions.Literal["dispatch_component_ids", "dispatch_component_category"] | None: ...

global___DispatchComponentSelector = DispatchComponentSelector

@typing_extensions.final
class DispatchComponentIDs(google.protobuf.message.Message):
    """Wrapper for controlling dispatches with a set of component IDs"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMPONENT_IDS_FIELD_NUMBER: builtins.int
    @property
    def component_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Set of component IDs"""
    def __init__(
        self,
        *,
        component_ids: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["component_ids", b"component_ids"]) -> None: ...

global___DispatchComponentIDs = DispatchComponentIDs

@typing_extensions.final
class DispatchFilter(google.protobuf.message.Message):
    """Parameters for filtering the dispatch list"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IDS_FIELD_NUMBER: builtins.int
    MICROGRID_IDS_FIELD_NUMBER: builtins.int
    TYPES_FIELD_NUMBER: builtins.int
    SELECTORS_FIELD_NUMBER: builtins.int
    TIME_INTERVAL_FIELD_NUMBER: builtins.int
    IS_ACTIVE_FIELD_NUMBER: builtins.int
    IS_DRY_RUN_FIELD_NUMBER: builtins.int
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Filter by dispatch ID"""
    @property
    def microgrid_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Filter by microgrid ID"""
    @property
    def types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Filter by dispatch type"""
    @property
    def selectors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DispatchComponentSelector]:
        """Filter by component ID or category"""
    @property
    def time_interval(self) -> global___TimeIntervalFilter:
        """Filter by time interval"""
    is_active: builtins.bool
    """Filter by "active" status"""
    is_dry_run: builtins.bool
    """Filter by "dry run" status"""
    def __init__(
        self,
        *,
        ids: collections.abc.Iterable[builtins.int] | None = ...,
        microgrid_ids: collections.abc.Iterable[builtins.int] | None = ...,
        types: collections.abc.Iterable[builtins.str] | None = ...,
        selectors: collections.abc.Iterable[global___DispatchComponentSelector] | None = ...,
        time_interval: global___TimeIntervalFilter | None = ...,
        is_active: builtins.bool | None = ...,
        is_dry_run: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_is_active", b"_is_active", "_is_dry_run", b"_is_dry_run", "is_active", b"is_active", "is_dry_run", b"is_dry_run", "time_interval", b"time_interval"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_is_active", b"_is_active", "_is_dry_run", b"_is_dry_run", "ids", b"ids", "is_active", b"is_active", "is_dry_run", b"is_dry_run", "microgrid_ids", b"microgrid_ids", "selectors", b"selectors", "time_interval", b"time_interval", "types", b"types"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_is_active", b"_is_active"]) -> typing_extensions.Literal["is_active"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_is_dry_run", b"_is_dry_run"]) -> typing_extensions.Literal["is_dry_run"] | None: ...

global___DispatchFilter = DispatchFilter

@typing_extensions.final
class DispatchList(google.protobuf.message.Message):
    """A list of dispatches"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DISPATCHES_FIELD_NUMBER: builtins.int
    @property
    def dispatches(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Dispatch]:
        """The dispatches"""
    def __init__(
        self,
        *,
        dispatches: collections.abc.Iterable[global___Dispatch] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dispatches", b"dispatches"]) -> None: ...

global___DispatchList = DispatchList

@typing_extensions.final
class DispatchCreateRequest(google.protobuf.message.Message):
    """Message to create a new dispatch with the given attributes"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MICROGRID_ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    SELECTOR_FIELD_NUMBER: builtins.int
    IS_ACTIVE_FIELD_NUMBER: builtins.int
    IS_DRY_RUN_FIELD_NUMBER: builtins.int
    PAYLOAD_FIELD_NUMBER: builtins.int
    microgrid_id: builtins.int
    """The microgrid identifier"""
    type: builtins.str
    """The type of dispatch"""
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The start time"""
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The end time"""
    @property
    def selector(self) -> global___DispatchComponentSelector:
        """The component selector"""
    is_active: builtins.bool
    """The "active" status"""
    is_dry_run: builtins.bool
    """The "dry run" status"""
    @property
    def payload(self) -> google.protobuf.struct_pb2.Struct:
        """The dispatch payload"""
    def __init__(
        self,
        *,
        microgrid_id: builtins.int = ...,
        type: builtins.str = ...,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        selector: global___DispatchComponentSelector | None = ...,
        is_active: builtins.bool = ...,
        is_dry_run: builtins.bool = ...,
        payload: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_time", b"end_time", "payload", b"payload", "selector", b"selector", "start_time", b"start_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_time", b"end_time", "is_active", b"is_active", "is_dry_run", b"is_dry_run", "microgrid_id", b"microgrid_id", "payload", b"payload", "selector", b"selector", "start_time", b"start_time", "type", b"type"]) -> None: ...

global___DispatchCreateRequest = DispatchCreateRequest

@typing_extensions.final
class DispatchUpdateRequest(google.protobuf.message.Message):
    """Message to update the dispatch with the given ID, with the given attributes"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    MICROGRID_ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    SELECTOR_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    IS_ACTIVE_FIELD_NUMBER: builtins.int
    IS_DRY_RUN_FIELD_NUMBER: builtins.int
    PAYLOAD_FIELD_NUMBER: builtins.int
    id: builtins.int
    """The dispatch identifier"""
    microgrid_id: builtins.int
    """The microgrid identifier"""
    type: builtins.str
    """The type of dispatch"""
    @property
    def start_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The start time"""
    @property
    def end_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The end time"""
    @property
    def selector(self) -> global___DispatchComponentSelector:
        """The component selector"""
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The creation time"""
    is_active: builtins.bool
    """The "active" status"""
    is_dry_run: builtins.bool
    """The "dry run" status"""
    @property
    def payload(self) -> google.protobuf.struct_pb2.Struct:
        """The dispatch payload"""
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        microgrid_id: builtins.int | None = ...,
        type: builtins.str | None = ...,
        start_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        end_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        selector: global___DispatchComponentSelector | None = ...,
        create_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        is_active: builtins.bool | None = ...,
        is_dry_run: builtins.bool | None = ...,
        payload: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_is_active", b"_is_active", "_is_dry_run", b"_is_dry_run", "_microgrid_id", b"_microgrid_id", "_type", b"_type", "create_time", b"create_time", "end_time", b"end_time", "is_active", b"is_active", "is_dry_run", b"is_dry_run", "microgrid_id", b"microgrid_id", "payload", b"payload", "selector", b"selector", "start_time", b"start_time", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_is_active", b"_is_active", "_is_dry_run", b"_is_dry_run", "_microgrid_id", b"_microgrid_id", "_type", b"_type", "create_time", b"create_time", "end_time", b"end_time", "id", b"id", "is_active", b"is_active", "is_dry_run", b"is_dry_run", "microgrid_id", b"microgrid_id", "payload", b"payload", "selector", b"selector", "start_time", b"start_time", "type", b"type"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_is_active", b"_is_active"]) -> typing_extensions.Literal["is_active"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_is_dry_run", b"_is_dry_run"]) -> typing_extensions.Literal["is_dry_run"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_microgrid_id", b"_microgrid_id"]) -> typing_extensions.Literal["microgrid_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_type", b"_type"]) -> typing_extensions.Literal["type"] | None: ...

global___DispatchUpdateRequest = DispatchUpdateRequest
