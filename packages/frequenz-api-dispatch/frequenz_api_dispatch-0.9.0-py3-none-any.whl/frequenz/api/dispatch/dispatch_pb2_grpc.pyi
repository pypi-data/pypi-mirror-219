"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
protolint:disable MAX_LINE_LENGTH"""
import abc
import frequenz.api.dispatch.dispatch_pb2
import google.protobuf.empty_pb2
import grpc

class DispatchServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    ListDispatches: grpc.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.dispatch_pb2.DispatchFilter,
        frequenz.api.dispatch.dispatch_pb2.DispatchList,
    ]
    """Returns a list of all dispatches"""
    CreateDispatch: grpc.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.dispatch_pb2.DispatchCreateRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Create a new dispatch"""
    UpdateDispatch: grpc.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.dispatch_pb2.DispatchUpdateRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Update a dispatch"""

class DispatchServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ListDispatches(
        self,
        request: frequenz.api.dispatch.dispatch_pb2.DispatchFilter,
        context: grpc.ServicerContext,
    ) -> frequenz.api.dispatch.dispatch_pb2.DispatchList:
        """Returns a list of all dispatches"""
    @abc.abstractmethod
    def CreateDispatch(
        self,
        request: frequenz.api.dispatch.dispatch_pb2.DispatchCreateRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Create a new dispatch"""
    @abc.abstractmethod
    def UpdateDispatch(
        self,
        request: frequenz.api.dispatch.dispatch_pb2.DispatchUpdateRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Update a dispatch"""

def add_DispatchServiceServicer_to_server(servicer: DispatchServiceServicer, server: grpc.Server) -> None: ...
