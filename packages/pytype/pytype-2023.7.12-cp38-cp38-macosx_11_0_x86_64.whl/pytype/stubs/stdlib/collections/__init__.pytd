# We maintain our own collections.pytd, rather than using collections.pyi from
# typeshed, because this file makes use of mutable type parameters.
import sys
from typing import Any, Callable, DefaultDict, Dict, Generic, List, Mapping, MutableMapping, Optional, Reversible, Text, Tuple, Union, overload

K = TypeVar("K")
V = TypeVar("V")
K2 = TypeVar("K2")
V2 = TypeVar("V2")
DV = TypeVar("DV")
T = TypeVar("T")
T2 = TypeVar("T2")

__all__ = ...  # type: list[Any]
_abcoll = ...  # type: Any
_chain = ...  # type: type
_class_template = ...  # type: str
_eq = ...  # type: Any
_field_template = ...  # type: str
_get_ident = ...  # type: Any
_heapq = ...  # type: Any
_imap = ...  # type: type
_iskeyword = ...  # type: Any
_itemgetter = ...  # type: Callable
_repeat = ...  # type: type
_repr_template = ...  # type: str
_starmap = ...  # type: type
_sys = ...  # type: module
dumps = ...  # type: Callable
loads = ...  # type: Callable

class deque(typing.Deque[T]): ...

AsyncGenerator = typing.AsyncGenerator
AsyncIterable = typing.AsyncIterable
AsyncIterator = typing.AsyncIterator
Awaitable = typing.Awaitable
ByteString = typing.ByteString
Callable = typing.Callable
ChainMap = typing.ChainMap
Collection = typing.Collection
Container = typing.Container
Coroutine = typing.Coroutine
Counter = typing.Counter
Generator = typing.Generator
Hashable = typing.Hashable
ItemsView = typing.ItemsView
Iterable = typing.Iterable
Iterator = typing.Iterator
KeysView = typing.KeysView
Mapping = typing.Mapping
MappingView = typing.MappingView
MutableMapping = typing.MutableMapping
MutableSequence = typing.MutableSequence
MutableSet = typing.MutableSet
OrderedDict = typing.OrderedDict
Reversible = typing.Reversible
Sequence = typing.Sequence
Set = typing.Set
Sized = typing.Sized
ValuesView = typing.ValuesView

if sys.version_info >= (3, 7):
  def namedtuple(typename: Text,
    field_names: Union[Text, Iterable[Text], Iterable[nothing]],
    *,
    rename: bool = ..., defaults: List[Any] = ..., module = ...) -> type: ...
else:
  def namedtuple(typename: Text,
    field_names: Union[Text, Iterable[Text], Iterable[nothing]],
    *,
    verbose: bool = ..., rename: bool = ..., module = ...) -> type: ...

class defaultdict(DefaultDict[K, V]):
  default_factory = ...  # type: Optional[Callable[[], V]]
  def __init__(self):
    self = defaultdict[nothing, nothing]
  def __init__(self, default_factory: None):
    self = defaultdict[nothing, nothing]
  def __init__(self, default_factory: Callable[[], DV]) -> None:
    self = defaultdict[nothing, DV]
  def __init__(self, **kwargs: V2):
    self = defaultdict[str, V2]
  def __init__(self, default_factory: None, **kwargs: V2) -> None:
    self = defaultdict[str, V2]
  def __init__(self, default_factory: None, iter: Iterable[Tuple[K, V]], **kwargs: V2) -> None:
    self = defaultdict[K, Union[V, V2]]
  def __init__(self, default_factory: None, map: Mapping[K, V], **kwargs: V2) -> None:
    self = defaultdict[K, Union[V, V2]]
  def __init__(self, default_factory: Callable[[], DV], **kwargs: V2) -> None:
    self = defaultdict[str, Union[DV, V2]]
  def __init__(self, default_factory: Callable[[], DV], map: Mapping[K, V], **kwargs: V2) -> None:
    self = defaultdict[K, Union[DV, V, V2]]
  def __init__(self, default_factory: Callable[[], DV], iter: Iterable[Tuple[K, V]], **kwargs: V2) -> None:
    self = defaultdict[K, Union[DV, V, V2]]
  def __missing__(self, key: K) -> V: ...
  def __getitem__(self, key: K2) -> Any:
    self = defaultdict[Union[K, K2], Any]

class UserDict(MutableMapping[K, V]):
  data: dict[K, V]

  # __init__ should be kept roughly in line with `dict.__init__`, which has the same semantics
  @overload
  def __init__(self) -> NoneType:
    self = UserDict[nothing, nothing]
  @overload
  def __init__(self, list: list[nothing]) -> NoneType:
    self = UserDict[nothing, nothing]
  @overload
  def __init__(self, mapping: Mapping[K2, V2]) -> NoneType:
    self = UserDict[K2, V2]
  @overload
  def __init__(self, iterable: Iterable[tuple[K2, V2]]) -> NoneType:
    self = UserDict[K2, V2]
  @overload
  def __init__(self, *args, **kwargs) -> NoneType:
    self = UserDict[Any, Any]
  def __len__(self) -> int: ...
  def __getitem__(self, key: K) -> V: ...
  def __setitem__(self, key: K2, item: V2) -> None:
    self = UserDict[K | K2, V | V2]
  def __delitem__(self, key: K) -> None: ...
  def __iter__(self) -> Iterator[K]: ...
  def __contains__(self, key: object) -> bool: ...
  def copy(self: T) -> T: ...
  def __copy__(self: T) -> T: ...

  # `UserDict.fromkeys` has the same semantics as `dict.fromkeys`, so should be kept in line with `dict.fromkeys`.
  # TODO: Much like `dict.fromkeys`, the true signature of `UserDict.fromkeys` is inexpressible in the current type system.
  # See #3800 & https://github.com/python/typing/issues/548#issuecomment-683336963.
  @staticmethod
  @overload
  def fromkeys(keys: Iterable[K]) -> UserDict[K, None]: ...
  @staticmethod
  @overload
  def fromkeys(keys: Iterable[K], value: V) -> UserDict[K, V]: ...
  if sys.version_info >= (3, 9):
    def __or__(self, other: UserDict[K2, V2] | dict[K2, V2]) -> UserDict[K | K2, V | V2]: ...
    def __ror__(self, other: UserDict[K2, V2] | dict[K2, V2]) -> UserDict[K | K2, V | V2]: ...
    # UserDict.__ior__ should be kept roughly in line with MutableMapping.update()
    @overload
    def __ior__(self, other: Mapping[K2, V2]) -> None:
      self = UserDict[K | K2, V | V2]
    @overload
    def __ior__(self, other: Iterable[tuple[K2, V2]]) -> None:
      self = UserDict[K | K2, V | V2]

# TODO(b/285934316): Implement these
UserList = ...  # type: Any
UserString = ...  # type: Any
