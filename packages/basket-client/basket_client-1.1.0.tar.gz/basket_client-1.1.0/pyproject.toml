[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
]

[project]
name = "basket-client"
description = "A Python client for Mozilla's basket service."
readme = "README.rst"
keywords = [
  "basket",
  "mozilla",
]
license = {text = "BSD-3-Clause"}
maintainers = [
  { name = "Paul McLanahan" },
  { name = "Rob Hudson" },
]
authors = [
  { name = "Michael Kelly" },
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Communications",
  "Topic :: Software Development :: Libraries",
]
dynamic = [
  "version",
]
dependencies = [
  "requests<3.0.0",
]
[project.urls]
Documentation = "https://github.com/mozilla/basket-client#readme"
Issues = "https://github.com/mozilla/basket-client/issues"
Source = "https://github.com/mozilla/basket-client"

[tool.hatch.version]
path = "src/basket/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
  "docs/",
  "src/",
  "tests/",
  "LICENSE",
  "pyproject.toml",
  "README.rst",
]

[tool.hatch.build.targets.wheel]
packages = ["src/basket"]

[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-cov",
]
[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
cov = "pytest --cov-config=pyproject.toml --cov=src/basket/ --cov-report term-missing {args:tests}"

[[tool.hatch.envs.test.matrix]]
# Note: When changing these, also update the .github/workflows/test.yml file.
python = ["3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.3.0",
  "ruff>=0.0.275",
]
[tool.hatch.envs.lint.scripts]
check = [
  "ruff {args:.}",
  "black --check {args:.}",
]
fix = [
  "ruff --fix {args:.}",
  "black {args:.}",
  "style",
]
all = [
  "style",
]

[tool.black]
line-length = 150
target-version = ["py38"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.tox
  | \.venv
  | _build
  | build
  | dist
  | docs
)/
'''

[tool.ruff]
# Set what ruff should check for.
# See https://beta.ruff.rs/docs/rules/ for a list of rules.
select = [
    "A", # flake8-builtin errors.
    # "B", # bugbear errors
    "E", # pycodestyle errors
    "F", # pyflakes errors
    "I", # import sorting
    "Q", # flake8-quotes errors
    "W", # pycodestyle warnings
]
line-length = 150  # To match black.
target-version = "py38"
extend-exclude = ["docs"]

[tool.ruff.isort]
known-first-party = ["basket"]

[tool.coverage.run]
branch = true
parallel = true
source = [
  "src/basket/",
]

[tool.coverage.report]
show_missing = true
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
