{"version":3,"sources":["@@\\dist\\compiled\\index.js","@@\\dist\\compiled\\visualizer\\models\\index.js","@@\\dist\\compiled\\visualizer\\models\\offset_log_color_mapper.js","@@\\dist\\compiled\\visualizer\\models\\offset_log_tick_formatter.js","@@\\dist\\compiled\\visualizer\\models\\throttled_slider.js","@@\\dist\\compiled\\visualizer\\models\\filetree.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["/* index.js */ function _(require, module, exports, __esModule, __esExport) {\r\n    __esModule();\r\n    const tslib_1 = require(\"tslib\");\r\n    const VizModels = tslib_1.__importStar(require(\"88dea9ae8f\") /* ./visualizer/models/index */);\r\n    exports.VizModels = VizModels;\r\n    const base_1 = require(\"@bokehjs/base\");\r\n    base_1.register_models(VizModels);\r\n}\r\n","/* visualizer\\models\\index.js */ function _(require, module, exports, __esModule, __esExport) {\r\n    __esModule();\r\n    var offset_log_color_mapper_1 = require(\"31d02535b8\") /* ./offset_log_color_mapper */;\r\n    __esExport(\"OffsetLogColorMapper\", offset_log_color_mapper_1.OffsetLogColorMapper);\r\n    var offset_log_tick_formatter_1 = require(\"3571f5e394\") /* ./offset_log_tick_formatter */;\r\n    __esExport(\"OffsetLogTickFormatter\", offset_log_tick_formatter_1.OffsetLogTickFormatter);\r\n    var throttled_slider_1 = require(\"c7269ba5d4\") /* ./throttled_slider */;\r\n    __esExport(\"ThrottledSlider\", throttled_slider_1.ThrottledSlider);\r\n    var filetree_1 = require(\"342f084289\") /* ./filetree */;\r\n    __esExport(\"Tree\", filetree_1.Tree);\r\n}\r\n","/* visualizer\\models\\offset_log_color_mapper.js */ function _(require, module, exports, __esModule, __esExport) {\r\n    __esModule();\r\n    const log_color_mapper_1 = require(\"@bokehjs/models/mappers/log_color_mapper\");\r\n    const arrayable_1 = require(\"@bokehjs/core/util/arrayable\");\r\n    class OffsetLogColorMapper extends log_color_mapper_1.LogColorMapper {\r\n        constructor(attrs) {\r\n            super(attrs);\r\n        }\r\n        static init_OffsetLogColorMapper() {\r\n            this.define(({ Array, Number }) => ({\r\n                log_span: [Array(Number), [1, 10]],\r\n            }));\r\n        }\r\n        scan(data, n) {\r\n            // retrieve specified low and high or calculate it if unspecified\r\n            let low = this.low != null ? this.low : arrayable_1.min(data);\r\n            let high = this.high != null ? this.high : arrayable_1.max(data);\r\n            let span = this.log_span != null ? this.log_span : [1, 10];\r\n            const interval = [low, high];\r\n            // n: Palette-size\r\n            const scale = n / (Math.log(span[1]) - Math.log(span[0]));\r\n            return { max: span[1], min: span[0], scale, interval };\r\n        }\r\n        cmap(d, palette, low_color, high_color, scan_data) {\r\n            const max_key = palette.length - 1;\r\n            let _max = scan_data.max;\r\n            let _min = scan_data.min;\r\n            let interval = scan_data.interval;\r\n            // mapping our interval [_min, _max] onto the logspan [interval[0], interval[1]]\r\n            // https://math.stackexchange.com/a/914843\r\n            d = _min + (_max - _min) / (interval[1] - interval[0]) * (d - interval[0]);\r\n            if (d > _max) {\r\n                return high_color;\r\n            }\r\n            // This handles the edge case where d == high, since the code below maps\r\n            // values exactly equal to high to palette.length, which is greater than\r\n            // max_key\r\n            if (d == _max) {\r\n                return palette[max_key];\r\n            }\r\n            else if (d < _min) {\r\n                return low_color;\r\n            }\r\n            // Get the palette-color key by calculating the log of the\r\n            // to-be-colormapped value and multiplying it by the scale\r\n            const log = Math.log(d) - Math.log(_min); // subtract the low offset\r\n            let key = Math.floor(log * scan_data.scale);\r\n            // Deal with upper bound\r\n            if (key > max_key) {\r\n                key = max_key;\r\n            }\r\n            return palette[key];\r\n        }\r\n    }\r\n    exports.OffsetLogColorMapper = OffsetLogColorMapper;\r\n    OffsetLogColorMapper.__name__ = \"OffsetLogColorMapper\";\r\n    OffsetLogColorMapper.__module__ = \"pyscivis.visualizer.models.offset_log_color_mapper\";\r\n    OffsetLogColorMapper.init_OffsetLogColorMapper();\r\n}\r\n","/* visualizer\\models\\offset_log_tick_formatter.js */ function _(require, module, exports, __esModule, __esExport) {\r\n    __esModule();\r\n    const log_tick_formatter_1 = require(\"@bokehjs/models/formatters/log_tick_formatter\");\r\n    const arrayable_1 = require(\"@bokehjs/core/util/arrayable\");\r\n    class OffsetLogTickFormatter extends log_tick_formatter_1.LogTickFormatter {\r\n        constructor(attrs) {\r\n            super(attrs);\r\n        }\r\n        static init_OffsetLogTickFormatter() {\r\n            this.define(({ Array, Number }) => ({\r\n                low: [Number, 0],\r\n                high: [Number, 0],\r\n                log_span: [Array(Number), [1, 10]]\r\n            }));\r\n        }\r\n        format_graphics(ticks, opts) {\r\n            if (ticks.length == 0)\r\n                return [];\r\n            const start = arrayable_1.min(this.log_span);\r\n            const end = arrayable_1.max(this.log_span);\r\n            ticks = ticks.map((value) => {\r\n                return this.low + (this.high - this.low) / (end - start) * (value - start);\r\n            });\r\n            return this.basic_formatter.format_graphics(ticks, opts);\r\n        }\r\n    }\r\n    exports.OffsetLogTickFormatter = OffsetLogTickFormatter;\r\n    OffsetLogTickFormatter.__name__ = \"OffsetLogTickFormatter\";\r\n    OffsetLogTickFormatter.__module__ = \"pyscivis.visualizer.models.offset_log_tick_formatter\";\r\n    OffsetLogTickFormatter.init_OffsetLogTickFormatter();\r\n}\r\n","/* visualizer\\models\\throttled_slider.js */ function _(require, module, exports, __esModule, __esExport) {\r\n    __esModule();\r\n    const slider_1 = require(\"@bokehjs/models/widgets/slider\");\r\n    class ThrottledSlider extends slider_1.Slider {\r\n    }\r\n    exports.ThrottledSlider = ThrottledSlider;\r\n    ThrottledSlider.__name__ = \"ThrottledSlider\";\r\n    ThrottledSlider.__module__ = \"pyscivis.visualizer.models.throttled_slider\";\r\n}\r\n","/* visualizer\\models\\filetree.js */ function _(require, module, exports, __esModule, __esExport) {\r\n    __esModule();\r\n    const widget_1 = require(\"@bokehjs/models/widgets/widget\");\r\n    class TreeView extends widget_1.WidgetView {\r\n        render() {\r\n            $(this.el)\r\n                .on('select_node.jstree', (_e, data) => {\r\n                // Only returns the name if it is a leaf (is in leaf_types)\r\n                // Only 1 Leaf can be selected max -> selected[0]\r\n                var selected_node = data.instance.get_node(data.selected[0]);\r\n                var leaf_types = [\"images\", \"header\", \"acquisitions\"];\r\n                if (leaf_types.includes(selected_node.type)) {\r\n                    this.model.selected = [selected_node.parent, selected_node.id, selected_node.type];\r\n                }\r\n            })\r\n                .on('loaded.jstree', () => {\r\n                $(this.el).jstree('open_all');\r\n            })\r\n                .jstree(this.get_data());\r\n        }\r\n        get_data() {\r\n            return {\r\n                \"types\": {\r\n                    \"images\": {\r\n                        \"valid_children\": \"none\",\r\n                        \"icon\": \"glyphicon glyphicon-picture\",\r\n                    },\r\n                    \"acquisitions\": {\r\n                        \"valid_children\": \"none\",\r\n                        \"icon\": \"glyphicon glyphicon-list\"\r\n                    },\r\n                    \"header\": {\r\n                        \"valid_children\": \"none\",\r\n                        \"icon\": \"glyphicon glyphicon-file\"\r\n                    },\r\n                    \"container\": {\r\n                        \"valid_children\": [\"folder\", \"image\", \"acquisition\", \"header\"],\r\n                        \"icon\": \"glyphicon glyphicon-folder-open\"\r\n                    },\r\n                    \"file\": {\r\n                        \"valid_children\": [\"folder\", \"image\", \"acquisition\", \"header\"],\r\n                        \"icon\": \"glyphicon glyphicon-hdd\"\r\n                    },\r\n                    \"default\": {\r\n                        \"valid_children\": [\"folder\", \"image\", \"acquisition\", \"header\"],\r\n                        \"icon\": \"glyphicon glyphicon-question-sign\"\r\n                    }\r\n                },\r\n                'core': {\r\n                    'multiple': false,\r\n                    'data': this.model.tree,\r\n                    'themes': {\r\n                        'name': this.model.theme == \"dark\" ? \"default-dark\" : \"default\",\r\n                        \"dots\": true,\r\n                        \"icons\": true\r\n                    }\r\n                },\r\n                \"plugins\": [\"types\"],\r\n            };\r\n        }\r\n    }\r\n    exports.TreeView = TreeView;\r\n    TreeView.__name__ = \"TreeView\";\r\n    class Tree extends widget_1.Widget {\r\n        constructor(attrs) {\r\n            super(attrs);\r\n        }\r\n        static init_Tree() {\r\n            this.prototype.default_view = TreeView;\r\n            this.define(({ Tuple, String, Any }) => ({\r\n                selected: [Tuple(String, String, String)],\r\n                theme: [String],\r\n                tree: [Any],\r\n            }));\r\n        }\r\n    }\r\n    exports.Tree = Tree;\r\n    Tree.__name__ = \"Tree\";\r\n    Tree.__module__ = \"pyscivis.visualizer.models.filetree\";\r\n    Tree.init_Tree();\r\n}\r\n"]}