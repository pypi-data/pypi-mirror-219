import requests
import json


class SecureRepositoryAPI:
    """
    A Python client for interacting with the Secure Repository API.
    This API enables easy cloning of repositories and provides functionality to retrieve backup and repository reports.

    Usage:
    api = SecureRepositoryAPI(api_key)
    api.clone_repository(repository_url)
    api.get_backup_reports()
    api.get_repository_reports()
    """

    BASE_URL = "http://100045.pythonanywhere.com"

    def __init__(self, api_key):
        """
        Initialize the SecureRepositoryAPI object with the API key.

        Args:
            api_key (str): The API key for authentication.
        """
        self.api_key = api_key

    def clone_repository(self, repository_url):
        """
        Clone a GitHub repository.

        This function allows you to create a copy of your codebase by cloning the specified repository.
        It ensures that you have a complete and up-to-date backup of your repository for immediate use or restoration.

        Args:
            repository_url (str): The URL of the GitHub repository you want to clone.
        """
        endpoint = f"{self.BASE_URL}/repository-backup/v3/repositoryClone/"
        payload = {
            "repository_url": repository_url,
            "api_key": self.api_key,
        }
        headers = {}
        response = requests.request("POST", url=endpoint, headers=headers, data=payload)

        if response.status_code == 200:
            print("GitHub repository cloned successfully")
        else:
            print("Operation was not successful")

        return response.json()

    def get_backup_reports(self):
        """
        Retrieve backup reports.

        This function fetches the backup reports generated by the API.
        The reports contain information about the status and details of backup operations.

        """
        endpoint = f"{self.BASE_URL}/reports/backup-reports/{self.api_key}/"
        response = requests.get(endpoint)

        if response.status_code == 200:
            print("Backup reports were generated successfully")
        else:
            print("Operation was not successful")

    def get_repository_reports(self):
        """
        Retrieve repository reports.

        This function fetches the repository reports generated by the API.
        The reports provide information about registered repositories, including their name, URL, creator, and registration date.

        """
        endpoint = f"{self.BASE_URL}/reports/repository-reports/{self.api_key}/"
        response = requests.get(endpoint)
        data = response.json()

        if response.status_code == 200:
            print("Backup reports for repository generated successfully")
            for idx, item in enumerate(data["data"]):
                print(
                    f"Repository Name: {item['repository_name']}\n"
                    f"Repository URL: {item['repository_url']}\n"
                    f"Created By: {item['created_by']}\n"
                    f"Date and Time: {item['date_of_registration']} {item['time_of_registration']}"
                )
        else:
            print("Operation was not successful")


        