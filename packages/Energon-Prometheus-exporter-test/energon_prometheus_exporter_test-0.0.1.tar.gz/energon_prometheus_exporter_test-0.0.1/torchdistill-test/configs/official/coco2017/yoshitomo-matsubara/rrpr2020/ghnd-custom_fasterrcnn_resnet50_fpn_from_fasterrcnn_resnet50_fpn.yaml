dependencies:
  - name: 'custom'

datasets:
  &coco_train coco2017/train: &coco_train_dataset !import_call
    _name: &dataset_name 'coco2017'
    _root: &root_dir !join ['~/datasets/', *dataset_name]
    key: 'coco.dataset.coco_dataset'
    init:
      kwargs:
        img_dir_path: !join [*root_dir, '/train2017']
        ann_file_path: !join [*root_dir, '/annotations/instances_train2017.json']
        annotated_only: True
        random_horizontal_flip: 0.5
        is_segment: False
  &coco_val coco2017/val: !import_call
    key: 'coco.dataset.coco_dataset'
    init:
      kwargs:
        img_dir_path: !join [*root_dir, '/val2017']
        ann_file_path: !join [*root_dir, '/annotations/instances_val2017.json']
        annotated_only: False
        is_segment: False

models:
  teacher_model:
    key: &teacher_model_key 'fasterrcnn_resnet50_fpn'
    _weights: &teacher_weights !import_get
      key: 'torchvision.models.detection.faster_rcnn.FasterRCNN_ResNet50_FPN_Weights'
    kwargs:
      weights: !getattr [*teacher_weights, 'COCO_V1']
      progress: True
      num_classes: 91
    src_ckpt:
  student_model:
    key: &student_model_key 'custom_fasterrcnn_resnet_fpn'
    _weights: &student_weights !import_get
      key: 'torchvision.models.detection.faster_rcnn.FasterRCNN_ResNet50_FPN_Weights'
    _backbone_weights: &student_backbone_weights !import_get
      key: 'torchvision.models.resnet.ResNet50_Weights'
    kwargs:
      weights: !getattr [*student_weights, 'COCO_V1']
      progress: True
      num_classes: 91
      backbone:
        key: 'custom_resnet50'
        kwargs:
          num_classes: 1000
          weights: !getattr [*student_backbone_weights, 'IMAGENET1K_V1']
          trainable_backbone_layers: 6
          layer1:
            key: 'Bottleneck4LargeResNet'
            bottleneck_channel: 3
            compressor:
            decompressor:
    _experiment: &student_experiment !join [*dataset_name, '-', *student_model_key, '_from_', *teacher_model_key]
    src_ckpt:
    dst_ckpt: !join ['./coco/ghnd/', *student_experiment, '.pt']

train:
  log_freq: 1000
  num_epochs: 20
  train_data_loader:
    dataset_id: *coco_train
    sampler:
      class_or_func: !import_get
        key: 'torch.utils.data.RandomSampler'
      kwargs:
    batch_sampler:
      key: 'GroupedBatchSampler'
      kwargs:
        batch_size: 4
        group_ids: !import_call
          key: 'custom.sampler.create_aspect_ratio_groups'
          init:
            kwargs:
              dataset: *coco_train_dataset
              aspect_ratio_group_factor: 3
    collate_fn: 'coco_collate_fn'
    kwargs:
      num_workers: 16
    cache_output:
  val_data_loader:
    dataset_id: *coco_val
    sampler: &val_sampler
      class_or_func: !import_get
        key: 'torch.utils.data.SequentialSampler'
      kwargs:
    collate_fn: 'coco_collate_fn'
    kwargs:
      batch_size: 1
      num_workers: 16
  teacher:
    forward_proc: 'forward_batch_only'
    sequential: []
    auxiliary_model_wrapper:
      key: 'HeadRCNN'
      kwargs:
        head_rcnn:
          sequential: ['backbone.body']
    frozen_modules: []
    forward_hook:
      input: []
      output: ['seq.backbone.body.layer1', 'seq.backbone.body.layer2', 'seq.backbone.body.layer3', 'seq.backbone.body.layer4']
    wrapper: 'DataParallel'
    requires_grad: False
  student:
    forward_proc: 'forward_batch_only'
    adaptations:
    sequential: []
    auxiliary_model_wrapper:
      key: 'HeadRCNN'
      kwargs:
        head_rcnn:
          sequential: ['backbone.body']
    frozen_modules: ['seq.backbone.body.layer2', 'seq.backbone.body.layer3', 'seq.backbone.body.layer4']
    forward_hook:
      input: []
      output: ['seq.backbone.body.layer1', 'seq.backbone.body.layer2', 'seq.backbone.body.layer3', 'seq.backbone.body.layer4']
    wrapper: 'DistributedDataParallel'
    requires_grad: True
  optimizer:
    key: 'Adam'
    kwargs:
      lr: 0.001
  scheduler:
    key: 'MultiStepLR'
    kwargs:
      milestones: [5, 15]
      gamma: 0.1
  criterion:
    key: 'WeightedSumLoss'
    kwargs:
      sub_terms:
        layer1:
          criterion:
            key: 'MSELoss'
            kwargs:
              reduction: 'sum'
          criterion_wrapper:
            key: 'SimpleLossWrapper'
            kwargs:
              input:
                is_from_teacher: False
                module_path: 'seq.backbone.body.layer1'
                io: 'output'
              target:
                is_from_teacher: True
                module_path: 'seq.backbone.body.layer1'
                io: 'output'
          weight: 1.0
        layer2:
          criterion:
            key: 'MSELoss'
            kwargs:
              reduction: 'sum'
          criterion_wrapper:
            key: 'SimpleLossWrapper'
            kwargs:
              input:
                is_from_teacher: False
                module_path: 'seq.backbone.body.layer2'
                io: 'output'
              target:
                is_from_teacher: True
                module_path: 'seq.backbone.body.layer2'
                io: 'output'
          weight: 1.0
        layer3:
          criterion:
            key: 'MSELoss'
            kwargs:
              reduction: 'sum'
          criterion_wrapper:
            key: 'SimpleLossWrapper'
            kwargs:
              input:
                is_from_teacher: False
                module_path: 'seq.backbone.body.layer3'
                io: 'output'
              target:
                is_from_teacher: True
                module_path: 'seq.backbone.body.layer3'
                io: 'output'
          weight: 1.0
        layer4:
          criterion:
            key: 'MSELoss'
            kwargs:
              reduction: 'sum'
          criterion_wrapper:
            key: 'SimpleLossWrapper'
            kwargs:
              input:
                is_from_teacher: False
                module_path: 'seq.backbone.body.layer4'
                io: 'output'
              target:
                is_from_teacher: True
                module_path: 'seq.backbone.body.layer4'
                io: 'output'
          weight: 1.0

test:
  test_data_loader:
    dataset_id: *coco_val
    sampler: *val_sampler
    collate_fn: 'coco_collate_fn'
    kwargs:
      batch_size: 1
      num_workers: 4
