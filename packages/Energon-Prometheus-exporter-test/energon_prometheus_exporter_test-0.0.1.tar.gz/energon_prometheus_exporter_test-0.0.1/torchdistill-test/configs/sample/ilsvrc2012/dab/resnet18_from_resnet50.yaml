datasets:
  &imagenet_train ilsvrc2012/train: !import_call
    _name: &dataset_name 'ilsvrc2012'
    _root: &root_dir !join ['~/datasets/', *dataset_name]
    key: 'torchvision.datasets.ImageFolder'
    init:
      kwargs:
        root: !join [*root_dir, '/train']
        transform: !import_call
          key: 'torchvision.transforms.Compose'
          init:
            kwargs:
              transforms:
                - !import_call
                  key: 'torchvision.transforms.RandomResizedCrop'
                  init:
                    kwargs:
                      size: &input_size [224, 224]
                - !import_call
                  key: 'torchvision.transforms.RandomHorizontalFlip'
                  init:
                    kwargs:
                      p: 0.5
                - !import_call
                  key: 'torchvision.transforms.ToTensor'
                  init:
                - !import_call
                  key: 'torchvision.transforms.Normalize'
                  init:
                    kwargs: &normalize_kwargs
                      mean: [0.485, 0.456, 0.406]
                      std: [0.229, 0.224, 0.225]
  &imagenet_val ilsvrc2012/val: !import_call
    key: 'torchvision.datasets.ImageFolder'
    init:
      kwargs:
        root: !join [*root_dir, '/val']
        transform: !import_call
          key: 'torchvision.transforms.Compose'
          init:
            kwargs:
              transforms:
                - !import_call
                  key: 'torchvision.transforms.Resize'
                  init:
                    kwargs:
                      size: 256
                - !import_call
                  key: 'torchvision.transforms.CenterCrop'
                  init:
                    kwargs:
                      size: *input_size
                - !import_call
                  key: 'torchvision.transforms.ToTensor'
                  init:
                - !import_call
                  key: 'torchvision.transforms.Normalize'
                  init:
                    kwargs: *normalize_kwargs

models:
  teacher_model:
    key: &teacher_model_key 'resnet50'
    _weights: &teacher_weights !import_get
      key: 'torchvision.models.resnet.ResNet50_Weights'
    kwargs:
      num_classes: 1000
      weights: !getattr [*teacher_weights, 'IMAGENET1K_V1']
    src_ckpt:
  student_model:
    key: &student_model_key 'resnet18'
    kwargs:
      num_classes: 1000
    _experiment: &student_experiment !join [*dataset_name, '-', *student_model_key, '_from_', *teacher_model_key]
    src_ckpt:
    dst_ckpt: !join ['./resource/ckpt/ilsvrc2012/multi_stage/dab/', *student_experiment, '.pt']

train:
  log_freq: 1000
  stage1:
    num_epochs: 1
    train_data_loader:
      dataset_id: *imagenet_train
      sampler:
        class_or_func: !import_get
          key: 'torch.utils.data.RandomSampler'
        kwargs:
      kwargs:
        batch_size: 32
        num_workers: 16
        pin_memory: True
        drop_last: False
      cache_output:
    val_data_loader:
      dataset_id: *imagenet_val
      sampler: &val_sampler
        class_or_func: !import_get
          key: 'torch.utils.data.SequentialSampler'
        kwargs:
      kwargs:
        batch_size: 32
        num_workers: 16
        pin_memory: True
        drop_last: False
    teacher:
      sequential: ['conv1', 'bn1', 'relu', 'maxpool', 'layer1', 'layer2', 'layer3', 'layer4']
      forward_hook:
        input: []
        output: ['layer1', 'layer2', 'layer3', 'layer4']
      wrapper: 'DistributedDataParallel'
      requires_grad: False
    student:
      adaptations:
      sequential: []
      auxiliary_model_wrapper:
        key: 'Connector4DAB'
        kwargs:
          connectors:
            connector1:
              io: 'output'
              path: 'student_model.layer1'
              conv2d_kwargs:
                in_channels: 64
                out_channels: &och1 256
                kernel_size: 1
                stride: 1
                padding: 0
                bias: False
              bn2d_kwargs:
                num_features: *och1
            connector2:
              io: 'output'
              path: 'student_model.layer2'
              conv2d_kwargs:
                in_channels: 128
                out_channels: &och2 512
                kernel_size: 1
                stride: 1
                padding: 0
                bias: False
              bn2d_kwargs:
                num_features: *och2
            connector3:
              io: 'output'
              path: 'student_model.layer3'
              conv2d_kwargs:
                in_channels: 256
                out_channels: &och3 1024
                kernel_size: 1
                stride: 1
                padding: 0
                bias: False
              bn2d_kwargs:
                num_features: *och3
            connector4:
              io: 'output'
              path: 'student_model.layer4'
              conv2d_kwargs:
                in_channels: 512
                out_channels: &och4 2048
                kernel_size: 1
                stride: 1
                padding: 0
                bias: False
              bn2d_kwargs:
                num_features: *och4
      frozen_modules: []
      forward_hook:
        input: []
        output: ['student_model.layer1', 'student_model.layer2', 'student_model.layer3', 'student_model.layer4', 'connector_dict.connector1', 'connector_dict.connector2', 'connector_dict.connector3', 'connector_dict.connector4']
      wrapper:
      requires_grad: True
    optimizer:
      key: 'SGD'
      kwargs:
        lr: 0.0001
        momentum: 0.9
        weight_decay: 0.0001
    criterion:
      key: 'WeightedSumLoss'
      kwargs:
        sub_terms:
          dab:
            criterion:
              key: 'AltActTransferLoss'
              kwargs:
                feature_pairs:
                  pair1:
                    teacher:
                      io: 'output'
                      path: 'layer1'
                    student:
                      io: 'output'
                      path: 'connector_dict.connector1'
                    weight: 1
                  pair2:
                    teacher:
                      io: 'output'
                      path: 'layer2'
                    student:
                      io: 'output'
                      path: 'connector_dict.connector2'
                    weight: 1
                  pair3:
                    teacher:
                      io: 'output'
                      path: 'layer3'
                    student:
                      io: 'output'
                      path: 'connector_dict.connector3'
                    weight: 1
                  pair4:
                    teacher:
                      io: 'output'
                      path: 'layer4'
                    student:
                      io: 'output'
                      path: 'connector_dict.connector4'
                    weight: 1
                margin: 1.0
                reduction: 'mean'
            weight: 1.0
  stage2:
    num_epochs: 19
    teacher:
      sequential: []
      wrapper: 'DistributedDataParallel'
      requires_grad: False
    student:
      adaptations:
      sequential: []
      wrapper: 'DistributedDataParallel'
      requires_grad: True
      frozen_modules: []
    optimizer:
      key: 'SGD'
      kwargs:
        lr: 0.0001
        momentum: 0.9
        weight_decay: 0.0005
    scheduler:
      key: 'MultiStepLR'
      kwargs:
        milestones: [5, 10]
        gamma: 0.1
    criterion:
      key: 'WeightedSumLoss'
      kwargs:
        sub_terms:
          kd:
            criterion:
              key: 'KDLoss'
              kwargs:
                temperature: 1.0
                alpha: 1.0
                reduction: 'batchmean'
            weight: 1.0

test:
  test_data_loader:
    dataset_id: *imagenet_val
    sampler: *val_sampler
    kwargs:
      batch_size: 1
      num_workers: 16
      pin_memory: True
      drop_last: False
