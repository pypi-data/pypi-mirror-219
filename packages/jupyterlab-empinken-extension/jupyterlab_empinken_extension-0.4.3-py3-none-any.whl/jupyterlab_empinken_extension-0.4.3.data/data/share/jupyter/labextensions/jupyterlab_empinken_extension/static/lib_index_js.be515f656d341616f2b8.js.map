{"version":3,"file":"lib_index_js.be515f656d341616f2b8.js","mappings":"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","sources":["webpack://jupyterlab_empinken_extension/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  LabShell\n} from '@jupyterlab/application';\n\nimport { ToolbarButton } from \"@jupyterlab/apputils\";\nimport { DocumentRegistry } from \"@jupyterlab/docregistry\";\nimport { IDisposable, DisposableDelegate } from '@lumino/disposable';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\n//import {CellList} from '@jupyterlab/notebook'; //gets list from ISharedNotebook\n//import { Cell } from '@jupyterlab/cells';\n\nimport { INotebookTracker, NotebookPanel, INotebookModel } from '@jupyterlab/notebook';\n\n// Remove items in first list from second list\nfunction removeListMembers(list1: any[], list2: any[]): any[] {\n  return list2.filter(item => !list1.includes(item));\n}\n\n\n/**\n * The plugin registration information.\n */\n\n// https://jupyterlab.readthedocs.io/en/stable/api/index.html\n// https://jupyterlab.readthedocs.io/en/3.3.x/api/interfaces/notebook.inotebooktracker.html\n\nconst empinken_tags_: string[] = [\"activity\", \"learner\", \"solution\", \"tutor\"];\nlet empinken_tags = empinken_tags_\nlet empinken_tags2 = empinken_tags_\nvar tag2abstractTag = new Map<string, string>();\n\nexport class ButtonExtension implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel> {\n  settings: ISettingRegistry.ISettings;\n\n  constructor(protected settingRegistry: ISettingRegistry) {\n    console.log('constructor');\n    // read the settings\n    this.setup_settings();\n  }\n\n  setup_settings(): void {\n    Promise.all([this.settingRegistry.load(plugin.id)])\n      .then(([settings]) => {\n        console.log('reading settings');\n        this.settings = settings;\n        // update of settings is done automatically\n        //settings.changed.connect(() => {\n        //  this.update_settings(settings);\n        //});\n      })\n      .catch((reason: Error) => {\n        console.error(reason.message);\n      });\n  }\n\n  createNew(panel: NotebookPanel, context: DocumentRegistry.IContext<INotebookModel>): IDisposable {\n    // Create the toolbar buttons\n    const tagButtonSpec: {\n      [key: string]: {\n        typ: string, label: string,\n        button: ToolbarButton,\n        enabled: boolean,\n        newtag: string,\n      }\n    } = {};\n\n    let tag_prefix = ''\n    if (this.settings.get('use_tagprefix').composite as boolean) {\n      tag_prefix = this.settings.get('tagprefix') ? this.settings.get('tagprefix').composite.toString() : '';\n    } else tag_prefix = ''\n\n    const click_button = (typ: string) => {\n      console.log('button pressed', typ)\n      console.log(\"empinken_tags\", empinken_tags)\n      console.log(\"empinken_tags2\", empinken_tags2)\n      \n      let activeCell = panel.content.activeCell;\n      //console.log(label, type, caption)\n      //console.log(activeCell)\n      const nodeclass = 'iou-' + typ + \"-node\";\n      const newtag = this.settings.get(typ + \"_tag\").composite as string;\n      if (activeCell !== null) {\n        let tagList = activeCell.model.getMetadata(\"tags\") as string[] ?? [];\n        //console.log(\"cell metadata was\", tagList, \"; checking for\", type);\n        let tagtype = tag_prefix + newtag;\n        if (tagList.includes(tagtype)) {\n          // ...then remove it\n          const index = tagList.indexOf(tagtype, 0);\n          if (index > -1) {\n            tagList.splice(index, 1);\n          }\n          activeCell.model.setMetadata(\"tags\", tagList)\n          // Remove class\n          activeCell.node.classList.remove(nodeclass)\n          // cell.node.classList exists\n        } else {\n          // remove other tags\n          tagList = removeListMembers(empinken_tags2, tagList)\n          empinken_tags_.forEach((tag: string) => {\n            activeCell.node.classList.remove('iou-' + tag + \"-node\")\n          })\n          // add required tag\n          tagList.push(tagtype)\n          activeCell.model.setMetadata(\"tags\", tagList)\n          // if we want to render that tag:\n          if (this.settings.get(typ + \"_render\").composite as boolean)\n            activeCell.node.classList.add(nodeclass)\n        }\n        //console.log(\"cell metadata now is\", tagList);\n      }\n    }\n\n    let location = 10;\n    //panel.content.activeCell\n    empinken_tags_.forEach((tag) => {\n      const tlabel = tag.charAt(0).toUpperCase()\n      const newtag = this.settings.get(tag + '_tag').composite as string;\n      tagButtonSpec[tag] = {\n        'typ': tag,\n        'label': tlabel,\n        'newtag': newtag,\n        'button': new ToolbarButton({\n          className: 'tagger-' + tag + '-button',\n          label: tlabel,\n          // TO DO : currently missing data-command=\"ouseful-empinken:TAG\" attribute\n          // in JL HTML on button\n          onClick: () => click_button(tag),//createEmpinkenCommand(tlabel, tag), //'ouseful-empinken:' + tag,\n          tooltip: 'Toggle ' + tag + ' metadata tag on a cell',\n        }),\n        'enabled': this.settings.get(tag + '_button').composite as boolean\n      };\n      // Add the button to the toolbar\n      if (tagButtonSpec[tag]['enabled']) {\n        panel.toolbar.insertItem(location, 'toggle_' + tag + 'TagButtonAction', tagButtonSpec[tag]['button']);\n        location++;\n      }\n\n    });\n\n    return new DisposableDelegate(() => {\n      // Tidy up with destructors for each button\n      let typ: keyof typeof tagButtonSpec;\n      for (typ in tagButtonSpec) {\n        if (tagButtonSpec[typ]['enabled'])\n          tagButtonSpec[typ]['button'].dispose();\n      }\n    });\n\n  }\n}\n\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab_empinken_extension:plugin',\n  description:\n    'A JupyterLab extension adding a button to the Notebook toolbar.',\n  requires: [INotebookTracker, ISettingRegistry],\n  autoStart: true,\n  activate: (app: JupyterFrontEnd, notebookTracker: INotebookTracker, settings: ISettingRegistry | null) => {\n    //const { commands } = app;\n    console.log(\"Activating empinken\")\n\n    let tag_prefix = ''\n    /**\n     * Load the settings for this extension\n     *\n     * @param setting Extension settings\n     */\n\n    Promise.all([settings.load(plugin.id)])\n      .then(([setting]) => {\n        // Read the settings\n        //loadSetting(setting);\n\n        const root = document.documentElement;\n        // TO DO  - update settings needs to be outside the promise?\n        // Somehow we need to have ensured we have ipdated settings before\n        // we iterate the notebook\n        const updateSettings = (): void => {\n          if (setting.get('use_tagprefix').composite as boolean) {\n            tag_prefix = setting.get('tagprefix') ? setting.get('tagprefix').composite.toString() : '';\n          } else tag_prefix = ''\n\n          empinken_tags = [];\n          empinken_tags2 = []; //as per settings\n          for (const tag of empinken_tags_) {\n            const prefixed_tag = tag_prefix +tag;\n            const prefixed_tag2 = tag_prefix + setting.get(tag + \"_tag\").composite as string;\n            empinken_tags.push(prefixed_tag);\n            empinken_tags2.push(prefixed_tag2);\n            tag2abstractTag.set(prefixed_tag2, tag);\n          }\n          // Update the document CSS colour settings\n          for (let typ of empinken_tags_) {\n            const color = setting.get(typ + '_color').composite as string;\n            // if a tag rendering is disabled, set the colour as the theme\n            if (setting.get(typ + '_render').composite as boolean)\n              root.style.setProperty('--iou-' + typ + '-bg-color', color);\n            else\n              root.style.setProperty('--iou-' + typ + '-bg-color', \"var(--jp-cell-editor-background)\");\n          }\n        };\n        updateSettings();\n\n        // Listen for your plugin setting changes using Signal\n        setting.changed.connect(updateSettings);\n\n        // This attaches a command to a button\n        // TO DO: if we want to hide the buttons, we need to manually register\n        // them as widgets — or not — rather than add them via the plugin.json file\n        // empinken_tags_.forEach((tag: string) => {\n        //   if (setting.get(tag + '_button').composite as boolean)\n        //     commands.addCommand('ouseful-empinken:' + tag,\n        //       createEmpinkenCommand(tag.charAt(0).toUpperCase(),\n        //         tag));\n        // })\n      })\n\n    //labshell via https://discourse.jupyter.org/t/jupyterlab-4-iterating-over-all-cells-in-a-notebook/20033/2\n    const labShell = app.shell as LabShell;\n    labShell.currentChanged.connect(() => {\n      const notebook = app.shell.currentWidget as NotebookPanel;\n      if (notebook) {\n        notebook.revealed.then(() => {\n          console.log(\"nb empinken_tags\", empinken_tags )\n          console.log(\"nb empinken_tags2\", empinken_tags2)\n          notebook.content.widgets?.forEach(cell => {\n            const tagList = cell.model?.getMetadata('tags') ?? [];\n            console.log(\"cell metadata\", tagList)\n            tagList.forEach((tag: string) => {\n              if (empinken_tags2.includes(tag)) {\n                let abstract_tag = tag2abstractTag.has(tag) ? tag2abstractTag.get(tag) : tag;\n                // Decode the tag_\n                const tag_ = abstract_tag.replace(new RegExp(tag_prefix, 'g'), '')\n                console.log(\"hit\", tag, \"abstract\", abstract_tag, \"add class\", 'iou-' + tag_ + '-node' )\n                cell.node?.classList.add('iou-' + tag_ + '-node');\n              } else console.log(\"miss\", tag)\n            })\n          })\n        })\n      }\n    });\n    app.docRegistry.addWidgetExtension('Notebook', new ButtonExtension(settings));\n  }\n};\n\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n"],"names":[],"sourceRoot":""}